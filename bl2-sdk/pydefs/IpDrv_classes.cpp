#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_IpDrv_classes(py::module &m)
{
	py::class_< UClientBeaconAddressResolver,  UObject   >(m, "UClientBeaconAddressResolver")
		.def_static("StaticClass", &UClientBeaconAddressResolver::StaticClass, py::return_value_policy::reference)
		.def_readwrite("BeaconPort", &UClientBeaconAddressResolver::BeaconPort)
		.def_readwrite("BeaconName", &UClientBeaconAddressResolver::BeaconName)
		  ;
	py::class_< UHTTPDownload,  UDownload   >(m, "UHTTPDownload")
		.def_property("MaxRedirection", [](UHTTPDownload &self){return self.MaxRedirection;}, [](UHTTPDownload &self, bool value){self.MaxRedirection = value ? 1 : 0;})
		.def_static("StaticClass", &UHTTPDownload::StaticClass, py::return_value_policy::reference)
		.def_readwrite("ProxyServerHost", &UHTTPDownload::ProxyServerHost)
		.def_readwrite("ProxyServerPort", &UHTTPDownload::ProxyServerPort)
		.def_readwrite("ConnectionTimeout", &UHTTPDownload::ConnectionTimeout)
		  ;
	py::class_< AInternetLink,  AInfo   >(m, "AInternetLink")
		.def_static("StaticClass", &AInternetLink::StaticClass, py::return_value_policy::reference)
		.def_readwrite("LinkMode", &AInternetLink::LinkMode)
		.def_readwrite("InLineMode", &AInternetLink::InLineMode)
		.def_readwrite("OutLineMode", &AInternetLink::OutLineMode)
		.def_readwrite("ReceiveMode", &AInternetLink::ReceiveMode)
		.def_readwrite("Socket", &AInternetLink::Socket)
		.def_readwrite("Port", &AInternetLink::Port)
		.def_readwrite("RemoteSocket", &AInternetLink::RemoteSocket)
		.def_readwrite("PrivateResolveInfo", &AInternetLink::PrivateResolveInfo)
		.def_readwrite("DataPending", &AInternetLink::DataPending)
		.def("eventResolveFailed", &AInternetLink::eventResolveFailed)
		.def("eventResolved", &AInternetLink::eventResolved)
		.def("GetLocalIP", &AInternetLink::GetLocalIP)
		.def("StringToIpAddr", &AInternetLink::StringToIpAddr)
		.def("IpAddrToString", &AInternetLink::IpAddrToString)
		.def("GetLastError", &AInternetLink::GetLastError)
		.def("Resolve", &AInternetLink::Resolve)
		.def("ParseURL", &AInternetLink::ParseURL)
		.def("IsDataPending", &AInternetLink::IsDataPending)
		  ;
	py::class_< ATcpLink,  AInfo   >(m, "ATcpLink")
		.def_static("StaticClass", &ATcpLink::StaticClass, py::return_value_policy::reference)
		.def_readwrite("LinkState", &ATcpLink::LinkState)
		.def_readwrite("RemoteAddr", &ATcpLink::RemoteAddr)
		.def_readwrite("AcceptClass", &ATcpLink::AcceptClass)
		.def_readwrite("SendFIFO", &ATcpLink::SendFIFO)
		.def_readwrite("RecvBuf", &ATcpLink::RecvBuf)
		.def_readwrite("LinkMode", &AInternetLink::LinkMode)
		.def_readwrite("InLineMode", &AInternetLink::InLineMode)
		.def_readwrite("OutLineMode", &AInternetLink::OutLineMode)
		.def_readwrite("ReceiveMode", &AInternetLink::ReceiveMode)
		.def_readwrite("Socket", &AInternetLink::Socket)
		.def_readwrite("Port", &AInternetLink::Port)
		.def_readwrite("RemoteSocket", &AInternetLink::RemoteSocket)
		.def_readwrite("PrivateResolveInfo", &AInternetLink::PrivateResolveInfo)
		.def_readwrite("DataPending", &AInternetLink::DataPending)
		.def("eventReceivedBinary", &ATcpLink::eventReceivedBinary)
		.def("eventReceivedLine", &ATcpLink::eventReceivedLine)
		.def("eventReceivedText", &ATcpLink::eventReceivedText)
		.def("eventClosed", &ATcpLink::eventClosed)
		.def("eventOpened", &ATcpLink::eventOpened)
		.def("eventAccepted", &ATcpLink::eventAccepted)
		.def("ReadBinary", &ATcpLink::ReadBinary)
		.def("ReadText", &ATcpLink::ReadText)
		.def("SendBinary", &ATcpLink::SendBinary)
		.def("SendText", &ATcpLink::SendText)
		.def("IsConnected", &ATcpLink::IsConnected)
		.def("Close", &ATcpLink::Close)
		.def("Open", &ATcpLink::Open)
		.def("Listen", &ATcpLink::Listen)
		.def("BindPort", &ATcpLink::BindPort)
		.def("eventResolveFailed", &AInternetLink::eventResolveFailed)
		.def("eventResolved", &AInternetLink::eventResolved)
		.def("GetLocalIP", &AInternetLink::GetLocalIP)
		.def("StringToIpAddr", &AInternetLink::StringToIpAddr)
		.def("IpAddrToString", &AInternetLink::IpAddrToString)
		.def("GetLastError", &AInternetLink::GetLastError)
		.def("Resolve", &AInternetLink::Resolve)
		.def("ParseURL", &AInternetLink::ParseURL)
		.def("IsDataPending", &AInternetLink::IsDataPending)
		  ;
	py::class_< UMCPBase,  UObject   >(m, "UMCPBase")
		.def_static("StaticClass", &UMCPBase::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VfTable_FTickableObject", &UMCPBase::VfTable_FTickableObject)
		  ;
	py::class_< UOnlineEventsInterfaceMcp,  UMCPBase   >(m, "UOnlineEventsInterfaceMcp")
		.def_property("bBinaryStats", [](UOnlineEventsInterfaceMcp &self){return self.bBinaryStats;}, [](UOnlineEventsInterfaceMcp &self, bool value){self.bBinaryStats = value ? 1 : 0;})
		.def_static("StaticClass", &UOnlineEventsInterfaceMcp::StaticClass, py::return_value_policy::reference)
		.def_readwrite("EventUploadConfigs", &UOnlineEventsInterfaceMcp::EventUploadConfigs)
		.def_readwrite("MCPEventPostObjects", &UOnlineEventsInterfaceMcp::MCPEventPostObjects)
		.def_readwrite("DisabledUploadTypes", &UOnlineEventsInterfaceMcp::DisabledUploadTypes)
		.def("UploadMatchmakingStats", &UOnlineEventsInterfaceMcp::UploadMatchmakingStats)
		.def("UpdatePlaylistPopulation", &UOnlineEventsInterfaceMcp::UpdatePlaylistPopulation)
		.def("UploadGameplayEventsData", &UOnlineEventsInterfaceMcp::UploadGameplayEventsData)
		.def("UploadPlayerData", &UOnlineEventsInterfaceMcp::UploadPlayerData)
		  ;
	py::class_< UOnlineNewsInterfaceMcp,  UMCPBase   >(m, "UOnlineNewsInterfaceMcp")
		.def_property("bNeedsTicking", [](UOnlineNewsInterfaceMcp &self){return self.bNeedsTicking;}, [](UOnlineNewsInterfaceMcp &self, bool value){self.bNeedsTicking = value ? 1 : 0;})
		.def_static("StaticClass", &UOnlineNewsInterfaceMcp::StaticClass, py::return_value_policy::reference)
		.def_readwrite("NewsItems", &UOnlineNewsInterfaceMcp::NewsItems)
		.def_readwrite("ReadNewsDelegates", &UOnlineNewsInterfaceMcp::ReadNewsDelegates)
		.def("GetNews", &UOnlineNewsInterfaceMcp::GetNews)
		.def("ClearReadNewsCompletedDelegate", &UOnlineNewsInterfaceMcp::ClearReadNewsCompletedDelegate)
		.def("AddReadNewsCompletedDelegate", &UOnlineNewsInterfaceMcp::AddReadNewsCompletedDelegate)
		.def("OnReadNewsCompleted", &UOnlineNewsInterfaceMcp::OnReadNewsCompleted)
		.def("ReadNews", &UOnlineNewsInterfaceMcp::ReadNews)
		  ;
	py::class_< UOnlineTitleFileDownloadMcp,  UObject   >(m, "UOnlineTitleFileDownloadMcp")
		.def_static("StaticClass", &UOnlineTitleFileDownloadMcp::StaticClass, py::return_value_policy::reference)
		.def_readwrite("ReadTitleFileCompleteDelegates", &UOnlineTitleFileDownloadMcp::ReadTitleFileCompleteDelegates)
		.def_readwrite("TitleFiles", &UOnlineTitleFileDownloadMcp::TitleFiles)
		.def_readwrite("DownloadCount", &UOnlineTitleFileDownloadMcp::DownloadCount)
		.def_readwrite("BaseUrl", &UOnlineTitleFileDownloadMcp::BaseUrl)
		.def_readwrite("TimeOut", &UOnlineTitleFileDownloadMcp::TimeOut)
		.def_readwrite("FilesToUrls", &UOnlineTitleFileDownloadMcp::FilesToUrls)
		.def_readwrite("VfTable_FTickableObject", &UMCPBase::VfTable_FTickableObject)
		.def("ClearShareTitleFileCompleteDelegate", &UOnlineTitleFileDownloadMcp::ClearShareTitleFileCompleteDelegate)
		.def("AddShareTitleFileCompleteDelegate", &UOnlineTitleFileDownloadMcp::AddShareTitleFileCompleteDelegate)
		.def("ShareTitleFile", &UOnlineTitleFileDownloadMcp::ShareTitleFile)
		.def("ClearDownloadedFile", &UOnlineTitleFileDownloadMcp::ClearDownloadedFile)
		.def("ClearDownloadedFiles", &UOnlineTitleFileDownloadMcp::ClearDownloadedFiles)
		.def("GetTitleFileState", &UOnlineTitleFileDownloadMcp::GetTitleFileState)
		.def("GetTitleFileContents", &UOnlineTitleFileDownloadMcp::GetTitleFileContents)
		.def("ClearReadTitleFileCompleteDelegate", &UOnlineTitleFileDownloadMcp::ClearReadTitleFileCompleteDelegate)
		.def("AddReadTitleFileCompleteDelegate", &UOnlineTitleFileDownloadMcp::AddReadTitleFileCompleteDelegate)
		.def("ReadTitleFile", &UOnlineTitleFileDownloadMcp::ReadTitleFile)
		.def("OnShareTitleFileComplete", &UOnlineTitleFileDownloadMcp::OnShareTitleFileComplete)
		.def("OnReadTitleFileComplete", &UOnlineTitleFileDownloadMcp::OnReadTitleFileComplete)
		  ;
	py::class_< UMeshBeacon,  UObject   >(m, "UMeshBeacon")
		.def_property("bIsInTick", [](UMeshBeacon &self){return self.bIsInTick;}, [](UMeshBeacon &self, bool value){self.bIsInTick = value ? 1 : 0;})
		.def_property("bWantsDeferredDestroy", [](UMeshBeacon &self){return self.bWantsDeferredDestroy;}, [](UMeshBeacon &self, bool value){self.bWantsDeferredDestroy = value ? 1 : 0;})
		.def_property("bShouldTick", [](UMeshBeacon &self){return self.bShouldTick;}, [](UMeshBeacon &self, bool value){self.bShouldTick = value ? 1 : 0;})
		.def_static("StaticClass", &UMeshBeacon::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VfTable_FTickableObject", &UMeshBeacon::VfTable_FTickableObject)
		.def_readwrite("MeshBeaconPort", &UMeshBeacon::MeshBeaconPort)
		.def_readwrite("Socket", &UMeshBeacon::Socket)
		.def_readwrite("HeartbeatTimeout", &UMeshBeacon::HeartbeatTimeout)
		.def_readwrite("ElapsedHeartbeatTime", &UMeshBeacon::ElapsedHeartbeatTime)
		.def_readwrite("BeaconName", &UMeshBeacon::BeaconName)
		.def_readwrite("SocketSendBufferSize", &UMeshBeacon::SocketSendBufferSize)
		.def_readwrite("SocketReceiveBufferSize", &UMeshBeacon::SocketReceiveBufferSize)
		.def_readwrite("MaxBandwidthTestBufferSize", &UMeshBeacon::MaxBandwidthTestBufferSize)
		.def_readwrite("MinBandwidthTestBufferSize", &UMeshBeacon::MinBandwidthTestBufferSize)
		.def_readwrite("MaxBandwidthTestSendTime", &UMeshBeacon::MaxBandwidthTestSendTime)
		.def_readwrite("MaxBandwidthTestReceiveTime", &UMeshBeacon::MaxBandwidthTestReceiveTime)
		.def_readwrite("MaxBandwidthHistoryEntries", &UMeshBeacon::MaxBandwidthHistoryEntries)
		.def("eventDestroyBeacon", &UMeshBeacon::eventDestroyBeacon)
		  ;
	py::class_< UMeshBeaconClient,  UMeshBeacon   >(m, "UMeshBeaconClient")
		.def_property("bUsingRegisteredAddr", [](UMeshBeaconClient &self){return self.bUsingRegisteredAddr;}, [](UMeshBeaconClient &self, bool value){self.bUsingRegisteredAddr = value ? 1 : 0;})
		.def_static("StaticClass", &UMeshBeaconClient::StaticClass, py::return_value_policy::reference)
		.def_readwrite("HostPendingRequest", &UMeshBeaconClient::HostPendingRequest)
		.def_readwrite("ClientPendingRequest", &UMeshBeaconClient::ClientPendingRequest)
		.def_readwrite("CurrentBandwidthTest", &UMeshBeaconClient::CurrentBandwidthTest)
		.def_readwrite("ClientBeaconState", &UMeshBeaconClient::ClientBeaconState)
		.def_readwrite("ClientBeaconRequestType", &UMeshBeaconClient::ClientBeaconRequestType)
		.def_readwrite("ConnectionRequestTimeout", &UMeshBeaconClient::ConnectionRequestTimeout)
		.def_readwrite("ConnectionRequestElapsedTime", &UMeshBeaconClient::ConnectionRequestElapsedTime)
		.def_readwrite("ResolverClassName", &UMeshBeaconClient::ResolverClassName)
		.def_readwrite("ResolverClass", &UMeshBeaconClient::ResolverClass)
		.def_readwrite("Resolver", &UMeshBeaconClient::Resolver)
		.def("SendHostNewGameSessionResponse", &UMeshBeaconClient::SendHostNewGameSessionResponse)
		.def("OnCreateNewSessionRequestReceived", &UMeshBeaconClient::OnCreateNewSessionRequestReceived)
		.def("OnTravelRequestReceived", &UMeshBeaconClient::OnTravelRequestReceived)
		.def("OnReceivedBandwidthTestResults", &UMeshBeaconClient::OnReceivedBandwidthTestResults)
		.def("OnReceivedBandwidthTestRequest", &UMeshBeaconClient::OnReceivedBandwidthTestRequest)
		.def("OnConnectionRequestResult", &UMeshBeaconClient::OnConnectionRequestResult)
		.def("BeginBandwidthTest", &UMeshBeaconClient::BeginBandwidthTest)
		.def("RequestConnection", &UMeshBeaconClient::RequestConnection)
		.def("eventDestroyBeacon", &UMeshBeaconClient::eventDestroyBeacon)
		  ;
	py::class_< UMeshBeaconHost,  UObject   >(m, "UMeshBeaconHost")
		.def_property("bAllowBandwidthTesting", [](UMeshBeaconHost &self){return self.bAllowBandwidthTesting;}, [](UMeshBeaconHost &self, bool value){self.bAllowBandwidthTesting = value ? 1 : 0;})
		.def_static("StaticClass", &UMeshBeaconHost::StaticClass, py::return_value_policy::reference)
		.def_readwrite("ClientConnections", &UMeshBeaconHost::ClientConnections)
		.def_readwrite("PendingPlayerConnections", &UMeshBeaconHost::PendingPlayerConnections)
		.def_readwrite("OwningPlayerId", &UMeshBeaconHost::OwningPlayerId)
		.def_readwrite("ConnectionBacklog", &UMeshBeaconHost::ConnectionBacklog)
		.def_readwrite("VfTable_FTickableObject", &UMeshBeacon::VfTable_FTickableObject)
		.def_readwrite("MeshBeaconPort", &UMeshBeacon::MeshBeaconPort)
		.def_readwrite("Socket", &UMeshBeacon::Socket)
		.def_readwrite("HeartbeatTimeout", &UMeshBeacon::HeartbeatTimeout)
		.def_readwrite("ElapsedHeartbeatTime", &UMeshBeacon::ElapsedHeartbeatTime)
		.def_readwrite("BeaconName", &UMeshBeacon::BeaconName)
		.def_readwrite("SocketSendBufferSize", &UMeshBeacon::SocketSendBufferSize)
		.def_readwrite("SocketReceiveBufferSize", &UMeshBeacon::SocketReceiveBufferSize)
		.def_readwrite("MaxBandwidthTestBufferSize", &UMeshBeacon::MaxBandwidthTestBufferSize)
		.def_readwrite("MinBandwidthTestBufferSize", &UMeshBeacon::MinBandwidthTestBufferSize)
		.def_readwrite("MaxBandwidthTestSendTime", &UMeshBeacon::MaxBandwidthTestSendTime)
		.def_readwrite("MaxBandwidthTestReceiveTime", &UMeshBeacon::MaxBandwidthTestReceiveTime)
		.def_readwrite("MaxBandwidthHistoryEntries", &UMeshBeacon::MaxBandwidthHistoryEntries)
		.def("OnReceivedClientCreateNewSessionResult", &UMeshBeaconHost::OnReceivedClientCreateNewSessionResult)
		.def("RequestClientCreateNewSession", &UMeshBeaconHost::RequestClientCreateNewSession)
		.def("TellClientsToTravel", &UMeshBeaconHost::TellClientsToTravel)
		.def("OnAllPendingPlayersConnected", &UMeshBeaconHost::OnAllPendingPlayersConnected)
		.def("AllPlayersConnected", &UMeshBeaconHost::AllPlayersConnected)
		.def("GetConnectionIndexForPlayer", &UMeshBeaconHost::GetConnectionIndexForPlayer)
		.def("SetPendingPlayerConnections", &UMeshBeaconHost::SetPendingPlayerConnections)
		.def("OnFinishedBandwidthTest", &UMeshBeaconHost::OnFinishedBandwidthTest)
		.def("OnStartedBandwidthTest", &UMeshBeaconHost::OnStartedBandwidthTest)
		.def("OnReceivedClientConnectionRequest", &UMeshBeaconHost::OnReceivedClientConnectionRequest)
		.def("AllowBandwidthTesting", &UMeshBeaconHost::AllowBandwidthTesting)
		.def("CancelPendingBandwidthTests", &UMeshBeaconHost::CancelPendingBandwidthTests)
		.def("HasPendingBandwidthTest", &UMeshBeaconHost::HasPendingBandwidthTest)
		.def("CancelInProgressBandwidthTests", &UMeshBeaconHost::CancelInProgressBandwidthTests)
		.def("HasInProgressBandwidthTest", &UMeshBeaconHost::HasInProgressBandwidthTest)
		.def("RequestClientBandwidthTest", &UMeshBeaconHost::RequestClientBandwidthTest)
		.def("eventDestroyBeacon", &UMeshBeaconHost::eventDestroyBeacon)
		.def("InitHostBeacon", &UMeshBeaconHost::InitHostBeacon)
		  ;
	py::class_< UOnlineSubsystemCommonImpl,  UOnlineSubsystem   >(m, "UOnlineSubsystemCommonImpl")
		.def_property("bIsUsingSpeechRecognition", [](UOnlineSubsystemCommonImpl &self){return self.bIsUsingSpeechRecognition;}, [](UOnlineSubsystemCommonImpl &self, bool value){self.bIsUsingSpeechRecognition = value ? 1 : 0;})
		.def_static("StaticClass", &UOnlineSubsystemCommonImpl::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VoiceEngine", &UOnlineSubsystemCommonImpl::VoiceEngine)
		.def_readwrite("MaxLocalTalkers", &UOnlineSubsystemCommonImpl::MaxLocalTalkers)
		.def_readwrite("MaxRemoteTalkers", &UOnlineSubsystemCommonImpl::MaxRemoteTalkers)
		.def_readwrite("GameInterfaceImpl", &UOnlineSubsystemCommonImpl::GameInterfaceImpl)
		.def_readwrite("AuthInterfaceImpl", &UOnlineSubsystemCommonImpl::AuthInterfaceImpl)
		.def("GetRegisteredPlayers", &UOnlineSubsystemCommonImpl::GetRegisteredPlayers)
		.def("IsPlayerInSession", &UOnlineSubsystemCommonImpl::IsPlayerInSession)
		.def("eventGetPlayerNicknameFromIndex", &UOnlineSubsystemCommonImpl::eventGetPlayerNicknameFromIndex)
		  ;
	py::class_< UOnlineAuthInterfaceImpl,  UOnlineAuthInterfaceBaseImpl   >(m, "UOnlineAuthInterfaceImpl")
		.def_static("StaticClass", &UOnlineAuthInterfaceImpl::StaticClass, py::return_value_policy::reference)
		.def_readwrite("OwningSubsystem", &UOnlineAuthInterfaceImpl::OwningSubsystem)
		.def_readwrite("AuthReadyDelegates", &UOnlineAuthInterfaceImpl::AuthReadyDelegates)
		.def_readwrite("AuthRequestClientDelegates", &UOnlineAuthInterfaceImpl::AuthRequestClientDelegates)
		.def_readwrite("AuthRequestServerDelegates", &UOnlineAuthInterfaceImpl::AuthRequestServerDelegates)
		.def_readwrite("AuthBlobReceivedClientDelegates", &UOnlineAuthInterfaceImpl::AuthBlobReceivedClientDelegates)
		.def_readwrite("AuthBlobReceivedServerDelegates", &UOnlineAuthInterfaceImpl::AuthBlobReceivedServerDelegates)
		.def_readwrite("AuthCompleteClientDelegates", &UOnlineAuthInterfaceImpl::AuthCompleteClientDelegates)
		.def_readwrite("AuthCompleteServerDelegates", &UOnlineAuthInterfaceImpl::AuthCompleteServerDelegates)
		.def_readwrite("AuthKillClientDelegates", &UOnlineAuthInterfaceImpl::AuthKillClientDelegates)
		.def_readwrite("AuthRetryServerDelegates", &UOnlineAuthInterfaceImpl::AuthRetryServerDelegates)
		.def_readwrite("ClientConnectionCloseDelegates", &UOnlineAuthInterfaceImpl::ClientConnectionCloseDelegates)
		.def_readwrite("ServerConnectionCloseDelegates", &UOnlineAuthInterfaceImpl::ServerConnectionCloseDelegates)
		.def("FindLocalServerAuthSession", &UOnlineAuthInterfaceImpl::FindLocalServerAuthSession)
		.def("FindServerAuthSession", &UOnlineAuthInterfaceImpl::FindServerAuthSession)
		.def("FindLocalClientAuthSession", &UOnlineAuthInterfaceImpl::FindLocalClientAuthSession)
		.def("FindClientAuthSession", &UOnlineAuthInterfaceImpl::FindClientAuthSession)
		.def("SendAuthRetryServer", &UOnlineAuthInterfaceImpl::SendAuthRetryServer)
		.def("SendAuthKillClient", &UOnlineAuthInterfaceImpl::SendAuthKillClient)
		.def("SendAuthBlobServer", &UOnlineAuthInterfaceImpl::SendAuthBlobServer)
		.def("SendAuthBlobClient", &UOnlineAuthInterfaceImpl::SendAuthBlobClient)
		.def("ClearServerConnectionCloseDelegate", &UOnlineAuthInterfaceImpl::ClearServerConnectionCloseDelegate)
		.def("AddServerConnectionCloseDelegate", &UOnlineAuthInterfaceImpl::AddServerConnectionCloseDelegate)
		.def("ClearClientConnectionCloseDelegate", &UOnlineAuthInterfaceImpl::ClearClientConnectionCloseDelegate)
		.def("AddClientConnectionCloseDelegate", &UOnlineAuthInterfaceImpl::AddClientConnectionCloseDelegate)
		.def("ClearAuthRetryServerDelegate", &UOnlineAuthInterfaceImpl::ClearAuthRetryServerDelegate)
		.def("AddAuthRetryServerDelegate", &UOnlineAuthInterfaceImpl::AddAuthRetryServerDelegate)
		.def("ClearAuthKillClientDelegate", &UOnlineAuthInterfaceImpl::ClearAuthKillClientDelegate)
		.def("AddAuthKillClientDelegate", &UOnlineAuthInterfaceImpl::AddAuthKillClientDelegate)
		.def("ClearAuthCompleteServerDelegate", &UOnlineAuthInterfaceImpl::ClearAuthCompleteServerDelegate)
		.def("AddAuthCompleteServerDelegate", &UOnlineAuthInterfaceImpl::AddAuthCompleteServerDelegate)
		.def("ClearAuthCompleteClientDelegate", &UOnlineAuthInterfaceImpl::ClearAuthCompleteClientDelegate)
		.def("AddAuthCompleteClientDelegate", &UOnlineAuthInterfaceImpl::AddAuthCompleteClientDelegate)
		.def("ClearAuthBlobReceivedServerDelegate", &UOnlineAuthInterfaceImpl::ClearAuthBlobReceivedServerDelegate)
		.def("AddAuthBlobReceivedServerDelegate", &UOnlineAuthInterfaceImpl::AddAuthBlobReceivedServerDelegate)
		.def("ClearAuthBlobReceivedClientDelegate", &UOnlineAuthInterfaceImpl::ClearAuthBlobReceivedClientDelegate)
		.def("AddAuthBlobReceivedClientDelegate", &UOnlineAuthInterfaceImpl::AddAuthBlobReceivedClientDelegate)
		.def("ClearAuthRequestServerDelegate", &UOnlineAuthInterfaceImpl::ClearAuthRequestServerDelegate)
		.def("AddAuthRequestServerDelegate", &UOnlineAuthInterfaceImpl::AddAuthRequestServerDelegate)
		.def("ClearAuthRequestClientDelegate", &UOnlineAuthInterfaceImpl::ClearAuthRequestClientDelegate)
		.def("AddAuthRequestClientDelegate", &UOnlineAuthInterfaceImpl::AddAuthRequestClientDelegate)
		.def("ClearAuthReadyDelegate", &UOnlineAuthInterfaceImpl::ClearAuthReadyDelegate)
		.def("AddAuthReadyDelegate", &UOnlineAuthInterfaceImpl::AddAuthReadyDelegate)
		  ;
	py::class_< UOnlineGameInterfaceImpl,  UObject   >(m, "UOnlineGameInterfaceImpl")
		.def_static("StaticClass", &UOnlineGameInterfaceImpl::StaticClass, py::return_value_policy::reference)
		.def_readwrite("OwningSubsystem", &UOnlineGameInterfaceImpl::OwningSubsystem)
		.def_readwrite("GameSettings", &UOnlineGameInterfaceImpl::GameSettings)
		.def_readwrite("GameSearch", &UOnlineGameInterfaceImpl::GameSearch)
		.def_readwrite("CurrentGameState", &UOnlineGameInterfaceImpl::CurrentGameState)
		.def_readwrite("LanBeaconState", &UOnlineGameInterfaceImpl::LanBeaconState)
		.def_readwrite("CreateOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::CreateOnlineGameCompleteDelegates)
		.def_readwrite("UpdateOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::UpdateOnlineGameCompleteDelegates)
		.def_readwrite("DestroyOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::DestroyOnlineGameCompleteDelegates)
		.def_readwrite("JoinOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::JoinOnlineGameCompleteDelegates)
		.def_readwrite("MigrateOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::MigrateOnlineGameCompleteDelegates)
		.def_readwrite("JoinMigratedOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::JoinMigratedOnlineGameCompleteDelegates)
		.def_readwrite("RecalculateSkillRatingCompleteDelegates", &UOnlineGameInterfaceImpl::RecalculateSkillRatingCompleteDelegates)
		.def_readwrite("StartOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::StartOnlineGameCompleteDelegates)
		.def_readwrite("EndOnlineGameCompleteDelegates", &UOnlineGameInterfaceImpl::EndOnlineGameCompleteDelegates)
		.def_readwrite("FindOnlineGamesCompleteDelegates", &UOnlineGameInterfaceImpl::FindOnlineGamesCompleteDelegates)
		.def_readwrite("CancelFindOnlineGamesCompleteDelegates", &UOnlineGameInterfaceImpl::CancelFindOnlineGamesCompleteDelegates)
		.def_readwrite("LanAnnouncePort", &UOnlineGameInterfaceImpl::LanAnnouncePort)
		.def_readwrite("LanGameUniqueId", &UOnlineGameInterfaceImpl::LanGameUniqueId)
		.def_readwrite("LanPacketPlatformMask", &UOnlineGameInterfaceImpl::LanPacketPlatformMask)
		.def_readwrite("LanQueryTimeLeft", &UOnlineGameInterfaceImpl::LanQueryTimeLeft)
		.def_readwrite("LanQueryTimeout", &UOnlineGameInterfaceImpl::LanQueryTimeout)
		.def_readwrite("LanBeacon", &UOnlineGameInterfaceImpl::LanBeacon)
		.def_readwrite("SessionInfo", &UOnlineGameInterfaceImpl::SessionInfo)
		.def_readwrite("NATResolutionTimeout", &UOnlineGameInterfaceImpl::NATResolutionTimeout)
		.def("HasPendingBootInvite", &UOnlineGameInterfaceImpl::HasPendingBootInvite)
		.def("CancelNATNegotiation", &UOnlineGameInterfaceImpl::CancelNATNegotiation)
		.def("ClearQosStatusChangedDelegate", &UOnlineGameInterfaceImpl::ClearQosStatusChangedDelegate)
		.def("AddQosStatusChangedDelegate", &UOnlineGameInterfaceImpl::AddQosStatusChangedDelegate)
		.def("OnQosStatusChanged", &UOnlineGameInterfaceImpl::OnQosStatusChanged)
		.def("BindPlatformSpecificSessionToSearch", &UOnlineGameInterfaceImpl::BindPlatformSpecificSessionToSearch)
		.def("ReadPlatformSpecificSessionInfoBySessionName", &UOnlineGameInterfaceImpl::ReadPlatformSpecificSessionInfoBySessionName)
		.def("ReadPlatformSpecificSessionInfo", &UOnlineGameInterfaceImpl::ReadPlatformSpecificSessionInfo)
		.def("QueryNonAdvertisedData", &UOnlineGameInterfaceImpl::QueryNonAdvertisedData)
		.def("ClearJoinMigratedOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearJoinMigratedOnlineGameCompleteDelegate)
		.def("AddJoinMigratedOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddJoinMigratedOnlineGameCompleteDelegate)
		.def("OnJoinMigratedOnlineGameComplete", &UOnlineGameInterfaceImpl::OnJoinMigratedOnlineGameComplete)
		.def("JoinMigratedOnlineGame", &UOnlineGameInterfaceImpl::JoinMigratedOnlineGame)
		.def("ClearMigrateOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearMigrateOnlineGameCompleteDelegate)
		.def("AddMigrateOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddMigrateOnlineGameCompleteDelegate)
		.def("OnMigrateOnlineGameComplete", &UOnlineGameInterfaceImpl::OnMigrateOnlineGameComplete)
		.def("MigrateOnlineGame", &UOnlineGameInterfaceImpl::MigrateOnlineGame)
		.def("ClearRecalculateSkillRatingCompleteDelegate", &UOnlineGameInterfaceImpl::ClearRecalculateSkillRatingCompleteDelegate)
		.def("AddRecalculateSkillRatingCompleteDelegate", &UOnlineGameInterfaceImpl::AddRecalculateSkillRatingCompleteDelegate)
		.def("OnRecalculateSkillRatingComplete", &UOnlineGameInterfaceImpl::OnRecalculateSkillRatingComplete)
		.def("RecalculateSkillRating", &UOnlineGameInterfaceImpl::RecalculateSkillRating)
		.def("ClearGameInviteProcessingStartedDelegate", &UOnlineGameInterfaceImpl::ClearGameInviteProcessingStartedDelegate)
		.def("AddGameInviteProcessingStartedDelegate", &UOnlineGameInterfaceImpl::AddGameInviteProcessingStartedDelegate)
		.def("OnGameInviteProcessingStarted", &UOnlineGameInterfaceImpl::OnGameInviteProcessingStarted)
		.def("AcceptGameInvite", &UOnlineGameInterfaceImpl::AcceptGameInvite)
		.def("ClearGameInviteAcceptedDelegate", &UOnlineGameInterfaceImpl::ClearGameInviteAcceptedDelegate)
		.def("AddGameInviteAcceptedDelegate", &UOnlineGameInterfaceImpl::AddGameInviteAcceptedDelegate)
		.def("OnGameInviteAccepted", &UOnlineGameInterfaceImpl::OnGameInviteAccepted)
		.def("GetArbitratedPlayers", &UOnlineGameInterfaceImpl::GetArbitratedPlayers)
		.def("ClearArbitrationRegistrationCompleteDelegate", &UOnlineGameInterfaceImpl::ClearArbitrationRegistrationCompleteDelegate)
		.def("AddArbitrationRegistrationCompleteDelegate", &UOnlineGameInterfaceImpl::AddArbitrationRegistrationCompleteDelegate)
		.def("OnArbitrationRegistrationComplete", &UOnlineGameInterfaceImpl::OnArbitrationRegistrationComplete)
		.def("RegisterForArbitration", &UOnlineGameInterfaceImpl::RegisterForArbitration)
		.def("ClearEndOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearEndOnlineGameCompleteDelegate)
		.def("AddEndOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddEndOnlineGameCompleteDelegate)
		.def("OnEndOnlineGameComplete", &UOnlineGameInterfaceImpl::OnEndOnlineGameComplete)
		.def("EndOnlineGame", &UOnlineGameInterfaceImpl::EndOnlineGame)
		.def("ClearStartOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearStartOnlineGameCompleteDelegate)
		.def("AddStartOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddStartOnlineGameCompleteDelegate)
		.def("OnStartOnlineGameComplete", &UOnlineGameInterfaceImpl::OnStartOnlineGameComplete)
		.def("StartOnlineGame", &UOnlineGameInterfaceImpl::StartOnlineGame)
		.def("ClearUnregisterPlayerCompleteDelegate", &UOnlineGameInterfaceImpl::ClearUnregisterPlayerCompleteDelegate)
		.def("AddUnregisterPlayerCompleteDelegate", &UOnlineGameInterfaceImpl::AddUnregisterPlayerCompleteDelegate)
		.def("OnUnregisterPlayerComplete", &UOnlineGameInterfaceImpl::OnUnregisterPlayerComplete)
		.def("UnregisterPlayers", &UOnlineGameInterfaceImpl::UnregisterPlayers)
		.def("UnregisterPlayer", &UOnlineGameInterfaceImpl::UnregisterPlayer)
		.def("ClearRegisterPlayerCompleteDelegate", &UOnlineGameInterfaceImpl::ClearRegisterPlayerCompleteDelegate)
		.def("AddRegisterPlayerCompleteDelegate", &UOnlineGameInterfaceImpl::AddRegisterPlayerCompleteDelegate)
		.def("OnRegisterPlayerComplete", &UOnlineGameInterfaceImpl::OnRegisterPlayerComplete)
		.def("RegisterPlayers", &UOnlineGameInterfaceImpl::RegisterPlayers)
		.def("RegisterPlayer", &UOnlineGameInterfaceImpl::RegisterPlayer)
		.def("GetResolvedConnectString", &UOnlineGameInterfaceImpl::GetResolvedConnectString)
		.def("ClearJoinOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearJoinOnlineGameCompleteDelegate)
		.def("AddJoinOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddJoinOnlineGameCompleteDelegate)
		.def("OnJoinOnlineGameComplete", &UOnlineGameInterfaceImpl::OnJoinOnlineGameComplete)
		.def("JoinOnlineGame", &UOnlineGameInterfaceImpl::JoinOnlineGame)
		.def("FreeSearchResults", &UOnlineGameInterfaceImpl::FreeSearchResults)
		.def("ClearCancelFindOnlineGamesCompleteDelegate", &UOnlineGameInterfaceImpl::ClearCancelFindOnlineGamesCompleteDelegate)
		.def("AddCancelFindOnlineGamesCompleteDelegate", &UOnlineGameInterfaceImpl::AddCancelFindOnlineGamesCompleteDelegate)
		.def("OnCancelFindOnlineGamesComplete", &UOnlineGameInterfaceImpl::OnCancelFindOnlineGamesComplete)
		.def("CancelFindOnlineGames", &UOnlineGameInterfaceImpl::CancelFindOnlineGames)
		.def("ClearFindOnlineGamesCompleteDelegate", &UOnlineGameInterfaceImpl::ClearFindOnlineGamesCompleteDelegate)
		.def("AddFindOnlineGamesCompleteDelegate", &UOnlineGameInterfaceImpl::AddFindOnlineGamesCompleteDelegate)
		.def("FindOnlineGames", &UOnlineGameInterfaceImpl::FindOnlineGames)
		.def("ClearDestroyOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearDestroyOnlineGameCompleteDelegate)
		.def("AddDestroyOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddDestroyOnlineGameCompleteDelegate)
		.def("OnDestroyOnlineGameComplete", &UOnlineGameInterfaceImpl::OnDestroyOnlineGameComplete)
		.def("DestroyOnlineGame", &UOnlineGameInterfaceImpl::DestroyOnlineGame)
		.def("ClearUpdateOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearUpdateOnlineGameCompleteDelegate)
		.def("AddUpdateOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddUpdateOnlineGameCompleteDelegate)
		.def("OnUpdateOnlineGameComplete", &UOnlineGameInterfaceImpl::OnUpdateOnlineGameComplete)
		.def("UpdateOnlineGame", &UOnlineGameInterfaceImpl::UpdateOnlineGame)
		.def("ClearCreateOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::ClearCreateOnlineGameCompleteDelegate)
		.def("AddCreateOnlineGameCompleteDelegate", &UOnlineGameInterfaceImpl::AddCreateOnlineGameCompleteDelegate)
		.def("OnCreateOnlineGameComplete", &UOnlineGameInterfaceImpl::OnCreateOnlineGameComplete)
		.def("CreateOnlineGame", &UOnlineGameInterfaceImpl::CreateOnlineGame)
		.def("GetGameSearch", &UOnlineGameInterfaceImpl::GetGameSearch, py::return_value_policy::reference)
		.def("GetGameSettings", &UOnlineGameInterfaceImpl::GetGameSettings, py::return_value_policy::reference)
		.def("OnFindOnlineGamesComplete", &UOnlineGameInterfaceImpl::OnFindOnlineGamesComplete)
		  ;
	py::class_< UOnlinePlaylistManager,  UObject   >(m, "UOnlinePlaylistManager")
		.def_static("StaticClass", &UOnlinePlaylistManager::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VfTable_FTickableObject", &UOnlinePlaylistManager::VfTable_FTickableObject)
		.def_readwrite("Playlists", &UOnlinePlaylistManager::Playlists)
		.def_readwrite("PlaylistFileNames", &UOnlinePlaylistManager::PlaylistFileNames)
		.def_readwrite("DatastoresToRefresh", &UOnlinePlaylistManager::DatastoresToRefresh)
		.def_readwrite("DownloadCount", &UOnlinePlaylistManager::DownloadCount)
		.def_readwrite("SuccessfulCount", &UOnlinePlaylistManager::SuccessfulCount)
		.def_readwrite("VersionNumber", &UOnlinePlaylistManager::VersionNumber)
		.def_readwrite("PopulationData", &UOnlinePlaylistManager::PopulationData)
		.def_readwrite("WorldwideTotalPlayers", &UOnlinePlaylistManager::WorldwideTotalPlayers)
		.def_readwrite("RegionTotalPlayers", &UOnlinePlaylistManager::RegionTotalPlayers)
		.def_readwrite("TitleFileInterface", &UOnlinePlaylistManager::TitleFileInterface)
		.def_readwrite("PopulationFileName", &UOnlinePlaylistManager::PopulationFileName)
		.def_readwrite("NextPlaylistPopulationUpdateTime", &UOnlinePlaylistManager::NextPlaylistPopulationUpdateTime)
		.def_readwrite("PlaylistPopulationUpdateInterval", &UOnlinePlaylistManager::PlaylistPopulationUpdateInterval)
		.def_readwrite("MinPlaylistIdToReport", &UOnlinePlaylistManager::MinPlaylistIdToReport)
		.def_readwrite("CurrentPlaylistId", &UOnlinePlaylistManager::CurrentPlaylistId)
		.def_readwrite("EventsInterfaceName", &UOnlinePlaylistManager::EventsInterfaceName)
		.def_readwrite("DataCenterId", &UOnlinePlaylistManager::DataCenterId)
		.def_readwrite("DataCenterFileName", &UOnlinePlaylistManager::DataCenterFileName)
		.def_readwrite("LastPlaylistDownloadTime", &UOnlinePlaylistManager::LastPlaylistDownloadTime)
		.def_readwrite("PlaylistRefreshInterval", &UOnlinePlaylistManager::PlaylistRefreshInterval)
		.def("ParseDataCenterId", &UOnlinePlaylistManager::ParseDataCenterId)
		.def("OnReadDataCenterIdComplete", &UOnlinePlaylistManager::OnReadDataCenterIdComplete)
		.def("ReadDataCenterId", &UOnlinePlaylistManager::ReadDataCenterId)
		.def("eventSendPlaylistPopulationUpdate", &UOnlinePlaylistManager::eventSendPlaylistPopulationUpdate)
		.def("GetPopulationInfoFromPlaylist", &UOnlinePlaylistManager::GetPopulationInfoFromPlaylist)
		.def("ParsePlaylistPopulationData", &UOnlinePlaylistManager::ParsePlaylistPopulationData)
		.def("OnPlaylistPopulationDataUpdated", &UOnlinePlaylistManager::OnPlaylistPopulationDataUpdated)
		.def("OnReadPlaylistPopulationComplete", &UOnlinePlaylistManager::OnReadPlaylistPopulationComplete)
		.def("ReadPlaylistPopulation", &UOnlinePlaylistManager::ReadPlaylistPopulation)
		.def("Reset", &UOnlinePlaylistManager::Reset)
		.def("GetContentIdsFromPlaylist", &UOnlinePlaylistManager::GetContentIdsFromPlaylist)
		.def("GetInventorySwapFromPlaylist", &UOnlinePlaylistManager::GetInventorySwapFromPlaylist, py::return_value_policy::reference)
		.def("GetMapCycleFromPlaylist", &UOnlinePlaylistManager::GetMapCycleFromPlaylist)
		.def("GetUrlFromPlaylist", &UOnlinePlaylistManager::GetUrlFromPlaylist)
		.def("GetMatchType", &UOnlinePlaylistManager::GetMatchType)
		.def("IsPlaylistArbitrated", &UOnlinePlaylistManager::IsPlaylistArbitrated)
		.def("GetLoadBalanceIdFromPlaylist", &UOnlinePlaylistManager::GetLoadBalanceIdFromPlaylist)
		.def("GetTeamInfoFromPlaylist", &UOnlinePlaylistManager::GetTeamInfoFromPlaylist)
		.def("PlaylistSupportsDedicatedServers", &UOnlinePlaylistManager::PlaylistSupportsDedicatedServers)
		.def("HasAnyGameSettings", &UOnlinePlaylistManager::HasAnyGameSettings)
		.def("GetGameSettings", &UOnlinePlaylistManager::GetGameSettings, py::return_value_policy::reference)
		.def("FinalizePlaylistObjects", &UOnlinePlaylistManager::FinalizePlaylistObjects)
		.def("OnReadTitleFileComplete", &UOnlinePlaylistManager::OnReadTitleFileComplete)
		.def("ShouldRefreshPlaylists", &UOnlinePlaylistManager::ShouldRefreshPlaylists)
		.def("DetermineFilesToDownload", &UOnlinePlaylistManager::DetermineFilesToDownload)
		.def("DownloadPlaylist", &UOnlinePlaylistManager::DownloadPlaylist)
		.def("OnReadPlaylistComplete", &UOnlinePlaylistManager::OnReadPlaylistComplete)
		  ;
	py::class_< UPartyBeacon,  UObject   >(m, "UPartyBeacon")
		.def_property("bIsInTick", [](UPartyBeacon &self){return self.bIsInTick;}, [](UPartyBeacon &self, bool value){self.bIsInTick = value ? 1 : 0;})
		.def_property("bWantsDeferredDestroy", [](UPartyBeacon &self){return self.bWantsDeferredDestroy;}, [](UPartyBeacon &self, bool value){self.bWantsDeferredDestroy = value ? 1 : 0;})
		.def_property("bShouldTick", [](UPartyBeacon &self){return self.bShouldTick;}, [](UPartyBeacon &self, bool value){self.bShouldTick = value ? 1 : 0;})
		.def_static("StaticClass", &UPartyBeacon::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VfTable_FTickableObject", &UPartyBeacon::VfTable_FTickableObject)
		.def_readwrite("PartyBeaconPort", &UPartyBeacon::PartyBeaconPort)
		.def_readwrite("Socket", &UPartyBeacon::Socket)
		.def_readwrite("HeartbeatTimeout", &UPartyBeacon::HeartbeatTimeout)
		.def_readwrite("ElapsedHeartbeatTime", &UPartyBeacon::ElapsedHeartbeatTime)
		.def_readwrite("BeaconName", &UPartyBeacon::BeaconName)
		.def("OnDestroyComplete", &UPartyBeacon::OnDestroyComplete)
		.def("eventDestroyBeacon", &UPartyBeacon::eventDestroyBeacon)
		  ;
	py::class_< UPartyBeaconClient,  UPartyBeacon   >(m, "UPartyBeaconClient")
		.def_static("StaticClass", &UPartyBeaconClient::StaticClass, py::return_value_policy::reference)
		.def_readwrite("HostPendingRequest", &UPartyBeaconClient::HostPendingRequest)
		.def_readwrite("PendingRequest", &UPartyBeaconClient::PendingRequest)
		.def_readwrite("ClientBeaconState", &UPartyBeaconClient::ClientBeaconState)
		.def_readwrite("ClientBeaconRequestType", &UPartyBeaconClient::ClientBeaconRequestType)
		.def_readwrite("ReservationRequestTimeout", &UPartyBeaconClient::ReservationRequestTimeout)
		.def_readwrite("ReservationRequestElapsedTime", &UPartyBeaconClient::ReservationRequestElapsedTime)
		.def_readwrite("ResolverClassName", &UPartyBeaconClient::ResolverClassName)
		.def_readwrite("ResolverClass", &UPartyBeaconClient::ResolverClass)
		.def_readwrite("Resolver", &UPartyBeaconClient::Resolver)
		.def("eventDestroyBeacon", &UPartyBeaconClient::eventDestroyBeacon)
		.def("CancelReservation", &UPartyBeaconClient::CancelReservation)
		.def("RequestReservationUpdate", &UPartyBeaconClient::RequestReservationUpdate)
		.def("RequestReservation", &UPartyBeaconClient::RequestReservation)
		.def("OnHostHasCancelled", &UPartyBeaconClient::OnHostHasCancelled)
		.def("OnHostIsReady", &UPartyBeaconClient::OnHostIsReady)
		.def("OnTravelRequestReceived", &UPartyBeaconClient::OnTravelRequestReceived)
		.def("OnReservationCountUpdated", &UPartyBeaconClient::OnReservationCountUpdated)
		.def("OnReservationRequestComplete", &UPartyBeaconClient::OnReservationRequestComplete)
		  ;
	py::class_< UPartyBeaconHost,  UObject   >(m, "UPartyBeaconHost")
		.def_property("bBestFitTeamAssignment", [](UPartyBeaconHost &self){return self.bBestFitTeamAssignment;}, [](UPartyBeaconHost &self, bool value){self.bBestFitTeamAssignment = value ? 1 : 0;})
		.def_static("StaticClass", &UPartyBeaconHost::StaticClass, py::return_value_policy::reference)
		.def_readwrite("Clients", &UPartyBeaconHost::Clients)
		.def_readwrite("NumTeams", &UPartyBeaconHost::NumTeams)
		.def_readwrite("NumPlayersPerTeam", &UPartyBeaconHost::NumPlayersPerTeam)
		.def_readwrite("NumReservations", &UPartyBeaconHost::NumReservations)
		.def_readwrite("NumConsumedReservations", &UPartyBeaconHost::NumConsumedReservations)
		.def_readwrite("Reservations", &UPartyBeaconHost::Reservations)
		.def_readwrite("OnlineSessionName", &UPartyBeaconHost::OnlineSessionName)
		.def_readwrite("ConnectionBacklog", &UPartyBeaconHost::ConnectionBacklog)
		.def_readwrite("ForceTeamNum", &UPartyBeaconHost::ForceTeamNum)
		.def_readwrite("ReservedHostTeamNum", &UPartyBeaconHost::ReservedHostTeamNum)
		.def_readwrite("BeaconState", &UPartyBeaconHost::BeaconState)
		.def_readwrite("VfTable_FTickableObject", &UPartyBeacon::VfTable_FTickableObject)
		.def_readwrite("PartyBeaconPort", &UPartyBeacon::PartyBeaconPort)
		.def_readwrite("Socket", &UPartyBeacon::Socket)
		.def_readwrite("HeartbeatTimeout", &UPartyBeacon::HeartbeatTimeout)
		.def_readwrite("ElapsedHeartbeatTime", &UPartyBeacon::ElapsedHeartbeatTime)
		.def_readwrite("BeaconName", &UPartyBeacon::BeaconName)
		.def("GetMaxAvailableTeamSize", &UPartyBeaconHost::GetMaxAvailableTeamSize)
		.def("GetPartyLeaders", &UPartyBeaconHost::GetPartyLeaders)
		.def("GetPlayers", &UPartyBeaconHost::GetPlayers)
		.def("AppendReservationSkillsToSearch", &UPartyBeaconHost::AppendReservationSkillsToSearch)
		.def("eventUnregisterParty", &UPartyBeaconHost::eventUnregisterParty)
		.def("eventUnregisterPartyMembers", &UPartyBeaconHost::eventUnregisterPartyMembers)
		.def("eventRegisterPartyMembers", &UPartyBeaconHost::eventRegisterPartyMembers)
		.def("AreReservationsFull", &UPartyBeaconHost::AreReservationsFull)
		.def("TellClientsHostHasCancelled", &UPartyBeaconHost::TellClientsHostHasCancelled)
		.def("TellClientsHostIsReady", &UPartyBeaconHost::TellClientsHostIsReady)
		.def("TellClientsToTravel", &UPartyBeaconHost::TellClientsToTravel)
		.def("eventDestroyBeacon", &UPartyBeaconHost::eventDestroyBeacon)
		.def("OnClientCancellationReceived", &UPartyBeaconHost::OnClientCancellationReceived)
		.def("OnReservationsFull", &UPartyBeaconHost::OnReservationsFull)
		.def("OnReservationChange", &UPartyBeaconHost::OnReservationChange)
		.def("HandlePlayerLogout", &UPartyBeaconHost::HandlePlayerLogout)
		.def("GetExistingReservation", &UPartyBeaconHost::GetExistingReservation)
		.def("UpdatePartyReservationEntry", &UPartyBeaconHost::UpdatePartyReservationEntry)
		.def("AddPartyReservationEntry", &UPartyBeaconHost::AddPartyReservationEntry)
		.def("InitHostBeacon", &UPartyBeaconHost::InitHostBeacon)
		.def("PauseReservationRequests", &UPartyBeaconHost::PauseReservationRequests)
		.def("OnDestroyComplete", &UPartyBeacon::OnDestroyComplete)
		  ;
	py::class_< UWebRequest,  UObject   >(m, "UWebRequest")
		.def_static("StaticClass", &UWebRequest::StaticClass, py::return_value_policy::reference)
		.def_readwrite("RemoteAddr", &UWebRequest::RemoteAddr)
		.def_readwrite("URI", &UWebRequest::URI)
		.def_readwrite("UserName", &UWebRequest::UserName)
		.def_readwrite("Password", &UWebRequest::Password)
		.def_readwrite("ContentLength", &UWebRequest::ContentLength)
		.def_readwrite("ContentType", &UWebRequest::ContentType)
		.def_readwrite("RequestType", &UWebRequest::RequestType)
		.def_readwrite("HeaderMap", &UWebRequest::HeaderMap)
		.def_readwrite("VariableMap", &UWebRequest::VariableMap)
		.def("GetHexDigit", &UWebRequest::GetHexDigit)
		.def("DecodeFormData", &UWebRequest::DecodeFormData)
		.def("ProcessHeaderString", &UWebRequest::ProcessHeaderString)
		.def("Dump", &UWebRequest::Dump)
		.def("GetVariables", &UWebRequest::GetVariables)
		.def("GetVariableNumber", &UWebRequest::GetVariableNumber)
		.def("GetVariableCount", &UWebRequest::GetVariableCount)
		.def("GetVariable", &UWebRequest::GetVariable)
		.def("AddVariable", &UWebRequest::AddVariable)
		.def("GetHeaders", &UWebRequest::GetHeaders)
		.def("GetHeader", &UWebRequest::GetHeader)
		.def("AddHeader", &UWebRequest::AddHeader)
		.def("EncodeBase64", &UWebRequest::EncodeBase64)
		.def("DecodeBase64", &UWebRequest::DecodeBase64)
		  ;
	py::class_< UWebResponse,  UObject   >(m, "UWebResponse")
		.def_property("bSentText", [](UWebResponse &self){return self.bSentText;}, [](UWebResponse &self, bool value){self.bSentText = value ? 1 : 0;})
		.def_property("bSentResponse", [](UWebResponse &self){return self.bSentResponse;}, [](UWebResponse &self, bool value){self.bSentResponse = value ? 1 : 0;})
		.def_static("StaticClass", &UWebResponse::StaticClass, py::return_value_policy::reference)
		.def_readwrite("headers", &UWebResponse::headers)
		.def_readwrite("ReplacementMap", &UWebResponse::ReplacementMap)
		.def_readwrite("IncludePath", &UWebResponse::IncludePath)
		.def_readwrite("CharSet", &UWebResponse::CharSet)
		.def_readwrite("Connection", &UWebResponse::Connection)
		.def("SentResponse", &UWebResponse::SentResponse)
		.def("SentText", &UWebResponse::SentText)
		.def("Redirect", &UWebResponse::Redirect)
		.def("SendStandardHeaders", &UWebResponse::SendStandardHeaders)
		.def("HTTPError", &UWebResponse::HTTPError)
		.def("SendHeaders", &UWebResponse::SendHeaders)
		.def("AddHeader", &UWebResponse::AddHeader)
		.def("HTTPHeader", &UWebResponse::HTTPHeader)
		.def("HTTPResponse", &UWebResponse::HTTPResponse)
		.def("FailAuthentication", &UWebResponse::FailAuthentication)
		.def("SendCachedFile", &UWebResponse::SendCachedFile)
		.def("eventSendBinary", &UWebResponse::eventSendBinary)
		.def("eventSendText", &UWebResponse::eventSendText)
		.def("Dump", &UWebResponse::Dump)
		.def("GetHTTPExpiration", &UWebResponse::GetHTTPExpiration)
		.def("LoadParsedUHTM", &UWebResponse::LoadParsedUHTM)
		.def("IncludeBinaryFile", &UWebResponse::IncludeBinaryFile)
		.def("IncludeUHTM", &UWebResponse::IncludeUHTM)
		.def("ClearSubst", &UWebResponse::ClearSubst)
		.def("Subst", &UWebResponse::Subst)
		.def("FileExists", &UWebResponse::FileExists)
		  ;
	py::class_< UOnlinePlaylistProvider,  UUIResourceDataProvider   >(m, "UOnlinePlaylistProvider")
		.def_static("StaticClass", &UOnlinePlaylistProvider::StaticClass, py::return_value_policy::reference)
		.def_readwrite("PlaylistId", &UOnlinePlaylistProvider::PlaylistId)
		.def_readwrite("PlaylistGameTypeNames", &UOnlinePlaylistProvider::PlaylistGameTypeNames)
		.def_readwrite("DisplayName", &UOnlinePlaylistProvider::DisplayName)
		.def_readwrite("Priority", &UOnlinePlaylistProvider::Priority)
		  ;
	py::class_< UUIDataStore_OnlinePlaylists,  UUIDataStore   >(m, "UUIDataStore_OnlinePlaylists")
		.def_static("StaticClass", &UUIDataStore_OnlinePlaylists::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VfTable_IUIListElementProvider", &UUIDataStore_OnlinePlaylists::VfTable_IUIListElementProvider)
		.def_readwrite("ProviderClassName", &UUIDataStore_OnlinePlaylists::ProviderClassName)
		.def_readwrite("ProviderClass", &UUIDataStore_OnlinePlaylists::ProviderClass)
		.def_readwrite("RankedDataProviders", &UUIDataStore_OnlinePlaylists::RankedDataProviders)
		.def_readwrite("UnrankedDataProviders", &UUIDataStore_OnlinePlaylists::UnrankedDataProviders)
		.def_readwrite("RecModeDataProviders", &UUIDataStore_OnlinePlaylists::RecModeDataProviders)
		.def_readwrite("PrivateDataProviders", &UUIDataStore_OnlinePlaylists::PrivateDataProviders)
		.def_readwrite("PlaylistMan", &UUIDataStore_OnlinePlaylists::PlaylistMan)
		.def("eventGetMatchTypeForPlaylistId", &UUIDataStore_OnlinePlaylists::eventGetMatchTypeForPlaylistId)
		.def("GetOnlinePlaylistProvider", [](UUIDataStore_OnlinePlaylists &self , struct FName ProviderTag, int PlaylistId) { int* pyProviderIndex = (int*)malloc(sizeof(int)) ;  class UOnlinePlaylistProvider* ret =  self.GetOnlinePlaylistProvider(ProviderTag, PlaylistId, pyProviderIndex); return py::make_tuple(ret, *pyProviderIndex); })
		.def("GetPlaylistProvider", [](UUIDataStore_OnlinePlaylists &self , struct FName ProviderTag, int ProviderIndex) { class UUIResourceDataProvider** pyout_Provider = 0 ;  bool ret =  self.GetPlaylistProvider(ProviderTag, ProviderIndex, pyout_Provider); return py::make_tuple(ret, *pyout_Provider); })
		.def("FindProviderIndexByFieldValue", &UUIDataStore_OnlinePlaylists::FindProviderIndexByFieldValue)
		.def("GetProviderFieldValue", &UUIDataStore_OnlinePlaylists::GetProviderFieldValue)
		.def("GetResourceProviderFields", &UUIDataStore_OnlinePlaylists::GetResourceProviderFields)
		.def("GetResourceProviders", &UUIDataStore_OnlinePlaylists::GetResourceProviders)
		.def("GetProviderCount", &UUIDataStore_OnlinePlaylists::GetProviderCount)
		.def("eventInit", &UUIDataStore_OnlinePlaylists::eventInit)
		  ;
	py::class_< UWebApplication,  UObject   >(m, "UWebApplication")
		.def_static("StaticClass", &UWebApplication::StaticClass, py::return_value_policy::reference)
		.def_readwrite("WorldInfo", &UWebApplication::WorldInfo)
		.def_readwrite("WebServer", &UWebApplication::WebServer)
		.def_readwrite("Path", &UWebApplication::Path)
		.def("PostQuery", &UWebApplication::PostQuery)
		.def("Query", &UWebApplication::Query)
		.def("PreQuery", &UWebApplication::PreQuery)
		.def("CleanupApp", &UWebApplication::CleanupApp)
		.def("Cleanup", &UWebApplication::Cleanup)
		.def("Init", &UWebApplication::Init)
		  ;
	py::class_< AWebServer,  ATcpLink   >(m, "AWebServer")
		.def_property("bEnabled", [](AWebServer &self){return self.bEnabled;}, [](AWebServer &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_static("StaticClass", &AWebServer::StaticClass, py::return_value_policy::reference)
		.def_readwrite("ServerName", &AWebServer::ServerName)
		.def_readwrite("ListenPort", &AWebServer::ListenPort)
		.def_readwrite("MaxConnections", &AWebServer::MaxConnections)
		.def_readwrite("DefaultApplication", &AWebServer::DefaultApplication)
		.def_readwrite("ExpirationSeconds", &AWebServer::ExpirationSeconds)
		.def_readwrite("ServerURL", &AWebServer::ServerURL)
		.def_readwrite("ConnectionCount", &AWebServer::ConnectionCount)
		.def_readwrite("ConnID", &AWebServer::ConnID)
		.def("GetApplication", &AWebServer::GetApplication, py::return_value_policy::reference)
		.def("eventLostChild", &AWebServer::eventLostChild)
		.def("eventGainedChild", &AWebServer::eventGainedChild)
		.def("eventDestroyed", &AWebServer::eventDestroyed)
		.def("PostBeginPlay", &AWebServer::PostBeginPlay)
		  ;
	py::class_< UHelloWeb,  UWebApplication   >(m, "UHelloWeb")
		.def_static("StaticClass", &UHelloWeb::StaticClass, py::return_value_policy::reference)
		.def("eventQuery", &UHelloWeb::eventQuery)
		.def("Init", &UHelloWeb::Init)
		  ;
	py::class_< UImageServer,  UWebApplication   >(m, "UImageServer")
		.def_static("StaticClass", &UImageServer::StaticClass, py::return_value_policy::reference)
		.def("eventQuery", &UImageServer::eventQuery)
		  ;
	py::class_< AWebConnection,  AInfo   >(m, "AWebConnection")
		.def_property("bDelayCleanup", [](AWebConnection &self){return self.bDelayCleanup;}, [](AWebConnection &self, bool value){self.bDelayCleanup = value ? 1 : 0;})
		.def_static("StaticClass", &AWebConnection::StaticClass, py::return_value_policy::reference)
		.def_readwrite("WebServer", &AWebConnection::WebServer)
		.def_readwrite("ReceivedData", &AWebConnection::ReceivedData)
		.def_readwrite("Request", &AWebConnection::Request)
		.def_readwrite("Response", &AWebConnection::Response)
		.def_readwrite("Application", &AWebConnection::Application)
		.def_readwrite("RawBytesExpecting", &AWebConnection::RawBytesExpecting)
		.def_readwrite("MaxValueLength", &AWebConnection::MaxValueLength)
		.def_readwrite("MaxLineLength", &AWebConnection::MaxLineLength)
		.def_readwrite("ConnID", &AWebConnection::ConnID)
		.def_readwrite("LinkState", &ATcpLink::LinkState)
		.def_readwrite("RemoteAddr", &ATcpLink::RemoteAddr)
		.def_readwrite("AcceptClass", &ATcpLink::AcceptClass)
		.def_readwrite("SendFIFO", &ATcpLink::SendFIFO)
		.def_readwrite("RecvBuf", &ATcpLink::RecvBuf)
		.def_readwrite("LinkMode", &AInternetLink::LinkMode)
		.def_readwrite("InLineMode", &AInternetLink::InLineMode)
		.def_readwrite("OutLineMode", &AInternetLink::OutLineMode)
		.def_readwrite("ReceiveMode", &AInternetLink::ReceiveMode)
		.def_readwrite("Socket", &AInternetLink::Socket)
		.def_readwrite("Port", &AInternetLink::Port)
		.def_readwrite("RemoteSocket", &AInternetLink::RemoteSocket)
		.def_readwrite("PrivateResolveInfo", &AInternetLink::PrivateResolveInfo)
		.def_readwrite("DataPending", &AInternetLink::DataPending)
		.def("IsHanging", &AWebConnection::IsHanging)
		.def("Cleanup", &AWebConnection::Cleanup)
		.def("CheckRawBytes", &AWebConnection::CheckRawBytes)
		.def("EndOfHeaders", &AWebConnection::EndOfHeaders)
		.def("CreateResponseObject", &AWebConnection::CreateResponseObject)
		.def("ProcessPost", &AWebConnection::ProcessPost)
		.def("ProcessGet", &AWebConnection::ProcessGet)
		.def("ProcessHead", &AWebConnection::ProcessHead)
		.def("ReceivedLine", &AWebConnection::ReceivedLine)
		.def("eventReceivedText", &AWebConnection::eventReceivedText)
		.def("eventTimer", &AWebConnection::eventTimer)
		.def("eventClosed", &AWebConnection::eventClosed)
		.def("eventAccepted", &AWebConnection::eventAccepted)
		.def("eventReceivedBinary", &ATcpLink::eventReceivedBinary)
		.def("eventReceivedLine", &ATcpLink::eventReceivedLine)
		.def("eventOpened", &ATcpLink::eventOpened)
		.def("ReadBinary", &ATcpLink::ReadBinary)
		.def("ReadText", &ATcpLink::ReadText)
		.def("SendBinary", &ATcpLink::SendBinary)
		.def("SendText", &ATcpLink::SendText)
		.def("IsConnected", &ATcpLink::IsConnected)
		.def("Close", &ATcpLink::Close)
		.def("Open", &ATcpLink::Open)
		.def("Listen", &ATcpLink::Listen)
		.def("BindPort", &ATcpLink::BindPort)
		.def("eventResolveFailed", &AInternetLink::eventResolveFailed)
		.def("eventResolved", &AInternetLink::eventResolved)
		.def("GetLocalIP", &AInternetLink::GetLocalIP)
		.def("StringToIpAddr", &AInternetLink::StringToIpAddr)
		.def("IpAddrToString", &AInternetLink::IpAddrToString)
		.def("GetLastError", &AInternetLink::GetLastError)
		.def("Resolve", &AInternetLink::Resolve)
		.def("ParseURL", &AInternetLink::ParseURL)
		.def("IsDataPending", &AInternetLink::IsDataPending)
		  ;

}