#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_AWillowWeaponPawn(py::object m)
{
    py::class_< AWillowWeaponPawn,  AWillowVehicleBase   >(m, "AWillowWeaponPawn")
        .def_readwrite("MyVehicleWeapon", &AWillowWeaponPawn::MyVehicleWeapon)
        .def_readwrite("MyVehicle", &AWillowWeaponPawn::MyVehicle)
        .def_readwrite("MySeatIndex", &AWillowWeaponPawn::MySeatIndex)
        .def_readwrite("FixViewTime", &AWillowWeaponPawn::FixViewTime)
        .def("StaticClass", &AWillowWeaponPawn::StaticClass, py::return_value_policy::reference)
        .def("GetAimDirection", &AWillowWeaponPawn::GetAimDirection)
        .def("GetPivotPoint", &AWillowWeaponPawn::GetPivotPoint)
        .def("SetAllegiance", &AWillowWeaponPawn::SetAllegiance)
        .def("eventOutsideWorldBounds", &AWillowWeaponPawn::eventOutsideWorldBounds)
        .def("eventFellOutOfWorld", &AWillowWeaponPawn::eventFellOutOfWorld)
        .def("GetWillowVehicle", &AWillowWeaponPawn::GetWillowVehicle, py::return_value_policy::reference)
        .def("ClientUnsitDriver", &AWillowWeaponPawn::ClientUnsitDriver)
        .def("GetVehicleAndSeatIndex", [](AWillowWeaponPawn &self ) { class AWillowVehicle** pyWVehicle = 0 ; int* pySeatIndex = (int*)malloc(sizeof(int)) ;  bool ret =  self.GetVehicleAndSeatIndex(pyWVehicle, pySeatIndex); return py::make_tuple(ret, *pyWVehicle, *pySeatIndex); })
        .def("ServerNotifyAltFireTriggered", &AWillowWeaponPawn::ServerNotifyAltFireTriggered)
        .def("ServerNotifyTargetLockSuccessful", &AWillowWeaponPawn::ServerNotifyTargetLockSuccessful)
        .def("StopFireTurret", &AWillowWeaponPawn::StopFireTurret)
        .def("StartFireTurret", &AWillowWeaponPawn::StartFireTurret)
        .def("GetPawnToTeleport", &AWillowWeaponPawn::GetPawnToTeleport, py::return_value_policy::reference)
        .def("ProcessViewRotationForAttachedRiders", &AWillowWeaponPawn::ProcessViewRotationForAttachedRiders)
        .def("ProcessViewRotation", &AWillowWeaponPawn::ProcessViewRotation)
        .def("VehicleAdjustInput", [](AWillowWeaponPawn &self ) { float* pyaTurn = (float*)malloc(sizeof(float)) ; float* pyaLookUp = (float*)malloc(sizeof(float)) ; float* pyaForward = (float*)malloc(sizeof(float)) ; float* pyaStrafe = (float*)malloc(sizeof(float)) ;   self.VehicleAdjustInput(pyaTurn, pyaLookUp, pyaForward, pyaStrafe); return py::make_tuple(*pyaTurn, *pyaLookUp, *pyaForward, *pyaStrafe); })
        .def("GetExpInfo", [](AWillowWeaponPawn &self ) { int* pyExpLevelValue = (int*)malloc(sizeof(int)) ;   self.GetExpInfo(pyExpLevelValue); return py::make_tuple(*pyExpLevelValue); })
        .def("DisplayParentInfo", &AWillowWeaponPawn::DisplayParentInfo)
        .def("GetAllBarInfo", &AWillowWeaponPawn::GetAllBarInfo)
        .def("IsDead", &AWillowWeaponPawn::IsDead)
        .def("eventTakeDamage", &AWillowWeaponPawn::eventTakeDamage)
        .def("SitAnimFinished", &AWillowWeaponPawn::SitAnimFinished)
        .def("ClientCheckForSitAnimFinished", &AWillowWeaponPawn::ClientCheckForSitAnimFinished)
        .def("GetWeaponStartTraceLocation", &AWillowWeaponPawn::GetWeaponStartTraceLocation)
        .def("IndependentVehicle", &AWillowWeaponPawn::IndependentVehicle)
        .def("DetachDriver", &AWillowWeaponPawn::DetachDriver)
        .def("AttachDriver", &AWillowWeaponPawn::AttachDriver)
        .def("WaitingForReplicatedData", &AWillowWeaponPawn::WaitingForReplicatedData)
        .def("SetBaseEyeheight", &AWillowWeaponPawn::SetBaseEyeheight)
        .def("GetTargetLocation", &AWillowWeaponPawn::GetTargetLocation)
        .def("GetCollisionRadius", &AWillowWeaponPawn::GetCollisionRadius)
        .def("DoJump", &AWillowWeaponPawn::DoJump)
        .def("SetMovementPhysics", &AWillowWeaponPawn::SetMovementPhysics)
        .def("eventBaseChange", &AWillowWeaponPawn::eventBaseChange)
        .def("JumpOffPawn", &AWillowWeaponPawn::JumpOffPawn)
        .def("AddVelocity", &AWillowWeaponPawn::AddVelocity)
        .def("DropToGround", &AWillowWeaponPawn::DropToGround)
        .def("ServerChangeSeat", &AWillowWeaponPawn::ServerChangeSeat)
        .def("SwitchSeats", &AWillowWeaponPawn::SwitchSeats)
        .def("IsOccupantAllowedToTakeDamage", &AWillowWeaponPawn::IsOccupantAllowedToTakeDamage)
        .def("DoAttachedRiderSetup", &AWillowWeaponPawn::DoAttachedRiderSetup)
        .def("eventDriverLeave", &AWillowWeaponPawn::eventDriverLeave)
        .def("PossessWeaponPawnForAttachedRiderExit", &AWillowWeaponPawn::PossessWeaponPawnForAttachedRiderExit)
        .def("ClientPossessAttachedRiderOnEntry", &AWillowWeaponPawn::ClientPossessAttachedRiderOnEntry)
        .def("ServerPossessAttachedRiderOnEntry", &AWillowWeaponPawn::ServerPossessAttachedRiderOnEntry)
        .def("DriverLeft", &AWillowWeaponPawn::DriverLeft)
        .def("DriverEnter", &AWillowWeaponPawn::DriverEnter)
        .def("PossessedBy", &AWillowWeaponPawn::PossessedBy)
        .def("ClearFlashLocation", &AWillowWeaponPawn::ClearFlashLocation)
        .def("SetFlashLocation", &AWillowWeaponPawn::SetFlashLocation)
        .def("ClearFlashCount", &AWillowWeaponPawn::ClearFlashCount)
        .def("IncrementFlashCount", &AWillowWeaponPawn::IncrementFlashCount)
        .def("GetWeaponFacingDir", &AWillowWeaponPawn::GetWeaponFacingDir)
        .def("CalcCamera", [](AWillowWeaponPawn &self , float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot) { float* pyout_FOV = (float*)malloc(sizeof(float)) ;  bool ret =  self.CalcCamera(fDeltaTime, out_CamLoc, out_CamRot, pyout_FOV); return py::make_tuple(ret, *pyout_FOV); })
        .def("SetVehicleData", &AWillowWeaponPawn::SetVehicleData)
        .def("IsAttachedRiderSeat", &AWillowWeaponPawn::IsAttachedRiderSeat)
        .def("GetDriverController", &AWillowWeaponPawn::GetDriverController, py::return_value_policy::reference)
        .def("eventReplicatedEvent", &AWillowWeaponPawn::eventReplicatedEvent)
          ;
}