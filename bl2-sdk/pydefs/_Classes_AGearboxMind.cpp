#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_AGearboxMind(py::module &m)
{
    py::class_< AGearboxMind,  AAIController   >(m, "AGearboxMind")
        .def_readwrite("VfTable_IIRuleEngineOwner", &AGearboxMind::VfTable_IIRuleEngineOwner)
        .def_readwrite("VfTable_IINounAttributeProvider", &AGearboxMind::VfTable_IINounAttributeProvider)
        .def_readwrite("VfTable_IIFlagProvider", &AGearboxMind::VfTable_IIFlagProvider)
        .def_readwrite("VfTable_IIAIInterface", &AGearboxMind::VfTable_IIAIInterface)
        .def_readwrite("MyRuleEngine", &AGearboxMind::MyRuleEngine)
        .def_readwrite("RuleEngineTemplate", &AGearboxMind::RuleEngineTemplate)
        .def_readwrite("MyGearboxPawn", &AGearboxMind::MyGearboxPawn)
        .def_readwrite("FacingPolicy", &AGearboxMind::FacingPolicy)
        .def_readwrite("AtLeastOneKnownThreat", &AGearboxMind::AtLeastOneKnownThreat)
        .def_readwrite("NewEnemyAwarenessReason", &AGearboxMind::NewEnemyAwarenessReason)
        .def_readwrite("DebugMoveFinishedReason", &AGearboxMind::DebugMoveFinishedReason)
        .def_readwrite("FacingActor", &AGearboxMind::FacingActor)
        .def_readwrite("FacingVector", &AGearboxMind::FacingVector)
        .def_readwrite("DotProductToFacingPolicy", &AGearboxMind::DotProductToFacingPolicy)
        .def_readwrite("DotProductToCurrentEnemy", &AGearboxMind::DotProductToCurrentEnemy)
        .def_readwrite("MostRecentNewEnemyName", &AGearboxMind::MostRecentNewEnemyName)
        .def_readwrite("MostRecentNewEnemyArchName", &AGearboxMind::MostRecentNewEnemyArchName)
        .def_readwrite("DefaultAwarenessZoneCollection", &AGearboxMind::DefaultAwarenessZoneCollection)
        .def_readwrite("CurrentAwarenessZoneCollection", &AGearboxMind::CurrentAwarenessZoneCollection)
        .def_readwrite("CurrentAwarenessZone", &AGearboxMind::CurrentAwarenessZone)
        .def_readwrite("DefaultCoverSearchCriteria", &AGearboxMind::DefaultCoverSearchCriteria)
        .def_readwrite("FailedMoveSpots", &AGearboxMind::FailedMoveSpots)
        .def_readwrite("NounState", &AGearboxMind::NounState)
        .def_readwrite("HomeLocation", &AGearboxMind::HomeLocation)
        .def_readwrite("PopulationOpportunityIndex", &AGearboxMind::PopulationOpportunityIndex)
        .def_readwrite("MindTargetInfoClass", &AGearboxMind::MindTargetInfoClass)
        .def_readwrite("MyTracker", &AGearboxMind::MyTracker)
        .def_readwrite("DynamicFlagDefinitions", &AGearboxMind::DynamicFlagDefinitions)
        .def_readwrite("DynamicFlags", &AGearboxMind::DynamicFlags)
        .def_readwrite("AIComponent", &AGearboxMind::AIComponent)
        .def("StaticClass", &AGearboxMind::StaticClass, py::return_value_policy::reference)
        .def("InitSequence", &AGearboxMind::InitSequence)
        .def("GetAllegiance", &AGearboxMind::GetAllegiance, py::return_value_policy::reference)
        .def("GetAIDefinition", &AGearboxMind::GetAIDefinition, py::return_value_policy::reference)
        .def("GetAIComponent", &AGearboxMind::GetAIComponent, py::return_value_policy::reference)
        .def("GetAIParent", &AGearboxMind::GetAIParent, py::return_value_policy::reference)
        .def("GetAILocation", &AGearboxMind::GetAILocation)
        .def("GetAIActor", &AGearboxMind::GetAIActor, py::return_value_policy::reference)
        .def("CanTickAI", &AGearboxMind::CanTickAI)
        .def("InGodMode", &AGearboxMind::InGodMode)
        .def("PawnDied", &AGearboxMind::PawnDied)
        .def("OnTargetPriority", &AGearboxMind::OnTargetPriority)
        .def("Behavior_SetCanTarget", &AGearboxMind::Behavior_SetCanTarget)
        .def("GetNoTargetAllEnemies", &AGearboxMind::GetNoTargetAllEnemies)
        .def("SetNoTargetAllEnemies", &AGearboxMind::SetNoTargetAllEnemies)
        .def("eventClearScriptedMoveTarget", &AGearboxMind::eventClearScriptedMoveTarget)
        .def("eventIsCloseEnoughToScriptedMoveTarget", &AGearboxMind::eventIsCloseEnoughToScriptedMoveTarget)
        .def("eventGetWeaponFireLocation", &AGearboxMind::eventGetWeaponFireLocation)
        .def("ActivateEventRule", &AGearboxMind::ActivateEventRule)
        .def("AddHitTargetRecord", &AGearboxMind::AddHitTargetRecord)
        .def("StopMovement", &AGearboxMind::StopMovement)
        .def("eventPossess", &AGearboxMind::eventPossess)
        .def("GetGearboxRuleEngine", &AGearboxMind::GetGearboxRuleEngine, py::return_value_policy::reference)
        .def("GetRuleEngine", &AGearboxMind::GetRuleEngine, py::return_value_policy::reference)
        .def("NotifyShotAtBy", &AGearboxMind::NotifyShotAtBy)
        .def("FindCoverAndClaim", &AGearboxMind::FindCoverAndClaim)
        .def("UpdateRuleEngineKnowledge", &AGearboxMind::UpdateRuleEngineKnowledge)
        .def("GetCurrentTargetInfo", [](AGearboxMind &self ) { class UMindTargetInfo** pyOutTargetRec = 0 ;  bool ret =  self.GetCurrentTargetInfo(pyOutTargetRec); return py::make_tuple(ret, *pyOutTargetRec); })
        .def("IsSameAllegianceMind", &AGearboxMind::IsSameAllegianceMind)
        .def("IsSameAllegiance", &AGearboxMind::IsSameAllegiance)
        .def("IsNeutralMind", &AGearboxMind::IsNeutralMind)
        .def("IsNeutral", &AGearboxMind::IsNeutral)
        .def("IsFriendlyMind", &AGearboxMind::IsFriendlyMind)
        .def("IsFriendly", &AGearboxMind::IsFriendly)
        .def("IsEnemyMind", &AGearboxMind::IsEnemyMind)
        .def("IsEnemy", &AGearboxMind::IsEnemy)
        .def("WantsToWalk", &AGearboxMind::WantsToWalk)
        .def("SetWantsToWalk", &AGearboxMind::SetWantsToWalk)
        .def("GetFacingPolicy", &AGearboxMind::GetFacingPolicy)
        .def("SetFacingPolicy", &AGearboxMind::SetFacingPolicy)
        .def("GetCurrentTarget", &AGearboxMind::GetCurrentTarget, py::return_value_policy::reference)
        .def("RemoveEnemyFromQueue", &AGearboxMind::RemoveEnemyFromQueue)
        .def("GetNavigationHandle", &AGearboxMind::GetNavigationHandle, py::return_value_policy::reference)
        .def("ForceMoveToActor", &AGearboxAIController::ForceMoveToActor)
          ;
}