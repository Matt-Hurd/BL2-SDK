#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_AkAudio_classes(py::module &m)
{
	py::class_< UActorFactoryAkAmbientSound,  UActorFactory   >(m, "UActorFactoryAkAmbientSound")
		.def_static("StaticClass", &UActorFactoryAkAmbientSound::StaticClass, py::return_value_policy::reference)
		.def_readwrite("AmbientEvent", &UActorFactoryAkAmbientSound::AmbientEvent)
		  ;
	py::class_< AAkAmbientSound,  AKeypoint   >(m, "AAkAmbientSound")
		.def_property("bIsRegistered", [](AAkAmbientSound &self){return self.bIsRegistered;}, [](AAkAmbientSound &self, bool value){self.bIsRegistered = value ? 1 : 0;})
		.def_static("StaticClass", &AAkAmbientSound::StaticClass, py::return_value_policy::reference)
		.def_readwrite("PlayEvent", &AAkAmbientSound::PlayEvent)
		.def_readwrite("Group", &AAkAmbientSound::Group)
		  ;
	py::class_< UIAkEnvironmentalEffectProvider,  UInterface   >(m, "UIAkEnvironmentalEffectProvider")
		.def_static("StaticClass", &UIAkEnvironmentalEffectProvider::StaticClass, py::return_value_policy::reference)
		.def("GetEnvironmentalEffectsForLocation", &UIAkEnvironmentalEffectProvider::GetEnvironmentalEffectsForLocation)
		  ;
	py::class_< UInterpTrackAkEvent,  UInterpTrack   >(m, "UInterpTrackAkEvent")
		.def_static("StaticClass", &UInterpTrackAkEvent::StaticClass, py::return_value_policy::reference)
		.def_readwrite("AkEvents", &UInterpTrackAkEvent::AkEvents)
		  ;
	py::class_< UInterpTrackAkRTPC,  UInterpTrackFloatBase   >(m, "UInterpTrackAkRTPC")
		.def_static("StaticClass", &UInterpTrackAkRTPC::StaticClass, py::return_value_policy::reference)
		.def_readwrite("AkRtpc", &UInterpTrackAkRTPC::AkRtpc)
		  ;
	py::class_< UInterpTrackInstAkEvent,  UInterpTrackInst   >(m, "UInterpTrackInstAkEvent")
		.def_static("StaticClass", &UInterpTrackInstAkEvent::StaticClass, py::return_value_policy::reference)
		.def_readwrite("LastUpdatePosition", &UInterpTrackInstAkEvent::LastUpdatePosition)
		  ;
	py::class_< UISpecialOcclusionAccumulator,  UInterface   >(m, "UISpecialOcclusionAccumulator")
		.def_static("StaticClass", &UISpecialOcclusionAccumulator::StaticClass, py::return_value_policy::reference)
		.def("RemoveOcclusionProvider", &UISpecialOcclusionAccumulator::RemoveOcclusionProvider)
		.def("SetOcclusionForProvider", &UISpecialOcclusionAccumulator::SetOcclusionForProvider)
		  ;
	py::class_< USeqAct_AkPostEvent,  USeqAct_Latent   >(m, "USeqAct_AkPostEvent")
		.def_property("bPlayOneInstanceFromAllLocations", [](USeqAct_AkPostEvent &self){return self.bPlayOneInstanceFromAllLocations;}, [](USeqAct_AkPostEvent &self, bool value){self.bPlayOneInstanceFromAllLocations = value ? 1 : 0;})
		.def_property("bTreatAllLocationsAsOneSource", [](USeqAct_AkPostEvent &self){return self.bTreatAllLocationsAsOneSource;}, [](USeqAct_AkPostEvent &self, bool value){self.bTreatAllLocationsAsOneSource = value ? 1 : 0;})
		.def_static("StaticClass", &USeqAct_AkPostEvent::StaticClass, py::return_value_policy::reference)
		.def_readwrite("ActivePlayingIds", &USeqAct_AkPostEvent::ActivePlayingIds)
		.def_readwrite("Event", &USeqAct_AkPostEvent::Event)
		  ;
	py::class_< USeqAct_AkPostTrigger,  USequenceAction   >(m, "USeqAct_AkPostTrigger")
		.def_static("StaticClass", &USeqAct_AkPostTrigger::StaticClass, py::return_value_policy::reference)
		.def_readwrite("AkTrigger", &USeqAct_AkPostTrigger::AkTrigger)
		  ;
	py::class_< USeqAct_AkSetRTPCValue,  USeqAct_Latent   >(m, "USeqAct_AkSetRTPCValue")
		.def_property("Running", [](USeqAct_AkSetRTPCValue &self){return self.Running;}, [](USeqAct_AkSetRTPCValue &self, bool value){self.Running = value ? 1 : 0;})
		.def_static("StaticClass", &USeqAct_AkSetRTPCValue::StaticClass, py::return_value_policy::reference)
		.def_readwrite("AkRtpc", &USeqAct_AkSetRTPCValue::AkRtpc)
		.def_readwrite("Value", &USeqAct_AkSetRTPCValue::Value)
		  ;
	py::class_< USeqAct_AkSetState,  USequenceAction   >(m, "USeqAct_AkSetState")
		.def_static("StaticClass", &USeqAct_AkSetState::StaticClass, py::return_value_policy::reference)
		.def_readwrite("State", &USeqAct_AkSetState::State)
		  ;
	py::class_< USeqAct_AkSetSwitch,  USequenceAction   >(m, "USeqAct_AkSetSwitch")
		.def_static("StaticClass", &USeqAct_AkSetSwitch::StaticClass, py::return_value_policy::reference)
		.def_readwrite("AkSwitch", &USeqAct_AkSetSwitch::AkSwitch)
		  ;
	py::class_< AWwiseSoundGroup,  AKeypoint   >(m, "AWwiseSoundGroup")
		.def_static("StaticClass", &AWwiseSoundGroup::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VfTable_IISpecialOcclusionProvider", &AWwiseSoundGroup::VfTable_IISpecialOcclusionProvider)
		.def_readwrite("VfTable_IISpecialOcclusionAccumulator", &AWwiseSoundGroup::VfTable_IISpecialOcclusionAccumulator)
		.def_readwrite("Members", &AWwiseSoundGroup::Members)
		.def_readwrite("ActiveOccluders", &AWwiseSoundGroup::ActiveOccluders)
		.def("RemoveOcclusionProvider", &AWwiseSoundGroup::RemoveOcclusionProvider)
		.def("SetOcclusionForProvider", &AWwiseSoundGroup::SetOcclusionForProvider)
		.def("GetOcclusionAmount", &AWwiseSoundGroup::GetOcclusionAmount)
		.def("SetAkSwitchObject", &AWwiseSoundGroup::SetAkSwitchObject)
		.def("SetRTPCObjectValue", &AWwiseSoundGroup::SetRTPCObjectValue)
		  ;
	py::class_< AWwiseSoundVolume,  AVolume   >(m, "AWwiseSoundVolume")
		.def_property("bAutoPlay", [](AWwiseSoundVolume &self){return self.bAutoPlay;}, [](AWwiseSoundVolume &self, bool value){self.bAutoPlay = value ? 1 : 0;})
		.def_property("bAutomaticallySetPlayAndStopDistances", [](AWwiseSoundVolume &self){return self.bAutomaticallySetPlayAndStopDistances;}, [](AWwiseSoundVolume &self, bool value){self.bAutomaticallySetPlayAndStopDistances = value ? 1 : 0;})
		.def_property("bPlaySoundsFromAllSubBrushes", [](AWwiseSoundVolume &self){return self.bPlaySoundsFromAllSubBrushes;}, [](AWwiseSoundVolume &self, bool value){self.bPlaySoundsFromAllSubBrushes = value ? 1 : 0;})
		.def_property("bEffectBankLoaded", [](AWwiseSoundVolume &self){return self.bEffectBankLoaded;}, [](AWwiseSoundVolume &self, bool value){self.bEffectBankLoaded = value ? 1 : 0;})
		.def_static("StaticClass", &AWwiseSoundVolume::StaticClass, py::return_value_policy::reference)
		.def_readwrite("VfTable_IIAkEnvironmentalEffectProvider", &AWwiseSoundVolume::VfTable_IIAkEnvironmentalEffectProvider)
		.def_readwrite("VfTable_IISpecialOcclusionProvider", &AWwiseSoundVolume::VfTable_IISpecialOcclusionProvider)
		.def_readwrite("VfTable_IISpecialOcclusionAccumulator", &AWwiseSoundVolume::VfTable_IISpecialOcclusionAccumulator)
		.def_readwrite("akPlayEvent", &AWwiseSoundVolume::akPlayEvent)
		.def_readwrite("AutoPlayDistance", &AWwiseSoundVolume::AutoPlayDistance)
		.def_readwrite("AutoStopDistance", &AWwiseSoundVolume::AutoStopDistance)
		.def_readwrite("ParentVolume", &AWwiseSoundVolume::ParentVolume)
		.def_readwrite("SubBrushes", &AWwiseSoundVolume::SubBrushes)
		.def_readwrite("EnvironmentFadeDistance", &AWwiseSoundVolume::EnvironmentFadeDistance)
		.def_readwrite("Group", &AWwiseSoundVolume::Group)
		.def_readwrite("AkComponent", &AWwiseSoundVolume::AkComponent)
		.def_readwrite("Midpoint", &AWwiseSoundVolume::Midpoint)
		.def_readwrite("FarthestVertexDistance", &AWwiseSoundVolume::FarthestVertexDistance)
		.def_readwrite("LastLocationUpdateTime", &AWwiseSoundVolume::LastLocationUpdateTime)
		.def_readwrite("DistancePerAdditionalSecondBetweenUpdates", &AWwiseSoundVolume::DistancePerAdditionalSecondBetweenUpdates)
		.def_readwrite("LastEnvironmentStrength", &AWwiseSoundVolume::LastEnvironmentStrength)
		.def_readwrite("LastEnvironmentSuppressionModifier", &AWwiseSoundVolume::LastEnvironmentSuppressionModifier)
		.def_readwrite("EnvironmentSuppressors", &AWwiseSoundVolume::EnvironmentSuppressors)
		.def_readwrite("EnvironmentalEffects", &AWwiseSoundVolume::EnvironmentalEffects)
		.def_readwrite("SuppressedEnvironments", &AWwiseSoundVolume::SuppressedEnvironments)
		.def_readwrite("RTPCs", &AWwiseSoundVolume::RTPCs)
		.def_readwrite("OccludedVolumes", &AWwiseSoundVolume::OccludedVolumes)
		.def_readwrite("LastOcclusionLevel", &AWwiseSoundVolume::LastOcclusionLevel)
		.def_readwrite("ActiveOccluders", &AWwiseSoundVolume::ActiveOccluders)
		.def_readwrite("FacePlanes", &AWwiseSoundVolume::FacePlanes)
		.def_readwrite("SoundSourceLocations", &AWwiseSoundVolume::SoundSourceLocations)
		.def_readwrite("CachedListenerDistances", &AWwiseSoundVolume::CachedListenerDistances)
		.def_readwrite("EffectSoundBank", &AWwiseSoundVolume::EffectSoundBank)
		.def_readwrite("EffectSoundBankLoadDistance", &AWwiseSoundVolume::EffectSoundBankLoadDistance)
		.def("RemoveOcclusionProvider", &AWwiseSoundVolume::RemoveOcclusionProvider)
		.def("SetOcclusionForProvider", &AWwiseSoundVolume::SetOcclusionForProvider)
		.def("GetOcclusionAmount", &AWwiseSoundVolume::GetOcclusionAmount)
		.def("UpdateAkComponentPosition", &AWwiseSoundVolume::UpdateAkComponentPosition)
		.def("GetEnvironmentalEffectsForLocation", &AWwiseSoundVolume::GetEnvironmentalEffectsForLocation)
		.def("CalculateFacePlanes", &AWwiseSoundVolume::CalculateFacePlanes)
		  ;

}