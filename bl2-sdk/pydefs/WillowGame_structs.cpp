#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_WillowGame_structs(py::module &m)
{
#ifndef _DEBUG
	py::class_< FActionSkillCustomEventReplicationData >(m, "FActionSkillCustomEventReplicationData")
		.def(py::init<>())
		.def_readwrite("EventCountForReplication", &FActionSkillCustomEventReplicationData::EventCountForReplication)
		.def_readwrite("EventName", &FActionSkillCustomEventReplicationData::EventName, py::return_value_policy::reference)
		;
	py::class_< FMaterialEffectModifier >(m, "FMaterialEffectModifier")
		.def(py::init<>())
		.def_readwrite("EffectName", &FMaterialEffectModifier::EffectName, py::return_value_policy::reference)
		.def_readwrite("ScalarParams", &FMaterialEffectModifier::ScalarParams, py::return_value_policy::reference)
		.def_readwrite("CachedValue", &FMaterialEffectModifier::CachedValue)
		.def_readwrite("MaterialInstance", &FMaterialEffectModifier::MaterialInstance, py::return_value_policy::reference)
		;
	py::class_< FDOFEffectModifierData >(m, "FDOFEffectModifierData")
		.def(py::init<>())
		.def_property("AutoRelcalculateFocusDistance", [](FDOFEffectModifierData &self){return self.AutoRelcalculateFocusDistance;}, [](FDOFEffectModifierData &self, bool value){self.AutoRelcalculateFocusDistance = value ? 1 : 0;})
		.def_readwrite("RecalculateFocusDistanceRate", &FDOFEffectModifierData::RecalculateFocusDistanceRate)
		.def_readwrite("FocusDistanceLerpRate", &FDOFEffectModifierData::FocusDistanceLerpRate)
		;
	py::class_< FPostProcessChainOptions >(m, "FPostProcessChainOptions")
		.def(py::init<>())
		.def_readwrite("MaterialEffectModifiers", &FPostProcessChainOptions::MaterialEffectModifiers, py::return_value_policy::reference)
		.def_readwrite("DOFEffectModifier", &FPostProcessChainOptions::DOFEffectModifier, py::return_value_policy::reference)
		;
	py::class_< FPostProcessOverlay >(m, "FPostProcessOverlay")
		.def(py::init<>())
		.def_property("ClearOverlayQueueAfterTransition", [](FPostProcessOverlay &self){return self.ClearOverlayQueueAfterTransition;}, [](FPostProcessOverlay &self, bool value){self.ClearOverlayQueueAfterTransition = value ? 1 : 0;})
		.def_readwrite("OverlayName", &FPostProcessOverlay::OverlayName, py::return_value_policy::reference)
		.def_readwrite("DestPostProcessOverlay", &FPostProcessOverlay::DestPostProcessOverlay, py::return_value_policy::reference)
		.def_readwrite("MinTransitionInDuration", &FPostProcessOverlay::MinTransitionInDuration)
		.def_readwrite("MinTransitionHoldDuration", &FPostProcessOverlay::MinTransitionHoldDuration)
		.def_readwrite("MinTransitionOutDuration", &FPostProcessOverlay::MinTransitionOutDuration)
		.def_readwrite("MaxTransitionInDuration", &FPostProcessOverlay::MaxTransitionInDuration)
		.def_readwrite("MaxTransitionHoldDuration", &FPostProcessOverlay::MaxTransitionHoldDuration)
		.def_readwrite("MaxTransitionOutDuration", &FPostProcessOverlay::MaxTransitionOutDuration)
		;
	py::class_< FAttributeDefinitionDefault >(m, "FAttributeDefinitionDefault")
		.def(py::init<>())
		.def_readwrite("Attribute", &FAttributeDefinitionDefault::Attribute, py::return_value_policy::reference)
		.def_readwrite("DefaultValue", &FAttributeDefinitionDefault::DefaultValue)
		;
	py::class_< FAttributeScalarParam >(m, "FAttributeScalarParam")
		.def(py::init<>())
		.def_property("bVectorParam", [](FAttributeScalarParam &self){return self.bVectorParam;}, [](FAttributeScalarParam &self, bool value){self.bVectorParam = value ? 1 : 0;})
		.def_property("bClampInput", [](FAttributeScalarParam &self){return self.bClampInput;}, [](FAttributeScalarParam &self, bool value){self.bClampInput = value ? 1 : 0;})
		.def_readwrite("ParamName", &FAttributeScalarParam::ParamName, py::return_value_policy::reference)
		.def_readwrite("Input", &FAttributeScalarParam::Input, py::return_value_policy::reference)
		.def_readwrite("MinInput", &FAttributeScalarParam::MinInput, py::return_value_policy::reference)
		.def_readwrite("MaxInput", &FAttributeScalarParam::MaxInput, py::return_value_policy::reference)
		.def_readwrite("MinOutput", &FAttributeScalarParam::MinOutput, py::return_value_policy::reference)
		.def_readwrite("MaxOutput", &FAttributeScalarParam::MaxOutput, py::return_value_policy::reference)
		.def_readwrite("ScalarParamOperand", &FAttributeScalarParam::ScalarParamOperand)
		.def_readwrite("CurrentValue", &FAttributeScalarParam::CurrentValue)
		;
	py::class_< FScreenParticleModifier >(m, "FScreenParticleModifier")
		.def(py::init<>())
		.def_readwrite("ScalarParams", &FScreenParticleModifier::ScalarParams, py::return_value_policy::reference)
		.def_readwrite("CachedValue", &FScreenParticleModifier::CachedValue)
		;
	py::class_< FScreenParticleScalarParamOverTime >(m, "FScreenParticleScalarParamOverTime")
		.def(py::init<>())
		.def_readwrite("ParameterName", &FScreenParticleScalarParamOverTime::ParameterName, py::return_value_policy::reference)
		.def_readwrite("TotalTime", &FScreenParticleScalarParamOverTime::TotalTime)
		.def_readwrite("StartValue", &FScreenParticleScalarParamOverTime::StartValue)
		.def_readwrite("EndValue", &FScreenParticleScalarParamOverTime::EndValue)
		.def_readwrite("LastValue", &FScreenParticleScalarParamOverTime::LastValue)
		;
	py::class_< FScreenParticleVectorParamOverTime >(m, "FScreenParticleVectorParamOverTime")
		.def(py::init<>())
		.def_readwrite("ParameterName", &FScreenParticleVectorParamOverTime::ParameterName, py::return_value_policy::reference)
		.def_readwrite("TotalTime", &FScreenParticleVectorParamOverTime::TotalTime)
		.def_readwrite("VectorStartValue", &FScreenParticleVectorParamOverTime::VectorStartValue, py::return_value_policy::reference)
		.def_readwrite("VectorEndValue", &FScreenParticleVectorParamOverTime::VectorEndValue, py::return_value_policy::reference)
		.def_readwrite("LastValue", &FScreenParticleVectorParamOverTime::LastValue, py::return_value_policy::reference)
		;
	py::class_< FScreenParticleParamOverTime >(m, "FScreenParticleParamOverTime")
		.def(py::init<>())
		.def_readwrite("ScalarParams", &FScreenParticleParamOverTime::ScalarParams, py::return_value_policy::reference)
		.def_readwrite("VectorParams", &FScreenParticleParamOverTime::VectorParams, py::return_value_policy::reference)
		;
	py::class_< FScreenParticleInitParams >(m, "FScreenParticleInitParams")
		.def(py::init<>())
		.def_property("bHideWhenFinished", [](FScreenParticleInitParams &self){return self.bHideWhenFinished;}, [](FScreenParticleInitParams &self, bool value){self.bHideWhenFinished = value ? 1 : 0;})
		.def_property("bOnlyOwnerSee", [](FScreenParticleInitParams &self){return self.bOnlyOwnerSee;}, [](FScreenParticleInitParams &self, bool value){self.bOnlyOwnerSee = value ? 1 : 0;})
		.def_readwrite("Template", &FScreenParticleInitParams::Template, py::return_value_policy::reference)
		.def_readwrite("ScreenParticleModifiers", &FScreenParticleInitParams::ScreenParticleModifiers, py::return_value_policy::reference)
		.def_readwrite("TemplateScreenParticleMaterial", &FScreenParticleInitParams::TemplateScreenParticleMaterial, py::return_value_policy::reference)
		.def_readwrite("MatParamName", &FScreenParticleInitParams::MatParamName, py::return_value_policy::reference)
		.def_readwrite("ParticleTag", &FScreenParticleInitParams::ParticleTag, py::return_value_policy::reference)
		.def_readwrite("ContentDims", &FScreenParticleInitParams::ContentDims, py::return_value_policy::reference)
		.def_readwrite("ParticleDepth", &FScreenParticleInitParams::ParticleDepth)
		.def_readwrite("ScalingMode", &FScreenParticleInitParams::ScalingMode)
		.def_readwrite("StopParamsOT", &FScreenParticleInitParams::StopParamsOT, py::return_value_policy::reference)
		;
	py::class_< FFDisplayTimer >(m, "FFDisplayTimer")
		.def(py::init<>())
		.def_property("bShowing", [](FFDisplayTimer &self){return self.bShowing;}, [](FFDisplayTimer &self, bool value){self.bShowing = value ? 1 : 0;})
		.def_readwrite("Timer", &FFDisplayTimer::Timer)
		.def_readwrite("Speed", &FFDisplayTimer::Speed)
		.def_readwrite("Value", &FFDisplayTimer::Value)
		;
	py::class_< FAssetLibConfig >(m, "FAssetLibConfig")
		.def(py::init<>())
		.def_readwrite("SublibraryBits", &FAssetLibConfig::SublibraryBits)
		.def_readwrite("AssetBits", &FAssetLibConfig::AssetBits)
		.def_readwrite("Desc", &FAssetLibConfig::Desc, py::return_value_policy::reference)
		.def_readwrite("LibraryType", &FAssetLibConfig::LibraryType, py::return_value_policy::reference)
		;
	py::class_< FSKULibrarySet >(m, "FSKULibrarySet")
		.def(py::init<>())
		.def_readwrite("Id", &FSKULibrarySet::Id)
		.def_readwrite("NameID", &FSKULibrarySet::NameID, py::return_value_policy::reference)
		.def_readwrite("LibrarySetPackage", &FSKULibrarySet::LibrarySetPackage, py::return_value_policy::reference)
		.def_readwrite("CachedDlcALDefRef", &FSKULibrarySet::CachedDlcALDefRef, py::return_value_policy::reference)
		;
	py::class_< FSKURuntimeLibrarySet >(m, "FSKURuntimeLibrarySet")
		.def(py::init<>())
		.def_readwrite("Id", &FSKURuntimeLibrarySet::Id)
		;
	py::class_< FModifierValuePresentationData >(m, "FModifierValuePresentationData")
		.def(py::init<>())
		.def_property("bShouldDisplay", [](FModifierValuePresentationData &self){return self.bShouldDisplay;}, [](FModifierValuePresentationData &self, bool value){self.bShouldDisplay = value ? 1 : 0;})
		.def_readwrite("AttributePresentation", &FModifierValuePresentationData::AttributePresentation, py::return_value_policy::reference)
		.def_readwrite("OptionalConstraintPresentation", &FModifierValuePresentationData::OptionalConstraintPresentation, py::return_value_policy::reference)
		.def_readwrite("ModifierValue", &FModifierValuePresentationData::ModifierValue)
		;
	py::class_< FAttributePresentationValueRemappingData >(m, "FAttributePresentationValueRemappingData")
		.def(py::init<>())
		.def_property("bUseContextOverride", [](FAttributePresentationValueRemappingData &self){return self.bUseContextOverride;}, [](FAttributePresentationValueRemappingData &self, bool value){self.bUseContextOverride = value ? 1 : 0;})
		.def_readwrite("InputValueMn", &FAttributePresentationValueRemappingData::InputValueMn, py::return_value_policy::reference)
		.def_readwrite("InputValueMx", &FAttributePresentationValueRemappingData::InputValueMx, py::return_value_policy::reference)
		.def_readwrite("OutputValueMn", &FAttributePresentationValueRemappingData::OutputValueMn, py::return_value_policy::reference)
		.def_readwrite("OutputValueMx", &FAttributePresentationValueRemappingData::OutputValueMx, py::return_value_policy::reference)
		;
	py::class_< FAttributePresentationDamageTypeMapping >(m, "FAttributePresentationDamageTypeMapping")
		.def(py::init<>())
		.def_readwrite("Presentation", &FAttributePresentationDamageTypeMapping::Presentation, py::return_value_policy::reference)
		.def_readwrite("DamageType", &FAttributePresentationDamageTypeMapping::DamageType, py::return_value_policy::reference)
		;
	py::class_< FStatusEffectTypeCommonProperties >(m, "FStatusEffectTypeCommonProperties")
		.def(py::init<>())
		.def_readwrite("StatusEffectType", &FStatusEffectTypeCommonProperties::StatusEffectType)
		.def_readwrite("EffectStartAkEvent", &FStatusEffectTypeCommonProperties::EffectStartAkEvent, py::return_value_policy::reference)
		.def_readwrite("EffectStopAkEvent", &FStatusEffectTypeCommonProperties::EffectStopAkEvent, py::return_value_policy::reference)
		;
	py::class_< FKillSkillDuration >(m, "FKillSkillDuration")
		.def(py::init<>())
		.def_readwrite("Players", &FKillSkillDuration::Players)
		.def_readwrite("Duration", &FKillSkillDuration::Duration)
		;
	py::class_< FDamageTypeExpModifier >(m, "FDamageTypeExpModifier")
		.def(py::init<>())
		.def_readwrite("DamageSource", &FDamageTypeExpModifier::DamageSource, py::return_value_policy::reference)
		.def_readwrite("TypeDefinition", &FDamageTypeExpModifier::TypeDefinition, py::return_value_policy::reference)
		.def_readwrite("Multiplier", &FDamageTypeExpModifier::Multiplier)
		;
	py::class_< FLevelBasedExpScale >(m, "FLevelBasedExpScale")
		.def(py::init<>())
		.def_readwrite("LevelDifference", &FLevelBasedExpScale::LevelDifference)
		.def_readwrite("HigherLevelEnemyExpScale", &FLevelBasedExpScale::HigherLevelEnemyExpScale)
		.def_readwrite("LowerLevelEnemyExpScale", &FLevelBasedExpScale::LowerLevelEnemyExpScale)
		;
	py::class_< FExpAwardWeight >(m, "FExpAwardWeight")
		.def(py::init<>())
		.def_readwrite("Players", &FExpAwardWeight::Players)
		.def_readwrite("KillerExpBonus", &FExpAwardWeight::KillerExpBonus)
		.def_readwrite("ExpWeight", &FExpAwardWeight::ExpWeight)
		;
	py::class_< FRarityLevelColor >(m, "FRarityLevelColor")
		.def(py::init<>())
		.def_readwrite("MinLevel", &FRarityLevelColor::MinLevel)
		.def_readwrite("MaxLevel", &FRarityLevelColor::MaxLevel)
		.def_readwrite("Color", &FRarityLevelColor::Color, py::return_value_policy::reference)
		.def_readwrite("DropLifeSpanType", &FRarityLevelColor::DropLifeSpanType)
		.def_readwrite("RarityRating", &FRarityLevelColor::RarityRating)
		;
	py::class_< FPlayThroughData >(m, "FPlayThroughData")
		.def(py::init<>())
		.def_readwrite("PlayThroughNumber", &FPlayThroughData::PlayThroughNumber)
		.def_readwrite("BalanceDefinitions", &FPlayThroughData::BalanceDefinitions, py::return_value_policy::reference)
		;
	py::class_< FLevelBasedDamageScale >(m, "FLevelBasedDamageScale")
		.def(py::init<>())
		.def_readwrite("LevelDifference", &FLevelBasedDamageScale::LevelDifference)
		.def_readwrite("HigherLevelAttackerDmgScale", &FLevelBasedDamageScale::HigherLevelAttackerDmgScale)
		.def_readwrite("LowerLevelAttackerDmgScale", &FLevelBasedDamageScale::LowerLevelAttackerDmgScale)
		;
	py::class_< FAchievementUnlockData >(m, "FAchievementUnlockData")
		.def(py::init<>())
		.def_readwrite("UnlockType", &FAchievementUnlockData::UnlockType)
		.def_readwrite("Achievement", &FAchievementUnlockData::Achievement)
		.def_readwrite("StringData", &FAchievementUnlockData::StringData, py::return_value_policy::reference)
		.def_readwrite("IntData", &FAchievementUnlockData::IntData)
		;
	py::class_< FSlaughterMissionChain >(m, "FSlaughterMissionChain")
		.def(py::init<>())
		.def_readwrite("SlaughterMissions", &FSlaughterMissionChain::SlaughterMissions, py::return_value_policy::reference)
		;
	py::class_< FInputContextData >(m, "FInputContextData")
		.def(py::init<>())
		.def_readwrite("ContextName", &FInputContextData::ContextName, py::return_value_policy::reference)
		.def_readwrite("Definition", &FInputContextData::Definition, py::return_value_policy::reference)
		;
	py::class_< FLevelBasedStatusEffectChanceScale >(m, "FLevelBasedStatusEffectChanceScale")
		.def(py::init<>())
		.def_readwrite("LevelDifference", &FLevelBasedStatusEffectChanceScale::LevelDifference)
		.def_readwrite("HigherLevelChanceScale", &FLevelBasedStatusEffectChanceScale::HigherLevelChanceScale)
		.def_readwrite("LowerLevelChanceScale", &FLevelBasedStatusEffectChanceScale::LowerLevelChanceScale)
		;
	py::class_< FBalanceModification >(m, "FBalanceModification")
		.def(py::init<>())
		.def_readwrite("MinEffectiveLevel", &FBalanceModification::MinEffectiveLevel)
		.def_readwrite("EnemyHealthMultiplier", &FBalanceModification::EnemyHealthMultiplier)
		.def_readwrite("BadassEnemyHealthMultiplier", &FBalanceModification::BadassEnemyHealthMultiplier)
		.def_readwrite("EnemyShieldStrengthMultiplier", &FBalanceModification::EnemyShieldStrengthMultiplier)
		.def_readwrite("BadassEnemyShieldStrengthMultiplier", &FBalanceModification::BadassEnemyShieldStrengthMultiplier)
		.def_readwrite("EnemyDamageMultiplier", &FBalanceModification::EnemyDamageMultiplier)
		.def_readwrite("BadassEnemyDamageMultiplier", &FBalanceModification::BadassEnemyDamageMultiplier)
		.def_readwrite("XPGainedFromCombatMultiplier", &FBalanceModification::XPGainedFromCombatMultiplier)
		.def_readwrite("XPGainedFromQuestsMultiplier", &FBalanceModification::XPGainedFromQuestsMultiplier)
		.def_readwrite("BadassRankGainMultiplier", &FBalanceModification::BadassRankGainMultiplier)
		.def_readwrite("AmplifiedDamageMultiplier", &FBalanceModification::AmplifiedDamageMultiplier)
		.def_readwrite("PlayerVehicleWeaponDamageMultiplier", &FBalanceModification::PlayerVehicleWeaponDamageMultiplier)
		.def_readwrite("AttributeEffectsForSpawnedEnemies", &FBalanceModification::AttributeEffectsForSpawnedEnemies, py::return_value_policy::reference)
		.def_readwrite("AttributeEffectsForPlayers", &FBalanceModification::AttributeEffectsForPlayers, py::return_value_policy::reference)
		.def_readwrite("AmmoDropsPerPlayerMultiplier", &FBalanceModification::AmmoDropsPerPlayerMultiplier, py::return_value_policy::reference)
		.def_readwrite("GearDrops_CommonWeightModifier_PT3_BaseValueOverride", &FBalanceModification::GearDrops_CommonWeightModifier_PT3_BaseValueOverride, py::return_value_policy::reference)
		.def_readwrite("ChestItemPool_Weight_2_Uncommon_PT3_Multiplier", &FBalanceModification::ChestItemPool_Weight_2_Uncommon_PT3_Multiplier, py::return_value_policy::reference)
		.def_readwrite("StatusEffectChanceScales", &FBalanceModification::StatusEffectChanceScales, py::return_value_policy::reference)
		.def_readwrite("AIDamageScaleByLevelDifference", &FBalanceModification::AIDamageScaleByLevelDifference, py::return_value_policy::reference)
		;
	py::class_< FBlackMarketPostLaunchUpgradeData >(m, "FBlackMarketPostLaunchUpgradeData")
		.def(py::init<>())
		.def_readwrite("EridiumCostForUpgrade", &FBlackMarketPostLaunchUpgradeData::EridiumCostForUpgrade)
		;
	py::class_< FMapSpecificBalanceModificationList >(m, "FMapSpecificBalanceModificationList")
		.def(py::init<>())
		.def_readwrite("MapName", &FMapSpecificBalanceModificationList::MapName, py::return_value_policy::reference)
		.def_readwrite("AIPawnBalanceModifiers", &FMapSpecificBalanceModificationList::AIPawnBalanceModifiers, py::return_value_policy::reference)
		;
	py::class_< FMissionDirectorData >(m, "FMissionDirectorData")
		.def(py::init<>())
		.def_property("bBeginsMission", [](FMissionDirectorData &self){return self.bBeginsMission;}, [](FMissionDirectorData &self, bool value){self.bBeginsMission = value ? 1 : 0;})
		.def_property("bEndsMission", [](FMissionDirectorData &self){return self.bEndsMission;}, [](FMissionDirectorData &self, bool value){self.bEndsMission = value ? 1 : 0;})
		.def_readwrite("MissionDefinition", &FMissionDirectorData::MissionDefinition, py::return_value_policy::reference)
		.def_readwrite("BranchEnding", &FMissionDirectorData::BranchEnding)
		;
	py::class_< FAIThrowProjectileBehaviorSequenceStateData >(m, "FAIThrowProjectileBehaviorSequenceStateData")
		.def(py::init<>())
		.def_readwrite("Action", &FAIThrowProjectileBehaviorSequenceStateData::Action)
		.def_readwrite("SequenceName", &FAIThrowProjectileBehaviorSequenceStateData::SequenceName, py::return_value_policy::reference)
		;
	py::class_< FTrajectoryData >(m, "FTrajectoryData")
		.def(py::init<>())
		.def_readwrite("Speed", &FTrajectoryData::Speed)
		.def_readwrite("AnglePct", &FTrajectoryData::AnglePct)
		.def_readwrite("Angle", &FTrajectoryData::Angle)
		.def_readwrite("Error", &FTrajectoryData::Error)
		.def_readwrite("Offset", &FTrajectoryData::Offset, py::return_value_policy::reference)
		.def_readwrite("PredictDistMax", &FTrajectoryData::PredictDistMax)
		;
	py::class_< FBehaviorCondition >(m, "FBehaviorCondition")
		.def(py::init<>())
		.def_readwrite("ConditionId", &FBehaviorCondition::ConditionId)
		.def_readwrite("Condition", &FBehaviorCondition::Condition, py::return_value_policy::reference)
		.def_readwrite("Behaviors", &FBehaviorCondition::Behaviors, py::return_value_policy::reference)
		;
	py::class_< FBehaviorsSelectionData >(m, "FBehaviorsSelectionData")
		.def(py::init<>())
		.def_readwrite("Weight", &FBehaviorsSelectionData::Weight, py::return_value_policy::reference)
		.def_readwrite("Behaviors", &FBehaviorsSelectionData::Behaviors, py::return_value_policy::reference)
		;
	py::class_< UBehavior_SpawnProjectile_FProjectileBehaviorSequenceStateData >(m, "UBehavior_SpawnProjectile_FProjectileBehaviorSequenceStateData")
		.def_readwrite("Action", &UBehavior_SpawnProjectile_FProjectileBehaviorSequenceStateData::Action)
		.def_readwrite("SequenceName", &UBehavior_SpawnProjectile_FProjectileBehaviorSequenceStateData::SequenceName, py::return_value_policy::reference)
		;
	py::class_< FMissionStateSelectionData >(m, "FMissionStateSelectionData")
		.def(py::init<>())
		.def_property("bNotStarted", [](FMissionStateSelectionData &self){return self.bNotStarted;}, [](FMissionStateSelectionData &self, bool value){self.bNotStarted = value ? 1 : 0;})
		.def_property("bActive", [](FMissionStateSelectionData &self){return self.bActive;}, [](FMissionStateSelectionData &self, bool value){self.bActive = value ? 1 : 0;})
		.def_property("bRequiredObjectivesComplete", [](FMissionStateSelectionData &self){return self.bRequiredObjectivesComplete;}, [](FMissionStateSelectionData &self, bool value){self.bRequiredObjectivesComplete = value ? 1 : 0;})
		.def_property("bReadyToTurnIn", [](FMissionStateSelectionData &self){return self.bReadyToTurnIn;}, [](FMissionStateSelectionData &self, bool value){self.bReadyToTurnIn = value ? 1 : 0;})
		.def_property("bComplete", [](FMissionStateSelectionData &self){return self.bComplete;}, [](FMissionStateSelectionData &self, bool value){self.bComplete = value ? 1 : 0;})
		.def_property("bFailed", [](FMissionStateSelectionData &self){return self.bFailed;}, [](FMissionStateSelectionData &self, bool value){self.bFailed = value ? 1 : 0;})
		;
	py::class_< FMissionObjectiveStateSelectionData >(m, "FMissionObjectiveStateSelectionData")
		.def(py::init<>())
		.def_property("bNotStarted", [](FMissionObjectiveStateSelectionData &self){return self.bNotStarted;}, [](FMissionObjectiveStateSelectionData &self, bool value){self.bNotStarted = value ? 1 : 0;})
		.def_property("bActive", [](FMissionObjectiveStateSelectionData &self){return self.bActive;}, [](FMissionObjectiveStateSelectionData &self, bool value){self.bActive = value ? 1 : 0;})
		.def_property("bComplete", [](FMissionObjectiveStateSelectionData &self){return self.bComplete;}, [](FMissionObjectiveStateSelectionData &self, bool value){self.bComplete = value ? 1 : 0;})
		;
	py::class_< FBlackMarketUpgradeLevelData >(m, "FBlackMarketUpgradeLevelData")
		.def(py::init<>())
		.def_readwrite("UpgradeDefinition", &FBlackMarketUpgradeLevelData::UpgradeDefinition, py::return_value_policy::reference)
		.def_readwrite("MaxUpgradeLevel", &FBlackMarketUpgradeLevelData::MaxUpgradeLevel)
		;
	py::class_< FTechDeathData, FSpecializedBehaviorEvent >(m, "FTechDeathData")
		.def(py::init<>())
		.def_readwrite("DamageTypeTriggers", &FTechDeathData::DamageTypeTriggers, py::return_value_policy::reference)
		.def_readwrite("DeathAnimation", &FTechDeathData::DeathAnimation, py::return_value_policy::reference)
		;
	py::class_< FRtpcParameterValue >(m, "FRtpcParameterValue")
		.def(py::init<>())
		.def_readwrite("AkRtpc", &FRtpcParameterValue::AkRtpc, py::return_value_policy::reference)
		.def_readwrite("Value", &FRtpcParameterValue::Value)
		;
	py::class_< FImpactResponseParameters >(m, "FImpactResponseParameters")
		.def(py::init<>())
		.def_property("bNoSound", [](FImpactResponseParameters &self){return self.bNoSound;}, [](FImpactResponseParameters &self, bool value){self.bNoSound = value ? 1 : 0;})
		.def_readwrite("ParticleParameters", &FImpactResponseParameters::ParticleParameters, py::return_value_policy::reference)
		.def_readwrite("FontParameterValues", &FImpactResponseParameters::FontParameterValues, py::return_value_policy::reference)
		.def_readwrite("ScalarParameterValues", &FImpactResponseParameters::ScalarParameterValues, py::return_value_policy::reference)
		.def_readwrite("TextureParameterValues", &FImpactResponseParameters::TextureParameterValues, py::return_value_policy::reference)
		.def_readwrite("VectorParameterValues", &FImpactResponseParameters::VectorParameterValues, py::return_value_policy::reference)
		.def_readwrite("RtpcParameterValues", &FImpactResponseParameters::RtpcParameterValues, py::return_value_policy::reference)
		;
	py::class_< FImpactResponseEffect >(m, "FImpactResponseEffect")
		.def(py::init<>())
		.def_property("bCensorThisEffect", [](FImpactResponseEffect &self){return self.bCensorThisEffect;}, [](FImpactResponseEffect &self, bool value){self.bCensorThisEffect = value ? 1 : 0;})
		.def_property("bAttachParticleToHitActor", [](FImpactResponseEffect &self){return self.bAttachParticleToHitActor;}, [](FImpactResponseEffect &self, bool value){self.bAttachParticleToHitActor = value ? 1 : 0;})
		.def_property("bHideEffectFromHitActor", [](FImpactResponseEffect &self){return self.bHideEffectFromHitActor;}, [](FImpactResponseEffect &self, bool value){self.bHideEffectFromHitActor = value ? 1 : 0;})
		.def_property("DecalRandomRotation", [](FImpactResponseEffect &self){return self.DecalRandomRotation;}, [](FImpactResponseEffect &self, bool value){self.DecalRandomRotation = value ? 1 : 0;})
		.def_property("DecalCreateNewMaterialInstanceConstant", [](FImpactResponseEffect &self){return self.DecalCreateNewMaterialInstanceConstant;}, [](FImpactResponseEffect &self, bool value){self.DecalCreateNewMaterialInstanceConstant = value ? 1 : 0;})
		.def_readwrite("CensoredEffectAlternative", &FImpactResponseEffect::CensoredEffectAlternative, py::return_value_policy::reference)
		.def_readwrite("DamageModifierPercent", &FImpactResponseEffect::DamageModifierPercent)
		.def_readwrite("ImpactEvent", &FImpactResponseEffect::ImpactEvent, py::return_value_policy::reference)
		.def_readwrite("AINoiseLevel", &FImpactResponseEffect::AINoiseLevel)
		.def_readwrite("ParticleTemplate", &FImpactResponseEffect::ParticleTemplate, py::return_value_policy::reference)
		.def_readwrite("MaxEffectDistance", &FImpactResponseEffect::MaxEffectDistance)
		.def_readwrite("DecalMaterials", &FImpactResponseEffect::DecalMaterials, py::return_value_policy::reference)
		.def_readwrite("DecalWidth", &FImpactResponseEffect::DecalWidth)
		.def_readwrite("DecalHeight", &FImpactResponseEffect::DecalHeight)
		.def_readwrite("DecalMinScale", &FImpactResponseEffect::DecalMinScale)
		.def_readwrite("DecalMaxScale", &FImpactResponseEffect::DecalMaxScale)
		.def_readwrite("DecalDepth", &FImpactResponseEffect::DecalDepth)
		.def_readwrite("ImpactFlashLightClass", &FImpactResponseEffect::ImpactFlashLightClass, py::return_value_policy::reference)
		.def_readwrite("EffectParameters", &FImpactResponseEffect::EffectParameters, py::return_value_policy::reference)
		;
	py::class_< FImpactResponseData >(m, "FImpactResponseData")
		.def(py::init<>())
		.def_readwrite("ImpactType", &FImpactResponseData::ImpactType, py::return_value_policy::reference)
		.def_readwrite("ResponseEffect", &FImpactResponseData::ResponseEffect, py::return_value_policy::reference)
		;
	py::class_< FWheelSlipModifierData >(m, "FWheelSlipModifierData")
		.def(py::init<>())
		.def_readwrite("LongSlipFactor", &FWheelSlipModifierData::LongSlipFactor)
		.def_readwrite("LatSlipFactor", &FWheelSlipModifierData::LatSlipFactor)
		;
	py::class_< FDamageReactionData, FSpecializedBehaviorEvent >(m, "FDamageReactionData")
		.def(py::init<>())
		.def_property("bDamageThreshold", [](FDamageReactionData &self){return self.bDamageThreshold;}, [](FDamageReactionData &self, bool value){self.bDamageThreshold = value ? 1 : 0;})
		.def_property("bRepeatableEvent", [](FDamageReactionData &self){return self.bRepeatableEvent;}, [](FDamageReactionData &self, bool value){self.bRepeatableEvent = value ? 1 : 0;})
		.def_property("bCensored", [](FDamageReactionData &self){return self.bCensored;}, [](FDamageReactionData &self, bool value){self.bCensored = value ? 1 : 0;})
		.def_property("bOnlyTriggeredOnOwnerDeath", [](FDamageReactionData &self){return self.bOnlyTriggeredOnOwnerDeath;}, [](FDamageReactionData &self, bool value){self.bOnlyTriggeredOnOwnerDeath = value ? 1 : 0;})
		.def_readwrite("DamageTriggers", &FDamageReactionData::DamageTriggers, py::return_value_policy::reference)
		.def_readwrite("PercentOfHealthTrigger", &FDamageReactionData::PercentOfHealthTrigger)
		.def_readwrite("DamageSpecialMove", &FDamageReactionData::DamageSpecialMove, py::return_value_policy::reference)
		.def_readwrite("ReactionBehaviors", &FDamageReactionData::ReactionBehaviors, py::return_value_policy::reference)
		;
	py::class_< FGoreTriggerData >(m, "FGoreTriggerData")
		.def(py::init<>())
		.def_readwrite("DamageTypeTrigger", &FGoreTriggerData::DamageTypeTrigger, py::return_value_policy::reference)
		.def_readwrite("DamageSourceTrigger", &FGoreTriggerData::DamageSourceTrigger, py::return_value_policy::reference)
		.def_readwrite("HealthPctDamageThreshold", &FGoreTriggerData::HealthPctDamageThreshold)
		;
	py::class_< FExtraWeaponSlot >(m, "FExtraWeaponSlot")
		.def(py::init<>())
		.def_property("bShowWeaponMesh", [](FExtraWeaponSlot &self){return self.bShowWeaponMesh;}, [](FExtraWeaponSlot &self, bool value){self.bShowWeaponMesh = value ? 1 : 0;})
		.def_readwrite("Socket", &FExtraWeaponSlot::Socket, py::return_value_policy::reference)
		.def_readwrite("Mesh", &FExtraWeaponSlot::Mesh, py::return_value_policy::reference)
		.def_readwrite("MuzzleFlash", &FExtraWeaponSlot::MuzzleFlash, py::return_value_policy::reference)
		.def_readwrite("AltMuzzleFlashes", &FExtraWeaponSlot::AltMuzzleFlashes, py::return_value_policy::reference)
		.def_readwrite("MuzzleFlashLight", &FExtraWeaponSlot::MuzzleFlashLight, py::return_value_policy::reference)
		;
	py::class_< FPainDialogLine >(m, "FPainDialogLine")
		.def(py::init<>())
		.def_property("bDeathSound", [](FPainDialogLine &self){return self.bDeathSound;}, [](FPainDialogLine &self, bool value){self.bDeathSound = value ? 1 : 0;})
		.def_property("bCriticalHitSound", [](FPainDialogLine &self){return self.bCriticalHitSound;}, [](FPainDialogLine &self, bool value){self.bCriticalHitSound = value ? 1 : 0;})
		.def_property("bRanOverSound", [](FPainDialogLine &self){return self.bRanOverSound;}, [](FPainDialogLine &self, bool value){self.bRanOverSound = value ? 1 : 0;})
		.def_property("bGoreTechDeathSound", [](FPainDialogLine &self){return self.bGoreTechDeathSound;}, [](FPainDialogLine &self, bool value){self.bGoreTechDeathSound = value ? 1 : 0;})
		.def_readwrite("DET_Pain", &FPainDialogLine::DET_Pain, py::return_value_policy::reference)
		.def_readwrite("DamageThresholdPct", &FPainDialogLine::DamageThresholdPct)
		.def_readwrite("ChanceToPlay", &FPainDialogLine::ChanceToPlay)
		.def_readwrite("AkEvent", &FPainDialogLine::AkEvent, py::return_value_policy::reference)
		.def_readwrite("FlinchAnimType", &FPainDialogLine::FlinchAnimType)
		.def_readwrite("FlinchImpulseStrength", &FPainDialogLine::FlinchImpulseStrength)
		.def_readwrite("PainBehaviors", &FPainDialogLine::PainBehaviors, py::return_value_policy::reference)
		;
	py::class_< FCustomCringeData >(m, "FCustomCringeData")
		.def(py::init<>())
		.def_property("bDOT", [](FCustomCringeData &self){return self.bDOT;}, [](FCustomCringeData &self, bool value){self.bDOT = value ? 1 : 0;})
		.def_readwrite("DamageType", &FCustomCringeData::DamageType)
		.def_readwrite("Cringes", &FCustomCringeData::Cringes, py::return_value_policy::reference)
		;
	py::class_< FBreathingLoopInfo >(m, "FBreathingLoopInfo")
		.def(py::init<>())
		.def_readwrite("Condition", &FBreathingLoopInfo::Condition, py::return_value_policy::reference)
		.def_readwrite("StartAkEvent", &FBreathingLoopInfo::StartAkEvent, py::return_value_policy::reference)
		.def_readwrite("StopAkEvent", &FBreathingLoopInfo::StopAkEvent, py::return_value_policy::reference)
		;
	py::class_< FInjuredLoopOverride >(m, "FInjuredLoopOverride")
		.def(py::init<>())
		.def_readwrite("NameTag", &FInjuredLoopOverride::NameTag, py::return_value_policy::reference)
		.def_readwrite("StartAkEvent", &FInjuredLoopOverride::StartAkEvent, py::return_value_policy::reference)
		;
	py::class_< FVehicleCrewMappingStruct >(m, "FVehicleCrewMappingStruct")
		.def(py::init<>())
		.def_readwrite("VehicleArchetypeName", &FVehicleCrewMappingStruct::VehicleArchetypeName, py::return_value_policy::reference)
		.def_readwrite("AnimSet", &FVehicleCrewMappingStruct::AnimSet, py::return_value_policy::reference)
		;
	py::class_< FConditionalAnimData >(m, "FConditionalAnimData")
		.def(py::init<>())
		.def_readwrite("Expression", &FConditionalAnimData::Expression, py::return_value_policy::reference)
		.def_readwrite("SpecialMove", &FConditionalAnimData::SpecialMove, py::return_value_policy::reference)
		;
	py::class_< FBodyWeaponActionData >(m, "FBodyWeaponActionData")
		.def(py::init<>())
		.def_readwrite("Action", &FBodyWeaponActionData::Action)
		.def_readwrite("Expression", &FBodyWeaponActionData::Expression, py::return_value_policy::reference)
		.def_readwrite("Animations", &FBodyWeaponActionData::Animations, py::return_value_policy::reference)
		;
	py::class_< FBodyWeaponActionPostureData >(m, "FBodyWeaponActionPostureData")
		.def(py::init<>())
		.def_readwrite("Posture", &FBodyWeaponActionPostureData::Posture)
		.def_readwrite("Actions", &FBodyWeaponActionPostureData::Actions, py::return_value_policy::reference)
		;
	py::class_< FBodyHandIKHoldData >(m, "FBodyHandIKHoldData")
		.def(py::init<>())
		.def_readwrite("JointLocation", &FBodyHandIKHoldData::JointLocation, py::return_value_policy::reference)
		.def_readwrite("HandLocation", &FBodyHandIKHoldData::HandLocation, py::return_value_policy::reference)
		.def_readwrite("HandRotation", &FBodyHandIKHoldData::HandRotation, py::return_value_policy::reference)
		;
	py::class_< FCustomBodyHandIKHoldData >(m, "FCustomBodyHandIKHoldData")
		.def(py::init<>())
		.def_readwrite("HoldName", &FCustomBodyHandIKHoldData::HoldName, py::return_value_policy::reference)
		.def_readwrite("IKData", &FCustomBodyHandIKHoldData::IKData, py::return_value_policy::reference)
		;
	py::class_< FCellInfo >(m, "FCellInfo")
		.def(py::init<>())
		.def_readwrite("AbsolutePosition", &FCellInfo::AbsolutePosition, py::return_value_policy::reference)
		.def_readwrite("Width", &FCellInfo::Width)
		.def_readwrite("Height", &FCellInfo::Height)
		.def_readwrite("CellName", &FCellInfo::CellName, py::return_value_policy::reference)
		;
	py::class_< FMoveToCellData >(m, "FMoveToCellData")
		.def(py::init<>())
		.def_readwrite("IndexInCellsList", &FMoveToCellData::IndexInCellsList)
		.def_readwrite("DistanceFromCurrentCell", &FMoveToCellData::DistanceFromCurrentCell)
		.def_readwrite("CosAngle", &FMoveToCellData::CosAngle)
		;
	py::class_< FConditionLevel >(m, "FConditionLevel")
		.def(py::init<>())
		.def_readwrite("ConditionDefinitions", &FConditionLevel::ConditionDefinitions, py::return_value_policy::reference)
		.def_readwrite("ProgressNotificationOverride", &FConditionLevel::ProgressNotificationOverride, py::return_value_policy::reference)
		.def_readwrite("CompletedAttributeEffects", &FConditionLevel::CompletedAttributeEffects, py::return_value_policy::reference)
		.def_readwrite("BadassPointReward", &FConditionLevel::BadassPointReward, py::return_value_policy::reference)
		.def_readwrite("RewardItemPool", &FConditionLevel::RewardItemPool, py::return_value_policy::reference)
		.def_readwrite("RewardTextKey", &FConditionLevel::RewardTextKey, py::return_value_policy::reference)
		;
	py::class_< FChallengeData >(m, "FChallengeData")
		.def(py::init<>())
		.def_readwrite("PCOwner", &FChallengeData::PCOwner, py::return_value_policy::reference)
		.def_readwrite("ChallengeDefinition", &FChallengeData::ChallengeDefinition, py::return_value_policy::reference)
		;
	py::class_< FTargetedPlayerState >(m, "FTargetedPlayerState")
		.def(py::init<>())
		.def_property("bIsPlayerPet", [](FTargetedPlayerState &self){return self.bIsPlayerPet;}, [](FTargetedPlayerState &self, bool value){self.bIsPlayerPet = value ? 1 : 0;})
		.def_readwrite("Enemy", &FTargetedPlayerState::Enemy, py::return_value_policy::reference)
		.def_readwrite("Player", &FTargetedPlayerState::Player, py::return_value_policy::reference)
		.def_readwrite("InitialThreat", &FTargetedPlayerState::InitialThreat)
		.def_readwrite("StoppedTargetingPlayerTime", &FTargetedPlayerState::StoppedTargetingPlayerTime)
		;
	py::class_< FCoordinatedScalarParameter >(m, "FCoordinatedScalarParameter")
		.def(py::init<>())
		.def_property("bConvertAxisToWorldSpace", [](FCoordinatedScalarParameter &self){return self.bConvertAxisToWorldSpace;}, [](FCoordinatedScalarParameter &self, bool value){self.bConvertAxisToWorldSpace = value ? 1 : 0;})
		.def_readwrite("ParamName", &FCoordinatedScalarParameter::ParamName, py::return_value_policy::reference)
		.def_readwrite("ParamValueOverTime", &FCoordinatedScalarParameter::ParamValueOverTime, py::return_value_policy::reference)
		.def_readwrite("BoundsScale", &FCoordinatedScalarParameter::BoundsScale)
		;
	py::class_< FCoordinatedVectorParameter >(m, "FCoordinatedVectorParameter")
		.def(py::init<>())
		.def_readwrite("ParamName", &FCoordinatedVectorParameter::ParamName, py::return_value_policy::reference)
		.def_readwrite("ParamValueOverTime", &FCoordinatedVectorParameter::ParamValueOverTime, py::return_value_policy::reference)
		;
	py::class_< FCoordinatedParticleSystemDefinition >(m, "FCoordinatedParticleSystemDefinition")
		.def(py::init<>())
		.def_readwrite("ParticleSystem", &FCoordinatedParticleSystemDefinition::ParticleSystem, py::return_value_policy::reference)
		.def_readwrite("LocationOffset", &FCoordinatedParticleSystemDefinition::LocationOffset, py::return_value_policy::reference)
		.def_readwrite("RotationOffset", &FCoordinatedParticleSystemDefinition::RotationOffset, py::return_value_policy::reference)
		.def_readwrite("TriggerTime", &FCoordinatedParticleSystemDefinition::TriggerTime)
		.def_readwrite("ParticleScale", &FCoordinatedParticleSystemDefinition::ParticleScale)
		.def_readwrite("Parameters", &FCoordinatedParticleSystemDefinition::Parameters, py::return_value_policy::reference)
		.def_readwrite("VectorParameters", &FCoordinatedParticleSystemDefinition::VectorParameters, py::return_value_policy::reference)
		.def_readwrite("ScaleByObjectSize", &FCoordinatedParticleSystemDefinition::ScaleByObjectSize)
		;
	py::class_< FCoordinatedAudioDefinition >(m, "FCoordinatedAudioDefinition")
		.def(py::init<>())
		.def_readwrite("TriggerEvent", &FCoordinatedAudioDefinition::TriggerEvent, py::return_value_policy::reference)
		.def_readwrite("TriggerTime", &FCoordinatedAudioDefinition::TriggerTime)
		.def_readwrite("RTPC", &FCoordinatedAudioDefinition::RTPC, py::return_value_policy::reference)
		.def_readwrite("RTPCOverTime", &FCoordinatedAudioDefinition::RTPCOverTime, py::return_value_policy::reference)
		;
	py::class_< FCurrencyPresentation >(m, "FCurrencyPresentation")
		.def(py::init<>())
		.def_readwrite("Type", &FCurrencyPresentation::Type)
		.def_readwrite("WidgetFrame", &FCurrencyPresentation::WidgetFrame, py::return_value_policy::reference)
		.def_readwrite("WidgetClip", &FCurrencyPresentation::WidgetClip, py::return_value_policy::reference)
		;
	py::class_< FSourceObjectData >(m, "FSourceObjectData")
		.def(py::init<>())
		.def_property("bFullDamage", [](FSourceObjectData &self){return self.bFullDamage;}, [](FSourceObjectData &self, bool value){self.bFullDamage = value ? 1 : 0;})
		.def_property("bCanDamageFriendlies", [](FSourceObjectData &self){return self.bCanDamageFriendlies;}, [](FSourceObjectData &self, bool value){self.bCanDamageFriendlies = value ? 1 : 0;})
		.def_property("bSkipTraceTest", [](FSourceObjectData &self){return self.bSkipTraceTest;}, [](FSourceObjectData &self, bool value){self.bSkipTraceTest = value ? 1 : 0;})
		.def_readwrite("UniqueId", &FSourceObjectData::UniqueId)
		.def_readwrite("SourceObject", &FSourceObjectData::SourceObject, py::return_value_policy::reference)
		.def_readwrite("SourceLocation", &FSourceObjectData::SourceLocation, py::return_value_policy::reference)
		.def_readwrite("InstigatedByController", &FSourceObjectData::InstigatedByController, py::return_value_policy::reference)
		.def_readwrite("DamageContext", &FSourceObjectData::DamageContext)
		.def_readwrite("StartDamageTime", &FSourceObjectData::StartDamageTime)
		.def_readwrite("TimeElapsedSinceLastDamage", &FSourceObjectData::TimeElapsedSinceLastDamage)
		.def_readwrite("ExplosionDef", &FSourceObjectData::ExplosionDef, py::return_value_policy::reference)
		.def_readwrite("ExplosionScaleIndex", &FSourceObjectData::ExplosionScaleIndex)
		.def_readwrite("InitialDamageRadius", &FSourceObjectData::InitialDamageRadius)
		.def_readwrite("Damage", &FSourceObjectData::Damage)
		.def_readwrite("Momentum", &FSourceObjectData::Momentum)
		.def_readwrite("DamageSource", &FSourceObjectData::DamageSource, py::return_value_policy::reference)
		.def_readwrite("DamageTypeDef", &FSourceObjectData::DamageTypeDef, py::return_value_policy::reference)
		.def_readwrite("ImpactDefinition", &FSourceObjectData::ImpactDefinition, py::return_value_policy::reference)
		.def_readwrite("DamageCauser", &FSourceObjectData::DamageCauser)
		.def_readwrite("HitObject", &FSourceObjectData::HitObject, py::return_value_policy::reference)
		.def_readwrite("BarrelSourceTime", &FSourceObjectData::BarrelSourceTime)
		.def_readwrite("PlantSourceTime", &FSourceObjectData::PlantSourceTime)
		;
	py::class_< FDamageOnlyOnceData >(m, "FDamageOnlyOnceData")
		.def(py::init<>())
		.def_readwrite("UniqueId", &FDamageOnlyOnceData::UniqueId)
		.def_readwrite("HurtActor", &FDamageOnlyOnceData::HurtActor, py::return_value_policy::reference)
		;
	py::class_< FDamageTypeSelectorData >(m, "FDamageTypeSelectorData")
		.def(py::init<>())
		.def_readwrite("AssociatedDamageTypeName", &FDamageTypeSelectorData::AssociatedDamageTypeName, py::return_value_policy::reference)
		.def_readwrite("ValueIfMatched", &FDamageTypeSelectorData::ValueIfMatched, py::return_value_policy::reference)
		;
	py::class_< FDefinitionIconDatum >(m, "FDefinitionIconDatum")
		.def(py::init<>())
		.def_readwrite("DefColor", &FDefinitionIconDatum::DefColor, py::return_value_policy::reference)
		.def_readwrite("DefIcon", &FDefinitionIconDatum::DefIcon, py::return_value_policy::reference)
		.def_readwrite("DefClass", &FDefinitionIconDatum::DefClass, py::return_value_policy::reference)
		;
	py::class_< FLegacyCustomizationItemData >(m, "FLegacyCustomizationItemData")
		.def(py::init<>())
		.def_readwrite("ItemPoolDefPath", &FLegacyCustomizationItemData::ItemPoolDefPath, py::return_value_policy::reference)
		.def_readwrite("ItemPoolKey", &FLegacyCustomizationItemData::ItemPoolKey)
		.def_readwrite("CustomizationItemPool", &FLegacyCustomizationItemData::CustomizationItemPool, py::return_value_policy::reference)
		;
	py::class_< FPremiumCustomizationInfo >(m, "FPremiumCustomizationInfo")
		.def(py::init<>())
		.def_readwrite("OfferId", &FPremiumCustomizationInfo::OfferId)
		.def_readwrite("PackageId", &FPremiumCustomizationInfo::PackageId)
		.def_readwrite("ContentId", &FPremiumCustomizationInfo::ContentId)
		.def_readwrite("PS3TitleId", &FPremiumCustomizationInfo::PS3TitleId, py::return_value_policy::reference)
		;
	py::class_< FDlcLevelTravelPair >(m, "FDlcLevelTravelPair")
		.def(py::init<>())
		.def_readwrite("NonDlcStationDef", &FDlcLevelTravelPair::NonDlcStationDef, py::return_value_policy::reference)
		.def_readwrite("DlcStationDef", &FDlcLevelTravelPair::DlcStationDef, py::return_value_policy::reference)
		;
	py::class_< FConditionalParticleEffectData >(m, "FConditionalParticleEffectData")
		.def(py::init<>())
		.def_readwrite("Expression", &FConditionalParticleEffectData::Expression, py::return_value_policy::reference)
		.def_readwrite("ParticleEffect", &FConditionalParticleEffectData::ParticleEffect, py::return_value_policy::reference)
		;
	py::class_< FConditionalExplosionData >(m, "FConditionalExplosionData")
		.def(py::init<>())
		.def_readwrite("Expression", &FConditionalExplosionData::Expression, py::return_value_policy::reference)
		.def_readwrite("Explosion", &FConditionalExplosionData::Explosion, py::return_value_policy::reference)
		;
	py::class_< FExplosionScaleData >(m, "FExplosionScaleData")
		.def(py::init<>())
		.def_property("bDamageOverPeriodOfTime", [](FExplosionScaleData &self){return self.bDamageOverPeriodOfTime;}, [](FExplosionScaleData &self, bool value){self.bDamageOverPeriodOfTime = value ? 1 : 0;})
		.def_property("bDamageEachTargetOnlyOnce", [](FExplosionScaleData &self){return self.bDamageEachTargetOnlyOnce;}, [](FExplosionScaleData &self, bool value){self.bDamageEachTargetOnlyOnce = value ? 1 : 0;})
		.def_property("bExpandRadiusOverTime", [](FExplosionScaleData &self){return self.bExpandRadiusOverTime;}, [](FExplosionScaleData &self, bool value){self.bExpandRadiusOverTime = value ? 1 : 0;})
		.def_readwrite("ExplosionPSTemplate", &FExplosionScaleData::ExplosionPSTemplate, py::return_value_policy::reference)
		.def_readwrite("MinRadius", &FExplosionScaleData::MinRadius)
		.def_readwrite("MaxRadius", &FExplosionScaleData::MaxRadius)
		.def_readwrite("MinParticleScale", &FExplosionScaleData::MinParticleScale)
		.def_readwrite("MaxParticleScale", &FExplosionScaleData::MaxParticleScale)
		.def_readwrite("ExplosionAkEvent", &FExplosionScaleData::ExplosionAkEvent, py::return_value_policy::reference)
		.def_readwrite("CameraAnim", &FExplosionScaleData::CameraAnim, py::return_value_policy::reference)
		.def_readwrite("MinCameraEffectDistance", &FExplosionScaleData::MinCameraEffectDistance)
		.def_readwrite("MaxCameraEffectDistance", &FExplosionScaleData::MaxCameraEffectDistance)
		.def_readwrite("FFWaveform", &FExplosionScaleData::FFWaveform, py::return_value_policy::reference)
		.def_readwrite("ImpactEffect", &FExplosionScaleData::ImpactEffect, py::return_value_policy::reference)
		.def_readwrite("MaxDamageDuration", &FExplosionScaleData::MaxDamageDuration)
		.def_readwrite("DamageInterval", &FExplosionScaleData::DamageInterval)
		;
	py::class_< FRecentExplosion >(m, "FRecentExplosion")
		.def(py::init<>())
		.def_readwrite("ExplosionInstigatorName", &FRecentExplosion::ExplosionInstigatorName, py::return_value_policy::reference)
		.def_readwrite("ExplosionLocation", &FRecentExplosion::ExplosionLocation, py::return_value_policy::reference)
		.def_readwrite("ExpirationTime", &FRecentExplosion::ExpirationTime)
		;
	py::class_< FWaveMotionData >(m, "FWaveMotionData")
		.def(py::init<>())
		.def_property("bUseCustomWaveMotion", [](FWaveMotionData &self){return self.bUseCustomWaveMotion;}, [](FWaveMotionData &self, bool value){self.bUseCustomWaveMotion = value ? 1 : 0;})
		.def_readwrite("WaveFreq", &FWaveMotionData::WaveFreq, py::return_value_policy::reference)
		.def_readwrite("WaveAmp", &FWaveMotionData::WaveAmp, py::return_value_policy::reference)
		.def_readwrite("WavePhase", &FWaveMotionData::WavePhase, py::return_value_policy::reference)
		;
	py::class_< FBulletImpactEventData >(m, "FBulletImpactEventData")
		.def(py::init<>())
		.def_property("bDisableRegularBulletDamage", [](FBulletImpactEventData &self){return self.bDisableRegularBulletDamage;}, [](FBulletImpactEventData &self, bool value){self.bDisableRegularBulletDamage = value ? 1 : 0;})
		.def_readwrite("DamageSurfaceType", &FBulletImpactEventData::DamageSurfaceType)
		.def_readwrite("Behaviors", &FBulletImpactEventData::Behaviors, py::return_value_policy::reference)
		;
	py::class_< FBulletEventResponse >(m, "FBulletEventResponse")
		.def(py::init<>())
		.def_property("bDetonate", [](FBulletEventResponse &self){return self.bDetonate;}, [](FBulletEventResponse &self, bool value){self.bDetonate = value ? 1 : 0;})
		.def_property("bRespawnTracer", [](FBulletEventResponse &self){return self.bRespawnTracer;}, [](FBulletEventResponse &self, bool value){self.bRespawnTracer = value ? 1 : 0;})
		.def_property("bUpdateBeamSourceLocation", [](FBulletEventResponse &self){return self.bUpdateBeamSourceLocation;}, [](FBulletEventResponse &self, bool value){self.bUpdateBeamSourceLocation = value ? 1 : 0;})
		.def_readwrite("SplitNum", &FBulletEventResponse::SplitNum)
		.def_readwrite("SplitAngle", &FBulletEventResponse::SplitAngle)
		.def_readwrite("SplitAngleOffset", &FBulletEventResponse::SplitAngleOffset)
		.def_readwrite("SplitDistance", &FBulletEventResponse::SplitDistance)
		.def_readwrite("SplitFire", &FBulletEventResponse::SplitFire, py::return_value_policy::reference)
		.def_readwrite("NewSpeed", &FBulletEventResponse::NewSpeed)
		.def_readwrite("Behaviors", &FBulletEventResponse::Behaviors, py::return_value_policy::reference)
		;
	py::class_< FBulletTimerEvent >(m, "FBulletTimerEvent")
		.def(py::init<>())
		.def_readwrite("Time", &FBulletTimerEvent::Time)
		.def_readwrite("Response", &FBulletTimerEvent::Response, py::return_value_policy::reference)
		;
	py::class_< FFiringPatternLine >(m, "FFiringPatternLine")
		.def(py::init<>())
		.def_property("bUseStartPointOnly", [](FFiringPatternLine &self){return self.bUseStartPointOnly;}, [](FFiringPatternLine &self, bool value){self.bUseStartPointOnly = value ? 1 : 0;})
		.def_readwrite("StartPoint", &FFiringPatternLine::StartPoint, py::return_value_policy::reference)
		.def_readwrite("EndPoint", &FFiringPatternLine::EndPoint, py::return_value_policy::reference)
		.def_readwrite("CustomWaveMotion", &FFiringPatternLine::CustomWaveMotion, py::return_value_policy::reference)
		;
	py::class_< FMissionStateBalanceAdjustment >(m, "FMissionStateBalanceAdjustment")
		.def(py::init<>())
		.def_readwrite("Mission", &FMissionStateBalanceAdjustment::Mission, py::return_value_policy::reference)
		.def_readwrite("MinGameStage", &FMissionStateBalanceAdjustment::MinGameStage, py::return_value_policy::reference)
		.def_readwrite("MaxGameStage", &FMissionStateBalanceAdjustment::MaxGameStage, py::return_value_policy::reference)
		.def_readwrite("AwesomeLevel", &FMissionStateBalanceAdjustment::AwesomeLevel, py::return_value_policy::reference)
		;
	py::class_< FRegionBalanceData >(m, "FRegionBalanceData")
		.def(py::init<>())
		.def_property("bSpecifyBoostAbovePlayer", [](FRegionBalanceData &self){return self.bSpecifyBoostAbovePlayer;}, [](FRegionBalanceData &self, bool value){self.bSpecifyBoostAbovePlayer = value ? 1 : 0;})
		.def_readwrite("Region", &FRegionBalanceData::Region, py::return_value_policy::reference)
		.def_readwrite("MinDefaultGameStage", &FRegionBalanceData::MinDefaultGameStage, py::return_value_policy::reference)
		.def_readwrite("MaxDefaultGameStage", &FRegionBalanceData::MaxDefaultGameStage, py::return_value_policy::reference)
		.def_readwrite("DefaultAwesomeLevel", &FRegionBalanceData::DefaultAwesomeLevel, py::return_value_policy::reference)
		.def_readwrite("GameStageIncreaseAbovePlayer", &FRegionBalanceData::GameStageIncreaseAbovePlayer, py::return_value_policy::reference)
		.def_readwrite("MissionOverrides", &FRegionBalanceData::MissionOverrides, py::return_value_policy::reference)
		;
	py::class_< FHitRegionDamage >(m, "FHitRegionDamage")
		.def(py::init<>())
		.def_property("bHasGored", [](FHitRegionDamage &self){return self.bHasGored;}, [](FHitRegionDamage &self, bool value){self.bHasGored = value ? 1 : 0;})
		.def_readwrite("BodyHitRegion", &FHitRegionDamage::BodyHitRegion, py::return_value_policy::reference)
		.def_readwrite("Damage", &FHitRegionDamage::Damage)
		.def_readwrite("RecentDamage", &FHitRegionDamage::RecentDamage)
		.def_readwrite("LastPctHealthForRunDamageTriggeredBehaviors", &FHitRegionDamage::LastPctHealthForRunDamageTriggeredBehaviors, py::return_value_policy::reference)
		.def_readwrite("LastPctHealthForRunHealingTriggeredBehaviors", &FHitRegionDamage::LastPctHealthForRunHealingTriggeredBehaviors, py::return_value_policy::reference)
		;
	py::class_< FObstacleData >(m, "FObstacleData")
		.def(py::init<>())
		.def_property("bWasAvoiding", [](FObstacleData &self){return self.bWasAvoiding;}, [](FObstacleData &self, bool value){self.bWasAvoiding = value ? 1 : 0;})
		.def_readwrite("Actor", &FObstacleData::Actor, py::return_value_policy::reference)
		.def_readwrite("Leader", &FObstacleData::Leader, py::return_value_policy::reference)
		.def_readwrite("Radius", &FObstacleData::Radius)
		.def_readwrite("HalfHeight", &FObstacleData::HalfHeight)
		.def_readwrite("MaxSpeed", &FObstacleData::MaxSpeed)
		.def_readwrite("Location", &FObstacleData::Location, py::return_value_policy::reference)
		.def_readwrite("Velocity", &FObstacleData::Velocity, py::return_value_policy::reference)
		.def_readwrite("OldVelocity", &FObstacleData::OldVelocity, py::return_value_policy::reference)
		.def_readwrite("LastOffset", &FObstacleData::LastOffset, py::return_value_policy::reference)
		.def_readwrite("IDO", &FObstacleData::IDO)
		;
	py::class_< FCellContentData >(m, "FCellContentData")
		.def(py::init<>())
		.def_readwrite("Tex", &FCellContentData::Tex, py::return_value_policy::reference)
		.def_readwrite("Mesh", &FCellContentData::Mesh, py::return_value_policy::reference)
		.def_readwrite("Inv", &FCellContentData::Inv, py::return_value_policy::reference)
		.def_readwrite("ExtArrayIndex", &FCellContentData::ExtArrayIndex)
		;
	py::class_< FTopStatData >(m, "FTopStatData")
		.def(py::init<>())
		.def_readwrite("LabelText", &FTopStatData::LabelText, py::return_value_policy::reference)
		.def_readwrite("ValueText", &FTopStatData::ValueText, py::return_value_policy::reference)
		.def_readwrite("AuxText", &FTopStatData::AuxText, py::return_value_policy::reference)
		.def_readwrite("Arrow", &FTopStatData::Arrow)
		.def_readwrite("IconName", &FTopStatData::IconName, py::return_value_policy::reference)
		;
	py::class_< FSpawnedDroppedLootData >(m, "FSpawnedDroppedLootData")
		.def(py::init<>())
		.def_property("bDisableRigidBodyPhysics", [](FSpawnedDroppedLootData &self){return self.bDisableRigidBodyPhysics;}, [](FSpawnedDroppedLootData &self, bool value){self.bDisableRigidBodyPhysics = value ? 1 : 0;})
		.def_readwrite("Inv", &FSpawnedDroppedLootData::Inv, py::return_value_policy::reference)
		;
	py::class_< FSpawnedAttachedLootData >(m, "FSpawnedAttachedLootData")
		.def(py::init<>())
		.def_readwrite("Inv", &FSpawnedAttachedLootData::Inv, py::return_value_policy::reference)
		.def_readwrite("AttachmentPointName", &FSpawnedAttachedLootData::AttachmentPointName, py::return_value_policy::reference)
		;
	py::class_< FInputDeviceAxisData >(m, "FInputDeviceAxisData")
		.def(py::init<>())
		.def_readwrite("AxisName", &FInputDeviceAxisData::AxisName, py::return_value_policy::reference)
		.def_readwrite("AxisParameter", &FInputDeviceAxisData::AxisParameter)
		.def_readwrite("DeadZone", &FInputDeviceAxisData::DeadZone)
		.def_readwrite("Speed", &FInputDeviceAxisData::Speed)
		.def_readwrite("AbsoluteAxis", &FInputDeviceAxisData::AbsoluteAxis)
		.def_readwrite("InvertMultiplier", &FInputDeviceAxisData::InvertMultiplier)
		.def_readwrite("ActionName", &FInputDeviceAxisData::ActionName, py::return_value_policy::reference)
		.def_readwrite("Caption", &FInputDeviceAxisData::Caption, py::return_value_policy::reference)
		.def_readwrite("KeyBindGroup", &FInputDeviceAxisData::KeyBindGroup, py::return_value_policy::reference)
		;
	py::class_< FLookAxisDefinitionData >(m, "FLookAxisDefinitionData")
		.def(py::init<>())
		.def_readwrite("Horizontal", &FLookAxisDefinitionData::Horizontal, py::return_value_policy::reference)
		.def_readwrite("Vertical", &FLookAxisDefinitionData::Vertical, py::return_value_policy::reference)
		;
	py::class_< FInputDeviceButtonData >(m, "FInputDeviceButtonData")
		.def(py::init<>())
		.def_readwrite("KeyName", &FInputDeviceButtonData::KeyName, py::return_value_policy::reference)
		.def_readwrite("PressActions", &FInputDeviceButtonData::PressActions, py::return_value_policy::reference)
		.def_readwrite("TapActions", &FInputDeviceButtonData::TapActions, py::return_value_policy::reference)
		.def_readwrite("HoldActions", &FInputDeviceButtonData::HoldActions, py::return_value_policy::reference)
		.def_readwrite("Caption", &FInputDeviceButtonData::Caption, py::return_value_policy::reference)
		.def_readwrite("KeyBindGroup", &FInputDeviceButtonData::KeyBindGroup, py::return_value_policy::reference)
		.def_readwrite("RemapToDefaultLayoutInputAction", &FInputDeviceButtonData::RemapToDefaultLayoutInputAction, py::return_value_policy::reference)
		;
	py::class_< FInputRemappingAxisData >(m, "FInputRemappingAxisData")
		.def(py::init<>())
		.def_property("bInvertInput", [](FInputRemappingAxisData &self){return self.bInvertInput;}, [](FInputRemappingAxisData &self, bool value){self.bInvertInput = value ? 1 : 0;})
		.def_readwrite("DefaultAxisName", &FInputRemappingAxisData::DefaultAxisName, py::return_value_policy::reference)
		.def_readwrite("RemappedAxisName", &FInputRemappingAxisData::RemappedAxisName, py::return_value_policy::reference)
		.def_readwrite("RemappedAxisParameter", &FInputRemappingAxisData::RemappedAxisParameter)
		.def_readwrite("Caption", &FInputRemappingAxisData::Caption, py::return_value_policy::reference)
		;
	py::class_< FInputRemappingButtonData >(m, "FInputRemappingButtonData")
		.def(py::init<>())
		.def_readwrite("DefaultKeyName", &FInputRemappingButtonData::DefaultKeyName, py::return_value_policy::reference)
		.def_readwrite("RemappedKeyName", &FInputRemappingButtonData::RemappedKeyName, py::return_value_policy::reference)
		.def_readwrite("RemappedPressActions", &FInputRemappingButtonData::RemappedPressActions, py::return_value_policy::reference)
		.def_readwrite("RemappedTapActions", &FInputRemappingButtonData::RemappedTapActions, py::return_value_policy::reference)
		.def_readwrite("RemappedHoldActions", &FInputRemappingButtonData::RemappedHoldActions, py::return_value_policy::reference)
		.def_readwrite("Caption", &FInputRemappingButtonData::Caption, py::return_value_policy::reference)
		;
	py::class_< FLootAttachmentData >(m, "FLootAttachmentData")
		.def(py::init<>())
		.def_readwrite("ItemPool", &FLootAttachmentData::ItemPool, py::return_value_policy::reference)
		.def_readwrite("PoolProbability", &FLootAttachmentData::PoolProbability, py::return_value_policy::reference)
		.def_readwrite("AttachmentPointName", &FLootAttachmentData::AttachmentPointName, py::return_value_policy::reference)
		;
	py::class_< FLootConfigurationData >(m, "FLootConfigurationData")
		.def(py::init<>())
		.def_readwrite("ConfigurationName", &FLootConfigurationData::ConfigurationName, py::return_value_policy::reference)
		.def_readwrite("LootGameStageVarianceFormula", &FLootConfigurationData::LootGameStageVarianceFormula, py::return_value_policy::reference)
		.def_readwrite("Weight", &FLootConfigurationData::Weight, py::return_value_policy::reference)
		.def_readwrite("ItemAttachments", &FLootConfigurationData::ItemAttachments, py::return_value_policy::reference)
		;
	py::class_< FInteractiveObjectGradeModifierData >(m, "FInteractiveObjectGradeModifierData")
		.def(py::init<>())
		.def_readwrite("CustomInteractiveObject", &FInteractiveObjectGradeModifierData::CustomInteractiveObject, py::return_value_policy::reference)
		.def_readwrite("DisplayName", &FInteractiveObjectGradeModifierData::DisplayName, py::return_value_policy::reference)
		.def_readwrite("ExpLevel", &FInteractiveObjectGradeModifierData::ExpLevel, py::return_value_policy::reference)
		.def_readwrite("IncludedCustomLootLists", &FInteractiveObjectGradeModifierData::IncludedCustomLootLists, py::return_value_policy::reference)
		.def_readwrite("CustomLoot", &FInteractiveObjectGradeModifierData::CustomLoot, py::return_value_policy::reference)
		;
	py::class_< FInteractiveObjectGameStageGradeWeightData, FGameStageGradeWeightData >(m, "FInteractiveObjectGameStageGradeWeightData")
		.def(py::init<>())
		.def_readwrite("GradeModifiers", &FInteractiveObjectGameStageGradeWeightData::GradeModifiers, py::return_value_policy::reference)
		;
	py::class_< FBehaviorKeyFrameEventData, FSpecializedBehaviorEvent >(m, "FBehaviorKeyFrameEventData")
		.def(py::init<>())
		.def_readwrite("KeyTime", &FBehaviorKeyFrameEventData::KeyTime)
		;
	py::class_< FInventoryGradeModifierData >(m, "FInventoryGradeModifierData")
		.def(py::init<>())
		.def_readwrite("ExpLevel", &FInventoryGradeModifierData::ExpLevel)
		.def_readwrite("CustomInventoryDefinition", &FInventoryGradeModifierData::CustomInventoryDefinition, py::return_value_policy::reference)
		;
	py::class_< FInventoryGameStageGradeWeightData, FGameStageGradeWeightData >(m, "FInventoryGameStageGradeWeightData")
		.def(py::init<>())
		.def_readwrite("GradeModifiers", &FInventoryGameStageGradeWeightData::GradeModifiers, py::return_value_policy::reference)
		;
	py::class_< FInventoryManufacturerBalanceData >(m, "FInventoryManufacturerBalanceData")
		.def(py::init<>())
		.def_readwrite("Manufacturer", &FInventoryManufacturerBalanceData::Manufacturer, py::return_value_policy::reference)
		.def_readwrite("Grades", &FInventoryManufacturerBalanceData::Grades, py::return_value_policy::reference)
		;
	py::class_< FItemPartGradeWeightData >(m, "FItemPartGradeWeightData")
		.def(py::init<>())
		.def_readwrite("Part", &FItemPartGradeWeightData::Part, py::return_value_policy::reference)
		.def_readwrite("Manufacturers", &FItemPartGradeWeightData::Manufacturers, py::return_value_policy::reference)
		.def_readwrite("MinGameStageIndex", &FItemPartGradeWeightData::MinGameStageIndex)
		.def_readwrite("MaxGameStageIndex", &FItemPartGradeWeightData::MaxGameStageIndex)
		.def_readwrite("DefaultWeightIndex", &FItemPartGradeWeightData::DefaultWeightIndex)
		;
	py::class_< FItemCustomPartTypeData >(m, "FItemCustomPartTypeData")
		.def(py::init<>())
		.def_property("bEnabled", [](FItemCustomPartTypeData &self){return self.bEnabled;}, [](FItemCustomPartTypeData &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_readwrite("WeightedParts", &FItemCustomPartTypeData::WeightedParts, py::return_value_policy::reference)
		;
	py::class_< FPartGradeWeightData >(m, "FPartGradeWeightData")
		.def(py::init<>())
		.def_readwrite("Part", &FPartGradeWeightData::Part, py::return_value_policy::reference)
		.def_readwrite("Manufacturers", &FPartGradeWeightData::Manufacturers, py::return_value_policy::reference)
		.def_readwrite("MinGameStageIndex", &FPartGradeWeightData::MinGameStageIndex)
		.def_readwrite("MaxGameStageIndex", &FPartGradeWeightData::MaxGameStageIndex)
		.def_readwrite("DefaultWeightIndex", &FPartGradeWeightData::DefaultWeightIndex)
		;
	py::class_< FWeaponCustomPartTypeData >(m, "FWeaponCustomPartTypeData")
		.def(py::init<>())
		.def_property("bEnabled", [](FWeaponCustomPartTypeData &self){return self.bEnabled;}, [](FWeaponCustomPartTypeData &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_readwrite("WeightedParts", &FWeaponCustomPartTypeData::WeightedParts, py::return_value_policy::reference)
		;
	py::class_< FShopItemData >(m, "FShopItemData")
		.def(py::init<>())
		.def_readwrite("Item", &FShopItemData::Item, py::return_value_policy::reference)
		.def_readwrite("Price", &FShopItemData::Price)
		.def_readwrite("ItemStatus", &FShopItemData::ItemStatus)
		;
	py::class_< FItemBehaviorSet >(m, "FItemBehaviorSet")
		.def(py::init<>())
		.def_readwrite("OnUsed", &FItemBehaviorSet::OnUsed, py::return_value_policy::reference)
		;
	py::class_< FGrenadeModBehaviorSequenceStateData >(m, "FGrenadeModBehaviorSequenceStateData")
		.def(py::init<>())
		.def_readwrite("Action", &FGrenadeModBehaviorSequenceStateData::Action)
		.def_readwrite("SequenceName", &FGrenadeModBehaviorSequenceStateData::SequenceName, py::return_value_policy::reference)
		;
	py::class_< FGrenadeModPartBehaviorSequenceStateData >(m, "FGrenadeModPartBehaviorSequenceStateData")
		.def(py::init<>())
		.def_readwrite("Action", &FGrenadeModPartBehaviorSequenceStateData::Action)
		.def_readwrite("SequenceName", &FGrenadeModPartBehaviorSequenceStateData::SequenceName, py::return_value_policy::reference)
		;
	py::class_< FBalancedInventoryData >(m, "FBalancedInventoryData")
		.def(py::init<>())
		.def_property("bDropOnDeath", [](FBalancedInventoryData &self){return self.bDropOnDeath;}, [](FBalancedInventoryData &self, bool value){self.bDropOnDeath = value ? 1 : 0;})
		.def_readwrite("ItmPoolDefinition", &FBalancedInventoryData::ItmPoolDefinition, py::return_value_policy::reference)
		.def_readwrite("InvBalanceDefinition", &FBalancedInventoryData::InvBalanceDefinition, py::return_value_policy::reference)
		.def_readwrite("Probability", &FBalancedInventoryData::Probability, py::return_value_policy::reference)
		;
	py::class_< FBalancedInventoryDataMirror >(m, "FBalancedInventoryDataMirror")
		.def(py::init<>())
		.def_property("bIsItemPool", [](FBalancedInventoryDataMirror &self){return self.bIsItemPool;}, [](FBalancedInventoryDataMirror &self, bool value){self.bIsItemPool = value ? 1 : 0;})
		.def_readwrite("ObjectName", &FBalancedInventoryDataMirror::ObjectName, py::return_value_policy::reference)
		.def_readwrite("ObjectPath", &FBalancedInventoryDataMirror::ObjectPath, py::return_value_policy::reference)
		;
	py::class_< FItemPoolInfo >(m, "FItemPoolInfo")
		.def(py::init<>())
		.def_readwrite("ItemPool", &FItemPoolInfo::ItemPool, py::return_value_policy::reference)
		.def_readwrite("PoolProbability", &FItemPoolInfo::PoolProbability, py::return_value_policy::reference)
		;
	py::class_< FPersistentMapDependencies >(m, "FPersistentMapDependencies")
		.def(py::init<>())
		.def_readwrite("PersistentMap", &FPersistentMapDependencies::PersistentMap, py::return_value_policy::reference)
		.def_readwrite("SecondaryMaps", &FPersistentMapDependencies::SecondaryMaps, py::return_value_policy::reference)
		.def_readwrite("ConnectedPersistents", &FPersistentMapDependencies::ConnectedPersistents, py::return_value_policy::reference)
		.def_readwrite("LevelName", &FPersistentMapDependencies::LevelName, py::return_value_policy::reference)
		.def_readwrite("GameReleaseDef", &FPersistentMapDependencies::GameReleaseDef, py::return_value_policy::reference)
		.def_readwrite("DiscoveryAchievements", &FPersistentMapDependencies::DiscoveryAchievements, py::return_value_policy::reference)
		;
	py::class_< FLootData >(m, "FLootData")
		.def(py::init<>())
		.def_readwrite("Weight", &FLootData::Weight, py::return_value_policy::reference)
		.def_readwrite("ItemPools", &FLootData::ItemPools, py::return_value_policy::reference)
		;
	py::class_< FManufacturerSelectorData >(m, "FManufacturerSelectorData")
		.def(py::init<>())
		.def_readwrite("AssociatedManufacturerName", &FManufacturerSelectorData::AssociatedManufacturerName, py::return_value_policy::reference)
		.def_readwrite("ValueIfMatched", &FManufacturerSelectorData::ValueIfMatched, py::return_value_policy::reference)
		;
	py::class_< FMissionRewardPresentationData >(m, "FMissionRewardPresentationData")
		.def(py::init<>())
		.def_readwrite("PresentationDefinition", &FMissionRewardPresentationData::PresentationDefinition, py::return_value_policy::reference)
		.def_readwrite("Rarity", &FMissionRewardPresentationData::Rarity)
		;
	py::class_< FWeaponDefinitionData >(m, "FWeaponDefinitionData")
		.def(py::init<>())
		.def_readwrite("WeaponTypeDefinition", &FWeaponDefinitionData::WeaponTypeDefinition, py::return_value_policy::reference)
		.def_readwrite("BalanceDefinition", &FWeaponDefinitionData::BalanceDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerDefinition", &FWeaponDefinitionData::ManufacturerDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerGradeIndex", &FWeaponDefinitionData::ManufacturerGradeIndex)
		.def_readwrite("BodyPartDefinition", &FWeaponDefinitionData::BodyPartDefinition, py::return_value_policy::reference)
		.def_readwrite("GripPartDefinition", &FWeaponDefinitionData::GripPartDefinition, py::return_value_policy::reference)
		.def_readwrite("BarrelPartDefinition", &FWeaponDefinitionData::BarrelPartDefinition, py::return_value_policy::reference)
		.def_readwrite("SightPartDefinition", &FWeaponDefinitionData::SightPartDefinition, py::return_value_policy::reference)
		.def_readwrite("StockPartDefinition", &FWeaponDefinitionData::StockPartDefinition, py::return_value_policy::reference)
		.def_readwrite("ElementalPartDefinition", &FWeaponDefinitionData::ElementalPartDefinition, py::return_value_policy::reference)
		.def_readwrite("Accessory1PartDefinition", &FWeaponDefinitionData::Accessory1PartDefinition, py::return_value_policy::reference)
		.def_readwrite("Accessory2PartDefinition", &FWeaponDefinitionData::Accessory2PartDefinition, py::return_value_policy::reference)
		.def_readwrite("MaterialPartDefinition", &FWeaponDefinitionData::MaterialPartDefinition, py::return_value_policy::reference)
		.def_readwrite("PrefixPartDefinition", &FWeaponDefinitionData::PrefixPartDefinition, py::return_value_policy::reference)
		.def_readwrite("TitlePartDefinition", &FWeaponDefinitionData::TitlePartDefinition, py::return_value_policy::reference)
		.def_readwrite("GameStage", &FWeaponDefinitionData::GameStage)
		.def_readwrite("UniqueId", &FWeaponDefinitionData::UniqueId)
		;
	py::class_< FItemDefinitionData >(m, "FItemDefinitionData")
		.def(py::init<>())
		.def_readwrite("ItemDefinition", &FItemDefinitionData::ItemDefinition, py::return_value_policy::reference)
		.def_readwrite("BalanceDefinition", &FItemDefinitionData::BalanceDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerDefinition", &FItemDefinitionData::ManufacturerDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerGradeIndex", &FItemDefinitionData::ManufacturerGradeIndex)
		.def_readwrite("AlphaItemPartDefinition", &FItemDefinitionData::AlphaItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("BetaItemPartDefinition", &FItemDefinitionData::BetaItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("GammaItemPartDefinition", &FItemDefinitionData::GammaItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("DeltaItemPartDefinition", &FItemDefinitionData::DeltaItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("EpsilonItemPartDefinition", &FItemDefinitionData::EpsilonItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("ZetaItemPartDefinition", &FItemDefinitionData::ZetaItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("EtaItemPartDefinition", &FItemDefinitionData::EtaItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("ThetaItemPartDefinition", &FItemDefinitionData::ThetaItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("MaterialItemPartDefinition", &FItemDefinitionData::MaterialItemPartDefinition, py::return_value_policy::reference)
		.def_readwrite("PrefixItemNamePartDefinition", &FItemDefinitionData::PrefixItemNamePartDefinition, py::return_value_policy::reference)
		.def_readwrite("TitleItemNamePartDefinition", &FItemDefinitionData::TitleItemNamePartDefinition, py::return_value_policy::reference)
		.def_readwrite("GameStage", &FItemDefinitionData::GameStage)
		.def_readwrite("UniqueId", &FItemDefinitionData::UniqueId)
		;
	py::class_< FPendingMissionRewardData >(m, "FPendingMissionRewardData")
		.def(py::init<>())
		.def_property("bGrantAltReward", [](FPendingMissionRewardData &self){return self.bGrantAltReward;}, [](FPendingMissionRewardData &self, bool value){self.bGrantAltReward = value ? 1 : 0;})
		.def_readwrite("Mission", &FPendingMissionRewardData::Mission, py::return_value_policy::reference)
		;
	py::class_< FObjectiveDependencyData >(m, "FObjectiveDependencyData")
		.def(py::init<>())
		.def_readwrite("Objective", &FObjectiveDependencyData::Objective, py::return_value_policy::reference)
		.def_readwrite("Status", &FObjectiveDependencyData::Status)
		;
	py::class_< FRewardData >(m, "FRewardData")
		.def(py::init<>())
		.def_readwrite("ExperienceRewardPercentage", &FRewardData::ExperienceRewardPercentage, py::return_value_policy::reference)
		.def_readwrite("CurrencyRewardType", &FRewardData::CurrencyRewardType)
		.def_readwrite("CreditRewardMultiplier", &FRewardData::CreditRewardMultiplier, py::return_value_policy::reference)
		.def_readwrite("OtherCurrencyReward", &FRewardData::OtherCurrencyReward, py::return_value_policy::reference)
		.def_readwrite("RewardItems", &FRewardData::RewardItems, py::return_value_policy::reference)
		.def_readwrite("RewardItemPools", &FRewardData::RewardItemPools, py::return_value_policy::reference)
		;
	py::class_< FKillMissionData >(m, "FKillMissionData")
		.def(py::init<>())
		.def_property("bUseKillRestrictions", [](FKillMissionData &self){return self.bUseKillRestrictions;}, [](FKillMissionData &self, bool value){self.bUseKillRestrictions = value ? 1 : 0;})
		.def_property("bCriticalHit", [](FKillMissionData &self){return self.bCriticalHit;}, [](FKillMissionData &self, bool value){self.bCriticalHit = value ? 1 : 0;})
		.def_property("bNotCriticalHit", [](FKillMissionData &self){return self.bNotCriticalHit;}, [](FKillMissionData &self, bool value){self.bNotCriticalHit = value ? 1 : 0;})
		.def_property("bNotHitRegion", [](FKillMissionData &self){return self.bNotHitRegion;}, [](FKillMissionData &self, bool value){self.bNotHitRegion = value ? 1 : 0;})
		.def_property("bMissionWeapon", [](FKillMissionData &self){return self.bMissionWeapon;}, [](FKillMissionData &self, bool value){self.bMissionWeapon = value ? 1 : 0;})
		.def_readwrite("DamageCauserType", &FKillMissionData::DamageCauserType)
		.def_readwrite("DamageType", &FKillMissionData::DamageType)
		.def_readwrite("HitRegionName", &FKillMissionData::HitRegionName, py::return_value_policy::reference)
		;
	py::class_< FReplicatedMissionFilterData >(m, "FReplicatedMissionFilterData")
		.def(py::init<>())
		.def_property("bFiltered", [](FReplicatedMissionFilterData &self){return self.bFiltered;}, [](FReplicatedMissionFilterData &self, bool value){self.bFiltered = value ? 1 : 0;})
		.def_readwrite("Mission", &FReplicatedMissionFilterData::Mission, py::return_value_policy::reference)
		;
	py::class_< FReplicatedMissionObjectiveData >(m, "FReplicatedMissionObjectiveData")
		.def(py::init<>())
		.def_readwrite("Objective", &FReplicatedMissionObjectiveData::Objective, py::return_value_policy::reference)
		.def_readwrite("ObjectiveBit", &FReplicatedMissionObjectiveData::ObjectiveBit)
		;
	py::class_< FReplicatedMissionStatusData >(m, "FReplicatedMissionStatusData")
		.def(py::init<>())
		.def_readwrite("Mission", &FReplicatedMissionStatusData::Mission, py::return_value_policy::reference)
		.def_readwrite("Status", &FReplicatedMissionStatusData::Status)
		;
	py::class_< FReplicatedMissionData >(m, "FReplicatedMissionData")
		.def(py::init<>())
		.def_property("bTimerRunning", [](FReplicatedMissionData &self){return self.bTimerRunning;}, [](FReplicatedMissionData &self, bool value){self.bTimerRunning = value ? 1 : 0;})
		.def_property("bFiltered", [](FReplicatedMissionData &self){return self.bFiltered;}, [](FReplicatedMissionData &self, bool value){self.bFiltered = value ? 1 : 0;})
		.def_readwrite("Mission", &FReplicatedMissionData::Mission, py::return_value_policy::reference)
		.def_readwrite("Status", &FReplicatedMissionData::Status)
		.def_readwrite("ActiveObjectiveSet", &FReplicatedMissionData::ActiveObjectiveSet, py::return_value_policy::reference)
		.def_readwrite("SecondsLeft", &FReplicatedMissionData::SecondsLeft)
		.def_readwrite("GameStage", &FReplicatedMissionData::GameStage)
		;
	py::class_< FMissionData >(m, "FMissionData")
		.def(py::init<>())
		.def_property("bInitialized", [](FMissionData &self){return self.bInitialized;}, [](FMissionData &self, bool value){self.bInitialized = value ? 1 : 0;})
		.def_property("bHeardKickoff", [](FMissionData &self){return self.bHeardKickoff;}, [](FMissionData &self, bool value){self.bHeardKickoff = value ? 1 : 0;})
		.def_property("bFiltered", [](FMissionData &self){return self.bFiltered;}, [](FMissionData &self, bool value){self.bFiltered = value ? 1 : 0;})
		.def_readwrite("MissionDef", &FMissionData::MissionDef, py::return_value_policy::reference)
		.def_readwrite("Status", &FMissionData::Status)
		.def_readwrite("ObjectivesProgress", &FMissionData::ObjectivesProgress, py::return_value_policy::reference)
		.def_readwrite("ActiveObjectiveSet", &FMissionData::ActiveObjectiveSet, py::return_value_policy::reference)
		.def_readwrite("SubObjectiveSets", &FMissionData::SubObjectiveSets, py::return_value_policy::reference)
		;
	py::class_< FMissionStatusPlayerData >(m, "FMissionStatusPlayerData")
		.def(py::init<>())
		.def_property("bNeedsRewards", [](FMissionStatusPlayerData &self){return self.bNeedsRewards;}, [](FMissionStatusPlayerData &self, bool value){self.bNeedsRewards = value ? 1 : 0;})
		.def_property("bHeardKickoff", [](FMissionStatusPlayerData &self){return self.bHeardKickoff;}, [](FMissionStatusPlayerData &self, bool value){self.bHeardKickoff = value ? 1 : 0;})
		.def_readwrite("MissionDef", &FMissionStatusPlayerData::MissionDef, py::return_value_policy::reference)
		.def_readwrite("Status", &FMissionStatusPlayerData::Status)
		.def_readwrite("ObjectivesProgress", &FMissionStatusPlayerData::ObjectivesProgress, py::return_value_policy::reference)
		.def_readwrite("ActiveObjectiveSet", &FMissionStatusPlayerData::ActiveObjectiveSet, py::return_value_policy::reference)
		.def_readwrite("SubObjectiveSets", &FMissionStatusPlayerData::SubObjectiveSets, py::return_value_policy::reference)
		.def_readwrite("GameStage", &FMissionStatusPlayerData::GameStage)
		;
	py::class_< FMissionObserversData >(m, "FMissionObserversData")
		.def(py::init<>())
		.def_readwrite("Mission", &FMissionObserversData::Mission, py::return_value_policy::reference)
		.def_readwrite("Observers", &FMissionObserversData::Observers, py::return_value_policy::reference)
		;
	py::class_< FReplicatedMissionDirectiveData >(m, "FReplicatedMissionDirectiveData")
		.def(py::init<>())
		.def_readwrite("MissionDirector", &FReplicatedMissionDirectiveData::MissionDirector)
		.def_readwrite("MissionDirective", &FReplicatedMissionDirectiveData::MissionDirective, py::return_value_policy::reference)
		;
	py::class_< FMissionWaypointsData >(m, "FMissionWaypointsData")
		.def(py::init<>())
		.def_readwrite("Mission", &FMissionWaypointsData::Mission, py::return_value_policy::reference)
		.def_readwrite("Waypoints", &FMissionWaypointsData::Waypoints, py::return_value_policy::reference)
		;
	py::class_< FLevelTransitionData >(m, "FLevelTransitionData")
		.def(py::init<>())
		.def_readwrite("TargetLevel", &FLevelTransitionData::TargetLevel, py::return_value_policy::reference)
		.def_readwrite("LevelTransition", &FLevelTransitionData::LevelTransition, py::return_value_policy::reference)
		;
	py::class_< FTimedMissionData >(m, "FTimedMissionData")
		.def(py::init<>())
		.def_property("bTimerRunning", [](FTimedMissionData &self){return self.bTimerRunning;}, [](FTimedMissionData &self, bool value){self.bTimerRunning = value ? 1 : 0;})
		.def_readwrite("Mission", &FTimedMissionData::Mission, py::return_value_policy::reference)
		.def_readwrite("SecondsLeft", &FTimedMissionData::SecondsLeft)
		;
	py::class_< FDefendMissionData >(m, "FDefendMissionData")
		.def(py::init<>())
		.def_readwrite("Objective", &FDefendMissionData::Objective, py::return_value_policy::reference)
		.def_readwrite("Target", &FDefendMissionData::Target)
		;
	py::class_< FDefendTargetData >(m, "FDefendTargetData")
		.def(py::init<>())
		.def_readwrite("Objective", &FDefendTargetData::Objective, py::return_value_policy::reference)
		.def_readwrite("PercentHealth", &FDefendTargetData::PercentHealth)
		;
	py::class_< FBlockedMissionData >(m, "FBlockedMissionData")
		.def(py::init<>())
		.def_readwrite("BlockedMission", &FBlockedMissionData::BlockedMission, py::return_value_policy::reference)
		.def_readwrite("MissionBlockers", &FBlockedMissionData::MissionBlockers, py::return_value_policy::reference)
		;
	py::class_< FObjectiveUpdateData >(m, "FObjectiveUpdateData")
		.def(py::init<>())
		.def_readwrite("Objective", &FObjectiveUpdateData::Objective, py::return_value_policy::reference)
		.def_readwrite("ObjectiveBit", &FObjectiveUpdateData::ObjectiveBit)
		;
	py::class_< FMinimapIconHelper_Director >(m, "FMinimapIconHelper_Director")
		.def(py::init<>())
		.def_property("bHasMoreActionableMissions", [](FMinimapIconHelper_Director &self){return self.bHasMoreActionableMissions;}, [](FMinimapIconHelper_Director &self, bool value){self.bHasMoreActionableMissions = value ? 1 : 0;})
		.def_property("bBegins", [](FMinimapIconHelper_Director &self){return self.bBegins;}, [](FMinimapIconHelper_Director &self, bool value){self.bBegins = value ? 1 : 0;})
		.def_property("bEnds", [](FMinimapIconHelper_Director &self){return self.bEnds;}, [](FMinimapIconHelper_Director &self, bool value){self.bEnds = value ? 1 : 0;})
		.def_readwrite("Director", &FMinimapIconHelper_Director::Director)
		.def_readwrite("Location", &FMinimapIconHelper_Director::Location, py::return_value_policy::reference)
		.def_readwrite("ActionableMissionDefinition", &FMinimapIconHelper_Director::ActionableMissionDefinition, py::return_value_policy::reference)
		;
	py::class_< FMissionKickoffData >(m, "FMissionKickoffData")
		.def(py::init<>())
		.def_property("bFromActivation", [](FMissionKickoffData &self){return self.bFromActivation;}, [](FMissionKickoffData &self, bool value){self.bFromActivation = value ? 1 : 0;})
		.def_readwrite("Mission", &FMissionKickoffData::Mission, py::return_value_policy::reference)
		.def_readwrite("PlayerThatAcceptedMission", &FMissionKickoffData::PlayerThatAcceptedMission, py::return_value_policy::reference)
		;
	py::class_< FDrunkenWaveFormData >(m, "FDrunkenWaveFormData")
		.def(py::init<>())
		.def_readwrite("WaveFreq", &FDrunkenWaveFormData::WaveFreq, py::return_value_policy::reference)
		.def_readwrite("WaveAmp", &FDrunkenWaveFormData::WaveAmp, py::return_value_policy::reference)
		.def_readwrite("WavePhase", &FDrunkenWaveFormData::WavePhase, py::return_value_policy::reference)
		;
	py::class_< FNPCList >(m, "FNPCList")
		.def(py::init<>())
		.def_property("bWantsToPath", [](FNPCList &self){return self.bWantsToPath;}, [](FNPCList &self, bool value){self.bWantsToPath = value ? 1 : 0;})
		.def_property("bOnPerch", [](FNPCList &self){return self.bOnPerch;}, [](FNPCList &self, bool value){self.bOnPerch = value ? 1 : 0;})
		.def_property("bForceStopped", [](FNPCList &self){return self.bForceStopped;}, [](FNPCList &self, bool value){self.bForceStopped = value ? 1 : 0;})
		.def_property("bIsPathing", [](FNPCList &self){return self.bIsPathing;}, [](FNPCList &self, bool value){self.bIsPathing = value ? 1 : 0;})
		.def_property("bCanPath", [](FNPCList &self){return self.bCanPath;}, [](FNPCList &self, bool value){self.bCanPath = value ? 1 : 0;})
		.def_readwrite("Mind", &FNPCList::Mind, py::return_value_policy::reference)
		.def_readwrite("LastPathTime", &FNPCList::LastPathTime)
		.def_readwrite("PathRequestTime", &FNPCList::PathRequestTime)
		.def_readwrite("Score", &FNPCList::Score)
		;
	py::class_< FRelevanceCacheStruct >(m, "FRelevanceCacheStruct")
		.def(py::init<>())
		.def_property("bIsRelevant", [](FRelevanceCacheStruct &self){return self.bIsRelevant;}, [](FRelevanceCacheStruct &self, bool value){self.bIsRelevant = value ? 1 : 0;})
		.def_readwrite("RealViewerName", &FRelevanceCacheStruct::RealViewerName, py::return_value_policy::reference)
		.def_readwrite("ToPawnName", &FRelevanceCacheStruct::ToPawnName, py::return_value_policy::reference)
		.def_readwrite("TimeCached", &FRelevanceCacheStruct::TimeCached)
		.def_readwrite("NextUpdateTime", &FRelevanceCacheStruct::NextUpdateTime)
		.def_readwrite("FromLoc", &FRelevanceCacheStruct::FromLoc, py::return_value_policy::reference)
		.def_readwrite("ToLoc", &FRelevanceCacheStruct::ToLoc, py::return_value_policy::reference)
		.def_readwrite("RotatingIndex", &FRelevanceCacheStruct::RotatingIndex)
		;
	py::class_< FRelevanceUpdateStruct >(m, "FRelevanceUpdateStruct")
		.def(py::init<>())
		.def_property("bRelevant", [](FRelevanceUpdateStruct &self){return self.bRelevant;}, [](FRelevanceUpdateStruct &self, bool value){self.bRelevant = value ? 1 : 0;})
		.def_property("bIsForcedValue", [](FRelevanceUpdateStruct &self){return self.bIsForcedValue;}, [](FRelevanceUpdateStruct &self, bool value){self.bIsForcedValue = value ? 1 : 0;})
		.def_property("bForceNextCheckTrue", [](FRelevanceUpdateStruct &self){return self.bForceNextCheckTrue;}, [](FRelevanceUpdateStruct &self, bool value){self.bForceNextCheckTrue = value ? 1 : 0;})
		.def_readwrite("FromRealViewer", &FRelevanceUpdateStruct::FromRealViewer, py::return_value_policy::reference)
		.def_readwrite("SrcLocation", &FRelevanceUpdateStruct::SrcLocation, py::return_value_policy::reference)
		.def_readwrite("ToPawn", &FRelevanceUpdateStruct::ToPawn, py::return_value_policy::reference)
		.def_readwrite("TimeRequested", &FRelevanceUpdateStruct::TimeRequested)
		.def_readwrite("ShouldRemove", &FRelevanceUpdateStruct::ShouldRemove)
		.def_readwrite("NextUpdateTime", &FRelevanceUpdateStruct::NextUpdateTime)
		;
	py::class_< FRelevanceBucketStruct >(m, "FRelevanceBucketStruct")
		.def(py::init<>())
		.def_readwrite("NdxToStartCheckFrom", &FRelevanceBucketStruct::NdxToStartCheckFrom)
		.def_readwrite("DistanceSquared", &FRelevanceBucketStruct::DistanceSquared)
		.def_readwrite("MinLineChecksPerFrame", &FRelevanceBucketStruct::MinLineChecksPerFrame)
		.def_readwrite("MaxLineChecksPerFrame", &FRelevanceBucketStruct::MaxLineChecksPerFrame)
		.def_readwrite("MaxIterationsPerFrame", &FRelevanceBucketStruct::MaxIterationsPerFrame)
		.def_readwrite("Relevance", &FRelevanceBucketStruct::Relevance, py::return_value_policy::reference)
		;
	py::class_< FPerchAnimData >(m, "FPerchAnimData")
		.def(py::init<>())
		.def_readwrite("Key", &FPerchAnimData::Key, py::return_value_policy::reference)
		.def_readwrite("StartAnim", &FPerchAnimData::StartAnim, py::return_value_policy::reference)
		.def_readwrite("StopAnim", &FPerchAnimData::StopAnim, py::return_value_policy::reference)
		.def_readwrite("IdleAnim", &FPerchAnimData::IdleAnim, py::return_value_policy::reference)
		;
	py::class_< FCustomizationItemData >(m, "FCustomizationItemData")
		.def(py::init<>())
		.def_readwrite("ItemPoolKey", &FCustomizationItemData::ItemPoolKey)
		.def_readwrite("CustomizationItemPool", &FCustomizationItemData::CustomizationItemPool, py::return_value_policy::reference)
		;
	py::class_< FColiseumStat >(m, "FColiseumStat")
		.def(py::init<>())
		.def_readwrite("StatType", &FColiseumStat::StatType)
		.def_readwrite("StatValue", &FColiseumStat::StatValue)
		;
	py::class_< FWaypointActorData >(m, "FWaypointActorData")
		.def(py::init<>())
		.def_readwrite("WaypointActor", &FWaypointActorData::WaypointActor, py::return_value_policy::reference)
		.def_readwrite("WaypointObjective", &FWaypointActorData::WaypointObjective, py::return_value_policy::reference)
		.def_readwrite("Waypoints", &FWaypointActorData::Waypoints, py::return_value_policy::reference)
		;
	py::class_< FAreaWaypointData >(m, "FAreaWaypointData")
		.def(py::init<>())
		.def_readwrite("WaypointActor", &FAreaWaypointData::WaypointActor, py::return_value_policy::reference)
		.def_readwrite("WaypointRadius", &FAreaWaypointData::WaypointRadius)
		.def_readwrite("WaypointObjective", &FAreaWaypointData::WaypointObjective, py::return_value_policy::reference)
		;
	py::class_< FColiseumPlayerInfo >(m, "FColiseumPlayerInfo")
		.def(py::init<>())
		.def_readwrite("WPC", &FColiseumPlayerInfo::WPC, py::return_value_policy::reference)
		.def_readwrite("Stats", &FColiseumPlayerInfo::Stats, py::return_value_policy::reference)
		;
	py::class_< FActiveInteraction >(m, "FActiveInteraction")
		.def(py::init<>())
		.def_property("IsValid", [](FActiveInteraction &self){return self.IsValid;}, [](FActiveInteraction &self, bool value){self.IsValid = value ? 1 : 0;})
		.def_readwrite("TimeLength", &FActiveInteraction::TimeLength)
		.def_readwrite("TimeRemaining", &FActiveInteraction::TimeRemaining)
		.def_readwrite("InteractionServer", &FActiveInteraction::InteractionServer, py::return_value_policy::reference)
		.def_readwrite("Players", &FActiveInteraction::Players, py::return_value_policy::reference)
		.def_readwrite("Instigator", &FActiveInteraction::Instigator, py::return_value_policy::reference)
		;
	py::class_< FPlayerUIPreferences >(m, "FPlayerUIPreferences")
		.def(py::init<>())
		.def_readwrite("CharacterName", &FPlayerUIPreferences::CharacterName, py::return_value_policy::reference)
		.def_readwrite("PrimaryColor", &FPlayerUIPreferences::PrimaryColor, py::return_value_policy::reference)
		.def_readwrite("SecondaryColor", &FPlayerUIPreferences::SecondaryColor, py::return_value_policy::reference)
		.def_readwrite("TertiaryColor", &FPlayerUIPreferences::TertiaryColor, py::return_value_policy::reference)
		;
	py::class_< FSkillSaveGameData >(m, "FSkillSaveGameData")
		.def(py::init<>())
		.def_readwrite("SkillDefinition", &FSkillSaveGameData::SkillDefinition, py::return_value_policy::reference)
		.def_readwrite("Grade", &FSkillSaveGameData::Grade)
		.def_readwrite("GradePoints", &FSkillSaveGameData::GradePoints)
		.def_readwrite("EquippedSlotIndex", &FSkillSaveGameData::EquippedSlotIndex)
		;
	py::class_< FResourceSaveGameData >(m, "FResourceSaveGameData")
		.def(py::init<>())
		.def_readwrite("ResourceDefinition", &FResourceSaveGameData::ResourceDefinition, py::return_value_policy::reference)
		.def_readwrite("ResourcePoolDefinition", &FResourceSaveGameData::ResourcePoolDefinition, py::return_value_policy::reference)
		.def_readwrite("Amount", &FResourceSaveGameData::Amount)
		.def_readwrite("UpgradeLevel", &FResourceSaveGameData::UpgradeLevel)
		;
	py::class_< FInventorySaveGameData >(m, "FInventorySaveGameData")
		.def(py::init<>())
		.def_property("bEquipped", [](FInventorySaveGameData &self){return self.bEquipped;}, [](FInventorySaveGameData &self, bool value){self.bEquipped = value ? 1 : 0;})
		.def_readwrite("DefinitionData", &FInventorySaveGameData::DefinitionData, py::return_value_policy::reference)
		.def_readwrite("Quantity", &FInventorySaveGameData::Quantity)
		.def_readwrite("Mark", &FInventorySaveGameData::Mark)
		;
	py::class_< FUnloadableDlcItemSaveGameData >(m, "FUnloadableDlcItemSaveGameData")
		.def(py::init<>())
		.def_property("bEquipped", [](FUnloadableDlcItemSaveGameData &self){return self.bEquipped;}, [](FUnloadableDlcItemSaveGameData &self, bool value){self.bEquipped = value ? 1 : 0;})
		.def_readwrite("SerialNumber", &FUnloadableDlcItemSaveGameData::SerialNumber, py::return_value_policy::reference)
		.def_readwrite("Quantity", &FUnloadableDlcItemSaveGameData::Quantity)
		.def_readwrite("Mark", &FUnloadableDlcItemSaveGameData::Mark)
		;
	py::class_< FInventorySlotSaveGameData >(m, "FInventorySlotSaveGameData")
		.def(py::init<>())
		.def_readwrite("InventorySlotMax_Misc", &FInventorySlotSaveGameData::InventorySlotMax_Misc)
		.def_readwrite("WeaponReadyMax", &FInventorySlotSaveGameData::WeaponReadyMax)
		.def_readwrite("NumQuickSlotsFlourished", &FInventorySlotSaveGameData::NumQuickSlotsFlourished)
		;
	py::class_< FWeaponSaveGameData >(m, "FWeaponSaveGameData")
		.def(py::init<>())
		.def_readwrite("WeaponDefinitionData", &FWeaponSaveGameData::WeaponDefinitionData, py::return_value_policy::reference)
		.def_readwrite("QuickSlot", &FWeaponSaveGameData::QuickSlot)
		.def_readwrite("Mark", &FWeaponSaveGameData::Mark)
		;
	py::class_< FUnloadableDlcWeaponSaveGameData >(m, "FUnloadableDlcWeaponSaveGameData")
		.def(py::init<>())
		.def_readwrite("SerialNumber", &FUnloadableDlcWeaponSaveGameData::SerialNumber, py::return_value_policy::reference)
		.def_readwrite("QuickSlot", &FUnloadableDlcWeaponSaveGameData::QuickSlot)
		.def_readwrite("Mark", &FUnloadableDlcWeaponSaveGameData::Mark)
		;
	py::class_< FUnloadableDlcMissionStatusData >(m, "FUnloadableDlcMissionStatusData")
		.def(py::init<>())
		.def_readwrite("MissionDefName", &FUnloadableDlcMissionStatusData::MissionDefName, py::return_value_policy::reference)
		.def_readwrite("Status", &FUnloadableDlcMissionStatusData::Status)
		.def_readwrite("DlcPackageId", &FUnloadableDlcMissionStatusData::DlcPackageId)
		.def_readwrite("ObjectivesProgress", &FUnloadableDlcMissionStatusData::ObjectivesProgress, py::return_value_policy::reference)
		.def_readwrite("ActiveObjectiveSetIndex", &FUnloadableDlcMissionStatusData::ActiveObjectiveSetIndex)
		.def_readwrite("SubObjectiveSetsIndices", &FUnloadableDlcMissionStatusData::SubObjectiveSetsIndices, py::return_value_policy::reference)
		.def_readwrite("GameStage", &FUnloadableDlcMissionStatusData::GameStage)
		.def_readwrite("NeedsRewards", &FUnloadableDlcMissionStatusData::NeedsRewards)
		.def_readwrite("HeardKickoff", &FUnloadableDlcMissionStatusData::HeardKickoff)
		;
	py::class_< FUnloadableDlcPendingRewardData >(m, "FUnloadableDlcPendingRewardData")
		.def(py::init<>())
		.def_property("bGrantAltReward", [](FUnloadableDlcPendingRewardData &self){return self.bGrantAltReward;}, [](FUnloadableDlcPendingRewardData &self, bool value){self.bGrantAltReward = value ? 1 : 0;})
		.def_readwrite("MissionDefName", &FUnloadableDlcPendingRewardData::MissionDefName, py::return_value_policy::reference)
		.def_readwrite("DlcPackageId", &FUnloadableDlcPendingRewardData::DlcPackageId)
		;
	py::class_< FMissionPlaythroughSaveGameData >(m, "FMissionPlaythroughSaveGameData")
		.def(py::init<>())
		.def_readwrite("PlayThroughNumber", &FMissionPlaythroughSaveGameData::PlayThroughNumber)
		.def_readwrite("MissionData", &FMissionPlaythroughSaveGameData::MissionData, py::return_value_policy::reference)
		.def_readwrite("UnloadableDlcMissionData", &FMissionPlaythroughSaveGameData::UnloadableDlcMissionData, py::return_value_policy::reference)
		.def_readwrite("PendingMissionRewards", &FMissionPlaythroughSaveGameData::PendingMissionRewards, py::return_value_policy::reference)
		.def_readwrite("UnloadableDlcPendingMissionRewards", &FMissionPlaythroughSaveGameData::UnloadableDlcPendingMissionRewards, py::return_value_policy::reference)
		.def_readwrite("ActiveMission", &FMissionPlaythroughSaveGameData::ActiveMission, py::return_value_policy::reference)
		.def_readwrite("FilteredMissions", &FMissionPlaythroughSaveGameData::FilteredMissions, py::return_value_policy::reference)
		;
	py::class_< FExpansionData >(m, "FExpansionData")
		.def(py::init<>())
		.def_readwrite("Tag", &FExpansionData::Tag)
		.def_readwrite("Data", &FExpansionData::Data, py::return_value_policy::reference)
		;
	py::class_< FUnloadableDlcChallengeData >(m, "FUnloadableDlcChallengeData")
		.def(py::init<>())
		.def_readwrite("ChallengeDefName", &FUnloadableDlcChallengeData::ChallengeDefName, py::return_value_policy::reference)
		.def_readwrite("DlcPackageId", &FUnloadableDlcChallengeData::DlcPackageId)
		;
	py::class_< FRegionGameStageData >(m, "FRegionGameStageData")
		.def(py::init<>())
		.def_readwrite("RegionDef", &FRegionGameStageData::RegionDef, py::return_value_policy::reference)
		.def_readwrite("GameStage", &FRegionGameStageData::GameStage)
		.def_readwrite("PlaythroughIdx", &FRegionGameStageData::PlaythroughIdx)
		;
	py::class_< FUnloadableDlcRegionGameStageData >(m, "FUnloadableDlcRegionGameStageData")
		.def(py::init<>())
		.def_readwrite("RegionDefName", &FUnloadableDlcRegionGameStageData::RegionDefName, py::return_value_policy::reference)
		.def_readwrite("GameStage", &FUnloadableDlcRegionGameStageData::GameStage)
		.def_readwrite("PlaythroughIdx", &FUnloadableDlcRegionGameStageData::PlaythroughIdx)
		.def_readwrite("DlcPackageId", &FUnloadableDlcRegionGameStageData::DlcPackageId)
		;
	py::class_< FWorldDiscoveryData >(m, "FWorldDiscoveryData")
		.def(py::init<>())
		.def_property("HasBeenUncovered", [](FWorldDiscoveryData &self){return self.HasBeenUncovered;}, [](FWorldDiscoveryData &self, bool value){self.HasBeenUncovered = value ? 1 : 0;})
		.def_readwrite("DiscoveryName", &FWorldDiscoveryData::DiscoveryName, py::return_value_policy::reference)
		;
	py::class_< FOneOffLevelChallengeData >(m, "FOneOffLevelChallengeData")
		.def(py::init<>())
		.def_readwrite("PackageId", &FOneOffLevelChallengeData::PackageId)
		.def_readwrite("ContentId", &FOneOffLevelChallengeData::ContentId)
		.def_readwrite("Completion", &FOneOffLevelChallengeData::Completion, py::return_value_policy::reference)
		;
	py::class_< FBankSlot >(m, "FBankSlot")
		.def(py::init<>())
		.def_readwrite("InventorySerialNumber", &FBankSlot::InventorySerialNumber, py::return_value_policy::reference)
		;
	py::class_< FLockoutData >(m, "FLockoutData")
		.def(py::init<>())
		.def_readwrite("LockoutDef", &FLockoutData::LockoutDef, py::return_value_policy::reference)
		.def_readwrite("LockoutTime", &FLockoutData::LockoutTime)
		;
	py::class_< FUnloadableDlcLockoutData >(m, "FUnloadableDlcLockoutData")
		.def(py::init<>())
		.def_readwrite("LockoutDefName", &FUnloadableDlcLockoutData::LockoutDefName, py::return_value_policy::reference)
		.def_readwrite("LockoutTime", &FUnloadableDlcLockoutData::LockoutTime)
		.def_readwrite("DlcPackageId", &FUnloadableDlcLockoutData::DlcPackageId)
		;
	py::class_< FChosenVehicleCustomization >(m, "FChosenVehicleCustomization")
		.def(py::init<>())
		.def_readwrite("FamilyDef", &FChosenVehicleCustomization::FamilyDef, py::return_value_policy::reference)
		;
	py::class_< FSeasonPassOfferUnion >(m, "FSeasonPassOfferUnion")
		.def(py::init<>())
		.def_readwrite("AssociatedSeasonPassOfferId", &FSeasonPassOfferUnion::AssociatedSeasonPassOfferId)
		.def_readwrite("PaidOfferId", &FSeasonPassOfferUnion::PaidOfferId)
		.def_readwrite("FreeOfferId", &FSeasonPassOfferUnion::FreeOfferId)
		.def_readwrite("SeasonPassId", &FSeasonPassOfferUnion::SeasonPassId)
		;
	py::class_< FSeasonPassPackageCount >(m, "FSeasonPassPackageCount")
		.def(py::init<>())
		.def_property("bPreOrder", [](FSeasonPassPackageCount &self){return self.bPreOrder;}, [](FSeasonPassPackageCount &self, bool value){self.bPreOrder = value ? 1 : 0;})
		.def_readwrite("SeasonPassId", &FSeasonPassPackageCount::SeasonPassId)
		.def_readwrite("PackageCount", &FSeasonPassPackageCount::PackageCount)
		;
	py::class_< FDLCMissionData >(m, "FDLCMissionData")
		.def(py::init<>())
		.def_readwrite("MinMissionNumber", &FDLCMissionData::MinMissionNumber)
		.def_readwrite("MaxMissionNumber", &FDLCMissionData::MaxMissionNumber)
		.def_readwrite("MissionNameLocKey", &FDLCMissionData::MissionNameLocKey, py::return_value_policy::reference)
		;
	py::class_< FCompatibilityVersionInfo >(m, "FCompatibilityVersionInfo")
		.def(py::init<>())
		.def_readwrite("CurrentCompatPackVersion", &FCompatibilityVersionInfo::CurrentCompatPackVersion)
		.def_readwrite("CurrentCompatibilityMask", &FCompatibilityVersionInfo::CurrentCompatibilityMask, py::return_value_policy::reference)
		;
	py::class_< FTaggedMarketplaceContent >(m, "FTaggedMarketplaceContent")
		.def(py::init<>())
		.def_property("bShowInStore", [](FTaggedMarketplaceContent &self){return self.bShowInStore;}, [](FTaggedMarketplaceContent &self, bool value){self.bShowInStore = value ? 1 : 0;})
		.def_readwrite("Tag", &FTaggedMarketplaceContent::Tag, py::return_value_policy::reference)
		.def_readwrite("OfferId", &FTaggedMarketplaceContent::OfferId)
		.def_readwrite("OfferIdText", &FTaggedMarketplaceContent::OfferIdText, py::return_value_policy::reference)
		.def_readwrite("OfferName", &FTaggedMarketplaceContent::OfferName, py::return_value_policy::reference)
		.def_readwrite("SellText", &FTaggedMarketplaceContent::SellText, py::return_value_policy::reference)
		.def_readwrite("ContentCategory", &FTaggedMarketplaceContent::ContentCategory)
		.def_readwrite("PackageId", &FTaggedMarketplaceContent::PackageId)
		.def_readwrite("ContentId", &FTaggedMarketplaceContent::ContentId)
		;
	py::class_< FGoldenKeySource >(m, "FGoldenKeySource")
		.def(py::init<>())
		.def_readwrite("SourceId", &FGoldenKeySource::SourceId)
		.def_readwrite("NumKeys", &FGoldenKeySource::NumKeys)
		.def_readwrite("NumKeysSpent", &FGoldenKeySource::NumKeysSpent)
		.def_readwrite("Empty", &FGoldenKeySource::Empty)
		;
	py::class_< FSkillTreeTierLayoutData >(m, "FSkillTreeTierLayoutData")
		.def(py::init<>())
		.def_readwrite("ParentBranchDefinition", &FSkillTreeTierLayoutData::ParentBranchDefinition, py::return_value_policy::reference)
		.def_readwrite("TierNumber", &FSkillTreeTierLayoutData::TierNumber)
		.def_readwrite("DependencyBranchDefinition", &FSkillTreeTierLayoutData::DependencyBranchDefinition, py::return_value_policy::reference)
		.def_readwrite("DependencyTierNumber", &FSkillTreeTierLayoutData::DependencyTierNumber)
		.def_readwrite("Skills", &FSkillTreeTierLayoutData::Skills, py::return_value_policy::reference)
		;
	py::class_< FSkillTreeTierStateData >(m, "FSkillTreeTierStateData")
		.def(py::init<>())
		.def_property("bIsUnlocked", [](FSkillTreeTierStateData &self){return self.bIsUnlocked;}, [](FSkillTreeTierStateData &self, bool value){self.bIsUnlocked = value ? 1 : 0;})
		.def_readwrite("ParentBranchDefinition", &FSkillTreeTierStateData::ParentBranchDefinition, py::return_value_policy::reference)
		.def_readwrite("TierNumber", &FSkillTreeTierStateData::TierNumber)
		.def_readwrite("PointsSpentInTier", &FSkillTreeTierStateData::PointsSpentInTier)
		;
	py::class_< FSkillTreeBranchStateData >(m, "FSkillTreeBranchStateData")
		.def(py::init<>())
		.def_property("bIsUnlocked", [](FSkillTreeBranchStateData &self){return self.bIsUnlocked;}, [](FSkillTreeBranchStateData &self, bool value){self.bIsUnlocked = value ? 1 : 0;})
		.def_readwrite("BranchDefinition", &FSkillTreeBranchStateData::BranchDefinition, py::return_value_policy::reference)
		.def_readwrite("PointsSpentInBranch", &FSkillTreeBranchStateData::PointsSpentInBranch)
		.def_readwrite("MaxPointsForBranch", &FSkillTreeBranchStateData::MaxPointsForBranch)
		;
	py::class_< FPlayerSkillTreeBranchData >(m, "FPlayerSkillTreeBranchData")
		.def(py::init<>())
		.def_readwrite("Definition", &FPlayerSkillTreeBranchData::Definition, py::return_value_policy::reference)
		.def_readwrite("BranchPointsToUnlockNextBranch", &FPlayerSkillTreeBranchData::BranchPointsToUnlockNextBranch)
		.def_readwrite("Index", &FPlayerSkillTreeBranchData::Index)
		.def_readwrite("ParentBranchIndex", &FPlayerSkillTreeBranchData::ParentBranchIndex)
		.def_readwrite("PrevBranchIndex", &FPlayerSkillTreeBranchData::PrevBranchIndex)
		.def_readwrite("NextBranchIndex", &FPlayerSkillTreeBranchData::NextBranchIndex)
		.def_readwrite("ChildBranchIndices", &FPlayerSkillTreeBranchData::ChildBranchIndices, py::return_value_policy::reference)
		.def_readwrite("TierIndices", &FPlayerSkillTreeBranchData::TierIndices, py::return_value_policy::reference)
		.def_readwrite("Owner", &FPlayerSkillTreeBranchData::Owner, py::return_value_policy::reference)
		;
	py::class_< FPlayerSkillTreeTierData >(m, "FPlayerSkillTreeTierData")
		.def(py::init<>())
		.def_property("bUnlocked", [](FPlayerSkillTreeTierData &self){return self.bUnlocked;}, [](FPlayerSkillTreeTierData &self, bool value){self.bUnlocked = value ? 1 : 0;})
		.def_readwrite("SkillIndices", &FPlayerSkillTreeTierData::SkillIndices, py::return_value_policy::reference)
		.def_readwrite("BranchPointsToUnlockTier", &FPlayerSkillTreeTierData::BranchPointsToUnlockTier)
		.def_readwrite("Index", &FPlayerSkillTreeTierData::Index)
		.def_readwrite("PrevTierIndex", &FPlayerSkillTreeTierData::PrevTierIndex)
		.def_readwrite("NextTierIndex", &FPlayerSkillTreeTierData::NextTierIndex)
		.def_readwrite("ParentBranchIndex", &FPlayerSkillTreeTierData::ParentBranchIndex)
		.def_readwrite("TierNumber", &FPlayerSkillTreeTierData::TierNumber)
		.def_readwrite("Owner", &FPlayerSkillTreeTierData::Owner, py::return_value_policy::reference)
		;
	py::class_< FPlayerSkillTreeSkillData >(m, "FPlayerSkillTreeSkillData")
		.def(py::init<>())
		.def_readwrite("Definition", &FPlayerSkillTreeSkillData::Definition, py::return_value_policy::reference)
		.def_readwrite("Index", &FPlayerSkillTreeSkillData::Index)
		.def_readwrite("PrevSkillIndex", &FPlayerSkillTreeSkillData::PrevSkillIndex)
		.def_readwrite("NextSkillIndex", &FPlayerSkillTreeSkillData::NextSkillIndex)
		.def_readwrite("ParentTierIndex", &FPlayerSkillTreeSkillData::ParentTierIndex)
		.def_readwrite("PrevSkillTypeIndex", &FPlayerSkillTreeSkillData::PrevSkillTypeIndex)
		.def_readwrite("NextSkillTypeIndex", &FPlayerSkillTreeSkillData::NextSkillTypeIndex)
		.def_readwrite("Grade", &FPlayerSkillTreeSkillData::Grade)
		.def_readwrite("Owner", &FPlayerSkillTreeSkillData::Owner, py::return_value_policy::reference)
		;
	py::class_< FSkillTreeSkillStateData >(m, "FSkillTreeSkillStateData")
		.def(py::init<>())
		.def_property("bIsUnlocked", [](FSkillTreeSkillStateData &self){return self.bIsUnlocked;}, [](FSkillTreeSkillStateData &self, bool value){self.bIsUnlocked = value ? 1 : 0;})
		.def_readwrite("SkillDefinition", &FSkillTreeSkillStateData::SkillDefinition, py::return_value_policy::reference)
		.def_readwrite("ParentBranchDefinition", &FSkillTreeSkillStateData::ParentBranchDefinition, py::return_value_policy::reference)
		.def_readwrite("TierNumber", &FSkillTreeSkillStateData::TierNumber)
		.def_readwrite("SkillGrade", &FSkillTreeSkillStateData::SkillGrade)
		;
	py::class_< FMissionPlaythroughData >(m, "FMissionPlaythroughData")
		.def(py::init<>())
		.def_readwrite("MissionList", &FMissionPlaythroughData::MissionList, py::return_value_policy::reference)
		.def_readwrite("UnloadableDlcMissionList", &FMissionPlaythroughData::UnloadableDlcMissionList, py::return_value_policy::reference)
		.def_readwrite("UnloadableDlcPendingMissionRewards", &FMissionPlaythroughData::UnloadableDlcPendingMissionRewards, py::return_value_policy::reference)
		.def_readwrite("FilteredMissions", &FMissionPlaythroughData::FilteredMissions, py::return_value_policy::reference)
		.def_readwrite("ActiveMission", &FMissionPlaythroughData::ActiveMission, py::return_value_policy::reference)
		.def_readwrite("PlayThroughNumber", &FMissionPlaythroughData::PlayThroughNumber)
		;
	py::class_< FPendingClientTrainingMessage >(m, "FPendingClientTrainingMessage")
		.def(py::init<>())
		.def_readwrite("Message", &FPendingClientTrainingMessage::Message, py::return_value_policy::reference)
		.def_readwrite("TrainingDefinition", &FPendingClientTrainingMessage::TrainingDefinition, py::return_value_policy::reference)
		.def_readwrite("Duration", &FPendingClientTrainingMessage::Duration)
		;
	py::class_< FTaggedGFxMovie >(m, "FTaggedGFxMovie")
		.def(py::init<>())
		.def_readwrite("Movie", &FTaggedGFxMovie::Movie, py::return_value_policy::reference)
		.def_readwrite("Tag", &FTaggedGFxMovie::Tag, py::return_value_policy::reference)
		;
	py::class_< FPlayerSaveData >(m, "FPlayerSaveData")
		.def(py::init<>())
		.def_property("bIsUnloadedDlcCharacter", [](FPlayerSaveData &self){return self.bIsUnloadedDlcCharacter;}, [](FPlayerSaveData &self, bool value){self.bIsUnloadedDlcCharacter = value ? 1 : 0;})
		.def_readwrite("FilePath", &FPlayerSaveData::FilePath, py::return_value_policy::reference)
		.def_readwrite("TimeStamp", &FPlayerSaveData::TimeStamp, py::return_value_policy::reference)
		.def_readwrite("PlayerClassDefName", &FPlayerSaveData::PlayerClassDefName, py::return_value_policy::reference)
		.def_readwrite("ClassName", &FPlayerSaveData::ClassName, py::return_value_policy::reference)
		.def_readwrite("CharacterName", &FPlayerSaveData::CharacterName, py::return_value_policy::reference)
		.def_readwrite("ExpLevel", &FPlayerSaveData::ExpLevel)
		.def_readwrite("UICharacterName", &FPlayerSaveData::UICharacterName, py::return_value_policy::reference)
		.def_readwrite("PlaythroughsCompleted", &FPlayerSaveData::PlaythroughsCompleted)
		.def_readwrite("LastVisitedTeleporter", &FPlayerSaveData::LastVisitedTeleporter, py::return_value_policy::reference)
		.def_readwrite("ActiveMissionNumber", &FPlayerSaveData::ActiveMissionNumber)
		.def_readwrite("PlotMissionNumber", &FPlayerSaveData::PlotMissionNumber)
		.def_readwrite("TotalPlayTime", &FPlayerSaveData::TotalPlayTime)
		.def_readwrite("LastPlaythroughNumber", &FPlayerSaveData::LastPlaythroughNumber)
		.def_readwrite("LastSaveDate", &FPlayerSaveData::LastSaveDate, py::return_value_policy::reference)
		.def_readwrite("SaveGuid", &FPlayerSaveData::SaveGuid, py::return_value_policy::reference)
		.def_readwrite("SaveGameFileId", &FPlayerSaveData::SaveGameFileId)
		.def_readwrite("ExpPoints", &FPlayerSaveData::ExpPoints)
		;
	py::class_< FLoadInfo >(m, "FLoadInfo")
		.def(py::init<>())
		.def_property("LoadInfoReady", [](FLoadInfo &self){return self.LoadInfoReady;}, [](FLoadInfo &self, bool value){self.LoadInfoReady = value ? 1 : 0;})
		.def_property("LoadSucceeded", [](FLoadInfo &self){return self.LoadSucceeded;}, [](FLoadInfo &self, bool value){self.LoadSucceeded = value ? 1 : 0;})
		.def_property("LoadCancelled", [](FLoadInfo &self){return self.LoadCancelled;}, [](FLoadInfo &self, bool value){self.LoadCancelled = value ? 1 : 0;})
		.def_readwrite("CharacterData", &FLoadInfo::CharacterData, py::return_value_policy::reference)
		;
	py::class_< FScreenParticleRecord >(m, "FScreenParticleRecord")
		.def(py::init<>())
		.def_readwrite("Tag", &FScreenParticleRecord::Tag, py::return_value_policy::reference)
		.def_readwrite("Template", &FScreenParticleRecord::Template, py::return_value_policy::reference)
		.def_readwrite("MatParamName", &FScreenParticleRecord::MatParamName, py::return_value_policy::reference)
		.def_readwrite("Component", &FScreenParticleRecord::Component, py::return_value_policy::reference)
		.def_readwrite("AppliedModifiers", &FScreenParticleRecord::AppliedModifiers, py::return_value_policy::reference)
		.def_readwrite("ContentDims", &FScreenParticleRecord::ContentDims, py::return_value_policy::reference)
		.def_readwrite("ParticleDepth", &FScreenParticleRecord::ParticleDepth)
		.def_readwrite("ScalingMode", &FScreenParticleRecord::ScalingMode)
		.def_readwrite("StopParamsOT", &FScreenParticleRecord::StopParamsOT, py::return_value_policy::reference)
		.def_readwrite("StopTime", &FScreenParticleRecord::StopTime)
		;
	py::class_< FTrainingData >(m, "FTrainingData")
		.def(py::init<>())
		.def_readwrite("PCOwner", &FTrainingData::PCOwner, py::return_value_policy::reference)
		.def_readwrite("TrainingDefinition", &FTrainingData::TrainingDefinition, py::return_value_policy::reference)
		;
	py::class_< FPostProcessChainRecord >(m, "FPostProcessChainRecord")
		.def(py::init<>())
		.def_property("PopWhenScalarParamIsMaxedOut", [](FPostProcessChainRecord &self){return self.PopWhenScalarParamIsMaxedOut;}, [](FPostProcessChainRecord &self, bool value){self.PopWhenScalarParamIsMaxedOut = value ? 1 : 0;})
		.def_readwrite("Template", &FPostProcessChainRecord::Template, py::return_value_policy::reference)
		.def_readwrite("Instance", &FPostProcessChainRecord::Instance, py::return_value_policy::reference)
		.def_readwrite("AppliedModifiers", &FPostProcessChainRecord::AppliedModifiers, py::return_value_policy::reference)
		.def_readwrite("DOFEffectModifier", &FPostProcessChainRecord::DOFEffectModifier, py::return_value_policy::reference)
		.def_readwrite("NextDOFUpdateTime", &FPostProcessChainRecord::NextDOFUpdateTime)
		;
	py::class_< FInteractionIconWithOverrides >(m, "FInteractionIconWithOverrides")
		.def(py::init<>())
		.def_property("bOverrideIcon", [](FInteractionIconWithOverrides &self){return self.bOverrideIcon;}, [](FInteractionIconWithOverrides &self, bool value){self.bOverrideIcon = value ? 1 : 0;})
		.def_property("bOverrideAction", [](FInteractionIconWithOverrides &self){return self.bOverrideAction;}, [](FInteractionIconWithOverrides &self, bool value){self.bOverrideAction = value ? 1 : 0;})
		.def_property("bOverrideText", [](FInteractionIconWithOverrides &self){return self.bOverrideText;}, [](FInteractionIconWithOverrides &self, bool value){self.bOverrideText = value ? 1 : 0;})
		.def_readwrite("IconDef", &FInteractionIconWithOverrides::IconDef, py::return_value_policy::reference)
		.def_readwrite("OverrideIconDef", &FInteractionIconWithOverrides::OverrideIconDef, py::return_value_policy::reference)
		.def_readwrite("bCostsToUse", &FInteractionIconWithOverrides::bCostsToUse)
		.def_readwrite("CostsCurrencyType", &FInteractionIconWithOverrides::CostsCurrencyType)
		.def_readwrite("CostsAmount", &FInteractionIconWithOverrides::CostsAmount)
		;
	py::class_< FMissionRewardData >(m, "FMissionRewardData")
		.def(py::init<>())
		.def_property("bGrantAltReward", [](FMissionRewardData &self){return self.bGrantAltReward;}, [](FMissionRewardData &self, bool value){self.bGrantAltReward = value ? 1 : 0;})
		.def_readwrite("MissionDef", &FMissionRewardData::MissionDef, py::return_value_policy::reference)
		;
	py::class_< FTombstoneData >(m, "FTombstoneData")
		.def(py::init<>())
		.def_readwrite("TotalTimePlayed", &FTombstoneData::TotalTimePlayed)
		.def_readwrite("CharacterLevel", &FTombstoneData::CharacterLevel)
		.def_readwrite("PercentMissionsComplete", &FTombstoneData::PercentMissionsComplete)
		.def_readwrite("PercentChallengesComplete", &FTombstoneData::PercentChallengesComplete)
		.def_readwrite("CharacterName", &FTombstoneData::CharacterName, py::return_value_policy::reference)
		.def_readwrite("FavoriteManufacturer", &FTombstoneData::FavoriteManufacturer, py::return_value_policy::reference)
		.def_readwrite("FavoriteWeaponType", &FTombstoneData::FavoriteWeaponType, py::return_value_policy::reference)
		.def_readwrite("KilledByDescription", &FTombstoneData::KilledByDescription, py::return_value_policy::reference)
		.def_readwrite("ScreenshotFilename", &FTombstoneData::ScreenshotFilename, py::return_value_policy::reference)
		;
	py::class_< FStatusMenuMissionEligibilityData >(m, "FStatusMenuMissionEligibilityData")
		.def(py::init<>())
		.def_property("bIsBlocked", [](FStatusMenuMissionEligibilityData &self){return self.bIsBlocked;}, [](FStatusMenuMissionEligibilityData &self, bool value){self.bIsBlocked = value ? 1 : 0;})
		.def_property("bIsFiltered", [](FStatusMenuMissionEligibilityData &self){return self.bIsFiltered;}, [](FStatusMenuMissionEligibilityData &self, bool value){self.bIsFiltered = value ? 1 : 0;})
		.def_readwrite("MissionDef", &FStatusMenuMissionEligibilityData::MissionDef, py::return_value_policy::reference)
		.def_readwrite("MissionStatus", &FStatusMenuMissionEligibilityData::MissionStatus)
		;
	py::class_< FCurrencyState >(m, "FCurrencyState")
		.def(py::init<>())
		.def_readwrite("FormOfCurrency", &FCurrencyState::FormOfCurrency)
		.def_readwrite("StatName", &FCurrencyState::StatName, py::return_value_policy::reference)
		.def_readwrite("CurrentAmount", &FCurrencyState::CurrentAmount)
		.def_readwrite("LastKnownAmount", &FCurrencyState::LastKnownAmount)
		;
	py::class_< FPostProcessOverlayInfo >(m, "FPostProcessOverlayInfo")
		.def(py::init<>())
		.def_readwrite("PostProcessOverlay", &FPostProcessOverlayInfo::PostProcessOverlay, py::return_value_policy::reference)
		.def_readwrite("SceneInterpolationPhaseTime", &FPostProcessOverlayInfo::SceneInterpolationPhaseTime)
		.def_readwrite("SceneInterpolationDuration", &FPostProcessOverlayInfo::SceneInterpolationDuration)
		.def_readwrite("PostProcessOverlayPhase", &FPostProcessOverlayInfo::PostProcessOverlayPhase)
		;
	py::class_< FSpeedKillData >(m, "FSpeedKillData")
		.def(py::init<>())
		.def_readwrite("VictimName", &FSpeedKillData::VictimName, py::return_value_policy::reference)
		.def_readwrite("VictimKillTime", &FSpeedKillData::VictimKillTime)
		;
	py::class_< FLungeData >(m, "FLungeData")
		.def(py::init<>())
		.def_readwrite("Target", &FLungeData::Target, py::return_value_policy::reference)
		.def_readwrite("Length", &FLungeData::Length)
		.def_readwrite("Start", &FLungeData::Start)
		.def_readwrite("SavedAccelRate", &FLungeData::SavedAccelRate)
		;
	py::class_< FLurchData >(m, "FLurchData")
		.def(py::init<>())
		.def_readwrite("StartTime", &FLurchData::StartTime)
		.def_readwrite("LocMagnitude", &FLurchData::LocMagnitude)
		.def_readwrite("RotMagnitude", &FLurchData::RotMagnitude)
		.def_readwrite("Duration", &FLurchData::Duration)
		.def_readwrite("FalloffRate", &FLurchData::FalloffRate)
		;
	py::class_< FPlayerRecentDamageEventData >(m, "FPlayerRecentDamageEventData")
		.def(py::init<>())
		.def_property("bDirty", [](FPlayerRecentDamageEventData &self){return self.bDirty;}, [](FPlayerRecentDamageEventData &self, bool value){self.bDirty = value ? 1 : 0;})
		.def_readwrite("DamageTypeDefinition", &FPlayerRecentDamageEventData::DamageTypeDefinition, py::return_value_policy::reference)
		.def_readwrite("DamageLocation", &FPlayerRecentDamageEventData::DamageLocation, py::return_value_policy::reference)
		.def_readwrite("TotalDamageForDamageType", &FPlayerRecentDamageEventData::TotalDamageForDamageType)
		.def_readwrite("DamageEventFlags", &FPlayerRecentDamageEventData::DamageEventFlags)
		.def_readwrite("DamageTime", &FPlayerRecentDamageEventData::DamageTime)
		.def_readwrite("DamagedActor", &FPlayerRecentDamageEventData::DamagedActor, py::return_value_policy::reference)
		;
	py::class_< FRecentlyResistedAttackData >(m, "FRecentlyResistedAttackData")
		.def(py::init<>())
		.def_readwrite("DamagedActor", &FRecentlyResistedAttackData::DamagedActor, py::return_value_policy::reference)
		.def_readwrite("DamageType", &FRecentlyResistedAttackData::DamageType)
		.def_readwrite("LastResistTime", &FRecentlyResistedAttackData::LastResistTime)
		;
	py::class_< FCustomizationUnlockData >(m, "FCustomizationUnlockData")
		.def(py::init<>())
		.def_readwrite("ProductID", &FCustomizationUnlockData::ProductID)
		.def_readwrite("NumUnlockedCustomizations", &FCustomizationUnlockData::NumUnlockedCustomizations)
		.def_readwrite("UnlockedMask", &FCustomizationUnlockData::UnlockedMask, py::return_value_policy::reference)
		;
	py::class_< FPendingMissionRewardsData >(m, "FPendingMissionRewardsData")
		.def(py::init<>())
		.def_readwrite("PendingMissionRewards", &FPendingMissionRewardsData::PendingMissionRewards, py::return_value_policy::reference)
		.def_readwrite("PlaythroughIndex", &FPendingMissionRewardsData::PlaythroughIndex)
		;
	py::class_< FPopulatedInteractiveObjectMemento >(m, "FPopulatedInteractiveObjectMemento")
		.def(py::init<>())
		.def_readwrite("BehaviorSequenceState", &FPopulatedInteractiveObjectMemento::BehaviorSequenceState)
		;
	py::class_< FFeaturedItemData >(m, "FFeaturedItemData")
		.def(py::init<>())
		.def_readwrite("CommerceMarkup", &FFeaturedItemData::CommerceMarkup, py::return_value_policy::reference)
		.def_readwrite("LootConfiguration", &FFeaturedItemData::LootConfiguration, py::return_value_policy::reference)
		.def_readwrite("GameStageValue", &FFeaturedItemData::GameStageValue, py::return_value_policy::reference)
		.def_readwrite("AwesomeLevelValue", &FFeaturedItemData::AwesomeLevelValue, py::return_value_policy::reference)
		;
	py::class_< FVehicleDefaultCrewStruct >(m, "FVehicleDefaultCrewStruct")
		.def(py::init<>())
		.def_property("OverrideDefaultSeat", [](FVehicleDefaultCrewStruct &self){return self.OverrideDefaultSeat;}, [](FVehicleDefaultCrewStruct &self, bool value){self.OverrideDefaultSeat = value ? 1 : 0;})
		.def_readwrite("PopulationDefForRole", &FVehicleDefaultCrewStruct::PopulationDefForRole, py::return_value_policy::reference)
		.def_readwrite("Role", &FVehicleDefaultCrewStruct::Role)
		.def_readwrite("ProbabilityOfSpawn", &FVehicleDefaultCrewStruct::ProbabilityOfSpawn, py::return_value_policy::reference)
		.def_readwrite("PreferredSeat", &FVehicleDefaultCrewStruct::PreferredSeat)
		;
	py::class_< FPopulationOptionDenSpawnData >(m, "FPopulationOptionDenSpawnData")
		.def(py::init<>())
		.def_readwrite("PopulationDefName", &FPopulationOptionDenSpawnData::PopulationDefName, py::return_value_policy::reference)
		.def_readwrite("MaxActiveActors", &FPopulationOptionDenSpawnData::MaxActiveActors)
		.def_readwrite("NumTotalActors", &FPopulationOptionDenSpawnData::NumTotalActors)
		.def_readwrite("NumActiveActors", &FPopulationOptionDenSpawnData::NumActiveActors)
		.def_readwrite("NextSpawnTime", &FPopulationOptionDenSpawnData::NextSpawnTime)
		.def_readwrite("NumTotalExternalActors", &FPopulationOptionDenSpawnData::NumTotalExternalActors)
		.def_readwrite("NumActiveExternalActors", &FPopulationOptionDenSpawnData::NumActiveExternalActors)
		;
	py::class_< FHomingRadiusThreshold >(m, "FHomingRadiusThreshold")
		.def(py::init<>())
		.def_readwrite("Radius", &FHomingRadiusThreshold::Radius)
		.def_readwrite("MaxAngleCos", &FHomingRadiusThreshold::MaxAngleCos)
		.def_readwrite("Behaviors", &FHomingRadiusThreshold::Behaviors, py::return_value_policy::reference)
		;
	py::class_< FBonusAttributeModifierUpgrade >(m, "FBonusAttributeModifierUpgrade")
		.def(py::init<>())
		.def_readwrite("GradeToApplyAt", &FBonusAttributeModifierUpgrade::GradeToApplyAt)
		.def_readwrite("Modifier", &FBonusAttributeModifierUpgrade::Modifier)
		;
	py::class_< FSkillEffectData >(m, "FSkillEffectData")
		.def(py::init<>())
		.def_property("bIncludeDuelingTargets", [](FSkillEffectData &self){return self.bIncludeDuelingTargets;}, [](FSkillEffectData &self, bool value){self.bIncludeDuelingTargets = value ? 1 : 0;})
		.def_property("bIncludeSelfAsTarget", [](FSkillEffectData &self){return self.bIncludeSelfAsTarget;}, [](FSkillEffectData &self, bool value){self.bIncludeSelfAsTarget = value ? 1 : 0;})
		.def_property("bOnlyEffectTargetsInRange", [](FSkillEffectData &self){return self.bOnlyEffectTargetsInRange;}, [](FSkillEffectData &self, bool value){self.bOnlyEffectTargetsInRange = value ? 1 : 0;})
		.def_property("bExcludeNonPlayerCharacters", [](FSkillEffectData &self){return self.bExcludeNonPlayerCharacters;}, [](FSkillEffectData &self, bool value){self.bExcludeNonPlayerCharacters = value ? 1 : 0;})
		.def_readwrite("AttributeToModify", &FSkillEffectData::AttributeToModify, py::return_value_policy::reference)
		.def_readwrite("EffectTarget", &FSkillEffectData::EffectTarget)
		.def_readwrite("TargetInstanceDataName", &FSkillEffectData::TargetInstanceDataName, py::return_value_policy::reference)
		.def_readwrite("TargetCriteria", &FSkillEffectData::TargetCriteria)
		.def_readwrite("ModifierType", &FSkillEffectData::ModifierType)
		.def_readwrite("BaseModifierValue", &FSkillEffectData::BaseModifierValue, py::return_value_policy::reference)
		.def_readwrite("GradeToStartApplyingEffect", &FSkillEffectData::GradeToStartApplyingEffect)
		.def_readwrite("PerGradeUpgradeInterval", &FSkillEffectData::PerGradeUpgradeInterval)
		.def_readwrite("PerGradeUpgrade", &FSkillEffectData::PerGradeUpgrade, py::return_value_policy::reference)
		.def_readwrite("BonusUpgradeList", &FSkillEffectData::BonusUpgradeList, py::return_value_policy::reference)
		;
	py::class_< FSkillConstraintData >(m, "FSkillConstraintData")
		.def(py::init<>())
		.def_property("bApplyConstraintOnActivatation", [](FSkillConstraintData &self){return self.bApplyConstraintOnActivatation;}, [](FSkillConstraintData &self, bool value){self.bApplyConstraintOnActivatation = value ? 1 : 0;})
		.def_property("bApplyConstraintWhileActive", [](FSkillConstraintData &self){return self.bApplyConstraintWhileActive;}, [](FSkillConstraintData &self, bool value){self.bApplyConstraintWhileActive = value ? 1 : 0;})
		.def_property("bApplyConstraintWhilePaused", [](FSkillConstraintData &self){return self.bApplyConstraintWhilePaused;}, [](FSkillConstraintData &self, bool value){self.bApplyConstraintWhilePaused = value ? 1 : 0;})
		.def_readwrite("OnFailure", &FSkillConstraintData::OnFailure)
		.def_readwrite("Evaluator", &FSkillConstraintData::Evaluator, py::return_value_policy::reference)
		.def_readwrite("EvaluatorDefinitions", &FSkillConstraintData::EvaluatorDefinitions, py::return_value_policy::reference)
		;
	py::class_< FSkillActionData >(m, "FSkillActionData")
		.def(py::init<>())
		.def_property("bSkillOnInstigator", [](FSkillActionData &self){return self.bSkillOnInstigator;}, [](FSkillActionData &self, bool value){self.bSkillOnInstigator = value ? 1 : 0;})
		.def_property("bSkillOnRecipient", [](FSkillActionData &self){return self.bSkillOnRecipient;}, [](FSkillActionData &self, bool value){self.bSkillOnRecipient = value ? 1 : 0;})
		.def_property("bInstigatorPlaysSound", [](FSkillActionData &self){return self.bInstigatorPlaysSound;}, [](FSkillActionData &self, bool value){self.bInstigatorPlaysSound = value ? 1 : 0;})
		.def_property("bRecipientPlaysSound", [](FSkillActionData &self){return self.bRecipientPlaysSound;}, [](FSkillActionData &self, bool value){self.bRecipientPlaysSound = value ? 1 : 0;})
		.def_readwrite("ClientConsoleCommand", &FSkillActionData::ClientConsoleCommand, py::return_value_policy::reference)
		.def_readwrite("GradeType", &FSkillActionData::GradeType)
		.def_readwrite("HardcodedGrade", &FSkillActionData::HardcodedGrade)
		.def_readwrite("SkillToActivate", &FSkillActionData::SkillToActivate, py::return_value_policy::reference)
		.def_readwrite("SkillToDeactivate", &FSkillActionData::SkillToDeactivate, py::return_value_policy::reference)
		.def_readwrite("AkEvent", &FSkillActionData::AkEvent, py::return_value_policy::reference)
		;
	py::class_< FSkillEventResponseData >(m, "FSkillEventResponseData")
		.def(py::init<>())
		.def_property("bPredictOnClient", [](FSkillEventResponseData &self){return self.bPredictOnClient;}, [](FSkillEventResponseData &self, bool value){self.bPredictOnClient = value ? 1 : 0;})
		.def_readwrite("EventType", &FSkillEventResponseData::EventType)
		.def_readwrite("Action", &FSkillEventResponseData::Action, py::return_value_policy::reference)
		;
	py::class_< FNamedSkillEvent >(m, "FNamedSkillEvent")
		.def(py::init<>())
		.def_readwrite("EventName", &FNamedSkillEvent::EventName, py::return_value_policy::reference)
		.def_readwrite("RequiredSkills", &FNamedSkillEvent::RequiredSkills, py::return_value_policy::reference)
		.def_readwrite("EventResponses", &FNamedSkillEvent::EventResponses, py::return_value_policy::reference)
		.def_readwrite("RequiredActionSkillState", &FNamedSkillEvent::RequiredActionSkillState)
		;
	py::class_< FSkillDamagedEventConstraintData >(m, "FSkillDamagedEventConstraintData")
		.def(py::init<>())
		.def_property("bMustBeCriticalDamage", [](FSkillDamagedEventConstraintData &self){return self.bMustBeCriticalDamage;}, [](FSkillDamagedEventConstraintData &self, bool value){self.bMustBeCriticalDamage = value ? 1 : 0;})
		.def_property("bMustBeOneShotKill", [](FSkillDamagedEventConstraintData &self){return self.bMustBeOneShotKill;}, [](FSkillDamagedEventConstraintData &self, bool value){self.bMustBeOneShotKill = value ? 1 : 0;})
		.def_readwrite("DamageTypeConstraint", &FSkillDamagedEventConstraintData::DamageTypeConstraint, py::return_value_policy::reference)
		.def_readwrite("DamageSourceConstraint", &FSkillDamagedEventConstraintData::DamageSourceConstraint, py::return_value_policy::reference)
		;
	py::class_< FSkillDamageEventData, FSpecializedBehaviorEvent >(m, "FSkillDamageEventData")
		.def(py::init<>())
		.def_readwrite("EventType", &FSkillDamageEventData::EventType)
		.def_readwrite("EventConstraints", &FSkillDamageEventData::EventConstraints, py::return_value_policy::reference)
		;
	py::class_< FSkillKillEventData, FSpecializedBehaviorEvent >(m, "FSkillKillEventData")
		.def(py::init<>())
		.def_readwrite("EventType", &FSkillKillEventData::EventType)
		.def_readwrite("EventConstraints", &FSkillKillEventData::EventConstraints, py::return_value_policy::reference)
		;
	py::class_< FAppliedSkillEffect >(m, "FAppliedSkillEffect")
		.def(py::init<>())
		.def_readwrite("EffectData", &FAppliedSkillEffect::EffectData, py::return_value_policy::reference)
		.def_readwrite("Contexts", &FAppliedSkillEffect::Contexts, py::return_value_policy::reference)
		.def_readwrite("Modifier", &FAppliedSkillEffect::Modifier, py::return_value_policy::reference)
		;
	py::class_< FTier >(m, "FTier")
		.def(py::init<>())
		.def_readwrite("Skills", &FTier::Skills, py::return_value_policy::reference)
		.def_readwrite("PointsToUnlockNextTier", &FTier::PointsToUnlockNextTier)
		;
	py::class_< FTierLayout >(m, "FTierLayout")
		.def(py::init<>())
		.def_readwrite("bCellIsOccupied", &FTierLayout::bCellIsOccupied, py::return_value_policy::reference)
		;
	py::class_< FStaggeredRecoveryRotationData >(m, "FStaggeredRecoveryRotationData")
		.def(py::init<>())
		.def_readwrite("BoneName", &FStaggeredRecoveryRotationData::BoneName, py::return_value_policy::reference)
		.def_readwrite("BoneAxis", &FStaggeredRecoveryRotationData::BoneAxis)
		;
	py::class_< FDamageSurfaceTypeModifier >(m, "FDamageSurfaceTypeModifier")
		.def(py::init<>())
		.def_readwrite("SurfaceType", &FDamageSurfaceTypeModifier::SurfaceType)
		.def_readwrite("BaseChance", &FDamageSurfaceTypeModifier::BaseChance, py::return_value_policy::reference)
		.def_readwrite("BaseSpreadChance", &FDamageSurfaceTypeModifier::BaseSpreadChance, py::return_value_policy::reference)
		.def_readwrite("SpreadChanceDecayMultiplier", &FDamageSurfaceTypeModifier::SpreadChanceDecayMultiplier, py::return_value_policy::reference)
		;
	py::class_< FEffectSoundData >(m, "FEffectSoundData")
		.def(py::init<>())
		.def_readwrite("Type", &FEffectSoundData::Type)
		.def_readwrite("AkPlayingId", &FEffectSoundData::AkPlayingId)
		;
	py::class_< FSocketEmitter >(m, "FSocketEmitter")
		.def(py::init<>())
		.def_readwrite("Emitter", &FSocketEmitter::Emitter, py::return_value_policy::reference)
		.def_readwrite("SocketName", &FSocketEmitter::SocketName, py::return_value_policy::reference)
		;
	py::class_< FHitRegionEmitters >(m, "FHitRegionEmitters")
		.def(py::init<>())
		.def_property("bDeleteOnDeactivation", [](FHitRegionEmitters &self){return self.bDeleteOnDeactivation;}, [](FHitRegionEmitters &self, bool value){self.bDeleteOnDeactivation = value ? 1 : 0;})
		.def_readwrite("Emitters", &FHitRegionEmitters::Emitters, py::return_value_policy::reference)
		.def_readwrite("HitRegion", &FHitRegionEmitters::HitRegion, py::return_value_policy::reference)
		.def_readwrite("TimeWaitingToDie", &FHitRegionEmitters::TimeWaitingToDie)
		;
	py::class_< FActiveStatusEffect >(m, "FActiveStatusEffect")
		.def(py::init<>())
		.def_property("bIsInfiniteDuration", [](FActiveStatusEffect &self){return self.bIsInfiniteDuration;}, [](FActiveStatusEffect &self, bool value){self.bIsInfiniteDuration = value ? 1 : 0;})
		.def_readwrite("Duration", &FActiveStatusEffect::Duration)
		.def_readwrite("TotalElapsedTime", &FActiveStatusEffect::TotalElapsedTime)
		.def_readwrite("AccumulatedTime", &FActiveStatusEffect::AccumulatedTime)
		.def_readwrite("DamagePerSecond", &FActiveStatusEffect::DamagePerSecond)
		.def_readwrite("EventInstigator", &FActiveStatusEffect::EventInstigator, py::return_value_policy::reference)
		.def_readwrite("DamageCauser", &FActiveStatusEffect::DamageCauser)
		.def_readwrite("DamageSource", &FActiveStatusEffect::DamageSource, py::return_value_policy::reference)
		.def_readwrite("StatusEffectDefinition", &FActiveStatusEffect::StatusEffectDefinition, py::return_value_policy::reference)
		.def_readwrite("HitRegion", &FActiveStatusEffect::HitRegion, py::return_value_policy::reference)
		.def_readwrite("HitInfo", &FActiveStatusEffect::HitInfo, py::return_value_policy::reference)
		.def_readwrite("DamageNumberSocket", &FActiveStatusEffect::DamageNumberSocket, py::return_value_policy::reference)
		.def_readwrite("AccumulatedSpreadTime", &FActiveStatusEffect::AccumulatedSpreadTime)
		.def_readwrite("SpreadTimeInterval", &FActiveStatusEffect::SpreadTimeInterval)
		.def_readwrite("SpreadCount", &FActiveStatusEffect::SpreadCount)
		.def_readwrite("SpreadAttempt", &FActiveStatusEffect::SpreadAttempt)
		.def_readwrite("SpreadRadius", &FActiveStatusEffect::SpreadRadius)
		.def_readwrite("TravelledRegions", &FActiveStatusEffect::TravelledRegions, py::return_value_policy::reference)
		.def_readwrite("TravelledTargets", &FActiveStatusEffect::TravelledTargets, py::return_value_policy::reference)
		.def_readwrite("OwnerComponent", &FActiveStatusEffect::OwnerComponent, py::return_value_policy::reference)
		.def_readwrite("SpreadCap", &FActiveStatusEffect::SpreadCap)
		;
	py::class_< FOngoingEffectInfo >(m, "FOngoingEffectInfo")
		.def(py::init<>())
		.def_readwrite("TotalDamageDealtToHealth", &FOngoingEffectInfo::TotalDamageDealtToHealth)
		.def_readwrite("TotalDamageDealtToShields", &FOngoingEffectInfo::TotalDamageDealtToShields)
		.def_readwrite("Duration", &FOngoingEffectInfo::Duration)
		;
	py::class_< FTextMarkupEntry >(m, "FTextMarkupEntry")
		.def(py::init<>())
		.def_readwrite("MarkupTag", &FTextMarkupEntry::MarkupTag, py::return_value_policy::reference)
		.def_readwrite("HTMLMarkupBeginText", &FTextMarkupEntry::HTMLMarkupBeginText, py::return_value_policy::reference)
		.def_readwrite("HTMLMarkupEndText", &FTextMarkupEntry::HTMLMarkupEndText, py::return_value_policy::reference)
		.def_readwrite("MarkupBeginTag", &FTextMarkupEntry::MarkupBeginTag, py::return_value_policy::reference)
		.def_readwrite("MarkupEndTag", &FTextMarkupEntry::MarkupEndTag, py::return_value_policy::reference)
		;
	py::class_< FMissionStatusData >(m, "FMissionStatusData")
		.def(py::init<>())
		.def_property("bIsObjectiveSpecific", [](FMissionStatusData &self){return self.bIsObjectiveSpecific;}, [](FMissionStatusData &self, bool value){self.bIsObjectiveSpecific = value ? 1 : 0;})
		.def_readwrite("MissionDefinition", &FMissionStatusData::MissionDefinition, py::return_value_policy::reference)
		.def_readwrite("MissionStatus", &FMissionStatusData::MissionStatus)
		.def_readwrite("MissionObjective", &FMissionStatusData::MissionObjective, py::return_value_policy::reference)
		.def_readwrite("ObjectiveStatus", &FMissionStatusData::ObjectiveStatus)
		;
	py::class_< FTurnData >(m, "FTurnData")
		.def(py::init<>())
		.def_readwrite("MinRepeatTime", &FTurnData::MinRepeatTime)
		.def_readwrite("Left_46", &FTurnData::Left_46, py::return_value_policy::reference)
		.def_readwrite("Right_46", &FTurnData::Right_46, py::return_value_policy::reference)
		.def_readwrite("Left_91", &FTurnData::Left_91, py::return_value_policy::reference)
		.def_readwrite("Right_91", &FTurnData::Right_91, py::return_value_policy::reference)
		.def_readwrite("Left_181", &FTurnData::Left_181, py::return_value_policy::reference)
		.def_readwrite("Right_181", &FTurnData::Right_181, py::return_value_policy::reference)
		;
	py::class_< FVehicleGradeModifierData >(m, "FVehicleGradeModifierData")
		.def(py::init<>())
		.def_readwrite("CustomVehicle", &FVehicleGradeModifierData::CustomVehicle, py::return_value_policy::reference)
		.def_readwrite("DisplayName", &FVehicleGradeModifierData::DisplayName, py::return_value_policy::reference)
		.def_readwrite("ExpLevel", &FVehicleGradeModifierData::ExpLevel)
		.def_readwrite("OnSpawnCustomizations", &FVehicleGradeModifierData::OnSpawnCustomizations, py::return_value_policy::reference)
		;
	py::class_< FVehicleGameStageGradeWeightData, FGameStageGradeWeightData >(m, "FVehicleGameStageGradeWeightData")
		.def(py::init<>())
		.def_readwrite("GradeModifiers", &FVehicleGameStageGradeWeightData::GradeModifiers, py::return_value_policy::reference)
		;
	py::class_< FDamageTypeBySpeedStruct >(m, "FDamageTypeBySpeedStruct")
		.def(py::init<>())
		.def_readwrite("Speed", &FDamageTypeBySpeedStruct::Speed)
		.def_readwrite("DamageType", &FDamageTypeBySpeedStruct::DamageType, py::return_value_policy::reference)
		;
	py::class_< FCollisionDamageCalculation >(m, "FCollisionDamageCalculation")
		.def(py::init<>())
		.def_property("bApplyReverseMomentum", [](FCollisionDamageCalculation &self){return self.bApplyReverseMomentum;}, [](FCollisionDamageCalculation &self, bool value){self.bApplyReverseMomentum = value ? 1 : 0;})
		.def_property("bPercentOfTargetHealth", [](FCollisionDamageCalculation &self){return self.bPercentOfTargetHealth;}, [](FCollisionDamageCalculation &self, bool value){self.bPercentOfTargetHealth = value ? 1 : 0;})
		.def_property("bApplySpeedDamage", [](FCollisionDamageCalculation &self){return self.bApplySpeedDamage;}, [](FCollisionDamageCalculation &self, bool value){self.bApplySpeedDamage = value ? 1 : 0;})
		.def_property("bApplySpeedMomentum", [](FCollisionDamageCalculation &self){return self.bApplySpeedMomentum;}, [](FCollisionDamageCalculation &self, bool value){self.bApplySpeedMomentum = value ? 1 : 0;})
		.def_readwrite("DamageType", &FCollisionDamageCalculation::DamageType, py::return_value_policy::reference)
		.def_readwrite("DamageTypes", &FCollisionDamageCalculation::DamageTypes, py::return_value_policy::reference)
		.def_readwrite("Formula", &FCollisionDamageCalculation::Formula, py::return_value_policy::reference)
		.def_readwrite("MomentumFactor", &FCollisionDamageCalculation::MomentumFactor)
		.def_readwrite("AddZMomentum", &FCollisionDamageCalculation::AddZMomentum)
		;
	py::class_< FVehicleSeatDefinition >(m, "FVehicleSeatDefinition")
		.def(py::init<>())
		.def_property("bDoNotUseThisSeat", [](FVehicleSeatDefinition &self){return self.bDoNotUseThisSeat;}, [](FVehicleSeatDefinition &self, bool value){self.bDoNotUseThisSeat = value ? 1 : 0;})
		.def_readwrite("SeatDefinition", &FVehicleSeatDefinition::SeatDefinition, py::return_value_policy::reference)
		.def_readwrite("WeaponBalanceDefinition", &FVehicleSeatDefinition::WeaponBalanceDefinition, py::return_value_policy::reference)
		.def_readwrite("WeaponFireSMD", &FVehicleSeatDefinition::WeaponFireSMD, py::return_value_policy::reference)
		.def_readwrite("NextSeatIndex", &FVehicleSeatDefinition::NextSeatIndex)
		.def_readwrite("Anim_SeatSwap", &FVehicleSeatDefinition::Anim_SeatSwap, py::return_value_policy::reference)
		.def_readwrite("SeatAIDef", &FVehicleSeatDefinition::SeatAIDef, py::return_value_policy::reference)
		.def_readwrite("SeatInteractTextDefinition", &FVehicleSeatDefinition::SeatInteractTextDefinition, py::return_value_policy::reference)
		.def_readwrite("GunSocket", &FVehicleSeatDefinition::GunSocket, py::return_value_policy::reference)
		.def_readwrite("SeatNameEnter", &FVehicleSeatDefinition::SeatNameEnter, py::return_value_policy::reference)
		.def_readwrite("SeatNameExit", &FVehicleSeatDefinition::SeatNameExit, py::return_value_policy::reference)
		;
	py::class_< FVStatusEffectResistance >(m, "FVStatusEffectResistance")
		.def(py::init<>())
		.def_readwrite("ChanceResistance", &FVStatusEffectResistance::ChanceResistance, py::return_value_policy::reference)
		.def_readwrite("DurationResistance", &FVStatusEffectResistance::DurationResistance, py::return_value_policy::reference)
		;
	py::class_< FVehicleCrewAnimSetMapping >(m, "FVehicleCrewAnimSetMapping")
		.def(py::init<>())
		.def_readwrite("CharacterName", &FVehicleCrewAnimSetMapping::CharacterName, py::return_value_policy::reference)
		.def_readwrite("TheAnimSet", &FVehicleCrewAnimSetMapping::TheAnimSet, py::return_value_policy::reference)
		;
	py::class_< FVehicleHandlingWheelData >(m, "FVehicleHandlingWheelData")
		.def(py::init<>())
		.def_readwrite("BoneName", &FVehicleHandlingWheelData::BoneName, py::return_value_policy::reference)
		.def_readwrite("WheelDef", &FVehicleHandlingWheelData::WheelDef, py::return_value_policy::reference)
		;
	py::class_< FFishtailingInfo >(m, "FFishtailingInfo")
		.def(py::init<>())
		.def_readwrite("ContactPoint", &FFishtailingInfo::ContactPoint, py::return_value_policy::reference)
		.def_readwrite("Impulse", &FFishtailingInfo::Impulse, py::return_value_policy::reference)
		;
	py::class_< FVSSUsageTracking >(m, "FVSSUsageTracking")
		.def(py::init<>())
		.def_readwrite("TheTerminal", &FVSSUsageTracking::TheTerminal, py::return_value_policy::reference)
		.def_readwrite("ThePlayerName", &FVSSUsageTracking::ThePlayerName, py::return_value_policy::reference)
		;
	py::class_< FMissionObjectiveWaypointData >(m, "FMissionObjectiveWaypointData")
		.def(py::init<>())
		.def_readwrite("LinkedObjective", &FMissionObjectiveWaypointData::LinkedObjective, py::return_value_policy::reference)
		.def_readwrite("ObjectiveSetRestrictions", &FMissionObjectiveWaypointData::ObjectiveSetRestrictions, py::return_value_policy::reference)
		;
	py::class_< FWeaponAmmoResourceSelectorData >(m, "FWeaponAmmoResourceSelectorData")
		.def(py::init<>())
		.def_readwrite("AssociatedResourceName", &FWeaponAmmoResourceSelectorData::AssociatedResourceName, py::return_value_policy::reference)
		.def_readwrite("ValueIfMatched", &FWeaponAmmoResourceSelectorData::ValueIfMatched, py::return_value_policy::reference)
		;
	py::class_< FWeaponBoneControllerData >(m, "FWeaponBoneControllerData")
		.def(py::init<>())
		.def_property("bUseInFirstPerson", [](FWeaponBoneControllerData &self){return self.bUseInFirstPerson;}, [](FWeaponBoneControllerData &self, bool value){self.bUseInFirstPerson = value ? 1 : 0;})
		.def_property("bUseInThirdPerson", [](FWeaponBoneControllerData &self){return self.bUseInThirdPerson;}, [](FWeaponBoneControllerData &self, bool value){self.bUseInThirdPerson = value ? 1 : 0;})
		.def_readwrite("BoneName", &FWeaponBoneControllerData::BoneName, py::return_value_policy::reference)
		.def_readwrite("ControlType", &FWeaponBoneControllerData::ControlType)
		.def_readwrite("ControlTemplate", &FWeaponBoneControllerData::ControlTemplate, py::return_value_policy::reference)
		;
	py::class_< FWeaponTypeSelectorData >(m, "FWeaponTypeSelectorData")
		.def(py::init<>())
		.def_readwrite("WeaponType", &FWeaponTypeSelectorData::WeaponType)
		.def_readwrite("ValueIfMatched", &FWeaponTypeSelectorData::ValueIfMatched, py::return_value_policy::reference)
		;
	py::class_< FConditionalAnimationData >(m, "FConditionalAnimationData")
		.def(py::init<>())
		.def_readwrite("Expression", &FConditionalAnimationData::Expression, py::return_value_policy::reference)
		.def_readwrite("AnimationName", &FConditionalAnimationData::AnimationName, py::return_value_policy::reference)
		.def_readwrite("CameraAnim", &FConditionalAnimationData::CameraAnim, py::return_value_policy::reference)
		.def_readwrite("AnimSet", &FConditionalAnimationData::AnimSet, py::return_value_policy::reference)
		;
	py::class_< FWeaponPartAttachmentData >(m, "FWeaponPartAttachmentData")
		.def(py::init<>())
		.def_readwrite("FirstPersonAttachmentSocket", &FWeaponPartAttachmentData::FirstPersonAttachmentSocket, py::return_value_policy::reference)
		.def_readwrite("ThirdPersonAttachmentSocket", &FWeaponPartAttachmentData::ThirdPersonAttachmentSocket, py::return_value_policy::reference)
		.def_readwrite("FirstPersonOffHandAttachmentSocket", &FWeaponPartAttachmentData::FirstPersonOffHandAttachmentSocket, py::return_value_policy::reference)
		.def_readwrite("ThirdPersonOffHandAttachmentSocket", &FWeaponPartAttachmentData::ThirdPersonOffHandAttachmentSocket, py::return_value_policy::reference)
		;
	py::class_< FSMPerchRandomPair >(m, "FSMPerchRandomPair")
		.def(py::init<>())
		.def_readwrite("Weight", &FSMPerchRandomPair::Weight)
		.def_readwrite("SMD", &FSMPerchRandomPair::SMD, py::return_value_policy::reference)
		;
	py::class_< FCameraLerpKeyFrame >(m, "FCameraLerpKeyFrame")
		.def(py::init<>())
		.def_readwrite("Alpha", &FCameraLerpKeyFrame::Alpha)
		.def_readwrite("CameraTargetThisKeyFrame", &FCameraLerpKeyFrame::CameraTargetThisKeyFrame)
		.def_readwrite("CameraRotationBehavior", &FCameraLerpKeyFrame::CameraRotationBehavior)
		.def_readwrite("BaseCameraPosition", &FCameraLerpKeyFrame::BaseCameraPosition, py::return_value_policy::reference)
		.def_readwrite("CameraOffset", &FCameraLerpKeyFrame::CameraOffset)
		.def_readwrite("ForcedCameraRotation", &FCameraLerpKeyFrame::ForcedCameraRotation, py::return_value_policy::reference)
		;
	py::class_< FLockOnProfile >(m, "FLockOnProfile")
		.def(py::init<>())
		.def_property("bWithinWorldSpaceRadius", [](FLockOnProfile &self){return self.bWithinWorldSpaceRadius;}, [](FLockOnProfile &self, bool value){self.bWithinWorldSpaceRadius = value ? 1 : 0;})
		.def_readwrite("Target", &FLockOnProfile::Target)
		.def_readwrite("Intersection", &FLockOnProfile::Intersection, py::return_value_policy::reference)
		.def_readwrite("MagneticCenterToIntersect", &FLockOnProfile::MagneticCenterToIntersect, py::return_value_policy::reference)
		;
	py::class_< FProfileDefinition >(m, "FProfileDefinition")
		.def(py::init<>())
		.def_readwrite("Profile", &FProfileDefinition::Profile)
		.def_readwrite("Definition", &FProfileDefinition::Definition, py::return_value_policy::reference)
		;
	py::class_< FAttributeCategory >(m, "FAttributeCategory")
		.def(py::init<>())
		.def_readwrite("Category", &FAttributeCategory::Category, py::return_value_policy::reference)
		.def_readwrite("Attributes", &FAttributeCategory::Attributes, py::return_value_policy::reference)
		;
	py::class_< FDeathByWeaponStatID >(m, "FDeathByWeaponStatID")
		.def(py::init<>())
		.def_readwrite("DamageCauserType", &FDeathByWeaponStatID::DamageCauserType)
		.def_readwrite("StatId", &FDeathByWeaponStatID::StatId, py::return_value_policy::reference)
		;
	py::class_< FDeathByDamageTypeStatID >(m, "FDeathByDamageTypeStatID")
		.def(py::init<>())
		.def_readwrite("DamageType", &FDeathByDamageTypeStatID::DamageType)
		.def_readwrite("StatId", &FDeathByDamageTypeStatID::StatId, py::return_value_policy::reference)
		;
	py::class_< FDeathByWeaponDamageStatID >(m, "FDeathByWeaponDamageStatID")
		.def(py::init<>())
		.def_readwrite("DamageType", &FDeathByWeaponDamageStatID::DamageType)
		.def_readwrite("DamageCauserType", &FDeathByWeaponDamageStatID::DamageCauserType)
		.def_readwrite("StatId", &FDeathByWeaponDamageStatID::StatId, py::return_value_policy::reference)
		;
	py::class_< FPlayerClassAchievementUnlockData >(m, "FPlayerClassAchievementUnlockData")
		.def(py::init<>())
		.def_readwrite("UnlockType", &FPlayerClassAchievementUnlockData::UnlockType)
		.def_readwrite("Achievement", &FPlayerClassAchievementUnlockData::Achievement)
		.def_readwrite("IntData", &FPlayerClassAchievementUnlockData::IntData)
		;
	py::class_< FClanMaterialData >(m, "FClanMaterialData")
		.def(py::init<>())
		.def_readwrite("SourceMaterial", &FClanMaterialData::SourceMaterial, py::return_value_policy::reference)
		.def_readwrite("ReplacementMaterial", &FClanMaterialData::ReplacementMaterial, py::return_value_policy::reference)
		;
	py::class_< FClanSwitchData >(m, "FClanSwitchData")
		.def(py::init<>())
		.def_readwrite("SwitchName", &FClanSwitchData::SwitchName, py::return_value_policy::reference)
		.def_readwrite("SwitchValue", &FClanSwitchData::SwitchValue)
		;
	py::class_< FPendingCustomization >(m, "FPendingCustomization")
		.def(py::init<>())
		.def_readwrite("Definition", &FPendingCustomization::Definition, py::return_value_policy::reference)
		.def_readwrite("Targets", &FPendingCustomization::Targets, py::return_value_policy::reference)
		;
	py::class_< FProductCustomizationInfo >(m, "FProductCustomizationInfo")
		.def(py::init<>())
		.def_readwrite("ProductID", &FProductCustomizationInfo::ProductID)
		.def_readwrite("NumUnlockableCustomizations", &FProductCustomizationInfo::NumUnlockableCustomizations)
		.def_readwrite("NumCustomizations", &FProductCustomizationInfo::NumCustomizations)
		;
	py::class_< FCustomizationSizeMapping >(m, "FCustomizationSizeMapping")
		.def(py::init<>())
		.def_readwrite("ProductID", &FCustomizationSizeMapping::ProductID)
		.def_readwrite("NumCustomizations", &FCustomizationSizeMapping::NumCustomizations)
		;
	py::class_< FQueuedPersonalEchoLog >(m, "FQueuedPersonalEchoLog")
		.def(py::init<>())
		.def_readwrite("Event", &FQueuedPersonalEchoLog::Event, py::return_value_policy::reference)
		.def_readwrite("Group", &FQueuedPersonalEchoLog::Group, py::return_value_policy::reference)
		;
	py::class_< FScaleformPortraitData >(m, "FScaleformPortraitData")
		.def(py::init<>())
		.def_readwrite("ScaleformName", &FScaleformPortraitData::ScaleformName, py::return_value_policy::reference)
		.def_readwrite("PortraitMovie", &FScaleformPortraitData::PortraitMovie, py::return_value_policy::reference)
		;
	py::class_< FVideoPortraitData >(m, "FVideoPortraitData")
		.def(py::init<>())
		.def_readwrite("VideoMovie", &FVideoPortraitData::VideoMovie, py::return_value_policy::reference)
		;
	py::class_< FEchoPortraitInfo >(m, "FEchoPortraitInfo")
		.def(py::init<>())
		.def_readwrite("PortraitType", &FEchoPortraitInfo::PortraitType)
		.def_readwrite("ScaleformPortrait", &FEchoPortraitInfo::ScaleformPortrait, py::return_value_policy::reference)
		.def_readwrite("VideoPortrait", &FEchoPortraitInfo::VideoPortrait, py::return_value_policy::reference)
		;
	py::class_< FEmotePortraitInfo >(m, "FEmotePortraitInfo")
		.def(py::init<>())
		.def_readwrite("Emote", &FEmotePortraitInfo::Emote, py::return_value_policy::reference)
		.def_readwrite("EmotePortrait", &FEmotePortraitInfo::EmotePortrait, py::return_value_policy::reference)
		;
	py::class_< FEmoteStance >(m, "FEmoteStance")
		.def(py::init<>())
		.def_readwrite("Emote", &FEmoteStance::Emote, py::return_value_policy::reference)
		.def_readwrite("StanceSpecialMove", &FEmoteStance::StanceSpecialMove, py::return_value_policy::reference)
		;
	py::class_< FDynamicNavMeshConnection >(m, "FDynamicNavMeshConnection")
		.def(py::init<>())
		.def_readwrite("MaxConnectionDistance", &FDynamicNavMeshConnection::MaxConnectionDistance)
		.def_readwrite("ConnectedPoint", &FDynamicNavMeshConnection::ConnectedPoint, py::return_value_policy::reference)
		;
	py::class_< FCoordinatedEffectIndices >(m, "FCoordinatedEffectIndices")
		.def(py::init<>())
		.def_readwrite("StartingIndex", &FCoordinatedEffectIndices::StartingIndex)
		.def_readwrite("EndingIndex", &FCoordinatedEffectIndices::EndingIndex)
		;
	py::class_< FCoordinatedEffectThread >(m, "FCoordinatedEffectThread")
		.def(py::init<>())
		.def_property("bHideInstanceDataParticles", [](FCoordinatedEffectThread &self){return self.bHideInstanceDataParticles;}, [](FCoordinatedEffectThread &self, bool value){self.bHideInstanceDataParticles = value ? 1 : 0;})
		.def_property("bPendingDelete", [](FCoordinatedEffectThread &self){return self.bPendingDelete;}, [](FCoordinatedEffectThread &self, bool value){self.bPendingDelete = value ? 1 : 0;})
		.def_readwrite("EffectDefinition", &FCoordinatedEffectThread::EffectDefinition, py::return_value_policy::reference)
		.def_readwrite("IgnoreInstanceData", &FCoordinatedEffectThread::IgnoreInstanceData, py::return_value_policy::reference)
		.def_readwrite("LatentFloat", &FCoordinatedEffectThread::LatentFloat)
		.def_readwrite("TargetFloat", &FCoordinatedEffectThread::TargetFloat)
		.def_readwrite("ParticleSpeedMultiplier", &FCoordinatedEffectThread::ParticleSpeedMultiplier)
		.def_readwrite("CriticalParticleEffects", &FCoordinatedEffectThread::CriticalParticleEffects, py::return_value_policy::reference)
		.def_readwrite("ParticleEffects", &FCoordinatedEffectThread::ParticleEffects, py::return_value_policy::reference)
		.def_readwrite("AudioEffects", &FCoordinatedEffectThread::AudioEffects, py::return_value_policy::reference)
		.def_readwrite("HiddenParticles", &FCoordinatedEffectThread::HiddenParticles, py::return_value_policy::reference)
		.def_readwrite("EffectOwner", &FCoordinatedEffectThread::EffectOwner, py::return_value_policy::reference)
		.def_readwrite("EffectID", &FCoordinatedEffectThread::EffectID)
		.def_readwrite("EffectCompleteDelegate", &FCoordinatedEffectThread::EffectCompleteDelegate, py::return_value_policy::reference)
		;
	py::class_< FCoordinatedEffectProcess >(m, "FCoordinatedEffectProcess")
		.def(py::init<>())
		.def_readwrite("Target", &FCoordinatedEffectProcess::Target, py::return_value_policy::reference)
		.def_readwrite("Threads", &FCoordinatedEffectProcess::Threads, py::return_value_policy::reference)
		.def_readwrite("Player0MatIndex", &FCoordinatedEffectProcess::Player0MatIndex)
		.def_readwrite("Player1MatIndex", &FCoordinatedEffectProcess::Player1MatIndex)
		;
	py::class_< FActiveWaypointData >(m, "FActiveWaypointData")
		.def(py::init<>())
		.def_property("bCanTransition", [](FActiveWaypointData &self){return self.bCanTransition;}, [](FActiveWaypointData &self, bool value){self.bCanTransition = value ? 1 : 0;})
		.def_readwrite("WaypointLocation", &FActiveWaypointData::WaypointLocation, py::return_value_policy::reference)
		.def_readwrite("WaypointActor", &FActiveWaypointData::WaypointActor, py::return_value_policy::reference)
		.def_readwrite("WaypointObjective", &FActiveWaypointData::WaypointObjective, py::return_value_policy::reference)
		;
	py::class_< FActiveAreaWaypointData >(m, "FActiveAreaWaypointData")
		.def(py::init<>())
		.def_readwrite("WaypointLocation", &FActiveAreaWaypointData::WaypointLocation, py::return_value_policy::reference)
		.def_readwrite("WaypointRadius", &FActiveAreaWaypointData::WaypointRadius)
		.def_readwrite("WaypointObjective", &FActiveAreaWaypointData::WaypointObjective, py::return_value_policy::reference)
		;
	py::class_< FSubtitleProfile >(m, "FSubtitleProfile")
		.def(py::init<>())
		.def_readwrite("MinX", &FSubtitleProfile::MinX)
		.def_readwrite("MaxX", &FSubtitleProfile::MaxX)
		.def_readwrite("MinY", &FSubtitleProfile::MinY)
		.def_readwrite("MaxY", &FSubtitleProfile::MaxY)
		;
	py::class_< FLoginState >(m, "FLoginState")
		.def(py::init<>())
		.def_property("bIsDirty", [](FLoginState &self){return self.bIsDirty;}, [](FLoginState &self, bool value){self.bIsDirty = value ? 1 : 0;})
		.def_readwrite("LoginName", &FLoginState::LoginName, py::return_value_policy::reference)
		;
	py::class_< FGamepadState >(m, "FGamepadState")
		.def(py::init<>())
		.def_property("bConnected", [](FGamepadState &self){return self.bConnected;}, [](FGamepadState &self, bool value){self.bConnected = value ? 1 : 0;})
		;
	py::class_< FLoadingMovieExceptionInfo >(m, "FLoadingMovieExceptionInfo")
		.def(py::init<>())
		.def_readwrite("PersistentMapName", &FLoadingMovieExceptionInfo::PersistentMapName, py::return_value_policy::reference)
		.def_readwrite("Tag", &FLoadingMovieExceptionInfo::Tag, py::return_value_policy::reference)
		;
	py::class_< FFadePickupParticle >(m, "FFadePickupParticle")
		.def(py::init<>())
		.def_readwrite("SourceActor", &FFadePickupParticle::SourceActor, py::return_value_policy::reference)
		.def_readwrite("Particle", &FFadePickupParticle::Particle, py::return_value_policy::reference)
		.def_readwrite("FadeEndTime", &FFadePickupParticle::FadeEndTime)
		;
	py::class_< FHUDWidget_ChallengeData >(m, "FHUDWidget_ChallengeData")
		.def(py::init<>())
		.def_property("bComplete", [](FHUDWidget_ChallengeData &self){return self.bComplete;}, [](FHUDWidget_ChallengeData &self, bool value){self.bComplete = value ? 1 : 0;})
		.def_readwrite("Challenge", &FHUDWidget_ChallengeData::Challenge, py::return_value_policy::reference)
		.def_readwrite("LevelIndex", &FHUDWidget_ChallengeData::LevelIndex)
		.def_readwrite("ConditionIndex", &FHUDWidget_ChallengeData::ConditionIndex)
		.def_readwrite("CurrStatVal", &FHUDWidget_ChallengeData::CurrStatVal)
		.def_readwrite("GoalStatVal", &FHUDWidget_ChallengeData::GoalStatVal)
		;
	py::class_< FInteractiveObjectReplicatedStateData >(m, "FInteractiveObjectReplicatedStateData")
		.def(py::init<>())
		.def_readwrite("ReplicatedBehaviorConsumerState", &FInteractiveObjectReplicatedStateData::ReplicatedBehaviorConsumerState, py::return_value_policy::reference)
		.def_readwrite("ReplicatedInstanceDataState", &FInteractiveObjectReplicatedStateData::ReplicatedInstanceDataState, py::return_value_policy::reference)
		;
	py::class_< FSimpleAnimData >(m, "FSimpleAnimData")
		.def(py::init<>())
		.def_readwrite("AnimName", &FSimpleAnimData::AnimName, py::return_value_policy::reference)
		.def_readwrite("Tree", &FSimpleAnimData::Tree, py::return_value_policy::reference)
		.def_readwrite("Nodes", &FSimpleAnimData::Nodes, py::return_value_policy::reference)
		;
	py::class_< FTouchingPawn >(m, "FTouchingPawn")
		.def(py::init<>())
		.def_readwrite("Pawn", &FTouchingPawn::Pawn, py::return_value_policy::reference)
		.def_readwrite("VolumesTouched", &FTouchingPawn::VolumesTouched)
		;
	py::class_< FChestData >(m, "FChestData")
		.def(py::init<>())
		.def_readwrite("InventoryClass", &FChestData::InventoryClass, py::return_value_policy::reference)
		.def_readwrite("InventorySerialNumber", &FChestData::InventorySerialNumber, py::return_value_policy::reference)
		.def_readwrite("Inventory", &FChestData::Inventory, py::return_value_policy::reference)
		;
	py::class_< FItemMemento >(m, "FItemMemento")
		.def(py::init<>())
		.def_property("bEquipped", [](FItemMemento &self){return self.bEquipped;}, [](FItemMemento &self, bool value){self.bEquipped = value ? 1 : 0;})
		.def_property("bDropOnDeath", [](FItemMemento &self){return self.bDropOnDeath;}, [](FItemMemento &self, bool value){self.bDropOnDeath = value ? 1 : 0;})
		.def_property("bShopsHaveInfiniteQuantity", [](FItemMemento &self){return self.bShopsHaveInfiniteQuantity;}, [](FItemMemento &self, bool value){self.bShopsHaveInfiniteQuantity = value ? 1 : 0;})
		.def_property("bGrenadeStored", [](FItemMemento &self){return self.bGrenadeStored;}, [](FItemMemento &self, bool value){self.bGrenadeStored = value ? 1 : 0;})
		.def_readwrite("SerialNumber", &FItemMemento::SerialNumber, py::return_value_policy::reference)
		;
	py::class_< FReplicatedInventoryCardData >(m, "FReplicatedInventoryCardData")
		.def(py::init<>())
		.def_readwrite("ModifierValue", &FReplicatedInventoryCardData::ModifierValue)
		.def_readwrite("ModifierStatIndex", &FReplicatedInventoryCardData::ModifierStatIndex)
		;
	py::class_< FUIStatModifierData >(m, "FUIStatModifierData")
		.def(py::init<>())
		.def_property("bUseSupplementalModifier", [](FUIStatModifierData &self){return self.bUseSupplementalModifier;}, [](FUIStatModifierData &self, bool value){self.bUseSupplementalModifier = value ? 1 : 0;})
		.def_readwrite("AttributePresentation", &FUIStatModifierData::AttributePresentation, py::return_value_policy::reference)
		.def_readwrite("ConstraintAttributePresentation", &FUIStatModifierData::ConstraintAttributePresentation, py::return_value_policy::reference)
		.def_readwrite("AttributeStyle", &FUIStatModifierData::AttributeStyle)
		.def_readwrite("ModifierTotal", &FUIStatModifierData::ModifierTotal)
		.def_readwrite("CompareModifierTotal", &FUIStatModifierData::CompareModifierTotal)
		.def_readwrite("DefinitionIndex", &FUIStatModifierData::DefinitionIndex)
		.def_readwrite("SupplementalAttributePresentation", &FUIStatModifierData::SupplementalAttributePresentation, py::return_value_policy::reference)
		.def_readwrite("SupplementalAttributeStyle", &FUIStatModifierData::SupplementalAttributeStyle)
		.def_readwrite("SupplementalModifierTotal", &FUIStatModifierData::SupplementalModifierTotal)
		.def_readwrite("StatCombinationMethod", &FUIStatModifierData::StatCombinationMethod)
		;
	py::class_< FBeamDamageData >(m, "FBeamDamageData")
		.def(py::init<>())
		.def_property("bCanDamageFriendlies", [](FBeamDamageData &self){return self.bCanDamageFriendlies;}, [](FBeamDamageData &self, bool value){self.bCanDamageFriendlies = value ? 1 : 0;})
		.def_readwrite("Momentum", &FBeamDamageData::Momentum)
		.def_readwrite("Amount", &FBeamDamageData::Amount)
		.def_readwrite("Radius", &FBeamDamageData::Radius)
		.def_readwrite("Source", &FBeamDamageData::Source, py::return_value_policy::reference)
		.def_readwrite("TypeDefinition", &FBeamDamageData::TypeDefinition, py::return_value_policy::reference)
		.def_readwrite("BarrelSourceTime", &FBeamDamageData::BarrelSourceTime)
		.def_readwrite("PlantSourceTime", &FBeamDamageData::PlantSourceTime)
		.def_readwrite("DamageCauser", &FBeamDamageData::DamageCauser)
		;
	py::class_< FBeamLocationData >(m, "FBeamLocationData")
		.def(py::init<>())
		.def_property("bUseWeapon", [](FBeamLocationData &self){return self.bUseWeapon;}, [](FBeamLocationData &self, bool value){self.bUseWeapon = value ? 1 : 0;})
		.def_readwrite("Actor", &FBeamLocationData::Actor, py::return_value_policy::reference)
		.def_readwrite("Socket", &FBeamLocationData::Socket, py::return_value_policy::reference)
		.def_readwrite("Offset", &FBeamLocationData::Offset, py::return_value_policy::reference)
		.def_readwrite("WorldBody", &FBeamLocationData::WorldBody)
		;
	py::class_< FServerBeamState >(m, "FServerBeamState")
		.def(py::init<>())
		.def_property("bDeleteMe", [](FServerBeamState &self){return self.bDeleteMe;}, [](FServerBeamState &self, bool value){self.bDeleteMe = value ? 1 : 0;})
		.def_readwrite("DamageData", &FServerBeamState::DamageData, py::return_value_policy::reference)
		.def_readwrite("DamageInstigator", &FServerBeamState::DamageInstigator, py::return_value_policy::reference)
		.def_readwrite("StartTime", &FServerBeamState::StartTime)
		.def_readwrite("LockTime", &FServerBeamState::LockTime)
		.def_readwrite("NextTraceTime", &FServerBeamState::NextTraceTime)
		.def_readwrite("BeamNetUpdateTime", &FServerBeamState::BeamNetUpdateTime)
		.def_readwrite("LastDamageApplicationTime", &FServerBeamState::LastDamageApplicationTime)
		.def_readwrite("LastDamagedActor", &FServerBeamState::LastDamagedActor, py::return_value_policy::reference)
		.def_readwrite("NextRandomBoneTime", &FServerBeamState::NextRandomBoneTime)
		.def_readwrite("ParentBeamIndex", &FServerBeamState::ParentBeamIndex)
		.def_readwrite("ChildBeamsIndicies", &FServerBeamState::ChildBeamsIndicies, py::return_value_policy::reference)
		;
	py::class_< FReplicatedBeamState >(m, "FReplicatedBeamState")
		.def(py::init<>())
		.def_property("bEnabled", [](FReplicatedBeamState &self){return self.bEnabled;}, [](FReplicatedBeamState &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_property("bLocked", [](FReplicatedBeamState &self){return self.bLocked;}, [](FReplicatedBeamState &self, bool value){self.bLocked = value ? 1 : 0;})
		.def_property("bPlayImpactAudio", [](FReplicatedBeamState &self){return self.bPlayImpactAudio;}, [](FReplicatedBeamState &self, bool value){self.bPlayImpactAudio = value ? 1 : 0;})
		.def_readwrite("FireDef", &FReplicatedBeamState::FireDef, py::return_value_policy::reference)
		.def_readwrite("ImpactDefinition", &FReplicatedBeamState::ImpactDefinition, py::return_value_policy::reference)
		.def_readwrite("SourceData", &FReplicatedBeamState::SourceData, py::return_value_policy::reference)
		.def_readwrite("TargetData", &FReplicatedBeamState::TargetData, py::return_value_policy::reference)
		;
	py::class_< FBeamState >(m, "FBeamState")
		.def(py::init<>())
		.def_readwrite("BeamIndex", &FBeamState::BeamIndex)
		.def_readwrite("ServerOnlyState", &FBeamState::ServerOnlyState, py::return_value_policy::reference)
		.def_readwrite("CoreBeamState", &FBeamState::CoreBeamState, py::return_value_policy::reference)
		.def_readwrite("PartRef", &FBeamState::PartRef, py::return_value_policy::reference)
		.def_readwrite("BeamAudioInfo", &FBeamState::BeamAudioInfo, py::return_value_policy::reference)
		.def_readwrite("BeamImpactAudioInfo", &FBeamState::BeamImpactAudioInfo, py::return_value_policy::reference)
		.def_readwrite("CurrentStartPoint", &FBeamState::CurrentStartPoint, py::return_value_policy::reference)
		.def_readwrite("CurrentEndPoint", &FBeamState::CurrentEndPoint, py::return_value_policy::reference)
		.def_readwrite("CurrentStartTangent", &FBeamState::CurrentStartTangent, py::return_value_policy::reference)
		.def_readwrite("CurrentEndTangent", &FBeamState::CurrentEndTangent, py::return_value_policy::reference)
		.def_readwrite("CurrentDirection", &FBeamState::CurrentDirection, py::return_value_policy::reference)
		.def_readwrite("LastImpactLocation", &FBeamState::LastImpactLocation, py::return_value_policy::reference)
		;
	py::class_< FLightProjectile >(m, "FLightProjectile")
		.def(py::init<>())
		.def_property("bEnabled", [](FLightProjectile &self){return self.bEnabled;}, [](FLightProjectile &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_property("bPendingAdd", [](FLightProjectile &self){return self.bPendingAdd;}, [](FLightProjectile &self, bool value){self.bPendingAdd = value ? 1 : 0;})
		.def_property("bNeedsConstantTrace", [](FLightProjectile &self){return self.bNeedsConstantTrace;}, [](FLightProjectile &self, bool value){self.bNeedsConstantTrace = value ? 1 : 0;})
		.def_property("bStartParticleTracerAtWeapon", [](FLightProjectile &self){return self.bStartParticleTracerAtWeapon;}, [](FLightProjectile &self, bool value){self.bStartParticleTracerAtWeapon = value ? 1 : 0;})
		.def_property("bActorReflected", [](FLightProjectile &self){return self.bActorReflected;}, [](FLightProjectile &self, bool value){self.bActorReflected = value ? 1 : 0;})
		.def_property("bEnemyPenetrating", [](FLightProjectile &self){return self.bEnemyPenetrating;}, [](FLightProjectile &self, bool value){self.bEnemyPenetrating = value ? 1 : 0;})
		.def_property("bOvercharged", [](FLightProjectile &self){return self.bOvercharged;}, [](FLightProjectile &self, bool value){self.bOvercharged = value ? 1 : 0;})
		.def_property("bRicochetTowardsEnemy", [](FLightProjectile &self){return self.bRicochetTowardsEnemy;}, [](FLightProjectile &self, bool value){self.bRicochetTowardsEnemy = value ? 1 : 0;})
		.def_property("bPenetrateUsingOriginalTraceDirection", [](FLightProjectile &self){return self.bPenetrateUsingOriginalTraceDirection;}, [](FLightProjectile &self, bool value){self.bPenetrateUsingOriginalTraceDirection = value ? 1 : 0;})
		.def_readwrite("Location", &FLightProjectile::Location, py::return_value_policy::reference)
		.def_readwrite("PartLocation", &FLightProjectile::PartLocation, py::return_value_policy::reference)
		.def_readwrite("Velocity", &FLightProjectile::Velocity, py::return_value_policy::reference)
		.def_readwrite("PartRef", &FLightProjectile::PartRef, py::return_value_policy::reference)
		.def_readwrite("AudioRef", &FLightProjectile::AudioRef, py::return_value_policy::reference)
		.def_readwrite("FireDef", &FLightProjectile::FireDef, py::return_value_policy::reference)
		.def_readwrite("StartTime", &FLightProjectile::StartTime)
		.def_readwrite("NumRicochets", &FLightProjectile::NumRicochets)
		.def_readwrite("LastTraceTime", &FLightProjectile::LastTraceTime)
		.def_readwrite("LastSafeTraceStartLocation", &FLightProjectile::LastSafeTraceStartLocation, py::return_value_policy::reference)
		.def_readwrite("LastHitActor", &FLightProjectile::LastHitActor, py::return_value_policy::reference)
		.def_readwrite("Instigator", &FLightProjectile::Instigator, py::return_value_policy::reference)
		.def_readwrite("Damage", &FLightProjectile::Damage)
		.def_readwrite("FiringPatternIdx", &FLightProjectile::FiringPatternIdx)
		.def_readwrite("BulletFromClipType", &FLightProjectile::BulletFromClipType)
		.def_readwrite("bHitWater", &FLightProjectile::bHitWater)
		.def_readwrite("PenetrationCount", &FLightProjectile::PenetrationCount)
		.def_readwrite("Id", &FLightProjectile::Id)
		.def_readwrite("StartTrace", &FLightProjectile::StartTrace, py::return_value_policy::reference)
		.def_readwrite("EndTrace", &FLightProjectile::EndTrace, py::return_value_policy::reference)
		.def_readwrite("OriginalStartTrace", &FLightProjectile::OriginalStartTrace, py::return_value_policy::reference)
		;
	py::class_< FReplicatedLightProjectile >(m, "FReplicatedLightProjectile")
		.def(py::init<>())
		.def_property("bEnabled", [](FReplicatedLightProjectile &self){return self.bEnabled;}, [](FReplicatedLightProjectile &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_property("bStartParticleTracerAtWeapon", [](FReplicatedLightProjectile &self){return self.bStartParticleTracerAtWeapon;}, [](FReplicatedLightProjectile &self, bool value){self.bStartParticleTracerAtWeapon = value ? 1 : 0;})
		.def_property("bActorReflected", [](FReplicatedLightProjectile &self){return self.bActorReflected;}, [](FReplicatedLightProjectile &self, bool value){self.bActorReflected = value ? 1 : 0;})
		.def_property("bEnemyPenetrating", [](FReplicatedLightProjectile &self){return self.bEnemyPenetrating;}, [](FReplicatedLightProjectile &self, bool value){self.bEnemyPenetrating = value ? 1 : 0;})
		.def_property("bOvercharged", [](FReplicatedLightProjectile &self){return self.bOvercharged;}, [](FReplicatedLightProjectile &self, bool value){self.bOvercharged = value ? 1 : 0;})
		.def_property("bRicochetTowardsEnemy", [](FReplicatedLightProjectile &self){return self.bRicochetTowardsEnemy;}, [](FReplicatedLightProjectile &self, bool value){self.bRicochetTowardsEnemy = value ? 1 : 0;})
		.def_readwrite("Id", &FReplicatedLightProjectile::Id)
		.def_readwrite("StartTrace", &FReplicatedLightProjectile::StartTrace, py::return_value_policy::reference)
		.def_readwrite("EndTrace", &FReplicatedLightProjectile::EndTrace, py::return_value_policy::reference)
		.def_readwrite("ReflectSpeed", &FReplicatedLightProjectile::ReflectSpeed)
		.def_readwrite("FireDef", &FReplicatedLightProjectile::FireDef, py::return_value_policy::reference)
		.def_readwrite("FiringPatternIdx", &FReplicatedLightProjectile::FiringPatternIdx)
		.def_readwrite("Instigator", &FReplicatedLightProjectile::Instigator, py::return_value_policy::reference)
		.def_readwrite("StartTime", &FReplicatedLightProjectile::StartTime)
		;
	py::class_< FReplicatedBeamEndPoints >(m, "FReplicatedBeamEndPoints")
		.def(py::init<>())
		.def_readwrite("StartPoint", &FReplicatedBeamEndPoints::StartPoint, py::return_value_policy::reference)
		.def_readwrite("EndPoint", &FReplicatedBeamEndPoints::EndPoint, py::return_value_policy::reference)
		;
	py::class_< FObstaclePoint >(m, "FObstaclePoint")
		.def(py::init<>())
		.def_readwrite("Value", &FObstaclePoint::Value)
		.def_readwrite("Offset", &FObstaclePoint::Offset, py::return_value_policy::reference)
		;
	py::class_< FPauseTimerData >(m, "FPauseTimerData")
		.def(py::init<>())
		.def_property("bLoop", [](FPauseTimerData &self){return self.bLoop;}, [](FPauseTimerData &self, bool value){self.bLoop = value ? 1 : 0;})
		.def_readwrite("FuncName", &FPauseTimerData::FuncName, py::return_value_policy::reference)
		.def_readwrite("Rate", &FPauseTimerData::Rate)
		.def_readwrite("Count", &FPauseTimerData::Count)
		.def_readwrite("TimerObj", &FPauseTimerData::TimerObj, py::return_value_policy::reference)
		;
	py::class_< FHolsteredGearDisplaySlot >(m, "FHolsteredGearDisplaySlot")
		.def(py::init<>())
		.def_readwrite("State", &FHolsteredGearDisplaySlot::State)
		.def_readwrite("Item", &FHolsteredGearDisplaySlot::Item, py::return_value_policy::reference)
		;
	py::class_< FBloodSplatterTrace >(m, "FBloodSplatterTrace")
		.def(py::init<>())
		.def_readwrite("HitRegion", &FBloodSplatterTrace::HitRegion, py::return_value_policy::reference)
		.def_readwrite("HitLocation", &FBloodSplatterTrace::HitLocation, py::return_value_policy::reference)
		.def_readwrite("Momentum", &FBloodSplatterTrace::Momentum, py::return_value_policy::reference)
		.def_readwrite("DamageSeverityPercent", &FBloodSplatterTrace::DamageSeverityPercent)
		;
	py::class_< FMeleeOverTimeState >(m, "FMeleeOverTimeState")
		.def(py::init<>())
		.def_property("bIsMeleeActive", [](FMeleeOverTimeState &self){return self.bIsMeleeActive;}, [](FMeleeOverTimeState &self, bool value){self.bIsMeleeActive = value ? 1 : 0;})
		.def_readwrite("MeleeDefinition", &FMeleeOverTimeState::MeleeDefinition, py::return_value_policy::reference)
		.def_readwrite("MeleeStartTime", &FMeleeOverTimeState::MeleeStartTime)
		.def_readwrite("TimeElapsedSinceLastMelee", &FMeleeOverTimeState::TimeElapsedSinceLastMelee)
		.def_readwrite("HitActors", &FMeleeOverTimeState::HitActors, py::return_value_policy::reference)
		.def_readwrite("MeleeStartLocation", &FMeleeOverTimeState::MeleeStartLocation, py::return_value_policy::reference)
		.def_readwrite("MeleeStartRotation", &FMeleeOverTimeState::MeleeStartRotation, py::return_value_policy::reference)
		;
	py::class_< FGoreEffect >(m, "FGoreEffect")
		.def(py::init<>())
		.def_readwrite("HitRegion", &FGoreEffect::HitRegion, py::return_value_policy::reference)
		.def_readwrite("GoreDataIndex", &FGoreEffect::GoreDataIndex)
		.def_readwrite("InstigatedBy", &FGoreEffect::InstigatedBy, py::return_value_policy::reference)
		.def_readwrite("HitLocation", &FGoreEffect::HitLocation, py::return_value_policy::reference)
		.def_readwrite("Momentum", &FGoreEffect::Momentum, py::return_value_policy::reference)
		;
	py::class_< FMaterialScalarFadeReplication >(m, "FMaterialScalarFadeReplication")
		.def(py::init<>())
		.def_property("bRunning", [](FMaterialScalarFadeReplication &self){return self.bRunning;}, [](FMaterialScalarFadeReplication &self, bool value){self.bRunning = value ? 1 : 0;})
		.def_property("bIsForGoreDeath", [](FMaterialScalarFadeReplication &self){return self.bIsForGoreDeath;}, [](FMaterialScalarFadeReplication &self, bool value){self.bIsForGoreDeath = value ? 1 : 0;})
		.def_readwrite("Name", &FMaterialScalarFadeReplication::Name, py::return_value_policy::reference)
		.def_readwrite("StartValue", &FMaterialScalarFadeReplication::StartValue)
		.def_readwrite("EndValue", &FMaterialScalarFadeReplication::EndValue)
		.def_readwrite("FadeTime", &FMaterialScalarFadeReplication::FadeTime)
		;
	py::class_< FRagdollDeathImpulseStruct >(m, "FRagdollDeathImpulseStruct")
		.def(py::init<>())
		.def_property("VelocityRatherThanForce", [](FRagdollDeathImpulseStruct &self){return self.VelocityRatherThanForce;}, [](FRagdollDeathImpulseStruct &self, bool value){self.VelocityRatherThanForce = value ? 1 : 0;})
		.def_property("TransformImpulseByVelocityDirection", [](FRagdollDeathImpulseStruct &self){return self.TransformImpulseByVelocityDirection;}, [](FRagdollDeathImpulseStruct &self, bool value){self.TransformImpulseByVelocityDirection = value ? 1 : 0;})
		.def_readwrite("Impulse", &FRagdollDeathImpulseStruct::Impulse, py::return_value_policy::reference)
		.def_readwrite("Offset", &FRagdollDeathImpulseStruct::Offset, py::return_value_policy::reference)
		.def_readwrite("BoneName", &FRagdollDeathImpulseStruct::BoneName, py::return_value_policy::reference)
		;
	py::class_< FStaggerStateData >(m, "FStaggerStateData")
		.def(py::init<>())
		.def_property("bIsStaggered", [](FStaggerStateData &self){return self.bIsStaggered;}, [](FStaggerStateData &self, bool value){self.bIsStaggered = value ? 1 : 0;})
		.def_property("bIsUnstaggering", [](FStaggerStateData &self){return self.bIsUnstaggering;}, [](FStaggerStateData &self, bool value){self.bIsUnstaggering = value ? 1 : 0;})
		.def_property("bForced", [](FStaggerStateData &self){return self.bForced;}, [](FStaggerStateData &self, bool value){self.bForced = value ? 1 : 0;})
		.def_readwrite("State", &FStaggerStateData::State)
		.def_readwrite("StaggerStartTime", &FStaggerStateData::StaggerStartTime)
		.def_readwrite("StaggerEndTime", &FStaggerStateData::StaggerEndTime)
		.def_readwrite("StaggerEndRagdollTime", &FStaggerStateData::StaggerEndRagdollTime)
		.def_readwrite("StaggerRecoveryStartTime", &FStaggerStateData::StaggerRecoveryStartTime)
		.def_readwrite("NextUnstaggerCheckTime", &FStaggerStateData::NextUnstaggerCheckTime)
		.def_readwrite("PreviousOverridePhysicalMaterial", &FStaggerStateData::PreviousOverridePhysicalMaterial, py::return_value_policy::reference)
		.def_readwrite("PreviousCollisionChannel", &FStaggerStateData::PreviousCollisionChannel)
		.def_readwrite("PreviousCollisionComponent", &FStaggerStateData::PreviousCollisionComponent, py::return_value_policy::reference)
		.def_readwrite("StaggerInstigator", &FStaggerStateData::StaggerInstigator, py::return_value_policy::reference)
		.def_readwrite("RestaggeredCount", &FStaggerStateData::RestaggeredCount)
		;
	py::class_< FWillowCoverState >(m, "FWillowCoverState")
		.def(py::init<>())
		.def_readwrite("Action", &FWillowCoverState::Action, py::return_value_policy::reference)
		.def_readwrite("Cover", &FWillowCoverState::Cover, py::return_value_policy::reference)
		.def_readwrite("Stance", &FWillowCoverState::Stance, py::return_value_policy::reference)
		;
	py::class_< FPerchStateData >(m, "FPerchStateData")
		.def(py::init<>())
		.def_readwrite("AttachmentName", &FPerchStateData::AttachmentName, py::return_value_policy::reference)
		.def_readwrite("StaticMesh", &FPerchStateData::StaticMesh, py::return_value_policy::reference)
		.def_readwrite("SkelMesh", &FPerchStateData::SkelMesh, py::return_value_policy::reference)
		.def_readwrite("LocOffset", &FPerchStateData::LocOffset, py::return_value_policy::reference)
		.def_readwrite("RotOffset", &FPerchStateData::RotOffset, py::return_value_policy::reference)
		.def_readwrite("Scale", &FPerchStateData::Scale)
		.def_readwrite("Actor", &FPerchStateData::Actor, py::return_value_policy::reference)
		;
	py::class_< FDamageLocationData >(m, "FDamageLocationData")
		.def(py::init<>())
		.def_readwrite("Time", &FDamageLocationData::Time)
		.def_readwrite("Location", &FDamageLocationData::Location, py::return_value_policy::reference)
		;
	py::class_< FSplineAnimPathData >(m, "FSplineAnimPathData")
		.def(py::init<>())
		.def_property("bReverse", [](FSplineAnimPathData &self){return self.bReverse;}, [](FSplineAnimPathData &self, bool value){self.bReverse = value ? 1 : 0;})
		.def_readwrite("StartSpline", &FSplineAnimPathData::StartSpline, py::return_value_policy::reference)
		.def_readwrite("AnimSeqName", &FSplineAnimPathData::AnimSeqName, py::return_value_policy::reference)
		;
	py::class_< FExtraMuzzleEffect >(m, "FExtraMuzzleEffect")
		.def(py::init<>())
		.def_readwrite("Particles", &FExtraMuzzleEffect::Particles, py::return_value_policy::reference)
		.def_readwrite("Sound", &FExtraMuzzleEffect::Sound, py::return_value_policy::reference)
		;
	py::class_< FSpeedTravelData >(m, "FSpeedTravelData")
		.def(py::init<>())
		.def_readwrite("OriginLeaveTime", &FSpeedTravelData::OriginLeaveTime)
		.def_readwrite("OriginRegion", &FSpeedTravelData::OriginRegion)
		;
	py::class_< FWeatherSystemEffects >(m, "FWeatherSystemEffects")
		.def(py::init<>())
		.def_readwrite("WeatherSystemTemplate", &FWeatherSystemEffects::WeatherSystemTemplate, py::return_value_policy::reference)
		.def_readwrite("ScreenEffectsTemplate", &FWeatherSystemEffects::ScreenEffectsTemplate, py::return_value_policy::reference)
		;
	py::class_< FAttachmentData >(m, "FAttachmentData")
		.def(py::init<>())
		.def_readwrite("AttachmentBase", &FAttachmentData::AttachmentBase, py::return_value_policy::reference)
		.def_readwrite("AttachmentBaseBoneName", &FAttachmentData::AttachmentBaseBoneName, py::return_value_policy::reference)
		.def_readwrite("AttachmentRelativeOffset", &FAttachmentData::AttachmentRelativeOffset, py::return_value_policy::reference)
		.def_readwrite("AttachmentRelativeRotation", &FAttachmentData::AttachmentRelativeRotation, py::return_value_policy::reference)
		.def_readwrite("AttachmentPhysicsMode", &FAttachmentData::AttachmentPhysicsMode)
		;
	py::class_< FPickupMemento >(m, "FPickupMemento")
		.def(py::init<>())
		.def_property("bIsAttachedToSomething", [](FPickupMemento &self){return self.bIsAttachedToSomething;}, [](FPickupMemento &self, bool value){self.bIsAttachedToSomething = value ? 1 : 0;})
		.def_readwrite("Rotation", &FPickupMemento::Rotation, py::return_value_policy::reference)
		;
	py::class_< FKeyRebindingData >(m, "FKeyRebindingData")
		.def(py::init<>())
		.def_readwrite("DefaultKeyName", &FKeyRebindingData::DefaultKeyName, py::return_value_policy::reference)
		.def_readwrite("RemappedKeyName", &FKeyRebindingData::RemappedKeyName, py::return_value_policy::reference)
		;
	py::class_< FInputDeviceAxisAddress >(m, "FInputDeviceAxisAddress")
		.def(py::init<>())
		.def_readwrite("SourceDevice", &FInputDeviceAxisAddress::SourceDevice, py::return_value_policy::reference)
		.def_readwrite("SourceIndex", &FInputDeviceAxisAddress::SourceIndex)
		;
	py::class_< FAccelStateData >(m, "FAccelStateData")
		.def(py::init<>())
		.def_property("bIsAccelerating", [](FAccelStateData &self){return self.bIsAccelerating;}, [](FAccelStateData &self, bool value){self.bIsAccelerating = value ? 1 : 0;})
		.def_readwrite("Warmup", &FAccelStateData::Warmup)
		.def_readwrite("CurrentSpeed", &FAccelStateData::CurrentSpeed)
		.def_readwrite("Direction", &FAccelStateData::Direction)
		;
	py::class_< FInputAxisData >(m, "FInputAxisData")
		.def(py::init<>())
		.def_property("bIsLookAxis", [](FInputAxisData &self){return self.bIsLookAxis;}, [](FInputAxisData &self, bool value){self.bIsLookAxis = value ? 1 : 0;})
		.def_property("bIsRemappedInverted", [](FInputAxisData &self){return self.bIsRemappedInverted;}, [](FInputAxisData &self, bool value){self.bIsRemappedInverted = value ? 1 : 0;})
		.def_readwrite("AxisName", &FInputAxisData::AxisName, py::return_value_policy::reference)
		.def_readwrite("InputDeviceHandler", &FInputAxisData::InputDeviceHandler, py::return_value_policy::reference)
		.def_readwrite("ParameterPtr", &FInputAxisData::ParameterPtr, py::return_value_policy::reference)
		.def_readwrite("AccelState", &FInputAxisData::AccelState, py::return_value_policy::reference)
		;
	py::class_< FDeviceLookAxisData >(m, "FDeviceLookAxisData")
		.def(py::init<>())
		.def_readwrite("SourceDevice", &FDeviceLookAxisData::SourceDevice, py::return_value_policy::reference)
		.def_readwrite("LookXAxisName", &FDeviceLookAxisData::LookXAxisName, py::return_value_policy::reference)
		.def_readwrite("LookYAxisName", &FDeviceLookAxisData::LookYAxisName, py::return_value_policy::reference)
		;
	py::class_< FInputDeviceButtonAddress >(m, "FInputDeviceButtonAddress")
		.def(py::init<>())
		.def_readwrite("SourceDevice", &FInputDeviceButtonAddress::SourceDevice, py::return_value_policy::reference)
		.def_readwrite("SourceIndex", &FInputDeviceButtonAddress::SourceIndex)
		.def_readwrite("RemappedButton", &FInputDeviceButtonAddress::RemappedButton, py::return_value_policy::reference)
		;
	py::class_< FInputButtonData >(m, "FInputButtonData")
		.def(py::init<>())
		.def_readwrite("InputDeviceHandlers", &FInputButtonData::InputDeviceHandlers, py::return_value_policy::reference)
		.def_readwrite("ButtonName", &FInputButtonData::ButtonName, py::return_value_policy::reference)
		.def_readwrite("State", &FInputButtonData::State)
		.def_readwrite("LastPressedTime", &FInputButtonData::LastPressedTime)
		;
	py::class_< FReplicatedStandInGear >(m, "FReplicatedStandInGear")
		.def(py::init<>())
		.def_readwrite("Weapon1Data", &FReplicatedStandInGear::Weapon1Data, py::return_value_policy::reference)
		.def_readwrite("Weapon2Data", &FReplicatedStandInGear::Weapon2Data, py::return_value_policy::reference)
		.def_readwrite("ShieldData", &FReplicatedStandInGear::ShieldData, py::return_value_policy::reference)
		.def_readwrite("GrenadeModData", &FReplicatedStandInGear::GrenadeModData, py::return_value_policy::reference)
		.def_readwrite("ClassModData", &FReplicatedStandInGear::ClassModData, py::return_value_policy::reference)
		;
	py::class_< FTrackedSkillState >(m, "FTrackedSkillState")
		.def(py::init<>())
		.def_readwrite("SkillDef", &FTrackedSkillState::SkillDef, py::return_value_policy::reference)
		.def_readwrite("PackedStackCountAndPercentComplete", &FTrackedSkillState::PackedStackCountAndPercentComplete)
		;
	py::class_< FLightValues >(m, "FLightValues")
		.def(py::init<>())
		.def_readwrite("StartTime", &FLightValues::StartTime)
		.def_readwrite("Radius", &FLightValues::Radius)
		.def_readwrite("Brightness", &FLightValues::Brightness)
		.def_readwrite("LightColor", &FLightValues::LightColor, py::return_value_policy::reference)
		;
	py::class_< FVehicleSpawnStationPooledVehicle >(m, "FVehicleSpawnStationPooledVehicle")
		.def(py::init<>())
		.def_readwrite("SpawnedVehicle", &FVehicleSpawnStationPooledVehicle::SpawnedVehicle, py::return_value_policy::reference)
		.def_readwrite("SpawnVehicleDef", &FVehicleSpawnStationPooledVehicle::SpawnVehicleDef, py::return_value_policy::reference)
		;
	py::class_< FVehicleSpawnStationSlot >(m, "FVehicleSpawnStationSlot")
		.def(py::init<>())
		.def_readwrite("PooledVehicles", &FVehicleSpawnStationSlot::PooledVehicles, py::return_value_policy::reference)
		.def_readwrite("PooledVehicleIndex", &FVehicleSpawnStationSlot::PooledVehicleIndex)
		;
	py::class_< FSpawnAnimPair >(m, "FSpawnAnimPair")
		.def(py::init<>())
		.def_readwrite("SpawnedAnim", &FSpawnAnimPair::SpawnedAnim, py::return_value_policy::reference)
		.def_readwrite("PointAnim", &FSpawnAnimPair::PointAnim, py::return_value_policy::reference)
		;
	py::class_< FSpawnAnimData >(m, "FSpawnAnimData")
		.def(py::init<>())
		.def_readwrite("Key", &FSpawnAnimData::Key, py::return_value_policy::reference)
		.def_readwrite("AnimPairs", &FSpawnAnimData::AnimPairs, py::return_value_policy::reference)
		.def_readwrite("PreviewMeshOffset", &FSpawnAnimData::PreviewMeshOffset, py::return_value_policy::reference)
		.def_readwrite("PreviewMeshScale", &FSpawnAnimData::PreviewMeshScale)
		;
	py::class_< FHitActorData >(m, "FHitActorData")
		.def(py::init<>())
		.def_readwrite("HitActor", &FHitActorData::HitActor, py::return_value_policy::reference)
		.def_readwrite("HitInfo", &FHitActorData::HitInfo, py::return_value_policy::reference)
		.def_readwrite("HitLocation", &FHitActorData::HitLocation, py::return_value_policy::reference)
		.def_readwrite("HitLocationRelativeToHitActor", &FHitActorData::HitLocationRelativeToHitActor, py::return_value_policy::reference)
		.def_readwrite("HitNormal", &FHitActorData::HitNormal, py::return_value_policy::reference)
		;
	py::class_< FPursuitNode >(m, "FPursuitNode")
		.def(py::init<>())
		.def_property("bNeverFallback", [](FPursuitNode &self){return self.bNeverFallback;}, [](FPursuitNode &self, bool value){self.bNeverFallback = value ? 1 : 0;})
		.def_property("bMultipleReservations", [](FPursuitNode &self){return self.bMultipleReservations;}, [](FPursuitNode &self, bool value){self.bMultipleReservations = value ? 1 : 0;})
		.def_property("bIsReserved", [](FPursuitNode &self){return self.bIsReserved;}, [](FPursuitNode &self, bool value){self.bIsReserved = value ? 1 : 0;})
		.def_readwrite("RelativeLocation", &FPursuitNode::RelativeLocation, py::return_value_policy::reference)
		.def_readwrite("RelativeDistance", &FPursuitNode::RelativeDistance)
		.def_readwrite("EvasiveActionDistance", &FPursuitNode::EvasiveActionDistance)
		.def_readwrite("NodeType", &FPursuitNode::NodeType, py::return_value_policy::reference)
		.def_readwrite("LastReservedTime", &FPursuitNode::LastReservedTime)
		.def_readwrite("ReservedBy", &FPursuitNode::ReservedBy, py::return_value_policy::reference)
		.def_readwrite("AIAlertDistance", &FPursuitNode::AIAlertDistance)
		.def_readwrite("AIAlertFlagDef", &FPursuitNode::AIAlertFlagDef, py::return_value_policy::reference)
		;
	py::class_< FPursuitNodeData >(m, "FPursuitNodeData")
		.def(py::init<>())
		.def_property("bNeverFallback", [](FPursuitNodeData &self){return self.bNeverFallback;}, [](FPursuitNodeData &self, bool value){self.bNeverFallback = value ? 1 : 0;})
		.def_property("bMultipleReservations", [](FPursuitNodeData &self){return self.bMultipleReservations;}, [](FPursuitNodeData &self, bool value){self.bMultipleReservations = value ? 1 : 0;})
		.def_readwrite("RelativeLocation", &FPursuitNodeData::RelativeLocation, py::return_value_policy::reference)
		.def_readwrite("NodeType", &FPursuitNodeData::NodeType, py::return_value_policy::reference)
		.def_readwrite("EvasiveActionDistance", &FPursuitNodeData::EvasiveActionDistance)
		.def_readwrite("AIAlertDistance", &FPursuitNodeData::AIAlertDistance)
		.def_readwrite("AIAlertFlagDef", &FPursuitNodeData::AIAlertFlagDef, py::return_value_policy::reference)
		;
	py::class_< FReferencePoint >(m, "FReferencePoint")
		.def(py::init<>())
		.def_readwrite("Type", &FReferencePoint::Type)
		.def_readwrite("Name", &FReferencePoint::Name, py::return_value_policy::reference)
		;
	py::class_< FReferencePointComparisonData >(m, "FReferencePointComparisonData")
		.def(py::init<>())
		.def_readwrite("A", &FReferencePointComparisonData::A, py::return_value_policy::reference)
		.def_readwrite("B", &FReferencePointComparisonData::B, py::return_value_policy::reference)
		;
	py::class_< FSystemOption >(m, "FSystemOption")
		.def(py::init<>())
		.def_readwrite("Name", &FSystemOption::Name, py::return_value_policy::reference)
		.def_readwrite("ValueCount", &FSystemOption::ValueCount)
		.def_readwrite("CurrValue", &FSystemOption::CurrValue)
		.def_readwrite("ValueStrings", &FSystemOption::ValueStrings, py::return_value_policy::reference)
		;
	py::class_< FResolution >(m, "FResolution")
		.def(py::init<>())
		.def_readwrite("Width", &FResolution::Width)
		.def_readwrite("Height", &FResolution::Height)
		;
	py::class_< FTradeSlot >(m, "FTradeSlot")
		.def(py::init<>())
		.def_readwrite("Status", &FTradeSlot::Status)
		.def_readwrite("WeaponData", &FTradeSlot::WeaponData, py::return_value_policy::reference)
		.def_readwrite("ItemData", &FTradeSlot::ItemData, py::return_value_policy::reference)
		.def_readwrite("Quantity", &FTradeSlot::Quantity)
		.def_readwrite("WInv", &FTradeSlot::WInv, py::return_value_policy::reference)
		;
	py::class_< FColumnData >(m, "FColumnData")
		.def(py::init<>())
		.def_readwrite("Text", &FColumnData::Text, py::return_value_policy::reference)
		.def_readwrite("HAlign", &FColumnData::HAlign)
		.def_readwrite("TextColor", &FColumnData::TextColor, py::return_value_policy::reference)
		;
	py::class_< FtMenuData >(m, "FtMenuData")
		.def(py::init<>())
		.def_property("bIsSelectable", [](FtMenuData &self){return self.bIsSelectable;}, [](FtMenuData &self, bool value){self.bIsSelectable = value ? 1 : 0;})
		.def_readwrite("ColumnText", &FtMenuData::ColumnText, py::return_value_policy::reference)
		.def_readwrite("PrimaryActionCmd", &FtMenuData::PrimaryActionCmd, py::return_value_policy::reference)
		.def_readwrite("SecondaryActionCmd", &FtMenuData::SecondaryActionCmd, py::return_value_policy::reference)
		.def_readwrite("TertiaryActionCmd", &FtMenuData::TertiaryActionCmd, py::return_value_policy::reference)
		.def_readwrite("QuaternaryActionCmd", &FtMenuData::QuaternaryActionCmd, py::return_value_policy::reference)
		.def_readwrite("QuinaryActionCmd", &FtMenuData::QuinaryActionCmd, py::return_value_policy::reference)
		.def_readwrite("OverCmd", &FtMenuData::OverCmd, py::return_value_policy::reference)
		.def_readwrite("LeaveCmd", &FtMenuData::LeaveCmd, py::return_value_policy::reference)
		.def_readwrite("Data", &FtMenuData::Data, py::return_value_policy::reference)
		.def_readwrite("HintFontSize", &FtMenuData::HintFontSize)
		.def_readwrite("Hint", &FtMenuData::Hint, py::return_value_policy::reference)
		.def_readwrite("ItemDetail", &FtMenuData::ItemDetail, py::return_value_policy::reference)
		.def_readwrite("DescriptionBoxStr", &FtMenuData::DescriptionBoxStr, py::return_value_policy::reference)
		;
	py::class_< FGearBuilderWeightedWeaponPart >(m, "FGearBuilderWeightedWeaponPart")
		.def(py::init<>())
		.def_readwrite("Part", &FGearBuilderWeightedWeaponPart::Part, py::return_value_policy::reference)
		.def_readwrite("Weight", &FGearBuilderWeightedWeaponPart::Weight)
		.def_readwrite("ProbabilityOfPickingThisPart", &FGearBuilderWeightedWeaponPart::ProbabilityOfPickingThisPart)
		;
	py::class_< FGearBuilderWeightedInventoryPart >(m, "FGearBuilderWeightedInventoryPart")
		.def(py::init<>())
		.def_readwrite("Part", &FGearBuilderWeightedInventoryPart::Part, py::return_value_policy::reference)
		.def_readwrite("Weight", &FGearBuilderWeightedInventoryPart::Weight)
		.def_readwrite("ProbabilityOfPickingThisPart", &FGearBuilderWeightedInventoryPart::ProbabilityOfPickingThisPart)
		;
	py::class_< FMenuHeaderData >(m, "FMenuHeaderData")
		.def(py::init<>())
		.def_property("bDrawIcon", [](FMenuHeaderData &self){return self.bDrawIcon;}, [](FMenuHeaderData &self, bool value){self.bDrawIcon = value ? 1 : 0;})
		.def_readwrite("Header", &FMenuHeaderData::Header, py::return_value_policy::reference)
		.def_readwrite("Width", &FMenuHeaderData::Width)
		.def_readwrite("InterfaceName", &FMenuHeaderData::InterfaceName, py::return_value_policy::reference)
		.def_readwrite("FontSize", &FMenuHeaderData::FontSize)
		.def_readwrite("TextColor", &FMenuHeaderData::TextColor, py::return_value_policy::reference)
		.def_readwrite("TextHighlightColor", &FMenuHeaderData::TextHighlightColor, py::return_value_policy::reference)
		.def_readwrite("IconColor", &FMenuHeaderData::IconColor, py::return_value_policy::reference)
		.def_readwrite("IconU", &FMenuHeaderData::IconU)
		.def_readwrite("IconV", &FMenuHeaderData::IconV)
		.def_readwrite("IconUL", &FMenuHeaderData::IconUL)
		.def_readwrite("IconVL", &FMenuHeaderData::IconVL)
		;
	py::class_< FDebugConsoleCommand >(m, "FDebugConsoleCommand")
		.def(py::init<>())
		.def_property("bOnClient", [](FDebugConsoleCommand &self){return self.bOnClient;}, [](FDebugConsoleCommand &self, bool value){self.bOnClient = value ? 1 : 0;})
		.def_readwrite("MenuName", &FDebugConsoleCommand::MenuName, py::return_value_policy::reference)
		.def_readwrite("CommandName", &FDebugConsoleCommand::CommandName, py::return_value_policy::reference)
		.def_readwrite("Description", &FDebugConsoleCommand::Description, py::return_value_policy::reference)
		.def_readwrite("Command", &FDebugConsoleCommand::Command, py::return_value_policy::reference)
		;
	py::class_< FtMenuTextPos >(m, "FtMenuTextPos")
		.def(py::init<>())
		.def_readwrite("TextHAlign", &FtMenuTextPos::TextHAlign)
		.def_readwrite("TextXPos", &FtMenuTextPos::TextXPos)
		.def_readwrite("TextVAlign", &FtMenuTextPos::TextVAlign)
		.def_readwrite("TextYPos", &FtMenuTextPos::TextYPos)
		;
	py::class_< FColumnLayoutData >(m, "FColumnLayoutData")
		.def(py::init<>())
		.def_readwrite("HeaderHAlign", &FColumnLayoutData::HeaderHAlign)
		.def_readwrite("Header", &FColumnLayoutData::Header, py::return_value_policy::reference)
		.def_readwrite("Width", &FColumnLayoutData::Width)
		.def_readwrite("DataHAlign", &FColumnLayoutData::DataHAlign)
		;
	py::class_< FtMenuLayout >(m, "FtMenuLayout")
		.def(py::init<>())
		.def_property("bDrawOutlineToShowInputFocus", [](FtMenuLayout &self){return self.bDrawOutlineToShowInputFocus;}, [](FtMenuLayout &self, bool value){self.bDrawOutlineToShowInputFocus = value ? 1 : 0;})
		.def_property("bUnderlineDescriptionBoxHeader", [](FtMenuLayout &self){return self.bUnderlineDescriptionBoxHeader;}, [](FtMenuLayout &self, bool value){self.bUnderlineDescriptionBoxHeader = value ? 1 : 0;})
		.def_property("bDrawHintSeparatorLine", [](FtMenuLayout &self){return self.bDrawHintSeparatorLine;}, [](FtMenuLayout &self, bool value){self.bDrawHintSeparatorLine = value ? 1 : 0;})
		.def_readwrite("Background", &FtMenuLayout::Background, py::return_value_policy::reference)
		.def_readwrite("BackgroundXPos", &FtMenuLayout::BackgroundXPos)
		.def_readwrite("BackgroundYPos", &FtMenuLayout::BackgroundYPos)
		.def_readwrite("BackgroundXL", &FtMenuLayout::BackgroundXL)
		.def_readwrite("BackgroundYL", &FtMenuLayout::BackgroundYL)
		.def_readwrite("ColumnDataYL", &FtMenuLayout::ColumnDataYL)
		.def_readwrite("ItemDetailYL", &FtMenuLayout::ItemDetailYL)
		.def_readwrite("DescriptionBoxHeader", &FtMenuLayout::DescriptionBoxHeader, py::return_value_policy::reference)
		.def_readwrite("DescriptionBoxHeaderHAlign", &FtMenuLayout::DescriptionBoxHeaderHAlign)
		.def_readwrite("DescriptionBoxXPos", &FtMenuLayout::DescriptionBoxXPos)
		.def_readwrite("DescriptionBoxYPos", &FtMenuLayout::DescriptionBoxYPos)
		.def_readwrite("DescriptionBoxXL", &FtMenuLayout::DescriptionBoxXL)
		.def_readwrite("TitlePos", &FtMenuLayout::TitlePos, py::return_value_policy::reference)
		.def_readwrite("HintPos", &FtMenuLayout::HintPos, py::return_value_policy::reference)
		.def_readwrite("ColumnPadding", &FtMenuLayout::ColumnPadding)
		.def_readwrite("ColumnLayout", &FtMenuLayout::ColumnLayout, py::return_value_policy::reference)
		.def_readwrite("ColumnDataFont", &FtMenuLayout::ColumnDataFont, py::return_value_policy::reference)
		;
	py::class_< FNetworkChannelData >(m, "FNetworkChannelData")
		.def(py::init<>())
		.def_readwrite("ChannelName", &FNetworkChannelData::ChannelName, py::return_value_policy::reference)
		.def_readwrite("StateName", &FNetworkChannelData::StateName, py::return_value_policy::reference)
		.def_readwrite("ActorClass", &FNetworkChannelData::ActorClass, py::return_value_policy::reference)
		.def_readwrite("ActorClassName", &FNetworkChannelData::ActorClassName, py::return_value_policy::reference)
		.def_readwrite("Role", &FNetworkChannelData::Role, py::return_value_policy::reference)
		.def_readwrite("RemoteRole", &FNetworkChannelData::RemoteRole, py::return_value_policy::reference)
		.def_readwrite("ActorClassCount", &FNetworkChannelData::ActorClassCount)
		.def_readwrite("ActorClassPercent", &FNetworkChannelData::ActorClassPercent)
		;
	py::class_< FItemBuilderData >(m, "FItemBuilderData")
		.def(py::init<>())
		.def_readwrite("TabName", &FItemBuilderData::TabName, py::return_value_policy::reference)
		.def_readwrite("ItemName", &FItemBuilderData::ItemName, py::return_value_policy::reference)
		.def_readwrite("BuildItemMessage", &FItemBuilderData::BuildItemMessage, py::return_value_policy::reference)
		.def_readwrite("InventoryDefinitionClassName", &FItemBuilderData::InventoryDefinitionClassName, py::return_value_policy::reference)
		.def_readwrite("InventoryBalanceDefinitionNames", &FItemBuilderData::InventoryBalanceDefinitionNames, py::return_value_policy::reference)
		;
	py::class_< FItemBuilderBalanceDefinition >(m, "FItemBuilderBalanceDefinition")
		.def(py::init<>())
		.def_readwrite("InventoryDefinitionClass", &FItemBuilderBalanceDefinition::InventoryDefinitionClass, py::return_value_policy::reference)
		.def_readwrite("BalanceDefinitions", &FItemBuilderBalanceDefinition::BalanceDefinitions, py::return_value_policy::reference)
		;
	py::class_< FGearBuilderInventoryPartSlot >(m, "FGearBuilderInventoryPartSlot")
		.def(py::init<>())
		.def_readwrite("PartName", &FGearBuilderInventoryPartSlot::PartName, py::return_value_policy::reference)
		.def_readwrite("SelectedPart", &FGearBuilderInventoryPartSlot::SelectedPart)
		.def_readwrite("WeightedPartList", &FGearBuilderInventoryPartSlot::WeightedPartList, py::return_value_policy::reference)
		;
	py::class_< FItemSettings >(m, "FItemSettings")
		.def(py::init<>())
		.def_readwrite("ItemDefinition", &FItemSettings::ItemDefinition, py::return_value_policy::reference)
		.def_readwrite("BalanceDefinition", &FItemSettings::BalanceDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerDefinition", &FItemSettings::ManufacturerDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerGradeIndex", &FItemSettings::ManufacturerGradeIndex)
		.def_readwrite("Level", &FItemSettings::Level)
		.def_readwrite("CurrentPartBeingSet", &FItemSettings::CurrentPartBeingSet)
		.def_readwrite("ItemBuilderIndex", &FItemSettings::ItemBuilderIndex)
		.def_readwrite("ActiveSubmenuForThisItem", &FItemSettings::ActiveSubmenuForThisItem)
		;
	py::class_< FGearBuilderWeaponPartSlot >(m, "FGearBuilderWeaponPartSlot")
		.def(py::init<>())
		.def_readwrite("PartName", &FGearBuilderWeaponPartSlot::PartName, py::return_value_policy::reference)
		.def_readwrite("SelectedPart", &FGearBuilderWeaponPartSlot::SelectedPart)
		.def_readwrite("WeightedPartList", &FGearBuilderWeaponPartSlot::WeightedPartList, py::return_value_policy::reference)
		;
	py::class_< FWeaponSettings >(m, "FWeaponSettings")
		.def(py::init<>())
		.def_readwrite("WeaponTypeDefinition", &FWeaponSettings::WeaponTypeDefinition, py::return_value_policy::reference)
		.def_readwrite("BalanceDefinition", &FWeaponSettings::BalanceDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerDefinition", &FWeaponSettings::ManufacturerDefinition, py::return_value_policy::reference)
		.def_readwrite("ManufacturerGradeIndex", &FWeaponSettings::ManufacturerGradeIndex)
		.def_readwrite("Level", &FWeaponSettings::Level)
		.def_readwrite("CurrentPartBeingSet", &FWeaponSettings::CurrentPartBeingSet)
		;
	py::class_< FGearBuilderCustomizationData >(m, "FGearBuilderCustomizationData")
		.def(py::init<>())
		.def_readwrite("SortValue", &FGearBuilderCustomizationData::SortValue)
		.def_readwrite("BalanceDefinition", &FGearBuilderCustomizationData::BalanceDefinition, py::return_value_policy::reference)
		;
	py::class_< FGearBuilderCustomizationUsageData >(m, "FGearBuilderCustomizationUsageData")
		.def(py::init<>())
		.def_readwrite("Usage", &FGearBuilderCustomizationUsageData::Usage, py::return_value_policy::reference)
		.def_readwrite("CustomizationBalanceDefinitions", &FGearBuilderCustomizationUsageData::CustomizationBalanceDefinitions, py::return_value_policy::reference)
		;
	py::class_< FTimePosition >(m, "FTimePosition")
		.def(py::init<>())
		.def_readwrite("Position", &FTimePosition::Position, py::return_value_policy::reference)
		.def_readwrite("Time", &FTimePosition::Time)
		;
	py::class_< FVehicleSeatInstance >(m, "FVehicleSeatInstance")
		.def(py::init<>())
		.def_property("bDontStopAnimOnExit", [](FVehicleSeatInstance &self){return self.bDontStopAnimOnExit;}, [](FVehicleSeatInstance &self, bool value){self.bDontStopAnimOnExit = value ? 1 : 0;})
		.def_property("bSwitchingSeats", [](FVehicleSeatInstance &self){return self.bSwitchingSeats;}, [](FVehicleSeatInstance &self, bool value){self.bSwitchingSeats = value ? 1 : 0;})
		.def_property("bExiting", [](FVehicleSeatInstance &self){return self.bExiting;}, [](FVehicleSeatInstance &self, bool value){self.bExiting = value ? 1 : 0;})
		.def_readwrite("StoragePawn", &FVehicleSeatInstance::StoragePawn, py::return_value_policy::reference)
		.def_readwrite("LastStoragePawn", &FVehicleSeatInstance::LastStoragePawn, py::return_value_policy::reference)
		.def_readwrite("SeatPawn", &FVehicleSeatInstance::SeatPawn, py::return_value_policy::reference)
		.def_readwrite("Gun", &FVehicleSeatInstance::Gun, py::return_value_policy::reference)
		.def_readwrite("GunMesh", &FVehicleSeatInstance::GunMesh, py::return_value_policy::reference)
		.def_readwrite("GunDefinition", &FVehicleSeatInstance::GunDefinition, py::return_value_policy::reference)
		.def_readwrite("BarrelIndex", &FVehicleSeatInstance::BarrelIndex)
		.def_readwrite("WeaponRotationName", &FVehicleSeatInstance::WeaponRotationName, py::return_value_policy::reference)
		.def_readwrite("FlashLocationName", &FVehicleSeatInstance::FlashLocationName, py::return_value_policy::reference)
		.def_readwrite("FlashCountName", &FVehicleSeatInstance::FlashCountName, py::return_value_policy::reference)
		.def_readwrite("FiringModeName", &FVehicleSeatInstance::FiringModeName, py::return_value_policy::reference)
		.def_readwrite("AttachedWeaponName", &FVehicleSeatInstance::AttachedWeaponName, py::return_value_policy::reference)
		.def_readwrite("TurretControllers", &FVehicleSeatInstance::TurretControllers, py::return_value_policy::reference)
		.def_readwrite("WeaponFireSMD", &FVehicleSeatInstance::WeaponFireSMD, py::return_value_policy::reference)
		.def_readwrite("OldPositions", &FVehicleSeatInstance::OldPositions, py::return_value_policy::reference)
		.def_readwrite("SmoothedCameraOffset", &FVehicleSeatInstance::SmoothedCameraOffset, py::return_value_policy::reference)
		.def_readwrite("IncomingSeatIndex", &FVehicleSeatInstance::IncomingSeatIndex)
		.def_readwrite("SeatLockTime", &FVehicleSeatInstance::SeatLockTime)
		;
	py::class_< FVirtualSeatStruct >(m, "FVirtualSeatStruct")
		.def(py::init<>())
		.def_readwrite("NameKey", &FVirtualSeatStruct::NameKey, py::return_value_policy::reference)
		.def_readwrite("CurrentRealSeat", &FVirtualSeatStruct::CurrentRealSeat)
		;
	py::class_< FVehicleEffect >(m, "FVehicleEffect")
		.def(py::init<>())
		.def_property("bOnlyPassengersSee", [](FVehicleEffect &self){return self.bOnlyPassengersSee;}, [](FVehicleEffect &self, bool value){self.bOnlyPassengersSee = value ? 1 : 0;})
		.def_property("bShutOffOnDeath", [](FVehicleEffect &self){return self.bShutOffOnDeath;}, [](FVehicleEffect &self, bool value){self.bShutOffOnDeath = value ? 1 : 0;})
		.def_readwrite("EffectStartTag", &FVehicleEffect::EffectStartTag, py::return_value_policy::reference)
		.def_readwrite("EffectEndTag", &FVehicleEffect::EffectEndTag, py::return_value_policy::reference)
		.def_readwrite("EffectTemplate", &FVehicleEffect::EffectTemplate, py::return_value_policy::reference)
		.def_readwrite("EffectSocket", &FVehicleEffect::EffectSocket, py::return_value_policy::reference)
		.def_readwrite("EffectRef", &FVehicleEffect::EffectRef, py::return_value_policy::reference)
		.def_readwrite("EffectAudioStartAkEvent", &FVehicleEffect::EffectAudioStartAkEvent, py::return_value_policy::reference)
		.def_readwrite("EffectAudioStopAkEvent", &FVehicleEffect::EffectAudioStopAkEvent, py::return_value_policy::reference)
		;
	py::class_< FFDamageMorphTargets >(m, "FFDamageMorphTargets")
		.def(py::init<>())
		.def_readwrite("MorphNodeName", &FFDamageMorphTargets::MorphNodeName, py::return_value_policy::reference)
		.def_readwrite("MorphNode", &FFDamageMorphTargets::MorphNode, py::return_value_policy::reference)
		.def_readwrite("LinkedMorphNodeName", &FFDamageMorphTargets::LinkedMorphNodeName, py::return_value_policy::reference)
		.def_readwrite("LinkedMorphNodeIndex", &FFDamageMorphTargets::LinkedMorphNodeIndex)
		.def_readwrite("AssociatedSkelControl", &FFDamageMorphTargets::AssociatedSkelControl, py::return_value_policy::reference)
		.def_readwrite("InfluenceBone", &FFDamageMorphTargets::InfluenceBone, py::return_value_policy::reference)
		.def_readwrite("Health", &FFDamageMorphTargets::Health)
		.def_readwrite("DamagePropNames", &FFDamageMorphTargets::DamagePropNames, py::return_value_policy::reference)
		;
	py::class_< FSuspensionSound >(m, "FSuspensionSound")
		.def(py::init<>())
		.def_readwrite("LastSuspensionTravel", &FSuspensionSound::LastSuspensionTravel)
		.def_readwrite("LastPlayTime", &FSuspensionSound::LastPlayTime)
		.def_readwrite("PlayingInfo", &FSuspensionSound::PlayingInfo, py::return_value_policy::reference)
		;
	py::class_< FIndexPair >(m, "FIndexPair")
		.def(py::init<>())
		.def_readwrite("Index1", &FIndexPair::Index1)
		.def_readwrite("Index2", &FIndexPair::Index2)
		;
	py::class_< FTankSensor >(m, "FTankSensor")
		.def(py::init<>())
		.def_readwrite("Socket", &FTankSensor::Socket, py::return_value_policy::reference)
		.def_readwrite("Type", &FTankSensor::Type)
		.def_readwrite("SearchLength", &FTankSensor::SearchLength)
		.def_readwrite("HitLength", &FTankSensor::HitLength)
		;
	py::class_< FPhysicalMaterialTireModel >(m, "FPhysicalMaterialTireModel")
		.def(py::init<>())
		.def_readwrite("PhysMaterial", &FPhysicalMaterialTireModel::PhysMaterial, py::return_value_policy::reference)
		.def_readwrite("LongGripScaler", &FPhysicalMaterialTireModel::LongGripScaler)
		.def_readwrite("LatGripScaler", &FPhysicalMaterialTireModel::LatGripScaler)
		;
	py::class_< FWeaponMemento >(m, "FWeaponMemento")
		.def(py::init<>())
		.def_property("bEquipped", [](FWeaponMemento &self){return self.bEquipped;}, [](FWeaponMemento &self, bool value){self.bEquipped = value ? 1 : 0;})
		.def_property("bDropOnDeath", [](FWeaponMemento &self){return self.bDropOnDeath;}, [](FWeaponMemento &self, bool value){self.bDropOnDeath = value ? 1 : 0;})
		.def_readwrite("SerialNumber", &FWeaponMemento::SerialNumber, py::return_value_policy::reference)
		.def_readwrite("StoredAmmo", &FWeaponMemento::StoredAmmo)
		;
	py::class_< FLockOnTargetStateStruct >(m, "FLockOnTargetStateStruct")
		.def(py::init<>())
		.def_property("LockOnRequested", [](FLockOnTargetStateStruct &self){return self.LockOnRequested;}, [](FLockOnTargetStateStruct &self, bool value){self.LockOnRequested = value ? 1 : 0;})
		.def_property("LockOnInProgress", [](FLockOnTargetStateStruct &self){return self.LockOnInProgress;}, [](FLockOnTargetStateStruct &self, bool value){self.LockOnInProgress = value ? 1 : 0;})
		.def_readwrite("CurrentTarget", &FLockOnTargetStateStruct::CurrentTarget, py::return_value_policy::reference)
		.def_readwrite("StartTime", &FLockOnTargetStateStruct::StartTime)
		.def_readwrite("CoolDownStartTime", &FLockOnTargetStateStruct::CoolDownStartTime)
		;
	py::class_< FWeaponBoneControllerInstance >(m, "FWeaponBoneControllerInstance")
		.def(py::init<>())
		.def_readwrite("SourcePartType", &FWeaponBoneControllerInstance::SourcePartType)
		.def_readwrite("BoneControlType", &FWeaponBoneControllerInstance::BoneControlType)
		.def_readwrite("BoneController", &FWeaponBoneControllerInstance::BoneController)
		;
	py::class_< FShellCasingImpact >(m, "FShellCasingImpact")
		.def(py::init<>())
		.def_readwrite("ImpactTime", &FShellCasingImpact::ImpactTime)
		.def_readwrite("ImpactLocation", &FShellCasingImpact::ImpactLocation, py::return_value_policy::reference)
		;
	py::class_< FAimAnimTransitionData >(m, "FAimAnimTransitionData")
		.def(py::init<>())
		.def_property("bPlayInReverse", [](FAimAnimTransitionData &self){return self.bPlayInReverse;}, [](FAimAnimTransitionData &self, bool value){self.bPlayInReverse = value ? 1 : 0;})
		.def_readwrite("FromState", &FAimAnimTransitionData::FromState)
		.def_readwrite("ToState", &FAimAnimTransitionData::ToState)
		.def_readwrite("AnimName", &FAimAnimTransitionData::AnimName, py::return_value_policy::reference)
		.def_readwrite("BlendInTime", &FAimAnimTransitionData::BlendInTime)
		.def_readwrite("BlendOutTime", &FAimAnimTransitionData::BlendOutTime)
		;
	py::class_< FBoneRotateData >(m, "FBoneRotateData")
		.def(py::init<>())
		.def_readwrite("Index", &FBoneRotateData::Index)
		.def_readwrite("Rotation", &FBoneRotateData::Rotation, py::return_value_policy::reference)
		;
	py::class_< FAnimDeltaDataList >(m, "FAnimDeltaDataList")
		.def(py::init<>())
		.def_readwrite("IndexList", &FAnimDeltaDataList::IndexList, py::return_value_policy::reference)
		;
	py::class_< FAnimSwapData >(m, "FAnimSwapData")
		.def(py::init<>())
		.def_readwrite("Index1", &FAnimSwapData::Index1)
		.def_readwrite("Index2", &FAnimSwapData::Index2)
		;
	py::class_< FPrismDataContainer >(m, "FPrismDataContainer")
		.def(py::init<>())
		.def_readwrite("RotateBoneTranslation", &FPrismDataContainer::RotateBoneTranslation, py::return_value_policy::reference)
		.def_readwrite("RotateBone", &FPrismDataContainer::RotateBone, py::return_value_policy::reference)
		.def_readwrite("RotateRefBone", &FPrismDataContainer::RotateRefBone, py::return_value_policy::reference)
		.def_readwrite("AnimDeltaList", &FPrismDataContainer::AnimDeltaList, py::return_value_policy::reference)
		.def_readwrite("AnimDeltaRefList", &FPrismDataContainer::AnimDeltaRefList, py::return_value_policy::reference)
		.def_readwrite("SwapList", &FPrismDataContainer::SwapList, py::return_value_policy::reference)
		.def_readwrite("RotateRootMotion", &FPrismDataContainer::RotateRootMotion, py::return_value_policy::reference)
		;
	py::class_< FDirChangeRateRange >(m, "FDirChangeRateRange")
		.def(py::init<>())
		.def_readwrite("DirDegreesPerSecond", &FDirChangeRateRange::DirDegreesPerSecond)
		.def_readwrite("SpeedRange", &FDirChangeRateRange::SpeedRange)
		;
	py::class_< FFeatherBoneBlendTarget >(m, "FFeatherBoneBlendTarget")
		.def(py::init<>())
		.def_readwrite("StartBoneName", &FFeatherBoneBlendTarget::StartBoneName, py::return_value_policy::reference)
		.def_readwrite("BlendWeight", &FFeatherBoneBlendTarget::BlendWeight)
		;
	py::class_< FTurretConstraintData >(m, "FTurretConstraintData")
		.def(py::init<>())
		.def_readwrite("PitchConstraint", &FTurretConstraintData::PitchConstraint)
		.def_readwrite("YawConstraint", &FTurretConstraintData::YawConstraint)
		.def_readwrite("RollConstraint", &FTurretConstraintData::RollConstraint)
		;
	py::class_< FEvalActionData >(m, "FEvalActionData")
		.def(py::init<>())
		.def_property("bIsActive", [](FEvalActionData &self){return self.bIsActive;}, [](FEvalActionData &self, bool value){self.bIsActive = value ? 1 : 0;})
		.def_readwrite("Action", &FEvalActionData::Action)
		;
	py::class_< FDeferredSkillActivationData >(m, "FDeferredSkillActivationData")
		.def(py::init<>())
		.def_readwrite("SkillInstigator", &FDeferredSkillActivationData::SkillInstigator, py::return_value_policy::reference)
		.def_readwrite("Definition", &FDeferredSkillActivationData::Definition, py::return_value_policy::reference)
		.def_readwrite("AdditionalSkillTarget", &FDeferredSkillActivationData::AdditionalSkillTarget, py::return_value_policy::reference)
		.def_readwrite("SkillGrade", &FDeferredSkillActivationData::SkillGrade)
		.def_readwrite("StateChangeDelegate", &FDeferredSkillActivationData::StateChangeDelegate, py::return_value_policy::reference)
		;
	py::class_< FAITransformedName >(m, "FAITransformedName")
		.def(py::init<>())
		.def_readwrite("Type", &FAITransformedName::Type)
		.def_readwrite("TransformedName", &FAITransformedName::TransformedName, py::return_value_policy::reference)
		.def_readwrite("TransformedKillStat", &FAITransformedName::TransformedKillStat, py::return_value_policy::reference)
		;
	py::class_< FAIPawnPlaythroughData >(m, "FAIPawnPlaythroughData")
		.def(py::init<>())
		.def_readwrite("PlayThrough", &FAIPawnPlaythroughData::PlayThrough)
		.def_readwrite("DisplayName", &FAIPawnPlaythroughData::DisplayName, py::return_value_policy::reference)
		.def_readwrite("TransformedNames", &FAIPawnPlaythroughData::TransformedNames, py::return_value_policy::reference)
		.def_readwrite("OnSpawnCustomizations", &FAIPawnPlaythroughData::OnSpawnCustomizations, py::return_value_policy::reference)
		.def_readwrite("AttributeStartingValues", &FAIPawnPlaythroughData::AttributeStartingValues, py::return_value_policy::reference)
		.def_readwrite("CustomItemPoolIncludedLists", &FAIPawnPlaythroughData::CustomItemPoolIncludedLists, py::return_value_policy::reference)
		.def_readwrite("CustomItemPoolList", &FAIPawnPlaythroughData::CustomItemPoolList, py::return_value_policy::reference)
		.def_readwrite("MeshMaterial", &FAIPawnPlaythroughData::MeshMaterial, py::return_value_policy::reference)
		;
	py::class_< FAIPawnGradeModifierData >(m, "FAIPawnGradeModifierData")
		.def(py::init<>())
		.def_readwrite("CustomAIPawnArchetype", &FAIPawnGradeModifierData::CustomAIPawnArchetype, py::return_value_policy::reference)
		.def_readwrite("DisplayName", &FAIPawnGradeModifierData::DisplayName, py::return_value_policy::reference)
		.def_readwrite("ExpLevel", &FAIPawnGradeModifierData::ExpLevel)
		.def_readwrite("OnSpawnCustomizations", &FAIPawnGradeModifierData::OnSpawnCustomizations, py::return_value_policy::reference)
		.def_readwrite("AttributeStartingValues", &FAIPawnGradeModifierData::AttributeStartingValues, py::return_value_policy::reference)
		.def_readwrite("CustomItemPoolIncludedLists", &FAIPawnGradeModifierData::CustomItemPoolIncludedLists, py::return_value_policy::reference)
		.def_readwrite("CustomItemPoolList", &FAIPawnGradeModifierData::CustomItemPoolList, py::return_value_policy::reference)
		.def_readwrite("TransformedNames", &FAIPawnGradeModifierData::TransformedNames, py::return_value_policy::reference)
		;
	py::class_< FAIPawnGameStageGradeWeightData, FGameStageGradeWeightData >(m, "FAIPawnGameStageGradeWeightData")
		.def(py::init<>())
		.def_readwrite("GradeModifiers", &FAIPawnGameStageGradeWeightData::GradeModifiers, py::return_value_policy::reference)
		;
	py::class_< FAIPawnPlaythroughThreeData >(m, "FAIPawnPlaythroughThreeData")
		.def(py::init<>())
		.def_readwrite("AIPawnBalanceDefinitionFullObjectName", &FAIPawnPlaythroughThreeData::AIPawnBalanceDefinitionFullObjectName, py::return_value_policy::reference)
		.def_readwrite("DisplayName", &FAIPawnPlaythroughThreeData::DisplayName, py::return_value_policy::reference)
		.def_readwrite("TransformedNames", &FAIPawnPlaythroughThreeData::TransformedNames, py::return_value_policy::reference)
		;
	py::class_< FPopulatedAIPawnMemento >(m, "FPopulatedAIPawnMemento")
		.def(py::init<>())
		.def_readwrite("PawnWeapons", &FPopulatedAIPawnMemento::PawnWeapons, py::return_value_policy::reference)
		.def_readwrite("PawnItems", &FPopulatedAIPawnMemento::PawnItems, py::return_value_policy::reference)
		;
	py::class_< FPopulatedPickupMemento >(m, "FPopulatedPickupMemento")
		.def(py::init<>())
		.def_readwrite("SavedInventoryClass", &FPopulatedPickupMemento::SavedInventoryClass, py::return_value_policy::reference)
		.def_readwrite("PickupMemento", &FPopulatedPickupMemento::PickupMemento, py::return_value_policy::reference)
		.def_readwrite("WeaponMemento", &FPopulatedPickupMemento::WeaponMemento, py::return_value_policy::reference)
		.def_readwrite("ItemMemento", &FPopulatedPickupMemento::ItemMemento, py::return_value_policy::reference)
		;
	py::class_< FCoverExposureData >(m, "FCoverExposureData")
		.def(py::init<>())
		.def_property("bExposedUp", [](FCoverExposureData &self){return self.bExposedUp;}, [](FCoverExposureData &self, bool value){self.bExposedUp = value ? 1 : 0;})
		.def_property("bExposedLeft", [](FCoverExposureData &self){return self.bExposedLeft;}, [](FCoverExposureData &self, bool value){self.bExposedLeft = value ? 1 : 0;})
		.def_property("bExposedRight", [](FCoverExposureData &self){return self.bExposedRight;}, [](FCoverExposureData &self, bool value){self.bExposedRight = value ? 1 : 0;})
		;
	py::class_< FCombatZone >(m, "FCombatZone")
		.def(py::init<>())
		.def_readwrite("Index", &FCombatZone::Index)
		.def_readwrite("Bounds", &FCombatZone::Bounds, py::return_value_policy::reference)
		;
	py::class_< FCombatZoneSearchData >(m, "FCombatZoneSearchData")
		.def(py::init<>())
		.def_property("bCanFail", [](FCombatZoneSearchData &self){return self.bCanFail;}, [](FCombatZoneSearchData &self, bool value){self.bCanFail = value ? 1 : 0;})
		.def_readwrite("ZoneMoveDist", &FCombatZoneSearchData::ZoneMoveDist)
		.def_readwrite("ZoneTimeLimit", &FCombatZoneSearchData::ZoneTimeLimit, py::return_value_policy::reference)
		.def_readwrite("TargetRange", &FCombatZoneSearchData::TargetRange, py::return_value_policy::reference)
		.def_readwrite("MinHeight", &FCombatZoneSearchData::MinHeight)
		.def_readwrite("LineOfSight", &FCombatZoneSearchData::LineOfSight)
		.def_readwrite("LineOfSightTimeLimit", &FCombatZoneSearchData::LineOfSightTimeLimit, py::return_value_policy::reference)
		;
	py::class_< FCombatPointSearchData, FCombatZoneSearchData >(m, "FCombatPointSearchData")
		.def(py::init<>())
		.def_property("bUseCover", [](FCombatPointSearchData &self){return self.bUseCover;}, [](FCombatPointSearchData &self, bool value){self.bUseCover = value ? 1 : 0;})
		.def_readwrite("PointRadius", &FCombatPointSearchData::PointRadius)
		;
	py::class_< FSwoopAttackData >(m, "FSwoopAttackData")
		.def(py::init<>())
		.def_property("bTriggered", [](FSwoopAttackData &self){return self.bTriggered;}, [](FSwoopAttackData &self, bool value){self.bTriggered = value ? 1 : 0;})
		.def_property("bCacheTargetLocation", [](FSwoopAttackData &self){return self.bCacheTargetLocation;}, [](FSwoopAttackData &self, bool value){self.bCacheTargetLocation = value ? 1 : 0;})
		.def_readwrite("Distance", &FSwoopAttackData::Distance)
		;
	py::class_< FTurretEffect >(m, "FTurretEffect")
		.def(py::init<>())
		.def_property("bShutOffOnDeath", [](FTurretEffect &self){return self.bShutOffOnDeath;}, [](FTurretEffect &self, bool value){self.bShutOffOnDeath = value ? 1 : 0;})
		.def_readwrite("EffectStartTag", &FTurretEffect::EffectStartTag, py::return_value_policy::reference)
		.def_readwrite("EffectEndTag", &FTurretEffect::EffectEndTag, py::return_value_policy::reference)
		.def_readwrite("EffectTemplate", &FTurretEffect::EffectTemplate, py::return_value_policy::reference)
		.def_readwrite("EffectSocket", &FTurretEffect::EffectSocket, py::return_value_policy::reference)
		.def_readwrite("EffectRef", &FTurretEffect::EffectRef, py::return_value_policy::reference)
		.def_readwrite("EffectAudioStartAkEvent", &FTurretEffect::EffectAudioStartAkEvent, py::return_value_policy::reference)
		.def_readwrite("EffectAudioStopAkEvent", &FTurretEffect::EffectAudioStopAkEvent, py::return_value_policy::reference)
		;
	py::class_< FTurretDamageEffectData >(m, "FTurretDamageEffectData")
		.def(py::init<>())
		.def_property("EffectActive", [](FTurretDamageEffectData &self){return self.EffectActive;}, [](FTurretDamageEffectData &self, bool value){self.EffectActive = value ? 1 : 0;})
		.def_readwrite("DamageThreshold", &FTurretDamageEffectData::DamageThreshold)
		.def_readwrite("DamageStartTagName", &FTurretDamageEffectData::DamageStartTagName, py::return_value_policy::reference)
		.def_readwrite("DamageEndTagName", &FTurretDamageEffectData::DamageEndTagName, py::return_value_policy::reference)
		;
	py::class_< FServerDynamicRadarIconData >(m, "FServerDynamicRadarIconData")
		.def(py::init<>())
		.def_readwrite("SourceObject", &FServerDynamicRadarIconData::SourceObject, py::return_value_policy::reference)
		.def_readwrite("Duration", &FServerDynamicRadarIconData::Duration)
		.def_readwrite("StartTime", &FServerDynamicRadarIconData::StartTime)
		;
	py::class_< FRemoteDynamicRadarIconData >(m, "FRemoteDynamicRadarIconData")
		.def(py::init<>())
		.def_property("bActive", [](FRemoteDynamicRadarIconData &self){return self.bActive;}, [](FRemoteDynamicRadarIconData &self, bool value){self.bActive = value ? 1 : 0;})
		.def_readwrite("IconType", &FRemoteDynamicRadarIconData::IconType)
		.def_readwrite("Location", &FRemoteDynamicRadarIconData::Location, py::return_value_policy::reference)
		;
	py::class_< FWillowStatProperty >(m, "FWillowStatProperty")
		.def(py::init<>())
		.def_property("bSparkStatDirty", [](FWillowStatProperty &self){return self.bSparkStatDirty;}, [](FWillowStatProperty &self, bool value){self.bSparkStatDirty = value ? 1 : 0;})
		.def_property("bSparkStatInFlight", [](FWillowStatProperty &self){return self.bSparkStatInFlight;}, [](FWillowStatProperty &self, bool value){self.bSparkStatInFlight = value ? 1 : 0;})
		.def_readwrite("Id", &FWillowStatProperty::Id, py::return_value_policy::reference)
		.def_readwrite("Data", &FWillowStatProperty::Data, py::return_value_policy::reference)
		.def_readwrite("MaxData", &FWillowStatProperty::MaxData, py::return_value_policy::reference)
		.def_readwrite("ChallengeBaseData", &FWillowStatProperty::ChallengeBaseData, py::return_value_policy::reference)
		.def_readwrite("OnlineId", &FWillowStatProperty::OnlineId)
		;
	py::class_< FDuelTeamInfo >(m, "FDuelTeamInfo")
		.def(py::init<>())
		.def_readwrite("TeamAllegiance", &FDuelTeamInfo::TeamAllegiance, py::return_value_policy::reference)
		.def_readwrite("TeamColor", &FDuelTeamInfo::TeamColor, py::return_value_policy::reference)
		;
	py::class_< FDuelTeamPair >(m, "FDuelTeamPair")
		.def(py::init<>())
		.def_readwrite("ChallengerTeam", &FDuelTeamPair::ChallengerTeam, py::return_value_policy::reference)
		.def_readwrite("CompetitorTeam", &FDuelTeamPair::CompetitorTeam, py::return_value_policy::reference)
		;
	py::class_< FTempWeaponStruct >(m, "FTempWeaponStruct")
		.def(py::init<>())
		.def_readwrite("DefinitionData", &FTempWeaponStruct::DefinitionData, py::return_value_policy::reference)
		.def_readwrite("Ammo", &FTempWeaponStruct::Ammo)
		;
	py::class_< FTempProfileStruct >(m, "FTempProfileStruct")
		.def(py::init<>())
		.def_readwrite("Allegiance", &FTempProfileStruct::Allegiance, py::return_value_policy::reference)
		.def_readwrite("Health", &FTempProfileStruct::Health)
		.def_readwrite("Shield", &FTempProfileStruct::Shield)
		.def_readwrite("Weapons", &FTempProfileStruct::Weapons, py::return_value_policy::reference)
		;
	py::class_< FHeavyInventoryElement >(m, "FHeavyInventoryElement")
		.def(py::init<>())
		.def_readwrite("Text", &FHeavyInventoryElement::Text, py::return_value_policy::reference)
		.def_readwrite("Color", &FHeavyInventoryElement::Color, py::return_value_policy::reference)
		.def_readwrite("Data", &FHeavyInventoryElement::Data, py::return_value_policy::reference)
		;
	py::class_< FOneTimeDataElement >(m, "FOneTimeDataElement")
		.def(py::init<>())
		.def_readwrite("Text", &FOneTimeDataElement::Text, py::return_value_policy::reference)
		.def_readwrite("Icon", &FOneTimeDataElement::Icon, py::return_value_policy::reference)
		.def_readwrite("IconOverride", &FOneTimeDataElement::IconOverride, py::return_value_policy::reference)
		.def_readwrite("TextColor", &FOneTimeDataElement::TextColor, py::return_value_policy::reference)
		.def_readwrite("Data", &FOneTimeDataElement::Data, py::return_value_policy::reference)
		;
	py::class_< FGFxTextEntry >(m, "FGFxTextEntry")
		.def(py::init<>())
		.def_readwrite("ArrayIdx", &FGFxTextEntry::ArrayIdx)
		.def_readwrite("Kind", &FGFxTextEntry::Kind)
		;
	py::class_< FSortableDataElement >(m, "FSortableDataElement")
		.def(py::init<>())
		.def_property("bFiltered", [](FSortableDataElement &self){return self.bFiltered;}, [](FSortableDataElement &self, bool value){self.bFiltered = value ? 1 : 0;})
		.def_readwrite("OneTimeIdx", &FSortableDataElement::OneTimeIdx)
		.def_readwrite("CategoryIdx", &FSortableDataElement::CategoryIdx)
		.def_readwrite("Data", &FSortableDataElement::Data, py::return_value_policy::reference)
		;
	py::class_< FSortFilterConfiguration >(m, "FSortFilterConfiguration")
		.def(py::init<>())
		.def_readwrite("SortType", &FSortFilterConfiguration::SortType)
		.def_readwrite("FilterType", &FSortFilterConfiguration::FilterType)
		.def_readwrite("CategoryType", &FSortFilterConfiguration::CategoryType)
		.def_readwrite("SortTitleLookupKey", &FSortFilterConfiguration::SortTitleLookupKey, py::return_value_policy::reference)
		;
	py::class_< FPanelInfo >(m, "FPanelInfo")
		.def(py::init<>())
		.def_readwrite("PanelName", &FPanelInfo::PanelName, py::return_value_policy::reference)
		.def_readwrite("PanelFocused", &FPanelInfo::PanelFocused, py::return_value_policy::reference)
		.def_readwrite("PanelUnfocused", &FPanelInfo::PanelUnfocused, py::return_value_policy::reference)
		.def_readwrite("PanelCompare", &FPanelInfo::PanelCompare, py::return_value_policy::reference)
		.def_readwrite("PanelBackground", &FPanelInfo::PanelBackground)
		.def_readwrite("CellWidth", &FPanelInfo::CellWidth)
		.def_readwrite("CellHeight", &FPanelInfo::CellHeight)
		.def_readwrite("TextureWidth", &FPanelInfo::TextureWidth)
		.def_readwrite("TextureHeight", &FPanelInfo::TextureHeight)
		;
	py::class_< FCardInfoRelativeToPanel >(m, "FCardInfoRelativeToPanel")
		.def(py::init<>())
		.def_readwrite("PanelName", &FCardInfoRelativeToPanel::PanelName, py::return_value_policy::reference)
		.def_readwrite("ComparePosition", &FCardInfoRelativeToPanel::ComparePosition, py::return_value_policy::reference)
		.def_readwrite("CompareScale", &FCardInfoRelativeToPanel::CompareScale)
		;
	py::class_< FCardInfo >(m, "FCardInfo")
		.def(py::init<>())
		.def_readwrite("CardName", &FCardInfo::CardName, py::return_value_policy::reference)
		.def_readwrite("CellWidth", &FCardInfo::CellWidth)
		.def_readwrite("CellHeight", &FCardInfo::CellHeight)
		.def_readwrite("TextureWidth", &FCardInfo::TextureWidth)
		.def_readwrite("TextureHeight", &FCardInfo::TextureHeight)
		.def_readwrite("MainPlayerLinkageName", &FCardInfo::MainPlayerLinkageName, py::return_value_policy::reference)
		.def_readwrite("SplitPlayerLinkageName", &FCardInfo::SplitPlayerLinkageName, py::return_value_policy::reference)
		.def_readwrite("CompareSettings", &FCardInfo::CompareSettings, py::return_value_policy::reference)
		;
	py::class_< FItemCardInfo >(m, "FItemCardInfo")
		.def(py::init<>())
		.def_readwrite("CardName", &FItemCardInfo::CardName, py::return_value_policy::reference)
		.def_readwrite("ContentIdx", &FItemCardInfo::ContentIdx)
		.def_readwrite("ItemCard", &FItemCardInfo::ItemCard, py::return_value_policy::reference)
		;
	py::class_< FMinimapIconClip >(m, "FMinimapIconClip")
		.def(py::init<>())
		.def_property("bVisible", [](FMinimapIconClip &self){return self.bVisible;}, [](FMinimapIconClip &self, bool value){self.bVisible = value ? 1 : 0;})
		.def_readwrite("Object", &FMinimapIconClip::Object, py::return_value_policy::reference)
		.def_readwrite("MapPos", &FMinimapIconClip::MapPos, py::return_value_policy::reference)
		;
	py::class_< FMinimapObjectiveIconClip, FMinimapIconClip >(m, "FMinimapObjectiveIconClip")
		.def(py::init<>())
		.def_readwrite("OptionalClip", &FMinimapObjectiveIconClip::OptionalClip, py::return_value_policy::reference)
		.def_readwrite("AboveClip", &FMinimapObjectiveIconClip::AboveClip, py::return_value_policy::reference)
		.def_readwrite("BelowClip", &FMinimapObjectiveIconClip::BelowClip, py::return_value_policy::reference)
		;
	py::class_< FMissionWidgetMessage >(m, "FMissionWidgetMessage")
		.def(py::init<>())
		.def_property("bBranch", [](FMissionWidgetMessage &self){return self.bBranch;}, [](FMissionWidgetMessage &self, bool value){self.bBranch = value ? 1 : 0;})
		.def_property("bSkipAnim", [](FMissionWidgetMessage &self){return self.bSkipAnim;}, [](FMissionWidgetMessage &self, bool value){self.bSkipAnim = value ? 1 : 0;})
		.def_readwrite("Type", &FMissionWidgetMessage::Type)
		.def_readwrite("Category", &FMissionWidgetMessage::Category)
		.def_readwrite("MissDef", &FMissionWidgetMessage::MissDef, py::return_value_policy::reference)
		.def_readwrite("ObjDef", &FMissionWidgetMessage::ObjDef, py::return_value_policy::reference)
		.def_readwrite("Slot", &FMissionWidgetMessage::Slot)
		.def_readwrite("SwapFromSlot", &FMissionWidgetMessage::SwapFromSlot)
		.def_readwrite("ModuleNum", &FMissionWidgetMessage::ModuleNum)
		.def_readwrite("EventTime", &FMissionWidgetMessage::EventTime)
		;
	py::class_< FWorldSpaceIcon >(m, "FWorldSpaceIcon")
		.def(py::init<>())
		.def_property("bOccluded", [](FWorldSpaceIcon &self){return self.bOccluded;}, [](FWorldSpaceIcon &self, bool value){self.bOccluded = value ? 1 : 0;})
		.def_readwrite("IconClip", &FWorldSpaceIcon::IconClip, py::return_value_policy::reference)
		.def_readwrite("ArrowClip", &FWorldSpaceIcon::ArrowClip, py::return_value_policy::reference)
		.def_readwrite("NextOcclusionTestTime", &FWorldSpaceIcon::NextOcclusionTestTime)
		.def_readwrite("CachedTextboxWidth", &FWorldSpaceIcon::CachedTextboxWidth)
		.def_readwrite("CachedTextboxHeight", &FWorldSpaceIcon::CachedTextboxHeight)
		;
	py::class_< FObjectiveIcon, FWorldSpaceIcon >(m, "FObjectiveIcon")
		.def(py::init<>())
		.def_property("bInWorldSpace", [](FObjectiveIcon &self){return self.bInWorldSpace;}, [](FObjectiveIcon &self, bool value){self.bInWorldSpace = value ? 1 : 0;})
		.def_readwrite("TransitionStartTime", &FObjectiveIcon::TransitionStartTime)
		.def_readwrite("LastLocation", &FObjectiveIcon::LastLocation, py::return_value_policy::reference)
		.def_readwrite("FadeAlpha", &FObjectiveIcon::FadeAlpha)
		.def_readwrite("FadeScale", &FObjectiveIcon::FadeScale)
		.def_readwrite("ObjectiveClip", &FObjectiveIcon::ObjectiveClip, py::return_value_policy::reference)
		.def_readwrite("AboveClip", &FObjectiveIcon::AboveClip, py::return_value_policy::reference)
		.def_readwrite("BelowClip", &FObjectiveIcon::BelowClip, py::return_value_policy::reference)
		.def_readwrite("OptionalClip", &FObjectiveIcon::OptionalClip, py::return_value_policy::reference)
		;
	py::class_< FPlayerIcon, FWorldSpaceIcon >(m, "FPlayerIcon")
		.def(py::init<>())
		.def_readwrite("TextClip", &FPlayerIcon::TextClip, py::return_value_policy::reference)
		.def_readwrite("StateClip", &FPlayerIcon::StateClip, py::return_value_policy::reference)
		;
	py::class_< FSkillTreeUICell >(m, "FSkillTreeUICell")
		.def(py::init<>())
		.def_readwrite("BranchNum", &FSkillTreeUICell::BranchNum)
		.def_readwrite("TierNum", &FSkillTreeUICell::TierNum)
		.def_readwrite("CellNum", &FSkillTreeUICell::CellNum)
		.def_readwrite("Clip_Cell", &FSkillTreeUICell::Clip_Cell, py::return_value_policy::reference)
		.def_readwrite("Clip_Highlight", &FSkillTreeUICell::Clip_Highlight, py::return_value_policy::reference)
		.def_readwrite("Clip_Outline", &FSkillTreeUICell::Clip_Outline, py::return_value_policy::reference)
		.def_readwrite("Clip_Overclocked", &FSkillTreeUICell::Clip_Overclocked, py::return_value_policy::reference)
		;
	py::class_< Fartifact_datum >(m, "Fartifact_datum")
		.def(py::init<>())
		.def_readwrite("SkillIndex", &Fartifact_datum::SkillIndex)
		.def_readwrite("Grade", &Fartifact_datum::Grade)
		.def_readwrite("Name", &Fartifact_datum::Name, py::return_value_policy::reference)
		;
	py::class_< FMapObjectData >(m, "FMapObjectData")
		.def(py::init<>())
		.def_property("bWaypoint", [](FMapObjectData &self){return self.bWaypoint;}, [](FMapObjectData &self, bool value){self.bWaypoint = value ? 1 : 0;})
		.def_property("bAreaWaypoint", [](FMapObjectData &self){return self.bAreaWaypoint;}, [](FMapObjectData &self, bool value){self.bAreaWaypoint = value ? 1 : 0;})
		.def_property("bOptional", [](FMapObjectData &self){return self.bOptional;}, [](FMapObjectData &self, bool value){self.bOptional = value ? 1 : 0;})
		.def_property("bIsDirty", [](FMapObjectData &self){return self.bIsDirty;}, [](FMapObjectData &self, bool value){self.bIsDirty = value ? 1 : 0;})
		.def_property("bShowInfoBox", [](FMapObjectData &self){return self.bShowInfoBox;}, [](FMapObjectData &self, bool value){self.bShowInfoBox = value ? 1 : 0;})
		.def_readwrite("Player", &FMapObjectData::Player, py::return_value_policy::reference)
		.def_readwrite("Vehicle", &FMapObjectData::Vehicle, py::return_value_policy::reference)
		.def_readwrite("Landmark", &FMapObjectData::Landmark, py::return_value_policy::reference)
		.def_readwrite("ClientInteractiveObject", &FMapObjectData::ClientInteractiveObject, py::return_value_policy::reference)
		.def_readwrite("WPRI", &FMapObjectData::WPRI, py::return_value_policy::reference)
		.def_readwrite("WaypointIndex", &FMapObjectData::WaypointIndex)
		.def_readwrite("CustomObjectLoc", &FMapObjectData::CustomObjectLoc, py::return_value_policy::reference)
		.def_readwrite("TransformedLocation", &FMapObjectData::TransformedLocation, py::return_value_policy::reference)
		.def_readwrite("Angle", &FMapObjectData::Angle)
		.def_readwrite("Scale", &FMapObjectData::Scale)
		.def_readwrite("AS_IconClipPath", &FMapObjectData::AS_IconClipPath, py::return_value_policy::reference)
		.def_readwrite("AS_IconClipFrame", &FMapObjectData::AS_IconClipFrame, py::return_value_policy::reference)
		.def_readwrite("AS_IconClipInnerFrame", &FMapObjectData::AS_IconClipInnerFrame, py::return_value_policy::reference)
		.def_readwrite("AS_IconPath", &FMapObjectData::AS_IconPath, py::return_value_policy::reference)
		.def_readwrite("InfoBoxTitle", &FMapObjectData::InfoBoxTitle, py::return_value_policy::reference)
		.def_readwrite("InfoBoxDesc", &FMapObjectData::InfoBoxDesc, py::return_value_policy::reference)
		;
	py::class_< FClipRect >(m, "FClipRect")
		.def(py::init<>())
		.def_readwrite("Top", &FClipRect::Top)
		.def_readwrite("Right", &FClipRect::Right)
		.def_readwrite("Bottom", &FClipRect::Bottom)
		.def_readwrite("Left", &FClipRect::Left)
		;
	py::class_< FDialogBoxButton >(m, "FDialogBoxButton")
		.def(py::init<>())
		.def_readwrite("Caption", &FDialogBoxButton::Caption, py::return_value_policy::reference)
		.def_readwrite("TipText", &FDialogBoxButton::TipText, py::return_value_policy::reference)
		.def_readwrite("Tag", &FDialogBoxButton::Tag, py::return_value_policy::reference)
		.def_readwrite("Keys", &FDialogBoxButton::Keys, py::return_value_policy::reference)
		.def_readwrite("OnButtonClicked", &FDialogBoxButton::OnButtonClicked, py::return_value_policy::reference)
		;
	py::class_< FDialogBoxLayout >(m, "FDialogBoxLayout")
		.def(py::init<>())
		.def_readwrite("LayoutTag", &FDialogBoxLayout::LayoutTag, py::return_value_policy::reference)
		.def_readwrite("CancelTag", &FDialogBoxLayout::CancelTag, py::return_value_policy::reference)
		.def_readwrite("Buttons", &FDialogBoxLayout::Buttons, py::return_value_policy::reference)
		;
	py::class_< FResultEntry >(m, "FResultEntry")
		.def(py::init<>())
		.def_readwrite("Game", &FResultEntry::Game, py::return_value_policy::reference)
		.def_readwrite("Name", &FResultEntry::Name, py::return_value_policy::reference)
		.def_readwrite("ExpLevel", &FResultEntry::ExpLevel)
		.def_readwrite("Mission", &FResultEntry::Mission)
		.def_readwrite("PlayThrough", &FResultEntry::PlayThrough)
		.def_readwrite("NumPlayers", &FResultEntry::NumPlayers)
		.def_readwrite("MaxPlayers", &FResultEntry::MaxPlayers)
		.def_readwrite("Ping", &FResultEntry::Ping)
		;
	py::class_< FPCContextMenuItem >(m, "FPCContextMenuItem")
		.def(py::init<>())
		.def_readwrite("Caption", &FPCContextMenuItem::Caption, py::return_value_policy::reference)
		.def_readwrite("Action", &FPCContextMenuItem::Action, py::return_value_policy::reference)
		;
	py::class_< FCachedInvData >(m, "FCachedInvData")
		.def(py::init<>())
		.def_property("bReadied", [](FCachedInvData &self){return self.bReadied;}, [](FCachedInvData &self, bool value){self.bReadied = value ? 1 : 0;})
		.def_readwrite("Inv", &FCachedInvData::Inv, py::return_value_policy::reference)
		.def_readwrite("TrashOrFavorite", &FCachedInvData::TrashOrFavorite)
		;
	py::class_< FTrackedSkillIconState >(m, "FTrackedSkillIconState")
		.def(py::init<>())
		.def_readwrite("Type", &FTrackedSkillIconState::Type)
		.def_readwrite("Icon", &FTrackedSkillIconState::Icon, py::return_value_policy::reference)
		.def_readwrite("PercentComplete", &FTrackedSkillIconState::PercentComplete)
		.def_readwrite("StackCount", &FTrackedSkillIconState::StackCount)
		;
	py::class_< FAvailableTrackedSkill >(m, "FAvailableTrackedSkill")
		.def(py::init<>())
		.def_readwrite("SkillDef", &FAvailableTrackedSkill::SkillDef, py::return_value_policy::reference)
		.def_readwrite("RemappedSlot", &FAvailableTrackedSkill::RemappedSlot)
		;
	py::class_< FCriticalTextMessage >(m, "FCriticalTextMessage")
		.def(py::init<>())
		.def_readwrite("Message", &FCriticalTextMessage::Message, py::return_value_policy::reference)
		.def_readwrite("Title", &FCriticalTextMessage::Title, py::return_value_policy::reference)
		.def_readwrite("DestroyTime", &FCriticalTextMessage::DestroyTime)
		.def_readwrite("DrawColor", &FCriticalTextMessage::DrawColor, py::return_value_policy::reference)
		;
	py::class_< FCachedWeaponInfo >(m, "FCachedWeaponInfo")
		.def(py::init<>())
		.def_readwrite("CachedClipSize", &FCachedWeaponInfo::CachedClipSize)
		.def_readwrite("CachedAmmoInClip", &FCachedWeaponInfo::CachedAmmoInClip)
		.def_readwrite("CachedAmmoNotInClip", &FCachedWeaponInfo::CachedAmmoNotInClip)
		.def_readwrite("CachedWeaponIsReloading", &FCachedWeaponInfo::CachedWeaponIsReloading)
		.def_readwrite("CachedWeaponType", &FCachedWeaponInfo::CachedWeaponType, py::return_value_policy::reference)
		.def_readwrite("CachedWeaponTypeDLCClip", &FCachedWeaponInfo::CachedWeaponTypeDLCClip, py::return_value_policy::reference)
		.def_readwrite("IsReloadIconDisplayed", &FCachedWeaponInfo::IsReloadIconDisplayed)
		.def_readwrite("IsInteractionIconDisplayed", &FCachedWeaponInfo::IsInteractionIconDisplayed)
		;
	py::class_< FCriticalTextMessageArray >(m, "FCriticalTextMessageArray")
		.def(py::init<>())
		.def_readwrite("MessageArray", &FCriticalTextMessageArray::MessageArray, py::return_value_policy::reference)
		;
	py::class_< FHUDInteractionIcon >(m, "FHUDInteractionIcon")
		.def(py::init<>())
		;
	py::class_< FCreditsLine >(m, "FCreditsLine")
		.def(py::init<>())
		.def_readwrite("LineType", &FCreditsLine::LineType, py::return_value_policy::reference)
		.def_readwrite("Text", &FCreditsLine::Text, py::return_value_policy::reference)
		;
	py::class_< FCreditsTextureInfo >(m, "FCreditsTextureInfo")
		.def(py::init<>())
		.def_readwrite("TexturePath", &FCreditsTextureInfo::TexturePath, py::return_value_policy::reference)
		;
	py::class_< FLabelToLinkageMapping >(m, "FLabelToLinkageMapping")
		.def(py::init<>())
		.def_readwrite("LabelName", &FLabelToLinkageMapping::LabelName, py::return_value_policy::reference)
		.def_readwrite("LinkageName", &FLabelToLinkageMapping::LinkageName, py::return_value_policy::reference)
		;
	py::class_< FThirdPersonMenuView >(m, "FThirdPersonMenuView")
		.def(py::init<>())
		.def_readwrite("RelativeCameraLocation", &FThirdPersonMenuView::RelativeCameraLocation, py::return_value_policy::reference)
		.def_readwrite("RelativeCameraRotation", &FThirdPersonMenuView::RelativeCameraRotation, py::return_value_policy::reference)
		.def_readwrite("RelativeMenuLocation", &FThirdPersonMenuView::RelativeMenuLocation, py::return_value_policy::reference)
		.def_readwrite("RelativeMenuRotation", &FThirdPersonMenuView::RelativeMenuRotation, py::return_value_policy::reference)
		.def_readwrite("CameraYawMin", &FThirdPersonMenuView::CameraYawMin)
		.def_readwrite("CameraYawMax", &FThirdPersonMenuView::CameraYawMax)
		.def_readwrite("VerticalSplitscreenCameraOffset", &FThirdPersonMenuView::VerticalSplitscreenCameraOffset)
		.def_readwrite("VerticalSplitscreenCameraSpread", &FThirdPersonMenuView::VerticalSplitscreenCameraSpread)
		.def_readwrite("FocusBoneName", &FThirdPersonMenuView::FocusBoneName, py::return_value_policy::reference)
		.def_readwrite("FocusScreenYaw", &FThirdPersonMenuView::FocusScreenYaw)
		;
	py::class_< FDirectionData >(m, "FDirectionData")
		.def(py::init<>())
		.def_readwrite("This", &FDirectionData::This, py::return_value_policy::reference)
		.def_readwrite("Left", &FDirectionData::Left, py::return_value_policy::reference)
		.def_readwrite("Right", &FDirectionData::Right, py::return_value_policy::reference)
		.def_readwrite("Up", &FDirectionData::Up, py::return_value_policy::reference)
		.def_readwrite("Down", &FDirectionData::Down, py::return_value_policy::reference)
		;
	py::class_< FMissionStatusPresentation >(m, "FMissionStatusPresentation")
		.def(py::init<>())
		.def_readwrite("TextColor", &FMissionStatusPresentation::TextColor, py::return_value_policy::reference)
		.def_readwrite("IconFrame", &FMissionStatusPresentation::IconFrame, py::return_value_policy::reference)
		;
	py::class_< FScaledHUDElement >(m, "FScaledHUDElement")
		.def(py::init<>())
		.def_readwrite("ElementName", &FScaledHUDElement::ElementName, py::return_value_policy::reference)
		.def_readwrite("Anchor", &FScaledHUDElement::Anchor, py::return_value_policy::reference)
		;
	py::class_< FInjuredStringReplacementSet >(m, "FInjuredStringReplacementSet")
		.def(py::init<>())
		.def_readwrite("Skills", &FInjuredStringReplacementSet::Skills, py::return_value_policy::reference)
		.def_readwrite("NewPlayerInjuredString", &FInjuredStringReplacementSet::NewPlayerInjuredString, py::return_value_policy::reference)
		.def_readwrite("NewInjuredTooltipString1", &FInjuredStringReplacementSet::NewInjuredTooltipString1, py::return_value_policy::reference)
		.def_readwrite("NewInjuredTooltipString2", &FInjuredStringReplacementSet::NewInjuredTooltipString2, py::return_value_policy::reference)
		;
	py::class_< FBehaviorAliasReference >(m, "FBehaviorAliasReference")
		.def(py::init<>())
		.def_readwrite("BehaviorAlias", &FBehaviorAliasReference::BehaviorAlias, py::return_value_policy::reference)
		.def_readwrite("BehaviorList", &FBehaviorAliasReference::BehaviorList, py::return_value_policy::reference)
		;
	py::class_< FCombatPointDebugData >(m, "FCombatPointDebugData")
		.def(py::init<>())
		.def_property("bBest", [](FCombatPointDebugData &self){return self.bBest;}, [](FCombatPointDebugData &self, bool value){self.bBest = value ? 1 : 0;})
		.def_readwrite("Score", &FCombatPointDebugData::Score)
		.def_readwrite("Location", &FCombatPointDebugData::Location, py::return_value_policy::reference)
		;
	py::class_< FCombatPointData >(m, "FCombatPointData")
		.def(py::init<>())
		.def_property("bClaimed", [](FCombatPointData &self){return self.bClaimed;}, [](FCombatPointData &self, bool value){self.bClaimed = value ? 1 : 0;})
		.def_readwrite("Slot", &FCombatPointData::Slot)
		.def_readwrite("Location", &FCombatPointData::Location, py::return_value_policy::reference)
		.def_readwrite("Actor", &FCombatPointData::Actor, py::return_value_policy::reference)
		.def_readwrite("ConstraintType", &FCombatPointData::ConstraintType)
		.def_readwrite("ConstraintTags", &FCombatPointData::ConstraintTags, py::return_value_policy::reference)
		;
	py::class_< FEnemyBreadCrumbStruct >(m, "FEnemyBreadCrumbStruct")
		.def(py::init<>())
		.def_readwrite("pos", &FEnemyBreadCrumbStruct::pos, py::return_value_policy::reference)
		.def_readwrite("CombatArea", &FEnemyBreadCrumbStruct::CombatArea, py::return_value_policy::reference)
		;
	py::class_< FEmitterTemplateOptions >(m, "FEmitterTemplateOptions")
		.def(py::init<>())
		.def_property("bEffectEligibleForCensoring", [](FEmitterTemplateOptions &self){return self.bEffectEligibleForCensoring;}, [](FEmitterTemplateOptions &self, bool value){self.bEffectEligibleForCensoring = value ? 1 : 0;})
		.def_readwrite("DefaultTemplate", &FEmitterTemplateOptions::DefaultTemplate, py::return_value_policy::reference)
		.def_readwrite("CensoredTemplateAlternative", &FEmitterTemplateOptions::CensoredTemplateAlternative, py::return_value_policy::reference)
		;
	py::class_< FFloatParameter >(m, "FFloatParameter")
		.def(py::init<>())
		.def_readwrite("Name", &FFloatParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FFloatParameter::Value)
		;
	py::class_< FVectorParameter >(m, "FVectorParameter")
		.def(py::init<>())
		.def_readwrite("Name", &FVectorParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FVectorParameter::Value, py::return_value_policy::reference)
		;
	py::class_< FColorParameter >(m, "FColorParameter")
		.def(py::init<>())
		.def_readwrite("Name", &FColorParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FColorParameter::Value, py::return_value_policy::reference)
		;
	py::class_< FDOFEffectData >(m, "FDOFEffectData")
		.def(py::init<>())
		.def_readwrite("FalloffExponent", &FDOFEffectData::FalloffExponent)
		.def_readwrite("BlurKernelSize", &FDOFEffectData::BlurKernelSize)
		.def_readwrite("MaxNearBlurAmount", &FDOFEffectData::MaxNearBlurAmount)
		.def_readwrite("MaxFarBlurAmount", &FDOFEffectData::MaxFarBlurAmount)
		.def_readwrite("ModulateBlurColor", &FDOFEffectData::ModulateBlurColor, py::return_value_policy::reference)
		.def_readwrite("FocusType", &FDOFEffectData::FocusType)
		.def_readwrite("FocusInnerRadius", &FDOFEffectData::FocusInnerRadius)
		.def_readwrite("FocusDistance", &FDOFEffectData::FocusDistance)
		.def_readwrite("FocusPosition", &FDOFEffectData::FocusPosition, py::return_value_policy::reference)
		;
	py::class_< FWeaponAccessorySetup >(m, "FWeaponAccessorySetup")
		.def(py::init<>())
		.def_readwrite("WeaponArchetypeName", &FWeaponAccessorySetup::WeaponArchetypeName, py::return_value_policy::reference)
		.def_readwrite("AccessoryDefinition", &FWeaponAccessorySetup::AccessoryDefinition, py::return_value_policy::reference)
		.def_readwrite("AccessoryTransforms", &FWeaponAccessorySetup::AccessoryTransforms, py::return_value_policy::reference)
		.def_readwrite("AccessoryParts", &FWeaponAccessorySetup::AccessoryParts, py::return_value_policy::reference)
		;
	py::class_< FDeveloperData >(m, "FDeveloperData")
		.def(py::init<>())
		.def_property("bEligibleForGearboxCustomizations", [](FDeveloperData &self){return self.bEligibleForGearboxCustomizations;}, [](FDeveloperData &self, bool value){self.bEligibleForGearboxCustomizations = value ? 1 : 0;})
		.def_readwrite("Gamertag", &FDeveloperData::Gamertag, py::return_value_policy::reference)
		.def_readwrite("UniqueId", &FDeveloperData::UniqueId, py::return_value_policy::reference)
		.def_readwrite("Platform", &FDeveloperData::Platform)
		.def_readwrite("UnlocksGamerpics", &FDeveloperData::UnlocksGamerpics, py::return_value_policy::reference)
		;
	py::class_< FPerkData >(m, "FPerkData")
		.def(py::init<>())
		.def_property("bMustBeDeveloper", [](FPerkData &self){return self.bMustBeDeveloper;}, [](FPerkData &self, bool value){self.bMustBeDeveloper = value ? 1 : 0;})
		.def_readwrite("ButtonChain", &FPerkData::ButtonChain, py::return_value_policy::reference)
		.def_readwrite("Command", &FPerkData::Command, py::return_value_policy::reference)
		;
	py::class_< FObjectiveStatusData >(m, "FObjectiveStatusData")
		.def(py::init<>())
		.def_readwrite("Objectives", &FObjectiveStatusData::Objectives, py::return_value_policy::reference)
		;
	py::class_< FPlayerLineInfo >(m, "FPlayerLineInfo")
		.def(py::init<>())
		.def_property("bUpdatedThisRound", [](FPlayerLineInfo &self){return self.bUpdatedThisRound;}, [](FPlayerLineInfo &self, bool value){self.bUpdatedThisRound = value ? 1 : 0;})
		.def_readwrite("Avatar", &FPlayerLineInfo::Avatar, py::return_value_policy::reference)
		.def_readwrite("PRI", &FPlayerLineInfo::PRI, py::return_value_policy::reference)
		.def_readwrite("PlayerID", &FPlayerLineInfo::PlayerID)
		.def_readwrite("RoundKills", &FPlayerLineInfo::RoundKills)
		.def_readwrite("TotalKills", &FPlayerLineInfo::TotalKills)
		;
	py::class_< FUnlockItemData >(m, "FUnlockItemData")
		.def(py::init<>())
		.def_readwrite("GameStage", &FUnlockItemData::GameStage)
		.def_readwrite("UnlockItems", &FUnlockItemData::UnlockItems, py::return_value_policy::reference)
		.def_readwrite("UnlockItemPools", &FUnlockItemData::UnlockItemPools, py::return_value_policy::reference)
		;
	py::class_< FMessageOfTheDay >(m, "FMessageOfTheDay")
		.def(py::init<>())
		.def_readwrite("Header", &FMessageOfTheDay::Header, py::return_value_policy::reference)
		.def_readwrite("Body", &FMessageOfTheDay::Body, py::return_value_policy::reference)
		.def_readwrite("DisplayTime", &FMessageOfTheDay::DisplayTime)
		;
	py::class_< FContentState >(m, "FContentState")
		.def(py::init<>())
		.def_readwrite("LicensedMask", &FContentState::LicensedMask)
		.def_readwrite("InstalledMask", &FContentState::InstalledMask)
		;
	py::class_< FBalanceMeResourceUpgradePath >(m, "FBalanceMeResourceUpgradePath")
		.def(py::init<>())
		.def_readwrite("ResourceName", &FBalanceMeResourceUpgradePath::ResourceName, py::return_value_policy::reference)
		.def_readwrite("PlayerLevelForEachUpgrade", &FBalanceMeResourceUpgradePath::PlayerLevelForEachUpgrade, py::return_value_policy::reference)
		;
	py::class_< FStatusEffectNameMapping >(m, "FStatusEffectNameMapping")
		.def(py::init<>())
		.def_readwrite("StatusEffectName", &FStatusEffectNameMapping::StatusEffectName, py::return_value_policy::reference)
		.def_readwrite("StatusEffectDefinitionName", &FStatusEffectNameMapping::StatusEffectDefinitionName, py::return_value_policy::reference)
		;
	py::class_< FDropProjectileBehaviorSequenceStateData >(m, "FDropProjectileBehaviorSequenceStateData")
		.def(py::init<>())
		.def_readwrite("Action", &FDropProjectileBehaviorSequenceStateData::Action)
		.def_readwrite("SequenceName", &FDropProjectileBehaviorSequenceStateData::SequenceName, py::return_value_policy::reference)
		;
	py::class_< UBehavior_RemoveInstanceData_FRemoveObject >(m, "UBehavior_RemoveInstanceData_FRemoveObject")
		.def_readwrite("Name", &UBehavior_RemoveInstanceData_FRemoveObject::Name, py::return_value_policy::reference)
		;
	py::class_< UBehavior_SpawnProjectileFromImpact_FProjectileBehaviorSequenceStateData >(m, "UBehavior_SpawnProjectileFromImpact_FProjectileBehaviorSequenceStateData")
		.def_readwrite("Action", &UBehavior_SpawnProjectileFromImpact_FProjectileBehaviorSequenceStateData::Action)
		.def_readwrite("SequenceName", &UBehavior_SpawnProjectileFromImpact_FProjectileBehaviorSequenceStateData::SequenceName, py::return_value_policy::reference)
		;
	py::class_< FNameExpressionData >(m, "FNameExpressionData")
		.def(py::init<>())
		.def_readwrite("Expressions", &FNameExpressionData::Expressions, py::return_value_policy::reference)
		.def_readwrite("PreModifier", &FNameExpressionData::PreModifier, py::return_value_policy::reference)
		.def_readwrite("PostModifier", &FNameExpressionData::PostModifier, py::return_value_policy::reference)
		;
	py::class_< FLoadCharacterData >(m, "FLoadCharacterData")
		.def(py::init<>())
		.def_readwrite("SaveDataId", &FLoadCharacterData::SaveDataId)
		.def_readwrite("CharLevel", &FLoadCharacterData::CharLevel)
		.def_readwrite("CharName", &FLoadCharacterData::CharName, py::return_value_policy::reference)
		.def_readwrite("CharClass", &FLoadCharacterData::CharClass, py::return_value_policy::reference)
		.def_readwrite("PlayThrough", &FLoadCharacterData::PlayThrough, py::return_value_policy::reference)
		.def_readwrite("ActiveMission", &FLoadCharacterData::ActiveMission, py::return_value_policy::reference)
		.def_readwrite("PlotMission", &FLoadCharacterData::PlotMission, py::return_value_policy::reference)
		.def_readwrite("CharSaveDate", &FLoadCharacterData::CharSaveDate, py::return_value_policy::reference)
		.def_readwrite("CharPlayedTime", &FLoadCharacterData::CharPlayedTime, py::return_value_policy::reference)
		.def_readwrite("CharPlayedTimeInt", &FLoadCharacterData::CharPlayedTimeInt)
		.def_readwrite("SaveGuid", &FLoadCharacterData::SaveGuid, py::return_value_policy::reference)
		.def_readwrite("DlcCharDef", &FLoadCharacterData::DlcCharDef, py::return_value_policy::reference)
		;
	py::class_< FMarketPlaceFilter >(m, "FMarketPlaceFilter")
		.def(py::init<>())
		.def_readwrite("Tag", &FMarketPlaceFilter::Tag, py::return_value_policy::reference)
		.def_readwrite("Caption", &FMarketPlaceFilter::Caption, py::return_value_policy::reference)
		.def_readwrite("Filter", &FMarketPlaceFilter::Filter, py::return_value_policy::reference)
		;
	py::class_< FMatchmakingResultEntry >(m, "FMatchmakingResultEntry")
		.def(py::init<>())
		.def_readwrite("MatchTypeIconFrameName", &FMatchmakingResultEntry::MatchTypeIconFrameName, py::return_value_policy::reference)
		.def_readwrite("StatusIconFrameName", &FMatchmakingResultEntry::StatusIconFrameName, py::return_value_policy::reference)
		.def_readwrite("Message", &FMatchmakingResultEntry::Message, py::return_value_policy::reference)
		;
	py::class_< FDataProviderInfo >(m, "FDataProviderInfo")
		.def(py::init<>())
		.def_readwrite("DataProvider", &FDataProviderInfo::DataProvider)
		.def_readwrite("SelectedIndex", &FDataProviderInfo::SelectedIndex)
		;
	py::class_< FTestMapsListDatum >(m, "FTestMapsListDatum")
		.def(py::init<>())
		.def_property("bUseLoader", [](FTestMapsListDatum &self){return self.bUseLoader;}, [](FTestMapsListDatum &self, bool value){self.bUseLoader = value ? 1 : 0;})
		.def_readwrite("MapDisplayName", &FTestMapsListDatum::MapDisplayName, py::return_value_policy::reference)
		.def_readwrite("MapName", &FTestMapsListDatum::MapName, py::return_value_policy::reference)
		;
	py::class_< FFlashTextEntry >(m, "FFlashTextEntry")
		.def(py::init<>())
		.def_readwrite("TextEntry", &FFlashTextEntry::TextEntry, py::return_value_policy::reference)
		.def_readwrite("IconFrameLabel", &FFlashTextEntry::IconFrameLabel, py::return_value_policy::reference)
		.def_readwrite("ArrayType", &FFlashTextEntry::ArrayType)
		.def_readwrite("Obj", &FFlashTextEntry::Obj, py::return_value_policy::reference)
		;
	py::class_< FUnloadableDlcEchoCallData >(m, "FUnloadableDlcEchoCallData")
		.def(py::init<>())
		.def_readwrite("CallDefName", &FUnloadableDlcEchoCallData::CallDefName, py::return_value_policy::reference)
		.def_readwrite("DlcPackageId", &FUnloadableDlcEchoCallData::DlcPackageId)
		;
	py::class_< FWorldSpacePlayerInfo >(m, "FWorldSpacePlayerInfo")
		.def(py::init<>())
		.def_readwrite("WPRI", &FWorldSpacePlayerInfo::WPRI, py::return_value_policy::reference)
		.def_readwrite("WPP", &FWorldSpacePlayerInfo::WPP, py::return_value_policy::reference)
		;
	py::class_< FDesignerAttributeDefaultValueData >(m, "FDesignerAttributeDefaultValueData")
		.def(py::init<>())
		.def_readwrite("DesignerAttribute", &FDesignerAttributeDefaultValueData::DesignerAttribute, py::return_value_policy::reference)
		.def_readwrite("BaseValue", &FDesignerAttributeDefaultValueData::BaseValue, py::return_value_policy::reference)
		;
	py::class_< FSimpleAnimStateData >(m, "FSimpleAnimStateData")
		.def(py::init<>())
		.def_readwrite("AnimState", &FSimpleAnimStateData::AnimState)
		;
	py::class_< FLiftBodyPair >(m, "FLiftBodyPair")
		.def(py::init<>())
		.def_readwrite("BodyTag", &FLiftBodyPair::BodyTag, py::return_value_policy::reference)
		.def_readwrite("PhaseLockDef", &FLiftBodyPair::PhaseLockDef, py::return_value_policy::reference)
		;
	py::class_< FMissionItemPoolData >(m, "FMissionItemPoolData")
		.def(py::init<>())
		.def_property("bItemAlwaysGranted", [](FMissionItemPoolData &self){return self.bItemAlwaysGranted;}, [](FMissionItemPoolData &self, bool value){self.bItemAlwaysGranted = value ? 1 : 0;})
		.def_readwrite("ItemObjective", &FMissionItemPoolData::ItemObjective, py::return_value_policy::reference)
		.def_readwrite("DirectiveDefinition", &FMissionItemPoolData::DirectiveDefinition, py::return_value_policy::reference)
		.def_readwrite("ItemPool", &FMissionItemPoolData::ItemPool, py::return_value_policy::reference)
		;
	py::class_< FMissionSetData >(m, "FMissionSetData")
		.def(py::init<>())
		.def_readwrite("PackageName", &FMissionSetData::PackageName, py::return_value_policy::reference)
		.def_readwrite("Missions", &FMissionSetData::Missions, py::return_value_policy::reference)
		;
	py::class_< FDescriptionEntry >(m, "FDescriptionEntry")
		.def(py::init<>())
		.def_readwrite("EventID", &FDescriptionEntry::EventID)
		.def_readwrite("Description", &FDescriptionEntry::Description, py::return_value_policy::reference)
		;
	py::class_< FPlayerClassCountOverride >(m, "FPlayerClassCountOverride")
		.def(py::init<>())
		.def_readwrite("Override", &FPlayerClassCountOverride::Override)
		.def_readwrite("PlayerClassIdDef", &FPlayerClassCountOverride::PlayerClassIdDef, py::return_value_policy::reference)
		;
	py::class_< FObjectReference >(m, "FObjectReference")
		.def(py::init<>())
		.def_readwrite("Obj", &FObjectReference::Obj, py::return_value_policy::reference)
		;
	py::class_< FViewProfile >(m, "FViewProfile")
		.def(py::init<>())
		.def_readwrite("InPlayer", &FViewProfile::InPlayer, py::return_value_policy::reference)
		.def_readwrite("ViewNormal", &FViewProfile::ViewNormal, py::return_value_policy::reference)
		.def_readwrite("ViewLocation", &FViewProfile::ViewLocation, py::return_value_policy::reference)
		.def_readwrite("ViewRotation", &FViewProfile::ViewRotation, py::return_value_policy::reference)
		.def_readwrite("ViewNormalDotViewNormal", &FViewProfile::ViewNormalDotViewNormal)
		.def_readwrite("ViewMatrix", &FViewProfile::ViewMatrix, py::return_value_policy::reference)
		;
	py::class_< FDecalData >(m, "FDecalData")
		.def(py::init<>())
		.def_property("RandomRotation", [](FDecalData &self){return self.RandomRotation;}, [](FDecalData &self, bool value){self.RandomRotation = value ? 1 : 0;})
		.def_property("CreateNewMaterialInstanceConstant", [](FDecalData &self){return self.CreateNewMaterialInstanceConstant;}, [](FDecalData &self, bool value){self.CreateNewMaterialInstanceConstant = value ? 1 : 0;})
		.def_readwrite("Materials", &FDecalData::Materials, py::return_value_policy::reference)
		.def_readwrite("Width", &FDecalData::Width)
		.def_readwrite("Height", &FDecalData::Height)
		.def_readwrite("MinScale", &FDecalData::MinScale)
		.def_readwrite("MaxScale", &FDecalData::MaxScale)
		;
	py::class_< FMenuItemCallback >(m, "FMenuItemCallback")
		.def(py::init<>())
		.def_readwrite("Tag", &FMenuItemCallback::Tag, py::return_value_policy::reference)
		.def_readwrite("OnClicked", &FMenuItemCallback::OnClicked, py::return_value_policy::reference)
		;
	py::class_< FSaveResult >(m, "FSaveResult")
		.def(py::init<>())
		.def_readwrite("charID", &FSaveResult::charID)
		.def_readwrite("Data", &FSaveResult::Data, py::return_value_policy::reference)
		;
	py::class_< FHomingTargetedActorInfo >(m, "FHomingTargetedActorInfo")
		.def(py::init<>())
		.def_readwrite("HomingActor", &FHomingTargetedActorInfo::HomingActor, py::return_value_policy::reference)
		.def_readwrite("HomingActorCount", &FHomingTargetedActorInfo::HomingActorCount)
		;
	py::class_< FObstacleSegment >(m, "FObstacleSegment")
		.def(py::init<>())
		.def_readwrite("P1", &FObstacleSegment::P1, py::return_value_policy::reference)
		.def_readwrite("P2", &FObstacleSegment::P2, py::return_value_policy::reference)
		.def_readwrite("Normal", &FObstacleSegment::Normal, py::return_value_policy::reference)
		;
	py::class_< FVelocityObstacle >(m, "FVelocityObstacle")
		.def(py::init<>())
		;
	py::class_< FAsyncDataRequest >(m, "FAsyncDataRequest")
		.def(py::init<>())
		.def_readwrite("RequestType", &FAsyncDataRequest::RequestType)
		.def_readwrite("ObjectPath", &FAsyncDataRequest::ObjectPath, py::return_value_policy::reference)
		.def_readwrite("Instigator", &FAsyncDataRequest::Instigator, py::return_value_policy::reference)
		.def_readwrite("PlayerContext", &FAsyncDataRequest::PlayerContext, py::return_value_policy::reference)
		.def_readwrite("Payload", &FAsyncDataRequest::Payload, py::return_value_policy::reference)
		.def_readwrite("CallbackEventName", &FAsyncDataRequest::CallbackEventName, py::return_value_policy::reference)
		.def_readwrite("IntParam", &FAsyncDataRequest::IntParam)
		.def_readwrite("FloatParam", &FAsyncDataRequest::FloatParam)
		;
	py::class_< FPopOppSummary >(m, "FPopOppSummary")
		.def(py::init<>())
		.def_readwrite("Summary", &FPopOppSummary::Summary, py::return_value_policy::reference)
		.def_readwrite("Count", &FPopOppSummary::Count)
		;
	py::class_< FKeyBindInfo >(m, "FKeyBindInfo")
		.def(py::init<>())
		.def_readwrite("Tag", &FKeyBindInfo::Tag, py::return_value_policy::reference)
		.def_readwrite("ActionName", &FKeyBindInfo::ActionName, py::return_value_policy::reference)
		.def_readwrite("Caption", &FKeyBindInfo::Caption, py::return_value_policy::reference)
		.def_readwrite("CurrentKey", &FKeyBindInfo::CurrentKey, py::return_value_policy::reference)
		.def_readwrite("Object", &FKeyBindInfo::Object, py::return_value_policy::reference)
		;
	py::class_< FSkillIndexLevelRequirementPair >(m, "FSkillIndexLevelRequirementPair")
		.def(py::init<>())
		.def_readwrite("SkillIndex", &FSkillIndexLevelRequirementPair::SkillIndex)
		.def_readwrite("PlayerLevelRequirement", &FSkillIndexLevelRequirementPair::PlayerLevelRequirement)
		;
	py::class_< FItemPartSettings >(m, "FItemPartSettings")
		.def(py::init<>())
		.def_readwrite("PartList", &FItemPartSettings::PartList, py::return_value_policy::reference)
		.def_readwrite("Part", &FItemPartSettings::Part, py::return_value_policy::reference)
		.def_readwrite("PartName", &FItemPartSettings::PartName, py::return_value_policy::reference)
		;
#endif
}