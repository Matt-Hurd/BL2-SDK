#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_APlayerStandIn(py::module &m)
{
    py::class_< APlayerStandIn,  AActor   >(m, "APlayerStandIn")
		.def_static("StaticClass", &APlayerStandIn::StaticClass, py::return_value_policy::reference)
        .def_readwrite("VfTable_IIGearLikenessConsumer", &APlayerStandIn::VfTable_IIGearLikenessConsumer)
        .def_readwrite("VfTable_IIBodyCompositionInstance", &APlayerStandIn::VfTable_IIBodyCompositionInstance)
        .def_readwrite("VfTable_IIBodyInfoProvider", &APlayerStandIn::VfTable_IIBodyInfoProvider)
        .def_readwrite("VfTable_IICustomizable", &APlayerStandIn::VfTable_IICustomizable)
        .def_readwrite("OwningPRI", &APlayerStandIn::OwningPRI)
        .def_readwrite("SaveGame", &APlayerStandIn::SaveGame)
        .def_readwrite("LastDataRequestTimeStamp", &APlayerStandIn::LastDataRequestTimeStamp)
        .def_readwrite("BodyClass", &APlayerStandIn::BodyClass)
        .def_readwrite("PlayerMeshComp", &APlayerStandIn::PlayerMeshComp)
        .def_readwrite("LightEnvironment", &APlayerStandIn::LightEnvironment)
        .def_readwrite("InstanceState", &APlayerStandIn::InstanceState)
        .def_readwrite("Weapon1Data", &APlayerStandIn::Weapon1Data)
        .def_readwrite("Weapon2Data", &APlayerStandIn::Weapon2Data)
        .def_readwrite("ShieldData", &APlayerStandIn::ShieldData)
        .def_readwrite("GrenadeModData", &APlayerStandIn::GrenadeModData)
        .def_readwrite("ClassModData", &APlayerStandIn::ClassModData)
        .def_readwrite("ExtraPlayerMeshOffset", &APlayerStandIn::ExtraPlayerMeshOffset)
        .def_readwrite("ExtraPlayerMeshRotation", &APlayerStandIn::ExtraPlayerMeshRotation)
        .def("SetExtraPlayerMeshRotation", &APlayerStandIn::SetExtraPlayerMeshRotation)
        .def("SetExtraPlayerMeshOffset", &APlayerStandIn::SetExtraPlayerMeshOffset)
        .def("ClearBodyCompositionInstance", &APlayerStandIn::ClearBodyCompositionInstance)
        .def("ApplyPreviewBodyComposition", &APlayerStandIn::ApplyPreviewBodyComposition)
        .def("GetBodyInfoProvider", &APlayerStandIn::GetBodyInfoProvider, py::return_value_policy::reference)
        .def("ChangeInstanceDataSwitch", &APlayerStandIn::ChangeInstanceDataSwitch)
        .def("PostInitBodyComposition", &APlayerStandIn::PostInitBodyComposition)
        .def("PreRemoveBodyComposition", &APlayerStandIn::PreRemoveBodyComposition)
        .def("ShouldRefreshLikenessOf", &APlayerStandIn::ShouldRefreshLikenessOf)
        .def("AssumeLikenessOf", &APlayerStandIn::AssumeLikenessOf)
        .def("eventCloneItemMesh", &APlayerStandIn::eventCloneItemMesh)
        .def("eventCloneWeaponMesh", &APlayerStandIn::eventCloneWeaponMesh)
        .def("InitWeaponMesh", &APlayerStandIn::InitWeaponMesh)
        .def("RefreshGearForRemotePlayer", &APlayerStandIn::RefreshGearForRemotePlayer)
        .def("PlayGearDigistructInEffect", &APlayerStandIn::PlayGearDigistructInEffect)
        .def("HideEquippedGear", &APlayerStandIn::HideEquippedGear)
        .def("eventPlayStandInTeleportEffect", &APlayerStandIn::eventPlayStandInTeleportEffect)
        .def("RemoveAllComponents", &APlayerStandIn::RemoveAllComponents)
        .def("Initialize", &APlayerStandIn::Initialize)
        .def("AllowFallbackToDefaultCustomizations", &APlayerStandIn::AllowFallbackToDefaultCustomizations)
        .def("RefreshCustomizationsOnInstanceData", &APlayerStandIn::RefreshCustomizationsOnInstanceData)
        .def("GetCustomizableName", &APlayerStandIn::GetCustomizableName)
        .def("GetCustomizableInstanceDataSets", &APlayerStandIn::GetCustomizableInstanceDataSets)
        .def("GetDesiredCustomizationOfType", &APlayerStandIn::GetDesiredCustomizationOfType, py::return_value_policy::reference)
        .def("CustomizationApplied", &APlayerStandIn::CustomizationApplied)
        .def("Destroyed", &APlayerStandIn::Destroyed)
        .def("PostBeginPlay", &APlayerStandIn::PostBeginPlay)
          ;
}