#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_Engine_structs(py::module &m)
{
	py::class_< FStaticMeshLODElement >(m, "FStaticMeshLODElement")
		.def_property("bEnableShadowCasting", [](FStaticMeshLODElement &self){return self.bEnableShadowCasting;}, [](FStaticMeshLODElement &self, bool value){self.bEnableShadowCasting = value ? 1 : 0;})
		.def_property("bEnableCollision", [](FStaticMeshLODElement &self){return self.bEnableCollision;}, [](FStaticMeshLODElement &self, bool value){self.bEnableCollision = value ? 1 : 0;})
		.def_readwrite("Material", &FStaticMeshLODElement::Material, py::return_value_policy::reference)
		;
	py::class_< FStaticMeshLODInfo >(m, "FStaticMeshLODInfo")
		.def_readwrite("Elements", &FStaticMeshLODInfo::Elements, py::return_value_policy::reference)
		;
	py::class_< FAnimSlotDesc >(m, "FAnimSlotDesc")
		.def_readwrite("SlotName", &FAnimSlotDesc::SlotName, py::return_value_policy::reference)
		.def_readwrite("NumChannels", &FAnimSlotDesc::NumChannels)
		;
	py::class_< FRigidBodyState >(m, "FRigidBodyState")
		.def_readwrite("Position", &FRigidBodyState::Position, py::return_value_policy::reference)
		.def_readwrite("Quaternion", &FRigidBodyState::Quaternion, py::return_value_policy::reference)
		.def_readwrite("LinVel", &FRigidBodyState::LinVel, py::return_value_policy::reference)
		.def_readwrite("AngVel", &FRigidBodyState::AngVel, py::return_value_policy::reference)
		.def_readwrite("bNewData", &FRigidBodyState::bNewData)
		;
	py::class_< FRigidBodyContactInfo >(m, "FRigidBodyContactInfo")
		.def_readwrite("ContactPosition", &FRigidBodyContactInfo::ContactPosition, py::return_value_policy::reference)
		.def_readwrite("ContactNormal", &FRigidBodyContactInfo::ContactNormal, py::return_value_policy::reference)
		.def_readwrite("ContactPenetration", &FRigidBodyContactInfo::ContactPenetration)
		;
	py::class_< FCollisionImpactData >(m, "FCollisionImpactData")
		.def_readwrite("ContactInfos", &FCollisionImpactData::ContactInfos, py::return_value_policy::reference)
		.def_readwrite("TotalNormalForceVector", &FCollisionImpactData::TotalNormalForceVector, py::return_value_policy::reference)
		.def_readwrite("TotalFrictionForceVector", &FCollisionImpactData::TotalFrictionForceVector, py::return_value_policy::reference)
		;
	py::class_< FPhysEffectInfo >(m, "FPhysEffectInfo")
		.def_readwrite("Threshold", &FPhysEffectInfo::Threshold)
		.def_readwrite("ReFireDelay", &FPhysEffectInfo::ReFireDelay)
		.def_readwrite("Effect", &FPhysEffectInfo::Effect, py::return_value_policy::reference)
		.def_readwrite("Sound", &FPhysEffectInfo::Sound, py::return_value_policy::reference)
		.def_readwrite("ImpactDefinition", &FPhysEffectInfo::ImpactDefinition, py::return_value_policy::reference)
		;
	py::class_< FActorReference >(m, "FActorReference")
		.def_readwrite("Actor", &FActorReference::Actor, py::return_value_policy::reference)
		.def_readwrite("Guid", &FActorReference::Guid, py::return_value_policy::reference)
		;
	py::class_< FNavReference >(m, "FNavReference")
		.def_readwrite("Nav", &FNavReference::Nav, py::return_value_policy::reference)
		.def_readwrite("Guid", &FNavReference::Guid, py::return_value_policy::reference)
		;
	py::class_< FBasedPosition >(m, "FBasedPosition")
		.def_readwrite("Base", &FBasedPosition::Base, py::return_value_policy::reference)
		.def_readwrite("Position", &FBasedPosition::Position, py::return_value_policy::reference)
		.def_readwrite("CachedBaseLocation", &FBasedPosition::CachedBaseLocation, py::return_value_policy::reference)
		.def_readwrite("CachedBaseRotation", &FBasedPosition::CachedBaseRotation, py::return_value_policy::reference)
		.def_readwrite("CachedTransPosition", &FBasedPosition::CachedTransPosition, py::return_value_policy::reference)
		;
	py::class_< FResourcePoolReference >(m, "FResourcePoolReference")
		.def_readwrite("PoolManager", &FResourcePoolReference::PoolManager, py::return_value_policy::reference)
		.def_readwrite("PoolIndexInManager", &FResourcePoolReference::PoolIndexInManager)
		.def_readwrite("PoolGUID", &FResourcePoolReference::PoolGUID)
		.def_readwrite("Data", &FResourcePoolReference::Data, py::return_value_policy::reference)
		;
	py::class_< FTraceHitInfo >(m, "FTraceHitInfo")
		.def_readwrite("Material", &FTraceHitInfo::Material, py::return_value_policy::reference)
		.def_readwrite("PhysMaterial", &FTraceHitInfo::PhysMaterial, py::return_value_policy::reference)
		.def_readwrite("Item", &FTraceHitInfo::Item)
		.def_readwrite("LevelIndex", &FTraceHitInfo::LevelIndex)
		.def_readwrite("BoneName", &FTraceHitInfo::BoneName, py::return_value_policy::reference)
		.def_readwrite("HitComponent", &FTraceHitInfo::HitComponent, py::return_value_policy::reference)
		;
	py::class_< FImpactInfo >(m, "FImpactInfo")
		.def_readwrite("HitActor", &FImpactInfo::HitActor, py::return_value_policy::reference)
		.def_readwrite("HitLocation", &FImpactInfo::HitLocation, py::return_value_policy::reference)
		.def_readwrite("HitNormal", &FImpactInfo::HitNormal, py::return_value_policy::reference)
		.def_readwrite("RayDir", &FImpactInfo::RayDir, py::return_value_policy::reference)
		.def_readwrite("StartTrace", &FImpactInfo::StartTrace, py::return_value_policy::reference)
		.def_readwrite("HitInfo", &FImpactInfo::HitInfo, py::return_value_policy::reference)
		.def_readwrite("EndTrace", &FImpactInfo::EndTrace, py::return_value_policy::reference)
		;
	py::class_< FAkPlayingInfo >(m, "FAkPlayingInfo")
		.def_readwrite("SourceComponent", &FAkPlayingInfo::SourceComponent, py::return_value_policy::reference)
		.def_readwrite("AkPlayingId", &FAkPlayingInfo::AkPlayingId)
		;
	py::class_< FSeqOpInputLink >(m, "FSeqOpInputLink")
		.def_property("bHidden", [](FSeqOpInputLink &self){return self.bHidden;}, [](FSeqOpInputLink &self, bool value){self.bHidden = value ? 1 : 0;})
		.def_property("bMoving", [](FSeqOpInputLink &self){return self.bMoving;}, [](FSeqOpInputLink &self, bool value){self.bMoving = value ? 1 : 0;})
		.def_property("bClampedMax", [](FSeqOpInputLink &self){return self.bClampedMax;}, [](FSeqOpInputLink &self, bool value){self.bClampedMax = value ? 1 : 0;})
		.def_property("bClampedMin", [](FSeqOpInputLink &self){return self.bClampedMin;}, [](FSeqOpInputLink &self, bool value){self.bClampedMin = value ? 1 : 0;})
		.def_property("bDisabled", [](FSeqOpInputLink &self){return self.bDisabled;}, [](FSeqOpInputLink &self, bool value){self.bDisabled = value ? 1 : 0;})
		.def_property("bDisabledPIE", [](FSeqOpInputLink &self){return self.bDisabledPIE;}, [](FSeqOpInputLink &self, bool value){self.bDisabledPIE = value ? 1 : 0;})
		.def_property("bHasImpulse", [](FSeqOpInputLink &self){return self.bHasImpulse;}, [](FSeqOpInputLink &self, bool value){self.bHasImpulse = value ? 1 : 0;})
		.def_readwrite("LinkDesc", &FSeqOpInputLink::LinkDesc, py::return_value_policy::reference)
		.def_readwrite("QueuedActivations", &FSeqOpInputLink::QueuedActivations)
		.def_readwrite("LinkedOp", &FSeqOpInputLink::LinkedOp, py::return_value_policy::reference)
		.def_readwrite("ActivateDelay", &FSeqOpInputLink::ActivateDelay)
		;
	py::class_< FAnimSlotInfo >(m, "FAnimSlotInfo")
		.def_readwrite("SlotName", &FAnimSlotInfo::SlotName, py::return_value_policy::reference)
		.def_readwrite("ChannelWeights", &FAnimSlotInfo::ChannelWeights, py::return_value_policy::reference)
		;
	py::class_< FTraceNotifyInfo >(m, "FTraceNotifyInfo")
		.def_readwrite("ActorToNotify", &FTraceNotifyInfo::ActorToNotify, py::return_value_policy::reference)
		.def_readwrite("ActorCallingTrace", &FTraceNotifyInfo::ActorCallingTrace, py::return_value_policy::reference)
		.def_readwrite("ComponentHit", &FTraceNotifyInfo::ComponentHit, py::return_value_policy::reference)
		.def_readwrite("HitTime", &FTraceNotifyInfo::HitTime)
		.def_readwrite("HitLocation", &FTraceNotifyInfo::HitLocation, py::return_value_policy::reference)
		.def_readwrite("HitNormal", &FTraceNotifyInfo::HitNormal, py::return_value_policy::reference)
		.def_readwrite("End", &FTraceNotifyInfo::End, py::return_value_policy::reference)
		.def_readwrite("Start", &FTraceNotifyInfo::Start, py::return_value_policy::reference)
		.def_readwrite("Extent", &FTraceNotifyInfo::Extent, py::return_value_policy::reference)
		.def_readwrite("TraceFlags", &FTraceNotifyInfo::TraceFlags)
		;
	py::class_< FTimerData >(m, "FTimerData")
		.def_property("bLoop", [](FTimerData &self){return self.bLoop;}, [](FTimerData &self, bool value){self.bLoop = value ? 1 : 0;})
		.def_property("bPaused", [](FTimerData &self){return self.bPaused;}, [](FTimerData &self, bool value){self.bPaused = value ? 1 : 0;})
		.def_readwrite("FuncName", &FTimerData::FuncName, py::return_value_policy::reference)
		.def_readwrite("Rate", &FTimerData::Rate)
		.def_readwrite("Count", &FTimerData::Count)
		.def_readwrite("TimerTimeDilation", &FTimerData::TimerTimeDilation)
		.def_readwrite("TimerObj", &FTimerData::TimerObj, py::return_value_policy::reference)
		;
	py::class_< FKeyValuePair >(m, "FKeyValuePair")
		.def_readwrite("Key", &FKeyValuePair::Key, py::return_value_policy::reference)
		.def_readwrite("Value", &FKeyValuePair::Value, py::return_value_policy::reference)
		;
	py::class_< FPlayerResponseLine >(m, "FPlayerResponseLine")
		.def_readwrite("PlayerNum", &FPlayerResponseLine::PlayerNum)
		.def_readwrite("PlayerID", &FPlayerResponseLine::PlayerID)
		.def_readwrite("PlayerName", &FPlayerResponseLine::PlayerName, py::return_value_policy::reference)
		.def_readwrite("Ping", &FPlayerResponseLine::Ping)
		.def_readwrite("Score", &FPlayerResponseLine::Score)
		.def_readwrite("StatsID", &FPlayerResponseLine::StatsID)
		.def_readwrite("PlayerInfo", &FPlayerResponseLine::PlayerInfo, py::return_value_policy::reference)
		;
	py::class_< FServerResponseLine >(m, "FServerResponseLine")
		.def_readwrite("ServerID", &FServerResponseLine::ServerID)
		.def_readwrite("IP", &FServerResponseLine::IP, py::return_value_policy::reference)
		.def_readwrite("Port", &FServerResponseLine::Port)
		.def_readwrite("QueryPort", &FServerResponseLine::QueryPort)
		.def_readwrite("ServerName", &FServerResponseLine::ServerName, py::return_value_policy::reference)
		.def_readwrite("MapName", &FServerResponseLine::MapName, py::return_value_policy::reference)
		.def_readwrite("GameType", &FServerResponseLine::GameType, py::return_value_policy::reference)
		.def_readwrite("CurrentPlayers", &FServerResponseLine::CurrentPlayers)
		.def_readwrite("MaxPlayers", &FServerResponseLine::MaxPlayers)
		.def_readwrite("Ping", &FServerResponseLine::Ping)
		.def_readwrite("ServerInfo", &FServerResponseLine::ServerInfo, py::return_value_policy::reference)
		.def_readwrite("PlayerInfo", &FServerResponseLine::PlayerInfo, py::return_value_policy::reference)
		;
	py::class_< FLocalizedStringSetting >(m, "FLocalizedStringSetting")
		.def_readwrite("Id", &FLocalizedStringSetting::Id)
		.def_readwrite("ValueIndex", &FLocalizedStringSetting::ValueIndex)
		.def_readwrite("AdvertisementType", &FLocalizedStringSetting::AdvertisementType)
		;
	py::class_< FSettingsData >(m, "FSettingsData")
		.def_readwrite("Type", &FSettingsData::Type)
		.def_readwrite("Value1", &FSettingsData::Value1)
		.def_readwrite("Value2", &FSettingsData::Value2, py::return_value_policy::reference)
		;
	py::class_< FSettingsProperty >(m, "FSettingsProperty")
		.def_readwrite("PropertyId", &FSettingsProperty::PropertyId)
		.def_readwrite("Data", &FSettingsProperty::Data, py::return_value_policy::reference)
		.def_readwrite("AdvertisementType", &FSettingsProperty::AdvertisementType)
		;
	py::class_< FIdToStringMapping >(m, "FIdToStringMapping")
		.def_readwrite("Id", &FIdToStringMapping::Id)
		.def_readwrite("Name", &FIdToStringMapping::Name, py::return_value_policy::reference)
		;
	py::class_< FStringIdToStringMapping >(m, "FStringIdToStringMapping")
		.def_property("bIsWildcard", [](FStringIdToStringMapping &self){return self.bIsWildcard;}, [](FStringIdToStringMapping &self, bool value){self.bIsWildcard = value ? 1 : 0;})
		.def_readwrite("Id", &FStringIdToStringMapping::Id)
		.def_readwrite("Name", &FStringIdToStringMapping::Name, py::return_value_policy::reference)
		;
	py::class_< FLocalizedStringSettingMetaData >(m, "FLocalizedStringSettingMetaData")
		.def_readwrite("Id", &FLocalizedStringSettingMetaData::Id)
		.def_readwrite("Name", &FLocalizedStringSettingMetaData::Name, py::return_value_policy::reference)
		.def_readwrite("ColumnHeaderText", &FLocalizedStringSettingMetaData::ColumnHeaderText, py::return_value_policy::reference)
		.def_readwrite("ValueMappings", &FLocalizedStringSettingMetaData::ValueMappings, py::return_value_policy::reference)
		;
	py::class_< FSettingsPropertyPropertyMetaData >(m, "FSettingsPropertyPropertyMetaData")
		.def_readwrite("Id", &FSettingsPropertyPropertyMetaData::Id)
		.def_readwrite("Name", &FSettingsPropertyPropertyMetaData::Name, py::return_value_policy::reference)
		.def_readwrite("ColumnHeaderText", &FSettingsPropertyPropertyMetaData::ColumnHeaderText, py::return_value_policy::reference)
		.def_readwrite("MappingType", &FSettingsPropertyPropertyMetaData::MappingType)
		.def_readwrite("ValueMappings", &FSettingsPropertyPropertyMetaData::ValueMappings, py::return_value_policy::reference)
		.def_readwrite("PredefinedValues", &FSettingsPropertyPropertyMetaData::PredefinedValues, py::return_value_policy::reference)
		.def_readwrite("MinVal", &FSettingsPropertyPropertyMetaData::MinVal)
		.def_readwrite("MaxVal", &FSettingsPropertyPropertyMetaData::MaxVal)
		.def_readwrite("RangeIncrement", &FSettingsPropertyPropertyMetaData::RangeIncrement)
		;
	py::class_< FUniqueNetId >(m, "FUniqueNetId")
		.def_readwrite("Uid", &FUniqueNetId::Uid, py::return_value_policy::reference)
		;
	py::class_< FOnlineRegistrant >(m, "FOnlineRegistrant")
		.def_readwrite("PlayerNetId", &FOnlineRegistrant::PlayerNetId, py::return_value_policy::reference)
		;
	py::class_< FOnlineArbitrationRegistrant, FOnlineRegistrant >(m, "FOnlineArbitrationRegistrant")
		.def_readwrite("MachineId", &FOnlineArbitrationRegistrant::MachineId, py::return_value_policy::reference)
		.def_readwrite("Trustworthiness", &FOnlineArbitrationRegistrant::Trustworthiness)
		;
	py::class_< FNamedSession >(m, "FNamedSession")
		.def_readwrite("SessionName", &FNamedSession::SessionName, py::return_value_policy::reference)
		.def_readwrite("SessionInfo", &FNamedSession::SessionInfo, py::return_value_policy::reference)
		.def_readwrite("GameSettings", &FNamedSession::GameSettings, py::return_value_policy::reference)
		.def_readwrite("Registrants", &FNamedSession::Registrants, py::return_value_policy::reference)
		.def_readwrite("ArbitrationRegistrants", &FNamedSession::ArbitrationRegistrants, py::return_value_policy::reference)
		;
	py::class_< FNamedInterface >(m, "FNamedInterface")
		.def_readwrite("InterfaceName", &FNamedInterface::InterfaceName, py::return_value_policy::reference)
		.def_readwrite("InterfaceObject", &FNamedInterface::InterfaceObject, py::return_value_policy::reference)
		;
	py::class_< FOnlinePartyMember >(m, "FOnlinePartyMember")
		.def_property("bIsLocal", [](FOnlinePartyMember &self){return self.bIsLocal;}, [](FOnlinePartyMember &self, bool value){self.bIsLocal = value ? 1 : 0;})
		.def_property("bIsInPartyVoice", [](FOnlinePartyMember &self){return self.bIsInPartyVoice;}, [](FOnlinePartyMember &self, bool value){self.bIsInPartyVoice = value ? 1 : 0;})
		.def_property("bIsTalking", [](FOnlinePartyMember &self){return self.bIsTalking;}, [](FOnlinePartyMember &self, bool value){self.bIsTalking = value ? 1 : 0;})
		.def_property("bIsInGameSession", [](FOnlinePartyMember &self){return self.bIsInGameSession;}, [](FOnlinePartyMember &self, bool value){self.bIsInGameSession = value ? 1 : 0;})
		.def_property("bIsPlayingThisGame", [](FOnlinePartyMember &self){return self.bIsPlayingThisGame;}, [](FOnlinePartyMember &self, bool value){self.bIsPlayingThisGame = value ? 1 : 0;})
		.def_readwrite("UniqueId", &FOnlinePartyMember::UniqueId, py::return_value_policy::reference)
		.def_readwrite("NickName", &FOnlinePartyMember::NickName, py::return_value_policy::reference)
		.def_readwrite("LocalUserNum", &FOnlinePartyMember::LocalUserNum)
		.def_readwrite("NatType", &FOnlinePartyMember::NatType)
		.def_readwrite("TitleId", &FOnlinePartyMember::TitleId)
		.def_readwrite("SessionId", &FOnlinePartyMember::SessionId, py::return_value_policy::reference)
		.def_readwrite("Data1", &FOnlinePartyMember::Data1)
		.def_readwrite("Data2", &FOnlinePartyMember::Data2)
		.def_readwrite("Data3", &FOnlinePartyMember::Data3)
		.def_readwrite("Data4", &FOnlinePartyMember::Data4)
		;
	py::class_< FAchievementDetails >(m, "FAchievementDetails")
		.def_property("bIsSecret", [](FAchievementDetails &self){return self.bIsSecret;}, [](FAchievementDetails &self, bool value){self.bIsSecret = value ? 1 : 0;})
		.def_property("bWasAchievedOnline", [](FAchievementDetails &self){return self.bWasAchievedOnline;}, [](FAchievementDetails &self, bool value){self.bWasAchievedOnline = value ? 1 : 0;})
		.def_property("bWasAchievedOffline", [](FAchievementDetails &self){return self.bWasAchievedOffline;}, [](FAchievementDetails &self, bool value){self.bWasAchievedOffline = value ? 1 : 0;})
		.def_readwrite("Id", &FAchievementDetails::Id)
		.def_readwrite("AchievementName", &FAchievementDetails::AchievementName, py::return_value_policy::reference)
		.def_readwrite("Description", &FAchievementDetails::Description, py::return_value_policy::reference)
		.def_readwrite("HowTo", &FAchievementDetails::HowTo, py::return_value_policy::reference)
		.def_readwrite("Image", &FAchievementDetails::Image, py::return_value_policy::reference)
		.def_readwrite("MonthEarned", &FAchievementDetails::MonthEarned)
		.def_readwrite("DayEarned", &FAchievementDetails::DayEarned)
		.def_readwrite("YearEarned", &FAchievementDetails::YearEarned)
		.def_readwrite("DayOfWeekEarned", &FAchievementDetails::DayOfWeekEarned)
		.def_readwrite("GamerPoints", &FAchievementDetails::GamerPoints)
		;
	py::class_< FCommunityContentMetadata >(m, "FCommunityContentMetadata")
		.def_readwrite("ContentType", &FCommunityContentMetadata::ContentType)
		.def_readwrite("MetadataItems", &FCommunityContentMetadata::MetadataItems, py::return_value_policy::reference)
		;
	py::class_< FCommunityContentFile >(m, "FCommunityContentFile")
		.def_readwrite("ContentId", &FCommunityContentFile::ContentId)
		.def_readwrite("FileId", &FCommunityContentFile::FileId)
		.def_readwrite("ContentType", &FCommunityContentFile::ContentType)
		.def_readwrite("FileSize", &FCommunityContentFile::FileSize)
		.def_readwrite("Owner", &FCommunityContentFile::Owner, py::return_value_policy::reference)
		.def_readwrite("DownloadCount", &FCommunityContentFile::DownloadCount)
		.def_readwrite("AverageRating", &FCommunityContentFile::AverageRating)
		.def_readwrite("RatingCount", &FCommunityContentFile::RatingCount)
		.def_readwrite("LastRatingGiven", &FCommunityContentFile::LastRatingGiven)
		.def_readwrite("LocalFilePath", &FCommunityContentFile::LocalFilePath, py::return_value_policy::reference)
		;
	py::class_< FTitleFile >(m, "FTitleFile")
		.def_readwrite("Filename", &FTitleFile::Filename, py::return_value_policy::reference)
		.def_readwrite("AsyncState", &FTitleFile::AsyncState)
		.def_readwrite("Data", &FTitleFile::Data, py::return_value_policy::reference)
		;
	py::class_< FNamedInterfaceDef >(m, "FNamedInterfaceDef")
		.def_readwrite("InterfaceName", &FNamedInterfaceDef::InterfaceName, py::return_value_policy::reference)
		.def_readwrite("InterfaceClassName", &FNamedInterfaceDef::InterfaceClassName, py::return_value_policy::reference)
		;
	py::class_< FOnlineFriendMessage >(m, "FOnlineFriendMessage")
		.def_property("bIsFriendInvite", [](FOnlineFriendMessage &self){return self.bIsFriendInvite;}, [](FOnlineFriendMessage &self, bool value){self.bIsFriendInvite = value ? 1 : 0;})
		.def_property("bIsGameInvite", [](FOnlineFriendMessage &self){return self.bIsGameInvite;}, [](FOnlineFriendMessage &self, bool value){self.bIsGameInvite = value ? 1 : 0;})
		.def_property("bWasAccepted", [](FOnlineFriendMessage &self){return self.bWasAccepted;}, [](FOnlineFriendMessage &self, bool value){self.bWasAccepted = value ? 1 : 0;})
		.def_property("bWasDenied", [](FOnlineFriendMessage &self){return self.bWasDenied;}, [](FOnlineFriendMessage &self, bool value){self.bWasDenied = value ? 1 : 0;})
		.def_readwrite("SendingPlayerId", &FOnlineFriendMessage::SendingPlayerId, py::return_value_policy::reference)
		.def_readwrite("SendingPlayerNick", &FOnlineFriendMessage::SendingPlayerNick, py::return_value_policy::reference)
		.def_readwrite("Message", &FOnlineFriendMessage::Message, py::return_value_policy::reference)
		;
	py::class_< FRemoteTalker >(m, "FRemoteTalker")
		.def_property("bWasTalking", [](FRemoteTalker &self){return self.bWasTalking;}, [](FRemoteTalker &self, bool value){self.bWasTalking = value ? 1 : 0;})
		.def_property("bIsTalking", [](FRemoteTalker &self){return self.bIsTalking;}, [](FRemoteTalker &self, bool value){self.bIsTalking = value ? 1 : 0;})
		.def_property("bIsRegistered", [](FRemoteTalker &self){return self.bIsRegistered;}, [](FRemoteTalker &self, bool value){self.bIsRegistered = value ? 1 : 0;})
		.def_readwrite("TalkerId", &FRemoteTalker::TalkerId, py::return_value_policy::reference)
		.def_readwrite("LastNotificationTime", &FRemoteTalker::LastNotificationTime)
		;
	py::class_< FLocalTalker >(m, "FLocalTalker")
		.def_property("bHasVoice", [](FLocalTalker &self){return self.bHasVoice;}, [](FLocalTalker &self, bool value){self.bHasVoice = value ? 1 : 0;})
		.def_property("bHasNetworkedVoice", [](FLocalTalker &self){return self.bHasNetworkedVoice;}, [](FLocalTalker &self, bool value){self.bHasNetworkedVoice = value ? 1 : 0;})
		.def_property("bIsRecognizingSpeech", [](FLocalTalker &self){return self.bIsRecognizingSpeech;}, [](FLocalTalker &self, bool value){self.bIsRecognizingSpeech = value ? 1 : 0;})
		.def_property("bWasTalking", [](FLocalTalker &self){return self.bWasTalking;}, [](FLocalTalker &self, bool value){self.bWasTalking = value ? 1 : 0;})
		.def_property("bIsTalking", [](FLocalTalker &self){return self.bIsTalking;}, [](FLocalTalker &self, bool value){self.bIsTalking = value ? 1 : 0;})
		.def_property("bIsRegistered", [](FLocalTalker &self){return self.bIsRegistered;}, [](FLocalTalker &self, bool value){self.bIsRegistered = value ? 1 : 0;})
		;
	py::class_< FOnlinePlayerScore >(m, "FOnlinePlayerScore")
		.def_readwrite("PlayerID", &FOnlinePlayerScore::PlayerID, py::return_value_policy::reference)
		.def_readwrite("TeamID", &FOnlinePlayerScore::TeamID)
		.def_readwrite("Score", &FOnlinePlayerScore::Score)
		;
	py::class_< FSpeechRecognizedWord >(m, "FSpeechRecognizedWord")
		.def_readwrite("WordId", &FSpeechRecognizedWord::WordId)
		.def_readwrite("WordText", &FSpeechRecognizedWord::WordText, py::return_value_policy::reference)
		.def_readwrite("Confidence", &FSpeechRecognizedWord::Confidence)
		;
	py::class_< FMarketplaceContent >(m, "FMarketplaceContent")
		.def_property("bIsUnrestrictedLicense", [](FMarketplaceContent &self){return self.bIsUnrestrictedLicense;}, [](FMarketplaceContent &self, bool value){self.bIsUnrestrictedLicense = value ? 1 : 0;})
		.def_property("bUserHasPurchased", [](FMarketplaceContent &self){return self.bUserHasPurchased;}, [](FMarketplaceContent &self, bool value){self.bUserHasPurchased = value ? 1 : 0;})
		.def_readwrite("UserIndex", &FMarketplaceContent::UserIndex)
		.def_readwrite("OfferId", &FMarketplaceContent::OfferId)
		.def_readwrite("PreviewOfferId", &FMarketplaceContent::PreviewOfferId)
		.def_readwrite("OfferName", &FMarketplaceContent::OfferName, py::return_value_policy::reference)
		.def_readwrite("OfferType", &FMarketplaceContent::OfferType)
		.def_readwrite("ContentId", &FMarketplaceContent::ContentId, py::return_value_policy::reference)
		.def_readwrite("LicenseMask", &FMarketplaceContent::LicenseMask)
		.def_readwrite("TitleId", &FMarketplaceContent::TitleId)
		.def_readwrite("ContentCategory", &FMarketplaceContent::ContentCategory)
		.def_readwrite("TitleName", &FMarketplaceContent::TitleName, py::return_value_policy::reference)
		.def_readwrite("PackageSize", &FMarketplaceContent::PackageSize)
		.def_readwrite("InstallSize", &FMarketplaceContent::InstallSize)
		.def_readwrite("SellText", &FMarketplaceContent::SellText, py::return_value_policy::reference)
		.def_readwrite("AssetId", &FMarketplaceContent::AssetId)
		.def_readwrite("PurchaseQuantity", &FMarketplaceContent::PurchaseQuantity)
		.def_readwrite("PointsPrice", &FMarketplaceContent::PointsPrice)
		.def_readwrite("PriceText", &FMarketplaceContent::PriceText, py::return_value_policy::reference)
		.def_readwrite("OfferIdText", &FMarketplaceContent::OfferIdText, py::return_value_policy::reference)
		;
	py::class_< FAppIdLicenseInfo >(m, "FAppIdLicenseInfo")
		.def_readwrite("AppID", &FAppIdLicenseInfo::AppID)
		.def_readwrite("LicenseMask", &FAppIdLicenseInfo::LicenseMask)
		;
	py::class_< FTOCInfo >(m, "FTOCInfo")
		.def_readwrite("TOC", &FTOCInfo::TOC, py::return_value_policy::reference)
		.def_readwrite("RootPath", &FTOCInfo::RootPath, py::return_value_policy::reference)
		.def_readwrite("Path", &FTOCInfo::Path, py::return_value_policy::reference)
		;
	py::class_< FOnlineContent >(m, "FOnlineContent")
		.def_property("bIsCorrupt", [](FOnlineContent &self){return self.bIsCorrupt;}, [](FOnlineContent &self, bool value){self.bIsCorrupt = value ? 1 : 0;})
		.def_readwrite("ContentType", &FOnlineContent::ContentType)
		.def_readwrite("UserIndex", &FOnlineContent::UserIndex)
		.def_readwrite("DeviceID", &FOnlineContent::DeviceID)
		.def_readwrite("LicenseMask", &FOnlineContent::LicenseMask)
		.def_readwrite("FriendlyName", &FOnlineContent::FriendlyName, py::return_value_policy::reference)
		.def_readwrite("Filename", &FOnlineContent::Filename, py::return_value_policy::reference)
		.def_readwrite("ContentPath", &FOnlineContent::ContentPath, py::return_value_policy::reference)
		.def_readwrite("ContentPackages", &FOnlineContent::ContentPackages, py::return_value_policy::reference)
		.def_readwrite("ContentFiles", &FOnlineContent::ContentFiles, py::return_value_policy::reference)
		.def_readwrite("CachedAppIdInfo", &FOnlineContent::CachedAppIdInfo, py::return_value_policy::reference)
		.def_readwrite("TOCInfo", &FOnlineContent::TOCInfo, py::return_value_policy::reference)
		;
	py::class_< FOnlineContentNameInfo >(m, "FOnlineContentNameInfo")
		.def_readwrite("ContentName", &FOnlineContentNameInfo::ContentName, py::return_value_policy::reference)
		.def_readwrite("EngineVersion", &FOnlineContentNameInfo::EngineVersion)
		.def_readwrite("CookedVersionID", &FOnlineContentNameInfo::CookedVersionID, py::return_value_policy::reference)
		;
	py::class_< FNamedOnlineContent, FOnlineContent >(m, "FNamedOnlineContent")
		.def_readwrite("NameInfo", &FNamedOnlineContent::NameInfo, py::return_value_policy::reference)
		.def_readwrite("NamedContentType", &FNamedOnlineContent::NamedContentType)
		;
	py::class_< FCompatibilityOnlineContent >(m, "FCompatibilityOnlineContent")
		.def_readwrite("VersionNumber", &FCompatibilityOnlineContent::VersionNumber)
		.def_readwrite("Container", &FCompatibilityOnlineContent::Container, py::return_value_policy::reference)
		.def_readwrite("Content", &FCompatibilityOnlineContent::Content, py::return_value_policy::reference)
		;
	py::class_< FOnlineFriend >(m, "FOnlineFriend")
		.def_property("bIsOnline", [](FOnlineFriend &self){return self.bIsOnline;}, [](FOnlineFriend &self, bool value){self.bIsOnline = value ? 1 : 0;})
		.def_property("bIsPlaying", [](FOnlineFriend &self){return self.bIsPlaying;}, [](FOnlineFriend &self, bool value){self.bIsPlaying = value ? 1 : 0;})
		.def_property("bIsPlayingThisGame", [](FOnlineFriend &self){return self.bIsPlayingThisGame;}, [](FOnlineFriend &self, bool value){self.bIsPlayingThisGame = value ? 1 : 0;})
		.def_property("bIsJoinable", [](FOnlineFriend &self){return self.bIsJoinable;}, [](FOnlineFriend &self, bool value){self.bIsJoinable = value ? 1 : 0;})
		.def_property("bHasVoiceSupport", [](FOnlineFriend &self){return self.bHasVoiceSupport;}, [](FOnlineFriend &self, bool value){self.bHasVoiceSupport = value ? 1 : 0;})
		.def_property("bHaveInvited", [](FOnlineFriend &self){return self.bHaveInvited;}, [](FOnlineFriend &self, bool value){self.bHaveInvited = value ? 1 : 0;})
		.def_property("bHasInvitedYou", [](FOnlineFriend &self){return self.bHasInvitedYou;}, [](FOnlineFriend &self, bool value){self.bHasInvitedYou = value ? 1 : 0;})
		.def_property("bHaveRequested", [](FOnlineFriend &self){return self.bHaveRequested;}, [](FOnlineFriend &self, bool value){self.bHaveRequested = value ? 1 : 0;})
		.def_property("bHasRequestedYou", [](FOnlineFriend &self){return self.bHasRequestedYou;}, [](FOnlineFriend &self, bool value){self.bHasRequestedYou = value ? 1 : 0;})
		.def_readwrite("UniqueId", &FOnlineFriend::UniqueId, py::return_value_policy::reference)
		.def_readwrite("SessionId", &FOnlineFriend::SessionId, py::return_value_policy::reference)
		.def_readwrite("SessionInfo", &FOnlineFriend::SessionInfo, py::return_value_policy::reference)
		.def_readwrite("NickName", &FOnlineFriend::NickName, py::return_value_policy::reference)
		.def_readwrite("PresenceInfo", &FOnlineFriend::PresenceInfo, py::return_value_policy::reference)
		.def_readwrite("FriendState", &FOnlineFriend::FriendState)
		;
	py::class_< FOnlineCrossTitleContent, FOnlineContent >(m, "FOnlineCrossTitleContent")
		.def_readwrite("TitleId", &FOnlineCrossTitleContent::TitleId)
		;
	py::class_< FFriendsQuery >(m, "FFriendsQuery")
		.def_property("bIsFriend", [](FFriendsQuery &self){return self.bIsFriend;}, [](FFriendsQuery &self, bool value){self.bIsFriend = value ? 1 : 0;})
		.def_readwrite("UniqueId", &FFriendsQuery::UniqueId, py::return_value_policy::reference)
		;
	py::class_< FBaseAuthSession >(m, "FBaseAuthSession")
		.def_readwrite("EndPointIP", &FBaseAuthSession::EndPointIP)
		.def_readwrite("EndPointPort", &FBaseAuthSession::EndPointPort)
		.def_readwrite("EndPointUID", &FBaseAuthSession::EndPointUID, py::return_value_policy::reference)
		;
	py::class_< FLocalAuthSession, FBaseAuthSession >(m, "FLocalAuthSession")
		.def_readwrite("SessionUID", &FLocalAuthSession::SessionUID)
		;
	py::class_< FAuthSession, FBaseAuthSession >(m, "FAuthSession")
		.def_readwrite("AuthStatus", &FAuthSession::AuthStatus)
		.def_readwrite("AuthBlobUID", &FAuthSession::AuthBlobUID)
		;
	py::class_< FPendingClientAuth >(m, "FPendingClientAuth")
		.def_readwrite("ClientConnection", &FPendingClientAuth::ClientConnection, py::return_value_policy::reference)
		.def_readwrite("ClientUID", &FPendingClientAuth::ClientUID, py::return_value_policy::reference)
		.def_readwrite("AuthTimestamp", &FPendingClientAuth::AuthTimestamp)
		.def_readwrite("AuthRetryCount", &FPendingClientAuth::AuthRetryCount)
		;
	py::class_< FServerAuthRetry >(m, "FServerAuthRetry")
		.def_readwrite("ClientUID", &FServerAuthRetry::ClientUID, py::return_value_policy::reference)
		.def_readwrite("AuthRetryCount", &FServerAuthRetry::AuthRetryCount)
		;
	py::class_< FRBCollisionChannelContainer >(m, "FRBCollisionChannelContainer")
		.def_property("Default", [](FRBCollisionChannelContainer &self){return self.Default;}, [](FRBCollisionChannelContainer &self, bool value){self.Default = value ? 1 : 0;})
		.def_property("Nothing", [](FRBCollisionChannelContainer &self){return self.Nothing;}, [](FRBCollisionChannelContainer &self, bool value){self.Nothing = value ? 1 : 0;})
		.def_property("Pawn", [](FRBCollisionChannelContainer &self){return self.Pawn;}, [](FRBCollisionChannelContainer &self, bool value){self.Pawn = value ? 1 : 0;})
		.def_property("Vehicle", [](FRBCollisionChannelContainer &self){return self.Vehicle;}, [](FRBCollisionChannelContainer &self, bool value){self.Vehicle = value ? 1 : 0;})
		.def_property("Water", [](FRBCollisionChannelContainer &self){return self.Water;}, [](FRBCollisionChannelContainer &self, bool value){self.Water = value ? 1 : 0;})
		.def_property("GameplayPhysics", [](FRBCollisionChannelContainer &self){return self.GameplayPhysics;}, [](FRBCollisionChannelContainer &self, bool value){self.GameplayPhysics = value ? 1 : 0;})
		.def_property("EffectPhysics", [](FRBCollisionChannelContainer &self){return self.EffectPhysics;}, [](FRBCollisionChannelContainer &self, bool value){self.EffectPhysics = value ? 1 : 0;})
		.def_property("Untitled1", [](FRBCollisionChannelContainer &self){return self.Untitled1;}, [](FRBCollisionChannelContainer &self, bool value){self.Untitled1 = value ? 1 : 0;})
		.def_property("Untitled2", [](FRBCollisionChannelContainer &self){return self.Untitled2;}, [](FRBCollisionChannelContainer &self, bool value){self.Untitled2 = value ? 1 : 0;})
		.def_property("TossedItems", [](FRBCollisionChannelContainer &self){return self.TossedItems;}, [](FRBCollisionChannelContainer &self, bool value){self.TossedItems = value ? 1 : 0;})
		.def_property("TossedItemsPlayerVehicle", [](FRBCollisionChannelContainer &self){return self.TossedItemsPlayerVehicle;}, [](FRBCollisionChannelContainer &self, bool value){self.TossedItemsPlayerVehicle = value ? 1 : 0;})
		.def_property("Cloth", [](FRBCollisionChannelContainer &self){return self.Cloth;}, [](FRBCollisionChannelContainer &self, bool value){self.Cloth = value ? 1 : 0;})
		.def_property("FluidDrain", [](FRBCollisionChannelContainer &self){return self.FluidDrain;}, [](FRBCollisionChannelContainer &self, bool value){self.FluidDrain = value ? 1 : 0;})
		.def_property("SoftBody", [](FRBCollisionChannelContainer &self){return self.SoftBody;}, [](FRBCollisionChannelContainer &self, bool value){self.SoftBody = value ? 1 : 0;})
		.def_property("FracturedMeshPart", [](FRBCollisionChannelContainer &self){return self.FracturedMeshPart;}, [](FRBCollisionChannelContainer &self, bool value){self.FracturedMeshPart = value ? 1 : 0;})
		.def_property("BlockingVolume", [](FRBCollisionChannelContainer &self){return self.BlockingVolume;}, [](FRBCollisionChannelContainer &self, bool value){self.BlockingVolume = value ? 1 : 0;})
		.def_property("DeadPawn", [](FRBCollisionChannelContainer &self){return self.DeadPawn;}, [](FRBCollisionChannelContainer &self, bool value){self.DeadPawn = value ? 1 : 0;})
		.def_property("Clothing", [](FRBCollisionChannelContainer &self){return self.Clothing;}, [](FRBCollisionChannelContainer &self, bool value){self.Clothing = value ? 1 : 0;})
		.def_property("ClothingCollision", [](FRBCollisionChannelContainer &self){return self.ClothingCollision;}, [](FRBCollisionChannelContainer &self, bool value){self.ClothingCollision = value ? 1 : 0;})
		.def_property("TossedItemsEnemyVehicle", [](FRBCollisionChannelContainer &self){return self.TossedItemsEnemyVehicle;}, [](FRBCollisionChannelContainer &self, bool value){self.TossedItemsEnemyVehicle = value ? 1 : 0;})
		.def_property("PlayerVehicle", [](FRBCollisionChannelContainer &self){return self.PlayerVehicle;}, [](FRBCollisionChannelContainer &self, bool value){self.PlayerVehicle = value ? 1 : 0;})
		.def_property("EnemyVehicle", [](FRBCollisionChannelContainer &self){return self.EnemyVehicle;}, [](FRBCollisionChannelContainer &self, bool value){self.EnemyVehicle = value ? 1 : 0;})
		.def_property("PlayerVehicleEnemyVehicle", [](FRBCollisionChannelContainer &self){return self.PlayerVehicleEnemyVehicle;}, [](FRBCollisionChannelContainer &self, bool value){self.PlayerVehicleEnemyVehicle = value ? 1 : 0;})
		.def_property("TossedItemsPlayerVehicleEnemyVehicle", [](FRBCollisionChannelContainer &self){return self.TossedItemsPlayerVehicleEnemyVehicle;}, [](FRBCollisionChannelContainer &self, bool value){self.TossedItemsPlayerVehicleEnemyVehicle = value ? 1 : 0;})
		.def_property("WillowPickup", [](FRBCollisionChannelContainer &self){return self.WillowPickup;}, [](FRBCollisionChannelContainer &self, bool value){self.WillowPickup = value ? 1 : 0;})
		;
	py::class_< FLightingChannelContainer >(m, "FLightingChannelContainer")
		.def_property("bInitialized", [](FLightingChannelContainer &self){return self.bInitialized;}, [](FLightingChannelContainer &self, bool value){self.bInitialized = value ? 1 : 0;})
		.def_property("BSP", [](FLightingChannelContainer &self){return self.BSP;}, [](FLightingChannelContainer &self, bool value){self.BSP = value ? 1 : 0;})
		.def_property("Static", [](FLightingChannelContainer &self){return self.Static;}, [](FLightingChannelContainer &self, bool value){self.Static = value ? 1 : 0;})
		.def_property("Dynamic", [](FLightingChannelContainer &self){return self.Dynamic;}, [](FLightingChannelContainer &self, bool value){self.Dynamic = value ? 1 : 0;})
		.def_property("CompositeDynamic", [](FLightingChannelContainer &self){return self.CompositeDynamic;}, [](FLightingChannelContainer &self, bool value){self.CompositeDynamic = value ? 1 : 0;})
		.def_property("Skybox", [](FLightingChannelContainer &self){return self.Skybox;}, [](FLightingChannelContainer &self, bool value){self.Skybox = value ? 1 : 0;})
		.def_property("Unnamed", [](FLightingChannelContainer &self){return self.Unnamed;}, [](FLightingChannelContainer &self, bool value){self.Unnamed = value ? 1 : 0;})
		.def_property("Unnamed01", [](FLightingChannelContainer &self){return self.Unnamed01;}, [](FLightingChannelContainer &self, bool value){self.Unnamed01 = value ? 1 : 0;})
		.def_property("Unnamed02", [](FLightingChannelContainer &self){return self.Unnamed02;}, [](FLightingChannelContainer &self, bool value){self.Unnamed02 = value ? 1 : 0;})
		.def_property("Unnamed03", [](FLightingChannelContainer &self){return self.Unnamed03;}, [](FLightingChannelContainer &self, bool value){self.Unnamed03 = value ? 1 : 0;})
		.def_property("Unnamed04", [](FLightingChannelContainer &self){return self.Unnamed04;}, [](FLightingChannelContainer &self, bool value){self.Unnamed04 = value ? 1 : 0;})
		.def_property("Unnamed05", [](FLightingChannelContainer &self){return self.Unnamed05;}, [](FLightingChannelContainer &self, bool value){self.Unnamed05 = value ? 1 : 0;})
		.def_property("Cinematic", [](FLightingChannelContainer &self){return self.Cinematic;}, [](FLightingChannelContainer &self, bool value){self.Cinematic = value ? 1 : 0;})
		.def_property("Cinematic01", [](FLightingChannelContainer &self){return self.Cinematic01;}, [](FLightingChannelContainer &self, bool value){self.Cinematic01 = value ? 1 : 0;})
		.def_property("Cinematic02", [](FLightingChannelContainer &self){return self.Cinematic02;}, [](FLightingChannelContainer &self, bool value){self.Cinematic02 = value ? 1 : 0;})
		.def_property("Cinematic03", [](FLightingChannelContainer &self){return self.Cinematic03;}, [](FLightingChannelContainer &self, bool value){self.Cinematic03 = value ? 1 : 0;})
		.def_property("Cinematic04", [](FLightingChannelContainer &self){return self.Cinematic04;}, [](FLightingChannelContainer &self, bool value){self.Cinematic04 = value ? 1 : 0;})
		.def_property("Cinematic05", [](FLightingChannelContainer &self){return self.Cinematic05;}, [](FLightingChannelContainer &self, bool value){self.Cinematic05 = value ? 1 : 0;})
		.def_property("Cinematic06", [](FLightingChannelContainer &self){return self.Cinematic06;}, [](FLightingChannelContainer &self, bool value){self.Cinematic06 = value ? 1 : 0;})
		.def_property("Cinematic07", [](FLightingChannelContainer &self){return self.Cinematic07;}, [](FLightingChannelContainer &self, bool value){self.Cinematic07 = value ? 1 : 0;})
		.def_property("Cinematic08", [](FLightingChannelContainer &self){return self.Cinematic08;}, [](FLightingChannelContainer &self, bool value){self.Cinematic08 = value ? 1 : 0;})
		.def_property("Cinematic09", [](FLightingChannelContainer &self){return self.Cinematic09;}, [](FLightingChannelContainer &self, bool value){self.Cinematic09 = value ? 1 : 0;})
		.def_property("Gameplay", [](FLightingChannelContainer &self){return self.Gameplay;}, [](FLightingChannelContainer &self, bool value){self.Gameplay = value ? 1 : 0;})
		.def_property("Gameplay01", [](FLightingChannelContainer &self){return self.Gameplay01;}, [](FLightingChannelContainer &self, bool value){self.Gameplay01 = value ? 1 : 0;})
		.def_property("Gameplay02", [](FLightingChannelContainer &self){return self.Gameplay02;}, [](FLightingChannelContainer &self, bool value){self.Gameplay02 = value ? 1 : 0;})
		.def_property("Gameplay03", [](FLightingChannelContainer &self){return self.Gameplay03;}, [](FLightingChannelContainer &self, bool value){self.Gameplay03 = value ? 1 : 0;})
		.def_property("Crowd", [](FLightingChannelContainer &self){return self.Crowd;}, [](FLightingChannelContainer &self, bool value){self.Crowd = value ? 1 : 0;})
		.def_property("PhysX", [](FLightingChannelContainer &self){return self.PhysX;}, [](FLightingChannelContainer &self, bool value){self.PhysX = value ? 1 : 0;})
		;
	py::class_< FMaterialViewRelevance >(m, "FMaterialViewRelevance")
		.def_property("bOpaque", [](FMaterialViewRelevance &self){return self.bOpaque;}, [](FMaterialViewRelevance &self, bool value){self.bOpaque = value ? 1 : 0;})
		.def_property("bTranslucent", [](FMaterialViewRelevance &self){return self.bTranslucent;}, [](FMaterialViewRelevance &self, bool value){self.bTranslucent = value ? 1 : 0;})
		.def_property("bDistortion", [](FMaterialViewRelevance &self){return self.bDistortion;}, [](FMaterialViewRelevance &self, bool value){self.bDistortion = value ? 1 : 0;})
		.def_property("bOneLayerDistortionRelevance", [](FMaterialViewRelevance &self){return self.bOneLayerDistortionRelevance;}, [](FMaterialViewRelevance &self, bool value){self.bOneLayerDistortionRelevance = value ? 1 : 0;})
		.def_property("bLit", [](FMaterialViewRelevance &self){return self.bLit;}, [](FMaterialViewRelevance &self, bool value){self.bLit = value ? 1 : 0;})
		.def_property("bUsesSceneColor", [](FMaterialViewRelevance &self){return self.bUsesSceneColor;}, [](FMaterialViewRelevance &self, bool value){self.bUsesSceneColor = value ? 1 : 0;})
		;
	py::class_< FReplicatedInstanceDataState >(m, "FReplicatedInstanceDataState")
		.def_property("bNeedToApplyThisState", [](FReplicatedInstanceDataState &self){return self.bNeedToApplyThisState;}, [](FReplicatedInstanceDataState &self, bool value){self.bNeedToApplyThisState = value ? 1 : 0;})
		.def_readwrite("SwitchStateBitField", &FReplicatedInstanceDataState::SwitchStateBitField)
		.def_readwrite("ActiveSwitchValues", &FReplicatedInstanceDataState::ActiveSwitchValues)
		.def_readwrite("RemovedBodyCompositionPartsBitField", &FReplicatedInstanceDataState::RemovedBodyCompositionPartsBitField)
		;
	py::class_< FComponentData >(m, "FComponentData")
		.def_property("bAttachToMesh", [](FComponentData &self){return self.bAttachToMesh;}, [](FComponentData &self, bool value){self.bAttachToMesh = value ? 1 : 0;})
		.def_property("bIsUsable", [](FComponentData &self){return self.bIsUsable;}, [](FComponentData &self, bool value){self.bIsUsable = value ? 1 : 0;})
		.def_property("bIsSecondaryUsable", [](FComponentData &self){return self.bIsSecondaryUsable;}, [](FComponentData &self, bool value){self.bIsSecondaryUsable = value ? 1 : 0;})
		.def_readwrite("Component", &FComponentData::Component, py::return_value_policy::reference)
		.def_readwrite("CollisionType", &FComponentData::CollisionType)
		.def_readwrite("MeshSocketName", &FComponentData::MeshSocketName, py::return_value_policy::reference)
		.def_readwrite("HitRegionDefinition", &FComponentData::HitRegionDefinition, py::return_value_policy::reference)
		.def_readwrite("InteractIcon", &FComponentData::InteractIcon, py::return_value_policy::reference)
		.def_readwrite("SecondaryInteractIcon", &FComponentData::SecondaryInteractIcon, py::return_value_policy::reference)
		;
	py::class_< FInstanceDataUnion >(m, "FInstanceDataUnion")
		.def_property("Bool", [](FInstanceDataUnion &self){return self.Bool;}, [](FInstanceDataUnion &self, bool value){self.Bool = value ? 1 : 0;})
		.def_property("DeleteByOwner", [](FInstanceDataUnion &self){return self.DeleteByOwner;}, [](FInstanceDataUnion &self, bool value){self.DeleteByOwner = value ? 1 : 0;})
		.def_readwrite("Name", &FInstanceDataUnion::Name, py::return_value_policy::reference)
		.def_readwrite("Type", &FInstanceDataUnion::Type)
		.def_readwrite("Replication", &FInstanceDataUnion::Replication)
		.def_readwrite("MaxSwitchValue", &FInstanceDataUnion::MaxSwitchValue)
		.def_readwrite("BitsRequiredForMaxSwitchValue", &FInstanceDataUnion::BitsRequiredForMaxSwitchValue)
		.def_readwrite("Int", &FInstanceDataUnion::Int)
		.def_readwrite("Float", &FInstanceDataUnion::Float)
		.def_readwrite("Vector", &FInstanceDataUnion::Vector, py::return_value_policy::reference)
		.def_readwrite("Object", &FInstanceDataUnion::Object, py::return_value_policy::reference)
		.def_readwrite("ComponentData", &FInstanceDataUnion::ComponentData, py::return_value_policy::reference)
		.def_readwrite("String", &FInstanceDataUnion::String, py::return_value_policy::reference)
		.def_readwrite("BodyCompositionIndex", &FInstanceDataUnion::BodyCompositionIndex)
		;
	py::class_< FInstanceDataSet >(m, "FInstanceDataSet")
		.def_readwrite("Data", &FInstanceDataSet::Data, py::return_value_policy::reference)
		;
	py::class_< FVisiblePortalInfo >(m, "FVisiblePortalInfo")
		.def_readwrite("Source", &FVisiblePortalInfo::Source, py::return_value_policy::reference)
		.def_readwrite("Destination", &FVisiblePortalInfo::Destination, py::return_value_policy::reference)
		;
	py::class_< FOnlineGameSearchParameter >(m, "FOnlineGameSearchParameter")
		.def_readwrite("EntryId", &FOnlineGameSearchParameter::EntryId)
		.def_readwrite("CompareValueId", &FOnlineGameSearchParameter::CompareValueId)
		.def_readwrite("ObjectPropertyName", &FOnlineGameSearchParameter::ObjectPropertyName, py::return_value_policy::reference)
		.def_readwrite("EntryType", &FOnlineGameSearchParameter::EntryType)
		.def_readwrite("ComparisonType", &FOnlineGameSearchParameter::ComparisonType)
		;
	py::class_< FOnlineGameSearchORClause >(m, "FOnlineGameSearchORClause")
		.def_readwrite("OrParams", &FOnlineGameSearchORClause::OrParams, py::return_value_policy::reference)
		;
	py::class_< FOnlineGameSearchSortClause >(m, "FOnlineGameSearchSortClause")
		.def_readwrite("EntryId", &FOnlineGameSearchSortClause::EntryId)
		.def_readwrite("ObjectPropertyName", &FOnlineGameSearchSortClause::ObjectPropertyName, py::return_value_policy::reference)
		.def_readwrite("EntryType", &FOnlineGameSearchSortClause::EntryType)
		.def_readwrite("SortType", &FOnlineGameSearchSortClause::SortType)
		;
	py::class_< FOnlineGameSearchQuery >(m, "FOnlineGameSearchQuery")
		.def_readwrite("OrClauses", &FOnlineGameSearchQuery::OrClauses, py::return_value_policy::reference)
		.def_readwrite("SortClauses", &FOnlineGameSearchQuery::SortClauses, py::return_value_policy::reference)
		;
	py::class_< FOverrideSkill >(m, "FOverrideSkill")
		.def_readwrite("LeaderboardId", &FOverrideSkill::LeaderboardId)
		.def_readwrite("Players", &FOverrideSkill::Players, py::return_value_policy::reference)
		.def_readwrite("Mus", &FOverrideSkill::Mus, py::return_value_policy::reference)
		.def_readwrite("Sigmas", &FOverrideSkill::Sigmas, py::return_value_policy::reference)
		;
	py::class_< FNamedObjectProperty >(m, "FNamedObjectProperty")
		.def_readwrite("ObjectPropertyName", &FNamedObjectProperty::ObjectPropertyName, py::return_value_policy::reference)
		.def_readwrite("ObjectPropertyValue", &FNamedObjectProperty::ObjectPropertyValue, py::return_value_policy::reference)
		;
	py::class_< FOnlineGameSearchResult >(m, "FOnlineGameSearchResult")
		.def_readwrite("GameSettings", &FOnlineGameSearchResult::GameSettings, py::return_value_policy::reference)
		.def_readwrite("PlatformData", &FOnlineGameSearchResult::PlatformData, py::return_value_policy::reference)
		;
	py::class_< FTViewTarget >(m, "FTViewTarget")
		.def_readwrite("Target", &FTViewTarget::Target, py::return_value_policy::reference)
		.def_readwrite("Controller", &FTViewTarget::Controller, py::return_value_policy::reference)
		.def_readwrite("POV", &FTViewTarget::POV, py::return_value_policy::reference)
		.def_readwrite("AspectRatio", &FTViewTarget::AspectRatio)
		.def_readwrite("PRI", &FTViewTarget::PRI, py::return_value_policy::reference)
		;
	py::class_< FTCameraCache >(m, "FTCameraCache")
		.def_readwrite("TimeStamp", &FTCameraCache::TimeStamp)
		.def_readwrite("POV", &FTCameraCache::POV, py::return_value_policy::reference)
		;
	py::class_< FViewTargetTransitionParams >(m, "FViewTargetTransitionParams")
		.def_property("bLockOutgoing", [](FViewTargetTransitionParams &self){return self.bLockOutgoing;}, [](FViewTargetTransitionParams &self, bool value){self.bLockOutgoing = value ? 1 : 0;})
		.def_readwrite("BlendTime", &FViewTargetTransitionParams::BlendTime)
		.def_readwrite("BlendFunction", &FViewTargetTransitionParams::BlendFunction)
		.def_readwrite("BlendExp", &FViewTargetTransitionParams::BlendExp)
		;
	py::class_< FLUTBlender >(m, "FLUTBlender")
		.def_property("bHasChanged", [](FLUTBlender &self){return self.bHasChanged;}, [](FLUTBlender &self, bool value){self.bHasChanged = value ? 1 : 0;})
		.def_readwrite("LUTTextures", &FLUTBlender::LUTTextures, py::return_value_policy::reference)
		.def_readwrite("LUTWeights", &FLUTBlender::LUTWeights, py::return_value_policy::reference)
		;
	py::class_< FPostProcessSettings >(m, "FPostProcessSettings")
		.def_property("bOverride_EnableBloom", [](FPostProcessSettings &self){return self.bOverride_EnableBloom;}, [](FPostProcessSettings &self, bool value){self.bOverride_EnableBloom = value ? 1 : 0;})
		.def_property("bOverride_EnableDOF", [](FPostProcessSettings &self){return self.bOverride_EnableDOF;}, [](FPostProcessSettings &self, bool value){self.bOverride_EnableDOF = value ? 1 : 0;})
		.def_property("bOverride_EnableMotionBlur", [](FPostProcessSettings &self){return self.bOverride_EnableMotionBlur;}, [](FPostProcessSettings &self, bool value){self.bOverride_EnableMotionBlur = value ? 1 : 0;})
		.def_property("bOverride_EnableSceneEffect", [](FPostProcessSettings &self){return self.bOverride_EnableSceneEffect;}, [](FPostProcessSettings &self, bool value){self.bOverride_EnableSceneEffect = value ? 1 : 0;})
		.def_property("bOverride_AllowAmbientOcclusion", [](FPostProcessSettings &self){return self.bOverride_AllowAmbientOcclusion;}, [](FPostProcessSettings &self, bool value){self.bOverride_AllowAmbientOcclusion = value ? 1 : 0;})
		.def_property("bOverride_OverrideRimShaderColor", [](FPostProcessSettings &self){return self.bOverride_OverrideRimShaderColor;}, [](FPostProcessSettings &self, bool value){self.bOverride_OverrideRimShaderColor = value ? 1 : 0;})
		.def_property("bOverride_Bloom_Scale", [](FPostProcessSettings &self){return self.bOverride_Bloom_Scale;}, [](FPostProcessSettings &self, bool value){self.bOverride_Bloom_Scale = value ? 1 : 0;})
		.def_property("bOverride_Bloom_Threshold", [](FPostProcessSettings &self){return self.bOverride_Bloom_Threshold;}, [](FPostProcessSettings &self, bool value){self.bOverride_Bloom_Threshold = value ? 1 : 0;})
		.def_property("bOverride_Bloom_Tint", [](FPostProcessSettings &self){return self.bOverride_Bloom_Tint;}, [](FPostProcessSettings &self, bool value){self.bOverride_Bloom_Tint = value ? 1 : 0;})
		.def_property("bOverride_Bloom_ScreenBlendThreshold", [](FPostProcessSettings &self){return self.bOverride_Bloom_ScreenBlendThreshold;}, [](FPostProcessSettings &self, bool value){self.bOverride_Bloom_ScreenBlendThreshold = value ? 1 : 0;})
		.def_property("bOverride_Bloom_InterpolationDuration", [](FPostProcessSettings &self){return self.bOverride_Bloom_InterpolationDuration;}, [](FPostProcessSettings &self, bool value){self.bOverride_Bloom_InterpolationDuration = value ? 1 : 0;})
		.def_property("bOverride_DOF_FalloffExponent", [](FPostProcessSettings &self){return self.bOverride_DOF_FalloffExponent;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_FalloffExponent = value ? 1 : 0;})
		.def_property("bOverride_DOF_BlurKernelSize", [](FPostProcessSettings &self){return self.bOverride_DOF_BlurKernelSize;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_BlurKernelSize = value ? 1 : 0;})
		.def_property("bOverride_DOF_BlurBloomKernelSize", [](FPostProcessSettings &self){return self.bOverride_DOF_BlurBloomKernelSize;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_BlurBloomKernelSize = value ? 1 : 0;})
		.def_property("bOverride_DOF_MaxNearBlurAmount", [](FPostProcessSettings &self){return self.bOverride_DOF_MaxNearBlurAmount;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_MaxNearBlurAmount = value ? 1 : 0;})
		.def_property("bOverride_DOF_MinBlurAmount", [](FPostProcessSettings &self){return self.bOverride_DOF_MinBlurAmount;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_MinBlurAmount = value ? 1 : 0;})
		.def_property("bOverride_DOF_MaxFarBlurAmount", [](FPostProcessSettings &self){return self.bOverride_DOF_MaxFarBlurAmount;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_MaxFarBlurAmount = value ? 1 : 0;})
		.def_property("bOverride_DOF_FocusType", [](FPostProcessSettings &self){return self.bOverride_DOF_FocusType;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_FocusType = value ? 1 : 0;})
		.def_property("bOverride_DOF_FocusInnerRadius", [](FPostProcessSettings &self){return self.bOverride_DOF_FocusInnerRadius;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_FocusInnerRadius = value ? 1 : 0;})
		.def_property("bOverride_DOF_FocusDistance", [](FPostProcessSettings &self){return self.bOverride_DOF_FocusDistance;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_FocusDistance = value ? 1 : 0;})
		.def_property("bOverride_DOF_FocusPosition", [](FPostProcessSettings &self){return self.bOverride_DOF_FocusPosition;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_FocusPosition = value ? 1 : 0;})
		.def_property("bOverride_DOF_TunnelVisionScale", [](FPostProcessSettings &self){return self.bOverride_DOF_TunnelVisionScale;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_TunnelVisionScale = value ? 1 : 0;})
		.def_property("bOverride_DOF_TunnelVisionYOffset", [](FPostProcessSettings &self){return self.bOverride_DOF_TunnelVisionYOffset;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_TunnelVisionYOffset = value ? 1 : 0;})
		.def_property("bOverride_DOF_InterpolationDuration", [](FPostProcessSettings &self){return self.bOverride_DOF_InterpolationDuration;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_InterpolationDuration = value ? 1 : 0;})
		.def_property("bOverride_DOF_BokehTexture", [](FPostProcessSettings &self){return self.bOverride_DOF_BokehTexture;}, [](FPostProcessSettings &self, bool value){self.bOverride_DOF_BokehTexture = value ? 1 : 0;})
		.def_property("bOverride_MotionBlur_MaxVelocity", [](FPostProcessSettings &self){return self.bOverride_MotionBlur_MaxVelocity;}, [](FPostProcessSettings &self, bool value){self.bOverride_MotionBlur_MaxVelocity = value ? 1 : 0;})
		.def_property("bOverride_MotionBlur_Amount", [](FPostProcessSettings &self){return self.bOverride_MotionBlur_Amount;}, [](FPostProcessSettings &self, bool value){self.bOverride_MotionBlur_Amount = value ? 1 : 0;})
		.def_property("bOverride_MotionBlur_FullMotionBlur", [](FPostProcessSettings &self){return self.bOverride_MotionBlur_FullMotionBlur;}, [](FPostProcessSettings &self, bool value){self.bOverride_MotionBlur_FullMotionBlur = value ? 1 : 0;})
		.def_property("bOverride_MotionBlur_CameraRotationThreshold", [](FPostProcessSettings &self){return self.bOverride_MotionBlur_CameraRotationThreshold;}, [](FPostProcessSettings &self, bool value){self.bOverride_MotionBlur_CameraRotationThreshold = value ? 1 : 0;})
		.def_property("bOverride_MotionBlur_CameraTranslationThreshold", [](FPostProcessSettings &self){return self.bOverride_MotionBlur_CameraTranslationThreshold;}, [](FPostProcessSettings &self, bool value){self.bOverride_MotionBlur_CameraTranslationThreshold = value ? 1 : 0;})
		.def_property("bOverride_MotionBlur_InterpolationDuration", [](FPostProcessSettings &self){return self.bOverride_MotionBlur_InterpolationDuration;}, [](FPostProcessSettings &self, bool value){self.bOverride_MotionBlur_InterpolationDuration = value ? 1 : 0;})
		.def_property("bOverride_Scene_Desaturation", [](FPostProcessSettings &self){return self.bOverride_Scene_Desaturation;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_Desaturation = value ? 1 : 0;})
		.def_property("bOverride_Scene_Colorize", [](FPostProcessSettings &self){return self.bOverride_Scene_Colorize;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_Colorize = value ? 1 : 0;})
		.def_property("bOverride_Scene_TonemapperScale", [](FPostProcessSettings &self){return self.bOverride_Scene_TonemapperScale;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_TonemapperScale = value ? 1 : 0;})
		.def_property("bOverride_Scene_ImageGrainScale", [](FPostProcessSettings &self){return self.bOverride_Scene_ImageGrainScale;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_ImageGrainScale = value ? 1 : 0;})
		.def_property("bOverride_Scene_HighLights", [](FPostProcessSettings &self){return self.bOverride_Scene_HighLights;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_HighLights = value ? 1 : 0;})
		.def_property("bOverride_Scene_MidTones", [](FPostProcessSettings &self){return self.bOverride_Scene_MidTones;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_MidTones = value ? 1 : 0;})
		.def_property("bOverride_Scene_Shadows", [](FPostProcessSettings &self){return self.bOverride_Scene_Shadows;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_Shadows = value ? 1 : 0;})
		.def_property("bOverride_Scene_InterpolationDuration", [](FPostProcessSettings &self){return self.bOverride_Scene_InterpolationDuration;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_InterpolationDuration = value ? 1 : 0;})
		.def_property("bOverride_Scene_ColorGradingLUT", [](FPostProcessSettings &self){return self.bOverride_Scene_ColorGradingLUT;}, [](FPostProcessSettings &self, bool value){self.bOverride_Scene_ColorGradingLUT = value ? 1 : 0;})
		.def_property("bOverride_RimShader_Color", [](FPostProcessSettings &self){return self.bOverride_RimShader_Color;}, [](FPostProcessSettings &self, bool value){self.bOverride_RimShader_Color = value ? 1 : 0;})
		.def_property("bOverride_RimShader_InterpolationDuration", [](FPostProcessSettings &self){return self.bOverride_RimShader_InterpolationDuration;}, [](FPostProcessSettings &self, bool value){self.bOverride_RimShader_InterpolationDuration = value ? 1 : 0;})
		.def_property("bEnableBloom", [](FPostProcessSettings &self){return self.bEnableBloom;}, [](FPostProcessSettings &self, bool value){self.bEnableBloom = value ? 1 : 0;})
		.def_property("bEnableDOF", [](FPostProcessSettings &self){return self.bEnableDOF;}, [](FPostProcessSettings &self, bool value){self.bEnableDOF = value ? 1 : 0;})
		.def_property("bTwoLayerSimpleDepthOfField", [](FPostProcessSettings &self){return self.bTwoLayerSimpleDepthOfField;}, [](FPostProcessSettings &self, bool value){self.bTwoLayerSimpleDepthOfField = value ? 1 : 0;})
		.def_property("bEnableMotionBlur", [](FPostProcessSettings &self){return self.bEnableMotionBlur;}, [](FPostProcessSettings &self, bool value){self.bEnableMotionBlur = value ? 1 : 0;})
		.def_property("bEnableSceneEffect", [](FPostProcessSettings &self){return self.bEnableSceneEffect;}, [](FPostProcessSettings &self, bool value){self.bEnableSceneEffect = value ? 1 : 0;})
		.def_property("bAllowAmbientOcclusion", [](FPostProcessSettings &self){return self.bAllowAmbientOcclusion;}, [](FPostProcessSettings &self, bool value){self.bAllowAmbientOcclusion = value ? 1 : 0;})
		.def_property("bOverrideRimShaderColor", [](FPostProcessSettings &self){return self.bOverrideRimShaderColor;}, [](FPostProcessSettings &self, bool value){self.bOverrideRimShaderColor = value ? 1 : 0;})
		.def_property("MotionBlur_FullMotionBlur", [](FPostProcessSettings &self){return self.MotionBlur_FullMotionBlur;}, [](FPostProcessSettings &self, bool value){self.MotionBlur_FullMotionBlur = value ? 1 : 0;})
		.def_readwrite("Bloom_Scale", &FPostProcessSettings::Bloom_Scale)
		.def_readwrite("Bloom_Threshold", &FPostProcessSettings::Bloom_Threshold)
		.def_readwrite("Bloom_Tint", &FPostProcessSettings::Bloom_Tint, py::return_value_policy::reference)
		.def_readwrite("Bloom_ScreenBlendThreshold", &FPostProcessSettings::Bloom_ScreenBlendThreshold)
		.def_readwrite("Bloom_InterpolationDuration", &FPostProcessSettings::Bloom_InterpolationDuration)
		.def_readwrite("DOF_BlurBloomKernelSize", &FPostProcessSettings::DOF_BlurBloomKernelSize)
		.def_readwrite("DOF_FalloffExponent", &FPostProcessSettings::DOF_FalloffExponent)
		.def_readwrite("DOF_BlurKernelSize", &FPostProcessSettings::DOF_BlurKernelSize)
		.def_readwrite("DOF_MaxNearBlurAmount", &FPostProcessSettings::DOF_MaxNearBlurAmount)
		.def_readwrite("DOF_MinBlurAmount", &FPostProcessSettings::DOF_MinBlurAmount)
		.def_readwrite("DOF_MaxFarBlurAmount", &FPostProcessSettings::DOF_MaxFarBlurAmount)
		.def_readwrite("DOF_FocusType", &FPostProcessSettings::DOF_FocusType)
		.def_readwrite("DOF_FocusInnerRadius", &FPostProcessSettings::DOF_FocusInnerRadius)
		.def_readwrite("DOF_FocusDistance", &FPostProcessSettings::DOF_FocusDistance)
		.def_readwrite("DOF_FocusPosition", &FPostProcessSettings::DOF_FocusPosition, py::return_value_policy::reference)
		.def_readwrite("DOF_TunnelVisionScale", &FPostProcessSettings::DOF_TunnelVisionScale)
		.def_readwrite("DOF_TunnelVisionYOffset", &FPostProcessSettings::DOF_TunnelVisionYOffset)
		.def_readwrite("DOF_InterpolationDuration", &FPostProcessSettings::DOF_InterpolationDuration)
		.def_readwrite("DOF_BokehTexture", &FPostProcessSettings::DOF_BokehTexture, py::return_value_policy::reference)
		.def_readwrite("MotionBlur_MaxVelocity", &FPostProcessSettings::MotionBlur_MaxVelocity)
		.def_readwrite("MotionBlur_Amount", &FPostProcessSettings::MotionBlur_Amount)
		.def_readwrite("MotionBlur_CameraRotationThreshold", &FPostProcessSettings::MotionBlur_CameraRotationThreshold)
		.def_readwrite("MotionBlur_CameraTranslationThreshold", &FPostProcessSettings::MotionBlur_CameraTranslationThreshold)
		.def_readwrite("MotionBlur_InterpolationDuration", &FPostProcessSettings::MotionBlur_InterpolationDuration)
		.def_readwrite("Scene_Desaturation", &FPostProcessSettings::Scene_Desaturation)
		.def_readwrite("Scene_Colorize", &FPostProcessSettings::Scene_Colorize, py::return_value_policy::reference)
		.def_readwrite("Scene_TonemapperScale", &FPostProcessSettings::Scene_TonemapperScale)
		.def_readwrite("Scene_ImageGrainScale", &FPostProcessSettings::Scene_ImageGrainScale)
		.def_readwrite("Scene_HighLights", &FPostProcessSettings::Scene_HighLights, py::return_value_policy::reference)
		.def_readwrite("Scene_MidTones", &FPostProcessSettings::Scene_MidTones, py::return_value_policy::reference)
		.def_readwrite("Scene_Shadows", &FPostProcessSettings::Scene_Shadows, py::return_value_policy::reference)
		.def_readwrite("Scene_InterpolationDuration", &FPostProcessSettings::Scene_InterpolationDuration)
		.def_readwrite("RimShader_Color", &FPostProcessSettings::RimShader_Color, py::return_value_policy::reference)
		.def_readwrite("RimShader_InterpolationDuration", &FPostProcessSettings::RimShader_InterpolationDuration)
		.def_readwrite("ColorGrading_LookupTable", &FPostProcessSettings::ColorGrading_LookupTable, py::return_value_policy::reference)
		.def_readwrite("ColorGradingLUT", &FPostProcessSettings::ColorGradingLUT, py::return_value_policy::reference)
		;
	py::class_< FRenderingPerformanceOverrides >(m, "FRenderingPerformanceOverrides")
		.def_property("bAllowAmbientOcclusion", [](FRenderingPerformanceOverrides &self){return self.bAllowAmbientOcclusion;}, [](FRenderingPerformanceOverrides &self, bool value){self.bAllowAmbientOcclusion = value ? 1 : 0;})
		.def_property("bAllowDominantWholeSceneDynamicShadows", [](FRenderingPerformanceOverrides &self){return self.bAllowDominantWholeSceneDynamicShadows;}, [](FRenderingPerformanceOverrides &self, bool value){self.bAllowDominantWholeSceneDynamicShadows = value ? 1 : 0;})
		.def_property("bAllowMotionBlurSkinning", [](FRenderingPerformanceOverrides &self){return self.bAllowMotionBlurSkinning;}, [](FRenderingPerformanceOverrides &self, bool value){self.bAllowMotionBlurSkinning = value ? 1 : 0;})
		.def_property("bAllowTemporalAA", [](FRenderingPerformanceOverrides &self){return self.bAllowTemporalAA;}, [](FRenderingPerformanceOverrides &self, bool value){self.bAllowTemporalAA = value ? 1 : 0;})
		.def_property("bAllowLightShafts", [](FRenderingPerformanceOverrides &self){return self.bAllowLightShafts;}, [](FRenderingPerformanceOverrides &self, bool value){self.bAllowLightShafts = value ? 1 : 0;})
		;
	py::class_< FSeqOpOutputInputLink >(m, "FSeqOpOutputInputLink")
		.def_readwrite("LinkedOp", &FSeqOpOutputInputLink::LinkedOp, py::return_value_policy::reference)
		.def_readwrite("InputLinkIdx", &FSeqOpOutputInputLink::InputLinkIdx)
		;
	py::class_< FSeqOpOutputLink >(m, "FSeqOpOutputLink")
		.def_property("bHasImpulse", [](FSeqOpOutputLink &self){return self.bHasImpulse;}, [](FSeqOpOutputLink &self, bool value){self.bHasImpulse = value ? 1 : 0;})
		.def_property("bDisabled", [](FSeqOpOutputLink &self){return self.bDisabled;}, [](FSeqOpOutputLink &self, bool value){self.bDisabled = value ? 1 : 0;})
		.def_property("bDisabledPIE", [](FSeqOpOutputLink &self){return self.bDisabledPIE;}, [](FSeqOpOutputLink &self, bool value){self.bDisabledPIE = value ? 1 : 0;})
		.def_property("bClampedMax", [](FSeqOpOutputLink &self){return self.bClampedMax;}, [](FSeqOpOutputLink &self, bool value){self.bClampedMax = value ? 1 : 0;})
		.def_property("bClampedMin", [](FSeqOpOutputLink &self){return self.bClampedMin;}, [](FSeqOpOutputLink &self, bool value){self.bClampedMin = value ? 1 : 0;})
		.def_property("bHidden", [](FSeqOpOutputLink &self){return self.bHidden;}, [](FSeqOpOutputLink &self, bool value){self.bHidden = value ? 1 : 0;})
		.def_property("bIsActivated", [](FSeqOpOutputLink &self){return self.bIsActivated;}, [](FSeqOpOutputLink &self, bool value){self.bIsActivated = value ? 1 : 0;})
		.def_property("bMoving", [](FSeqOpOutputLink &self){return self.bMoving;}, [](FSeqOpOutputLink &self, bool value){self.bMoving = value ? 1 : 0;})
		.def_readwrite("Links", &FSeqOpOutputLink::Links, py::return_value_policy::reference)
		.def_readwrite("LinkDesc", &FSeqOpOutputLink::LinkDesc, py::return_value_policy::reference)
		.def_readwrite("LinkedOp", &FSeqOpOutputLink::LinkedOp, py::return_value_policy::reference)
		.def_readwrite("ActivateDelay", &FSeqOpOutputLink::ActivateDelay)
		;
	py::class_< FSeqVarLink >(m, "FSeqVarLink")
		.def_property("bWriteable", [](FSeqVarLink &self){return self.bWriteable;}, [](FSeqVarLink &self, bool value){self.bWriteable = value ? 1 : 0;})
		.def_property("bSequenceNeverReadsOnlyWritesToThisVar", [](FSeqVarLink &self){return self.bSequenceNeverReadsOnlyWritesToThisVar;}, [](FSeqVarLink &self, bool value){self.bSequenceNeverReadsOnlyWritesToThisVar = value ? 1 : 0;})
		.def_property("bModifiesLinkedObject", [](FSeqVarLink &self){return self.bModifiesLinkedObject;}, [](FSeqVarLink &self, bool value){self.bModifiesLinkedObject = value ? 1 : 0;})
		.def_property("bHidden", [](FSeqVarLink &self){return self.bHidden;}, [](FSeqVarLink &self, bool value){self.bHidden = value ? 1 : 0;})
		.def_property("bClampedMax", [](FSeqVarLink &self){return self.bClampedMax;}, [](FSeqVarLink &self, bool value){self.bClampedMax = value ? 1 : 0;})
		.def_property("bClampedMin", [](FSeqVarLink &self){return self.bClampedMin;}, [](FSeqVarLink &self, bool value){self.bClampedMin = value ? 1 : 0;})
		.def_property("bMoving", [](FSeqVarLink &self){return self.bMoving;}, [](FSeqVarLink &self, bool value){self.bMoving = value ? 1 : 0;})
		.def_property("bAllowAnyType", [](FSeqVarLink &self){return self.bAllowAnyType;}, [](FSeqVarLink &self, bool value){self.bAllowAnyType = value ? 1 : 0;})
		.def_readwrite("ExpectedType", &FSeqVarLink::ExpectedType, py::return_value_policy::reference)
		.def_readwrite("LinkedVariables", &FSeqVarLink::LinkedVariables, py::return_value_policy::reference)
		.def_readwrite("LinkDesc", &FSeqVarLink::LinkDesc, py::return_value_policy::reference)
		.def_readwrite("LinkVar", &FSeqVarLink::LinkVar, py::return_value_policy::reference)
		.def_readwrite("PropertyName", &FSeqVarLink::PropertyName, py::return_value_policy::reference)
		.def_readwrite("MinVars", &FSeqVarLink::MinVars)
		.def_readwrite("MaxVars", &FSeqVarLink::MaxVars)
		.def_readwrite("CachedProperty", &FSeqVarLink::CachedProperty, py::return_value_policy::reference)
		;
	py::class_< FSeqEventLink >(m, "FSeqEventLink")
		.def_property("bHidden", [](FSeqEventLink &self){return self.bHidden;}, [](FSeqEventLink &self, bool value){self.bHidden = value ? 1 : 0;})
		.def_property("bMoving", [](FSeqEventLink &self){return self.bMoving;}, [](FSeqEventLink &self, bool value){self.bMoving = value ? 1 : 0;})
		.def_property("bClampedMax", [](FSeqEventLink &self){return self.bClampedMax;}, [](FSeqEventLink &self, bool value){self.bClampedMax = value ? 1 : 0;})
		.def_property("bClampedMin", [](FSeqEventLink &self){return self.bClampedMin;}, [](FSeqEventLink &self, bool value){self.bClampedMin = value ? 1 : 0;})
		.def_readwrite("LinkedEvents", &FSeqEventLink::LinkedEvents, py::return_value_policy::reference)
		.def_readwrite("LinkDesc", &FSeqEventLink::LinkDesc, py::return_value_policy::reference)
		;
	py::class_< FDebugTextInfo >(m, "FDebugTextInfo")
		.def_property("bAbsoluteLocation", [](FDebugTextInfo &self){return self.bAbsoluteLocation;}, [](FDebugTextInfo &self, bool value){self.bAbsoluteLocation = value ? 1 : 0;})
		.def_property("bKeepAttachedToActor", [](FDebugTextInfo &self){return self.bKeepAttachedToActor;}, [](FDebugTextInfo &self, bool value){self.bKeepAttachedToActor = value ? 1 : 0;})
		.def_readwrite("SrcActor", &FDebugTextInfo::SrcActor, py::return_value_policy::reference)
		.def_readwrite("SrcActorOffset", &FDebugTextInfo::SrcActorOffset, py::return_value_policy::reference)
		.def_readwrite("SrcActorDesiredOffset", &FDebugTextInfo::SrcActorDesiredOffset, py::return_value_policy::reference)
		.def_readwrite("DebugText", &FDebugTextInfo::DebugText, py::return_value_policy::reference)
		.def_readwrite("TimeRemaining", &FDebugTextInfo::TimeRemaining)
		.def_readwrite("Duration", &FDebugTextInfo::Duration)
		.def_readwrite("TextColor", &FDebugTextInfo::TextColor, py::return_value_policy::reference)
		.def_readwrite("OrigActorLocation", &FDebugTextInfo::OrigActorLocation, py::return_value_policy::reference)
		.def_readwrite("Font", &FDebugTextInfo::Font, py::return_value_policy::reference)
		;
	py::class_< FBonePair >(m, "FBonePair")
		;
	py::class_< FAnimBlendChild >(m, "FAnimBlendChild")
		.def_property("bMirrorSkeleton", [](FAnimBlendChild &self){return self.bMirrorSkeleton;}, [](FAnimBlendChild &self, bool value){self.bMirrorSkeleton = value ? 1 : 0;})
		.def_property("bIsAdditive", [](FAnimBlendChild &self){return self.bIsAdditive;}, [](FAnimBlendChild &self, bool value){self.bIsAdditive = value ? 1 : 0;})
		.def_readwrite("Name", &FAnimBlendChild::Name, py::return_value_policy::reference)
		.def_readwrite("Anim", &FAnimBlendChild::Anim, py::return_value_policy::reference)
		.def_readwrite("Weight", &FAnimBlendChild::Weight)
		.def_readwrite("BlendWeight", &FAnimBlendChild::BlendWeight)
		.def_readwrite("AdditiveWeightScale", &FAnimBlendChild::AdditiveWeightScale)
		;
	py::class_< FSkelMeshComponentLODInfo >(m, "FSkelMeshComponentLODInfo")
		.def_property("bNeedsInstanceWeightUpdate", [](FSkelMeshComponentLODInfo &self){return self.bNeedsInstanceWeightUpdate;}, [](FSkelMeshComponentLODInfo &self, bool value){self.bNeedsInstanceWeightUpdate = value ? 1 : 0;})
		.def_property("bAlwaysUseInstanceWeights", [](FSkelMeshComponentLODInfo &self){return self.bAlwaysUseInstanceWeights;}, [](FSkelMeshComponentLODInfo &self, bool value){self.bAlwaysUseInstanceWeights = value ? 1 : 0;})
		.def_readwrite("HiddenMaterials", &FSkelMeshComponentLODInfo::HiddenMaterials, py::return_value_policy::reference)
		.def_readwrite("InstanceWeightUsage", &FSkelMeshComponentLODInfo::InstanceWeightUsage)
		.def_readwrite("InstanceWeightIdx", &FSkelMeshComponentLODInfo::InstanceWeightIdx)
		;
	py::class_< FAttachment >(m, "FAttachment")
		.def_readwrite("Component", &FAttachment::Component, py::return_value_policy::reference)
		.def_readwrite("BoneName", &FAttachment::BoneName, py::return_value_policy::reference)
		.def_readwrite("RelativeLocation", &FAttachment::RelativeLocation, py::return_value_policy::reference)
		.def_readwrite("RelativeRotation", &FAttachment::RelativeRotation, py::return_value_policy::reference)
		.def_readwrite("RelativeScale", &FAttachment::RelativeScale, py::return_value_policy::reference)
		;
	py::class_< FActiveMorph >(m, "FActiveMorph")
		.def_readwrite("Target", &FActiveMorph::Target, py::return_value_policy::reference)
		.def_readwrite("Weight", &FActiveMorph::Weight)
		;
	py::class_< FGestaltLODModelFragment >(m, "FGestaltLODModelFragment")
		.def_readwrite("MaterialIndex", &FGestaltLODModelFragment::MaterialIndex)
		.def_readwrite("FirstIndex", &FGestaltLODModelFragment::FirstIndex)
		.def_readwrite("NumPrimitives", &FGestaltLODModelFragment::NumPrimitives)
		;
	py::class_< FGestaltLODModel >(m, "FGestaltLODModel")
		.def_readwrite("GestaltFragments", &FGestaltLODModel::GestaltFragments, py::return_value_policy::reference)
		;
	py::class_< FSocketRemapEntry >(m, "FSocketRemapEntry")
		.def_readwrite("OriginalSocketName", &FSocketRemapEntry::OriginalSocketName, py::return_value_policy::reference)
		.def_readwrite("MangledSocketName", &FSocketRemapEntry::MangledSocketName, py::return_value_policy::reference)
		;
	py::class_< FGestaltAccessoryEntry >(m, "FGestaltAccessoryEntry")
		.def_readwrite("TransformIndex", &FGestaltAccessoryEntry::TransformIndex)
		.def_readwrite("OriginalBoneIndex", &FGestaltAccessoryEntry::OriginalBoneIndex)
		.def_readwrite("GPUBoneIndex", &FGestaltAccessoryEntry::GPUBoneIndex)
		;
	py::class_< FGestaltDataContainer >(m, "FGestaltDataContainer")
		.def_readwrite("SkeletalMesh", &FGestaltDataContainer::SkeletalMesh, py::return_value_policy::reference)
		.def_readwrite("LODModelData", &FGestaltDataContainer::LODModelData, py::return_value_policy::reference)
		.def_readwrite("SocketMappings", &FGestaltDataContainer::SocketMappings, py::return_value_policy::reference)
		.def_readwrite("GestaltAccessoryList", &FGestaltDataContainer::GestaltAccessoryList, py::return_value_policy::reference)
		.def_readwrite("GestaltPartMatricesContainer", &FGestaltDataContainer::GestaltPartMatricesContainer, py::return_value_policy::reference)
		.def_readwrite("ReferencePoseBounds", &FGestaltDataContainer::ReferencePoseBounds, py::return_value_policy::reference)
		;
	py::class_< FConnectedPeerInfo >(m, "FConnectedPeerInfo")
		.def_property("bLostConnectionToHost", [](FConnectedPeerInfo &self){return self.bLostConnectionToHost;}, [](FConnectedPeerInfo &self, bool value){self.bLostConnectionToHost = value ? 1 : 0;})
		.def_readwrite("PlayerID", &FConnectedPeerInfo::PlayerID, py::return_value_policy::reference)
		.def_readwrite("NatType", &FConnectedPeerInfo::NatType)
		;
	py::class_< FClientAdjustment >(m, "FClientAdjustment")
		.def_readwrite("TimeStamp", &FClientAdjustment::TimeStamp)
		.def_readwrite("newPhysics", &FClientAdjustment::newPhysics)
		.def_readwrite("NewLoc", &FClientAdjustment::NewLoc, py::return_value_policy::reference)
		.def_readwrite("NewVel", &FClientAdjustment::NewVel, py::return_value_policy::reference)
		.def_readwrite("NewBase", &FClientAdjustment::NewBase, py::return_value_policy::reference)
		.def_readwrite("NewFloor", &FClientAdjustment::NewFloor, py::return_value_policy::reference)
		.def_readwrite("bAckGoodMove", &FClientAdjustment::bAckGoodMove)
		;
	py::class_< FKismetDrawTextInfo >(m, "FKismetDrawTextInfo")
		.def_readwrite("MessageText", &FKismetDrawTextInfo::MessageText, py::return_value_policy::reference)
		.def_readwrite("AppendedText", &FKismetDrawTextInfo::AppendedText, py::return_value_policy::reference)
		.def_readwrite("MessageFont", &FKismetDrawTextInfo::MessageFont, py::return_value_policy::reference)
		.def_readwrite("MessageFontScale", &FKismetDrawTextInfo::MessageFontScale, py::return_value_policy::reference)
		.def_readwrite("MessageOffset", &FKismetDrawTextInfo::MessageOffset, py::return_value_policy::reference)
		.def_readwrite("MessageColor", &FKismetDrawTextInfo::MessageColor, py::return_value_policy::reference)
		.def_readwrite("MessageEndTime", &FKismetDrawTextInfo::MessageEndTime)
		;
	py::class_< FConsoleMessage >(m, "FConsoleMessage")
		.def_readwrite("Text", &FConsoleMessage::Text, py::return_value_policy::reference)
		.def_readwrite("TextColor", &FConsoleMessage::TextColor, py::return_value_policy::reference)
		.def_readwrite("MessageLife", &FConsoleMessage::MessageLife)
		.def_readwrite("PRI", &FConsoleMessage::PRI, py::return_value_policy::reference)
		;
	py::class_< FAutomatedTestingDatum >(m, "FAutomatedTestingDatum")
		.def_readwrite("NumberOfMatchesPlayed", &FAutomatedTestingDatum::NumberOfMatchesPlayed)
		.def_readwrite("NumMapListCyclesDone", &FAutomatedTestingDatum::NumMapListCyclesDone)
		;
	py::class_< FInputEntry >(m, "FInputEntry")
		.def_readwrite("Type", &FInputEntry::Type)
		.def_readwrite("Value", &FInputEntry::Value)
		.def_readwrite("TimeDelta", &FInputEntry::TimeDelta)
		.def_readwrite("Action", &FInputEntry::Action)
		;
	py::class_< FInputMatchRequest >(m, "FInputMatchRequest")
		.def_readwrite("Inputs", &FInputMatchRequest::Inputs, py::return_value_policy::reference)
		.def_readwrite("MatchActor", &FInputMatchRequest::MatchActor, py::return_value_policy::reference)
		.def_readwrite("MatchFuncName", &FInputMatchRequest::MatchFuncName, py::return_value_policy::reference)
		.def_readwrite("MatchDelegate", &FInputMatchRequest::MatchDelegate, py::return_value_policy::reference)
		.def_readwrite("FailedFuncName", &FInputMatchRequest::FailedFuncName, py::return_value_policy::reference)
		.def_readwrite("RequestName", &FInputMatchRequest::RequestName, py::return_value_policy::reference)
		.def_readwrite("MatchIdx", &FInputMatchRequest::MatchIdx)
		.def_readwrite("LastMatchTime", &FInputMatchRequest::LastMatchTime)
		;
	py::class_< FNavigationOctreeObject >(m, "FNavigationOctreeObject")
		.def_readwrite("BoundingBox", &FNavigationOctreeObject::BoundingBox, py::return_value_policy::reference)
		.def_readwrite("BoxCenter", &FNavigationOctreeObject::BoxCenter, py::return_value_policy::reference)
		.def_readwrite("OctreeNode", &FNavigationOctreeObject::OctreeNode, py::return_value_policy::reference)
		.def_readwrite("Owner", &FNavigationOctreeObject::Owner, py::return_value_policy::reference)
		.def_readwrite("OwnerType", &FNavigationOctreeObject::OwnerType)
		;
	py::class_< ANavigationPoint_FCheckpointRecord >(m, "ANavigationPoint_FCheckpointRecord")
		.def_property("bDisabled", [](ANavigationPoint_FCheckpointRecord &self){return self.bDisabled;}, [](ANavigationPoint_FCheckpointRecord &self, bool value){self.bDisabled = value ? 1 : 0;})
		.def_property("bBlocked", [](ANavigationPoint_FCheckpointRecord &self){return self.bBlocked;}, [](ANavigationPoint_FCheckpointRecord &self, bool value){self.bBlocked = value ? 1 : 0;})
		;
	py::class_< FAreaTestSortedPoint >(m, "FAreaTestSortedPoint")
		.def_readwrite("Nav", &FAreaTestSortedPoint::Nav, py::return_value_policy::reference)
		.def_readwrite("DistSq", &FAreaTestSortedPoint::DistSq)
		;
	py::class_< FNavMeshPathSize >(m, "FNavMeshPathSize")
		.def_readwrite("Size", &FNavMeshPathSize::Size)
		.def_readwrite("Height", &FNavMeshPathSize::Height)
		.def_readwrite("PolyColor", &FNavMeshPathSize::PolyColor, py::return_value_policy::reference)
		.def_readwrite("ObstacleColor", &FNavMeshPathSize::ObstacleColor, py::return_value_policy::reference)
		;
	py::class_< FPolyReference >(m, "FPolyReference")
		.def_readwrite("OwningPylon", &FPolyReference::OwningPylon, py::return_value_policy::reference)
		.def_readwrite("PolyId", &FPolyReference::PolyId)
		.def_readwrite("CachedPoly", &FPolyReference::CachedPoly, py::return_value_policy::reference)
		;
	py::class_< FPendingSubtitleInfo >(m, "FPendingSubtitleInfo")
		.def_readwrite("PendingSubtitlePlayingInfoPtr", &FPendingSubtitleInfo::PendingSubtitlePlayingInfoPtr, py::return_value_policy::reference)
		.def_readwrite("OriginalFileName", &FPendingSubtitleInfo::OriginalFileName, py::return_value_policy::reference)
		.def_readwrite("StreamedSubtitleData", &FPendingSubtitleInfo::StreamedSubtitleData, py::return_value_policy::reference)
		;
	py::class_< FPendingFaceFXInfo >(m, "FPendingFaceFXInfo")
		.def_readwrite("PendingFaceFXPlayingInfoPtr", &FPendingFaceFXInfo::PendingFaceFXPlayingInfoPtr, py::return_value_policy::reference)
		.def_readwrite("AnimName", &FPendingFaceFXInfo::AnimName, py::return_value_policy::reference)
		.def_readwrite("RawData", &FPendingFaceFXInfo::RawData, py::return_value_policy::reference)
		;
	py::class_< FDialogueArgument >(m, "FDialogueArgument")
		.def_readwrite("Source", &FDialogueArgument::Source)
		;
	py::class_< FKSphereElem >(m, "FKSphereElem")
		.def_property("bNoRBCollision", [](FKSphereElem &self){return self.bNoRBCollision;}, [](FKSphereElem &self, bool value){self.bNoRBCollision = value ? 1 : 0;})
		.def_property("bPerPolyShape", [](FKSphereElem &self){return self.bPerPolyShape;}, [](FKSphereElem &self, bool value){self.bPerPolyShape = value ? 1 : 0;})
		.def_readwrite("TM", &FKSphereElem::TM, py::return_value_policy::reference)
		.def_readwrite("Radius", &FKSphereElem::Radius)
		;
	py::class_< FKBoxElem >(m, "FKBoxElem")
		.def_property("bNoRBCollision", [](FKBoxElem &self){return self.bNoRBCollision;}, [](FKBoxElem &self, bool value){self.bNoRBCollision = value ? 1 : 0;})
		.def_property("bPerPolyShape", [](FKBoxElem &self){return self.bPerPolyShape;}, [](FKBoxElem &self, bool value){self.bPerPolyShape = value ? 1 : 0;})
		.def_readwrite("TM", &FKBoxElem::TM, py::return_value_policy::reference)
		.def_readwrite("X", &FKBoxElem::X)
		.def_readwrite("Y", &FKBoxElem::Y)
		.def_readwrite("Z", &FKBoxElem::Z)
		;
	py::class_< FKSphylElem >(m, "FKSphylElem")
		.def_property("bNoRBCollision", [](FKSphylElem &self){return self.bNoRBCollision;}, [](FKSphylElem &self, bool value){self.bNoRBCollision = value ? 1 : 0;})
		.def_property("bPerPolyShape", [](FKSphylElem &self){return self.bPerPolyShape;}, [](FKSphylElem &self, bool value){self.bPerPolyShape = value ? 1 : 0;})
		.def_readwrite("TM", &FKSphylElem::TM, py::return_value_policy::reference)
		.def_readwrite("Radius", &FKSphylElem::Radius)
		.def_readwrite("Length", &FKSphylElem::Length)
		;
	py::class_< FKConvexElem >(m, "FKConvexElem")
		.def_readwrite("VertexData", &FKConvexElem::VertexData, py::return_value_policy::reference)
		.def_readwrite("PermutedVertexData", &FKConvexElem::PermutedVertexData, py::return_value_policy::reference)
		.def_readwrite("FaceTriData", &FKConvexElem::FaceTriData, py::return_value_policy::reference)
		.def_readwrite("EdgeDirections", &FKConvexElem::EdgeDirections, py::return_value_policy::reference)
		.def_readwrite("FaceNormalDirections", &FKConvexElem::FaceNormalDirections, py::return_value_policy::reference)
		.def_readwrite("FacePlaneData", &FKConvexElem::FacePlaneData, py::return_value_policy::reference)
		.def_readwrite("ElemBox", &FKConvexElem::ElemBox, py::return_value_policy::reference)
		;
	py::class_< FKAggregateGeom >(m, "FKAggregateGeom")
		.def_property("bSkipCloseAndParallelChecks", [](FKAggregateGeom &self){return self.bSkipCloseAndParallelChecks;}, [](FKAggregateGeom &self, bool value){self.bSkipCloseAndParallelChecks = value ? 1 : 0;})
		.def_readwrite("SphereElems", &FKAggregateGeom::SphereElems, py::return_value_policy::reference)
		.def_readwrite("BoxElems", &FKAggregateGeom::BoxElems, py::return_value_policy::reference)
		.def_readwrite("SphylElems", &FKAggregateGeom::SphylElems, py::return_value_policy::reference)
		.def_readwrite("ConvexElems", &FKAggregateGeom::ConvexElems, py::return_value_policy::reference)
		.def_readwrite("RenderInfo", &FKAggregateGeom::RenderInfo, py::return_value_policy::reference)
		;
	py::class_< FKCachedConvexData_Mirror >(m, "FKCachedConvexData_Mirror")
		.def_readwrite("CachedConvexElements", &FKCachedConvexData_Mirror::CachedConvexElements, py::return_value_policy::reference)
		;
	py::class_< FGeomSelection >(m, "FGeomSelection")
		.def_readwrite("Type", &FGeomSelection::Type)
		.def_readwrite("Index", &FGeomSelection::Index)
		.def_readwrite("SelectionIndex", &FGeomSelection::SelectionIndex)
		;
	py::class_< FInteriorSettings >(m, "FInteriorSettings")
		.def_property("bIsWorldInfo", [](FInteriorSettings &self){return self.bIsWorldInfo;}, [](FInteriorSettings &self, bool value){self.bIsWorldInfo = value ? 1 : 0;})
		.def_readwrite("ExteriorVolume", &FInteriorSettings::ExteriorVolume)
		.def_readwrite("ExteriorTime", &FInteriorSettings::ExteriorTime)
		.def_readwrite("ExteriorLPF", &FInteriorSettings::ExteriorLPF)
		.def_readwrite("ExteriorLPFTime", &FInteriorSettings::ExteriorLPFTime)
		.def_readwrite("InteriorVolume", &FInteriorSettings::InteriorVolume)
		.def_readwrite("InteriorTime", &FInteriorSettings::InteriorTime)
		.def_readwrite("InteriorLPF", &FInteriorSettings::InteriorLPF)
		.def_readwrite("InteriorLPFTime", &FInteriorSettings::InteriorLPFTime)
		;
	py::class_< FReverbSettings >(m, "FReverbSettings")
		.def_property("bApplyReverb", [](FReverbSettings &self){return self.bApplyReverb;}, [](FReverbSettings &self, bool value){self.bApplyReverb = value ? 1 : 0;})
		.def_readwrite("ReverbType", &FReverbSettings::ReverbType)
		.def_readwrite("Volume", &FReverbSettings::Volume)
		.def_readwrite("FadeTime", &FReverbSettings::FadeTime)
		.def_readwrite("ReflectionsDelayOverride", &FReverbSettings::ReflectionsDelayOverride)
		.def_readwrite("LateDelayOverride", &FReverbSettings::LateDelayOverride)
		.def_readwrite("DecayHighFrequencyRatioOverride", &FReverbSettings::DecayHighFrequencyRatioOverride)
		;
	py::class_< FAudioComponentParam >(m, "FAudioComponentParam")
		.def_readwrite("ParamName", &FAudioComponentParam::ParamName, py::return_value_policy::reference)
		.def_readwrite("FloatParam", &FAudioComponentParam::FloatParam)
		.def_readwrite("WaveParam", &FAudioComponentParam::WaveParam, py::return_value_policy::reference)
		;
	py::class_< FSubtitleCue >(m, "FSubtitleCue")
		.def_readwrite("Text", &FSubtitleCue::Text, py::return_value_policy::reference)
		.def_readwrite("Time", &FSubtitleCue::Time)
		;
	py::class_< FCompressedTrack >(m, "FCompressedTrack")
		.def_readwrite("ByteStream", &FCompressedTrack::ByteStream, py::return_value_policy::reference)
		.def_readwrite("Times", &FCompressedTrack::Times, py::return_value_policy::reference)
		;
	py::class_< FDeltaTrackInfo >(m, "FDeltaTrackInfo")
		;
	py::class_< FCurveTrack >(m, "FCurveTrack")
		.def_readwrite("CurveName", &FCurveTrack::CurveName, py::return_value_policy::reference)
		.def_readwrite("CurveWeights", &FCurveTrack::CurveWeights, py::return_value_policy::reference)
		;
	py::class_< FRotationTrack >(m, "FRotationTrack")
		.def_readwrite("RotKeys", &FRotationTrack::RotKeys, py::return_value_policy::reference)
		.def_readwrite("Times", &FRotationTrack::Times, py::return_value_policy::reference)
		;
	py::class_< FTranslationTrack >(m, "FTranslationTrack")
		.def_readwrite("PosKeys", &FTranslationTrack::PosKeys, py::return_value_policy::reference)
		.def_readwrite("Times", &FTranslationTrack::Times, py::return_value_policy::reference)
		;
	py::class_< FTimeModifier >(m, "FTimeModifier")
		.def_readwrite("Time", &FTimeModifier::Time)
		.def_readwrite("TargetStrength", &FTimeModifier::TargetStrength)
		;
	py::class_< FSkelControlModifier >(m, "FSkelControlModifier")
		.def_readwrite("SkelControlName", &FSkelControlModifier::SkelControlName, py::return_value_policy::reference)
		.def_readwrite("Modifiers", &FSkelControlModifier::Modifiers, py::return_value_policy::reference)
		;
	py::class_< FAnimNotifyEvent >(m, "FAnimNotifyEvent")
		.def_readwrite("Time", &FAnimNotifyEvent::Time)
		.def_readwrite("Notify", &FAnimNotifyEvent::Notify, py::return_value_policy::reference)
		.def_readwrite("Duration", &FAnimNotifyEvent::Duration)
		;
	py::class_< FRawAnimSequenceTrack >(m, "FRawAnimSequenceTrack")
		.def_readwrite("PosKeys", &FRawAnimSequenceTrack::PosKeys, py::return_value_policy::reference)
		.def_readwrite("RotKeys", &FRawAnimSequenceTrack::RotKeys, py::return_value_policy::reference)
		;
	py::class_< FCurveKey >(m, "FCurveKey")
		.def_readwrite("CurveName", &FCurveKey::CurveName, py::return_value_policy::reference)
		.def_readwrite("Weight", &FCurveKey::Weight)
		;
	py::class_< FWeightNodeRule >(m, "FWeightNodeRule")
		.def_readwrite("NodeName", &FWeightNodeRule::NodeName, py::return_value_policy::reference)
		.def_readwrite("CachedNode", &FWeightNodeRule::CachedNode, py::return_value_policy::reference)
		.def_readwrite("CachedSlotNode", &FWeightNodeRule::CachedSlotNode, py::return_value_policy::reference)
		.def_readwrite("WeightCheck", &FWeightNodeRule::WeightCheck)
		.def_readwrite("ChildIndex", &FWeightNodeRule::ChildIndex)
		;
	py::class_< FWeightRule >(m, "FWeightRule")
		.def_readwrite("FirstNode", &FWeightRule::FirstNode, py::return_value_policy::reference)
		.def_readwrite("SecondNode", &FWeightRule::SecondNode, py::return_value_policy::reference)
		;
	py::class_< FBranchInfo >(m, "FBranchInfo")
		.def_readwrite("BoneName", &FBranchInfo::BoneName, py::return_value_policy::reference)
		.def_readwrite("PerBoneWeightIncrease", &FBranchInfo::PerBoneWeightIncrease)
		;
	py::class_< FPerBoneMaskInfo >(m, "FPerBoneMaskInfo")
		.def_property("bWeightBasedOnNodeRules", [](FPerBoneMaskInfo &self){return self.bWeightBasedOnNodeRules;}, [](FPerBoneMaskInfo &self, bool value){self.bWeightBasedOnNodeRules = value ? 1 : 0;})
		.def_property("bDisableForNonLocalHumanPlayers", [](FPerBoneMaskInfo &self){return self.bDisableForNonLocalHumanPlayers;}, [](FPerBoneMaskInfo &self, bool value){self.bDisableForNonLocalHumanPlayers = value ? 1 : 0;})
		.def_property("bPendingBlend", [](FPerBoneMaskInfo &self){return self.bPendingBlend;}, [](FPerBoneMaskInfo &self, bool value){self.bPendingBlend = value ? 1 : 0;})
		.def_readwrite("BranchList", &FPerBoneMaskInfo::BranchList, py::return_value_policy::reference)
		.def_readwrite("DesiredWeight", &FPerBoneMaskInfo::DesiredWeight)
		.def_readwrite("BlendTimeToGo", &FPerBoneMaskInfo::BlendTimeToGo)
		.def_readwrite("WeightRuleList", &FPerBoneMaskInfo::WeightRuleList, py::return_value_policy::reference)
		.def_readwrite("PerBoneWeights", &FPerBoneMaskInfo::PerBoneWeights, py::return_value_policy::reference)
		.def_readwrite("TransformReqBone", &FPerBoneMaskInfo::TransformReqBone, py::return_value_policy::reference)
		.def_readwrite("TransformReqBoneIndex", &FPerBoneMaskInfo::TransformReqBoneIndex)
		;
	py::class_< FAimTransform >(m, "FAimTransform")
		.def_readwrite("Quaternion", &FAimTransform::Quaternion, py::return_value_policy::reference)
		.def_readwrite("Translation", &FAimTransform::Translation, py::return_value_policy::reference)
		;
	py::class_< FAimComponent >(m, "FAimComponent")
		.def_readwrite("BoneName", &FAimComponent::BoneName, py::return_value_policy::reference)
		.def_readwrite("LU", &FAimComponent::LU, py::return_value_policy::reference)
		.def_readwrite("LC", &FAimComponent::LC, py::return_value_policy::reference)
		.def_readwrite("LD", &FAimComponent::LD, py::return_value_policy::reference)
		.def_readwrite("CU", &FAimComponent::CU, py::return_value_policy::reference)
		.def_readwrite("CC", &FAimComponent::CC, py::return_value_policy::reference)
		.def_readwrite("CD", &FAimComponent::CD, py::return_value_policy::reference)
		.def_readwrite("RU", &FAimComponent::RU, py::return_value_policy::reference)
		.def_readwrite("RC", &FAimComponent::RC, py::return_value_policy::reference)
		.def_readwrite("RD", &FAimComponent::RD, py::return_value_policy::reference)
		;
	py::class_< FAimOffsetProfile >(m, "FAimOffsetProfile")
		.def_property("bDirtyAimTransformsCache", [](FAimOffsetProfile &self){return self.bDirtyAimTransformsCache;}, [](FAimOffsetProfile &self, bool value){self.bDirtyAimTransformsCache = value ? 1 : 0;})
		.def_readwrite("ProfileName", &FAimOffsetProfile::ProfileName, py::return_value_policy::reference)
		.def_readwrite("HorizontalRange", &FAimOffsetProfile::HorizontalRange, py::return_value_policy::reference)
		.def_readwrite("VerticalRange", &FAimOffsetProfile::VerticalRange, py::return_value_policy::reference)
		.def_readwrite("AimComponents", &FAimOffsetProfile::AimComponents, py::return_value_policy::reference)
		.def_readwrite("AimTransformsCache", &FAimOffsetProfile::AimTransformsCache, py::return_value_policy::reference)
		.def_readwrite("AnimName_LU", &FAimOffsetProfile::AnimName_LU, py::return_value_policy::reference)
		.def_readwrite("AnimName_LC", &FAimOffsetProfile::AnimName_LC, py::return_value_policy::reference)
		.def_readwrite("AnimName_LD", &FAimOffsetProfile::AnimName_LD, py::return_value_policy::reference)
		.def_readwrite("AnimName_CU", &FAimOffsetProfile::AnimName_CU, py::return_value_policy::reference)
		.def_readwrite("AnimName_CC", &FAimOffsetProfile::AnimName_CC, py::return_value_policy::reference)
		.def_readwrite("AnimName_CD", &FAimOffsetProfile::AnimName_CD, py::return_value_policy::reference)
		.def_readwrite("AnimName_RU", &FAimOffsetProfile::AnimName_RU, py::return_value_policy::reference)
		.def_readwrite("AnimName_RC", &FAimOffsetProfile::AnimName_RC, py::return_value_policy::reference)
		.def_readwrite("AnimName_RD", &FAimOffsetProfile::AnimName_RD, py::return_value_policy::reference)
		;
	py::class_< FChildBoneBlendInfo >(m, "FChildBoneBlendInfo")
		.def_readwrite("TargetPerBoneWeight", &FChildBoneBlendInfo::TargetPerBoneWeight, py::return_value_policy::reference)
		.def_readwrite("InitTargetStartBone", &FChildBoneBlendInfo::InitTargetStartBone, py::return_value_policy::reference)
		.def_readwrite("InitPerBoneIncrease", &FChildBoneBlendInfo::InitPerBoneIncrease)
		.def_readwrite("OldStartBone", &FChildBoneBlendInfo::OldStartBone, py::return_value_policy::reference)
		.def_readwrite("OldBoneIncrease", &FChildBoneBlendInfo::OldBoneIncrease)
		.def_readwrite("TargetRequiredBones", &FChildBoneBlendInfo::TargetRequiredBones, py::return_value_policy::reference)
		;
	py::class_< FRandomAnimInfo >(m, "FRandomAnimInfo")
		.def_property("bStillFrame", [](FRandomAnimInfo &self){return self.bStillFrame;}, [](FRandomAnimInfo &self, bool value){self.bStillFrame = value ? 1 : 0;})
		.def_readwrite("Chance", &FRandomAnimInfo::Chance)
		.def_readwrite("LoopCountMin", &FRandomAnimInfo::LoopCountMin)
		.def_readwrite("LoopCountMax", &FRandomAnimInfo::LoopCountMax)
		.def_readwrite("BlendInTime", &FRandomAnimInfo::BlendInTime)
		.def_readwrite("PlayRateRange", &FRandomAnimInfo::PlayRateRange, py::return_value_policy::reference)
		.def_readwrite("LoopCount", &FRandomAnimInfo::LoopCount)
		.def_readwrite("LastPosition", &FRandomAnimInfo::LastPosition)
		;
	py::class_< FAnimInfo >(m, "FAnimInfo")
		.def_readwrite("AnimSeqName", &FAnimInfo::AnimSeqName, py::return_value_policy::reference)
		.def_readwrite("AnimSeq", &FAnimInfo::AnimSeq, py::return_value_policy::reference)
		.def_readwrite("AnimLinkupIndex", &FAnimInfo::AnimLinkupIndex)
		;
	py::class_< FAnimBlendInfo >(m, "FAnimBlendInfo")
		.def_readwrite("AnimName", &FAnimBlendInfo::AnimName, py::return_value_policy::reference)
		.def_readwrite("AnimInfo", &FAnimBlendInfo::AnimInfo, py::return_value_policy::reference)
		.def_readwrite("Weight", &FAnimBlendInfo::Weight)
		;
	py::class_< FSynchGroup >(m, "FSynchGroup")
		.def_property("bFireSlaveNotifies", [](FSynchGroup &self){return self.bFireSlaveNotifies;}, [](FSynchGroup &self, bool value){self.bFireSlaveNotifies = value ? 1 : 0;})
		.def_readwrite("SeqNodes", &FSynchGroup::SeqNodes, py::return_value_policy::reference)
		.def_readwrite("MasterNode", &FSynchGroup::MasterNode, py::return_value_policy::reference)
		.def_readwrite("GroupName", &FSynchGroup::GroupName, py::return_value_policy::reference)
		.def_readwrite("RateScale", &FSynchGroup::RateScale)
		;
	py::class_< FOpinionData >(m, "FOpinionData")
		.def_readwrite("Opinion", &FOpinionData::Opinion)
		.def_readwrite("Allegiance", &FOpinionData::Allegiance, py::return_value_policy::reference)
		;
	py::class_< FInfoBarData >(m, "FInfoBarData")
		.def_property("bFullyArmored", [](FInfoBarData &self){return self.bFullyArmored;}, [](FInfoBarData &self, bool value){self.bFullyArmored = value ? 1 : 0;})
		.def_readwrite("Type", &FInfoBarData::Type)
		.def_readwrite("Amount", &FInfoBarData::Amount)
		;
	py::class_< FLocalizedSubtitle >(m, "FLocalizedSubtitle")
		.def_property("bMature", [](FLocalizedSubtitle &self){return self.bMature;}, [](FLocalizedSubtitle &self, bool value){self.bMature = value ? 1 : 0;})
		.def_property("bManualWordWrap", [](FLocalizedSubtitle &self){return self.bManualWordWrap;}, [](FLocalizedSubtitle &self, bool value){self.bManualWordWrap = value ? 1 : 0;})
		.def_property("bSingleLine", [](FLocalizedSubtitle &self){return self.bSingleLine;}, [](FLocalizedSubtitle &self, bool value){self.bSingleLine = value ? 1 : 0;})
		.def_readwrite("LanguageExt", &FLocalizedSubtitle::LanguageExt, py::return_value_policy::reference)
		.def_readwrite("Subtitles", &FLocalizedSubtitle::Subtitles, py::return_value_policy::reference)
		;
	py::class_< FLightMapRef >(m, "FLightMapRef")
		.def_readwrite("Reference", &FLightMapRef::Reference, py::return_value_policy::reference)
		;
	py::class_< FDominantShadowInfo >(m, "FDominantShadowInfo")
		.def_readwrite("WorldToLight", &FDominantShadowInfo::WorldToLight, py::return_value_policy::reference)
		.def_readwrite("LightToWorld", &FDominantShadowInfo::LightToWorld, py::return_value_policy::reference)
		.def_readwrite("LightSpaceImportanceBounds", &FDominantShadowInfo::LightSpaceImportanceBounds, py::return_value_policy::reference)
		.def_readwrite("ShadowMapSizeX", &FDominantShadowInfo::ShadowMapSizeX)
		.def_readwrite("ShadowMapSizeY", &FDominantShadowInfo::ShadowMapSizeY)
		;
	py::class_< FLightmassLightSettings >(m, "FLightmassLightSettings")
		.def_readwrite("IndirectLightingScale", &FLightmassLightSettings::IndirectLightingScale)
		.def_readwrite("IndirectLightingSaturation", &FLightmassLightSettings::IndirectLightingSaturation)
		.def_readwrite("ShadowExponent", &FLightmassLightSettings::ShadowExponent)
		;
	py::class_< FScalarParameterInterpStruct >(m, "FScalarParameterInterpStruct")
		.def_readwrite("ParameterName", &FScalarParameterInterpStruct::ParameterName, py::return_value_policy::reference)
		.def_readwrite("ParameterValue", &FScalarParameterInterpStruct::ParameterValue)
		.def_readwrite("InterpTime", &FScalarParameterInterpStruct::InterpTime)
		.def_readwrite("WarmupTime", &FScalarParameterInterpStruct::WarmupTime)
		;
	py::class_< FLightmassPointLightSettings, FLightmassLightSettings >(m, "FLightmassPointLightSettings")
		.def_readwrite("LightSourceRadius", &FLightmassPointLightSettings::LightSourceRadius)
		;
	py::class_< FLightmassDirectionalLightSettings, FLightmassLightSettings >(m, "FLightmassDirectionalLightSettings")
		.def_readwrite("LightSourceAngle", &FLightmassDirectionalLightSettings::LightSourceAngle)
		;
	py::class_< FLightmassPrimitiveSettings >(m, "FLightmassPrimitiveSettings")
		.def_property("bUseTwoSidedLighting", [](FLightmassPrimitiveSettings &self){return self.bUseTwoSidedLighting;}, [](FLightmassPrimitiveSettings &self, bool value){self.bUseTwoSidedLighting = value ? 1 : 0;})
		.def_property("bShadowIndirectOnly", [](FLightmassPrimitiveSettings &self){return self.bShadowIndirectOnly;}, [](FLightmassPrimitiveSettings &self, bool value){self.bShadowIndirectOnly = value ? 1 : 0;})
		.def_property("bUseEmissiveForStaticLighting", [](FLightmassPrimitiveSettings &self){return self.bUseEmissiveForStaticLighting;}, [](FLightmassPrimitiveSettings &self, bool value){self.bUseEmissiveForStaticLighting = value ? 1 : 0;})
		.def_property("bGenerateVolumeLightingSamples", [](FLightmassPrimitiveSettings &self){return self.bGenerateVolumeLightingSamples;}, [](FLightmassPrimitiveSettings &self, bool value){self.bGenerateVolumeLightingSamples = value ? 1 : 0;})
		.def_readwrite("EmissiveLightFalloffExponent", &FLightmassPrimitiveSettings::EmissiveLightFalloffExponent)
		.def_readwrite("EmissiveLightExplicitInfluenceRadius", &FLightmassPrimitiveSettings::EmissiveLightExplicitInfluenceRadius)
		.def_readwrite("EmissiveBoost", &FLightmassPrimitiveSettings::EmissiveBoost)
		.def_readwrite("DiffuseBoost", &FLightmassPrimitiveSettings::DiffuseBoost)
		.def_readwrite("SpecularBoost", &FLightmassPrimitiveSettings::SpecularBoost)
		.def_readwrite("FullyOccludedSamplesFraction", &FLightmassPrimitiveSettings::FullyOccludedSamplesFraction)
		;
	py::class_< FLightmassDebugOptions >(m, "FLightmassDebugOptions")
		.def_property("bDebugMode", [](FLightmassDebugOptions &self){return self.bDebugMode;}, [](FLightmassDebugOptions &self, bool value){self.bDebugMode = value ? 1 : 0;})
		.def_property("bStatsEnabled", [](FLightmassDebugOptions &self){return self.bStatsEnabled;}, [](FLightmassDebugOptions &self, bool value){self.bStatsEnabled = value ? 1 : 0;})
		.def_property("bGatherBSPSurfacesAcrossComponents", [](FLightmassDebugOptions &self){return self.bGatherBSPSurfacesAcrossComponents;}, [](FLightmassDebugOptions &self, bool value){self.bGatherBSPSurfacesAcrossComponents = value ? 1 : 0;})
		.def_property("bUseDeterministicLighting", [](FLightmassDebugOptions &self){return self.bUseDeterministicLighting;}, [](FLightmassDebugOptions &self, bool value){self.bUseDeterministicLighting = value ? 1 : 0;})
		.def_property("bUseImmediateImport", [](FLightmassDebugOptions &self){return self.bUseImmediateImport;}, [](FLightmassDebugOptions &self, bool value){self.bUseImmediateImport = value ? 1 : 0;})
		.def_property("bImmediateProcessMappings", [](FLightmassDebugOptions &self){return self.bImmediateProcessMappings;}, [](FLightmassDebugOptions &self, bool value){self.bImmediateProcessMappings = value ? 1 : 0;})
		.def_property("bSortMappings", [](FLightmassDebugOptions &self){return self.bSortMappings;}, [](FLightmassDebugOptions &self, bool value){self.bSortMappings = value ? 1 : 0;})
		.def_property("bDumpBinaryFiles", [](FLightmassDebugOptions &self){return self.bDumpBinaryFiles;}, [](FLightmassDebugOptions &self, bool value){self.bDumpBinaryFiles = value ? 1 : 0;})
		.def_property("bDebugMaterials", [](FLightmassDebugOptions &self){return self.bDebugMaterials;}, [](FLightmassDebugOptions &self, bool value){self.bDebugMaterials = value ? 1 : 0;})
		.def_property("bPadMappings", [](FLightmassDebugOptions &self){return self.bPadMappings;}, [](FLightmassDebugOptions &self, bool value){self.bPadMappings = value ? 1 : 0;})
		.def_property("bDebugPaddings", [](FLightmassDebugOptions &self){return self.bDebugPaddings;}, [](FLightmassDebugOptions &self, bool value){self.bDebugPaddings = value ? 1 : 0;})
		.def_property("bOnlyCalcDebugTexelMappings", [](FLightmassDebugOptions &self){return self.bOnlyCalcDebugTexelMappings;}, [](FLightmassDebugOptions &self, bool value){self.bOnlyCalcDebugTexelMappings = value ? 1 : 0;})
		.def_property("bUseRandomColors", [](FLightmassDebugOptions &self){return self.bUseRandomColors;}, [](FLightmassDebugOptions &self, bool value){self.bUseRandomColors = value ? 1 : 0;})
		.def_property("bColorBordersGreen", [](FLightmassDebugOptions &self){return self.bColorBordersGreen;}, [](FLightmassDebugOptions &self, bool value){self.bColorBordersGreen = value ? 1 : 0;})
		.def_property("bColorByExecutionTime", [](FLightmassDebugOptions &self){return self.bColorByExecutionTime;}, [](FLightmassDebugOptions &self, bool value){self.bColorByExecutionTime = value ? 1 : 0;})
		.def_property("bInitialized", [](FLightmassDebugOptions &self){return self.bInitialized;}, [](FLightmassDebugOptions &self, bool value){self.bInitialized = value ? 1 : 0;})
		.def_readwrite("CoplanarTolerance", &FLightmassDebugOptions::CoplanarTolerance)
		.def_readwrite("ExecutionTimeDivisor", &FLightmassDebugOptions::ExecutionTimeDivisor)
		;
	py::class_< FSwarmDebugOptions >(m, "FSwarmDebugOptions")
		.def_property("bDistributionEnabled", [](FSwarmDebugOptions &self){return self.bDistributionEnabled;}, [](FSwarmDebugOptions &self, bool value){self.bDistributionEnabled = value ? 1 : 0;})
		.def_property("bForceContentExport", [](FSwarmDebugOptions &self){return self.bForceContentExport;}, [](FSwarmDebugOptions &self, bool value){self.bForceContentExport = value ? 1 : 0;})
		.def_property("bInitialized", [](FSwarmDebugOptions &self){return self.bInitialized;}, [](FSwarmDebugOptions &self, bool value){self.bInitialized = value ? 1 : 0;})
		;
	py::class_< FRootMotionCurve >(m, "FRootMotionCurve")
		.def_readwrite("AnimName", &FRootMotionCurve::AnimName, py::return_value_policy::reference)
		.def_readwrite("Curve", &FRootMotionCurve::Curve, py::return_value_policy::reference)
		.def_readwrite("MaxCurveTime", &FRootMotionCurve::MaxCurveTime)
		;
	py::class_< FRecentDamageTracker >(m, "FRecentDamageTracker")
		.def_readwrite("TotalDamage", &FRecentDamageTracker::TotalDamage)
		.def_readwrite("HealthDamage", &FRecentDamageTracker::HealthDamage)
		.def_readwrite("ShieldDamage", &FRecentDamageTracker::ShieldDamage)
		;
	py::class_< FBalanceDefSpawnedActorState >(m, "FBalanceDefSpawnedActorState")
		.def_property("bGradeCustomizationsApplied", [](FBalanceDefSpawnedActorState &self){return self.bGradeCustomizationsApplied;}, [](FBalanceDefSpawnedActorState &self, bool value){self.bGradeCustomizationsApplied = value ? 1 : 0;})
		.def_readwrite("BalanceDefinition", &FBalanceDefSpawnedActorState::BalanceDefinition, py::return_value_policy::reference)
		.def_readwrite("GradeIndex", &FBalanceDefSpawnedActorState::GradeIndex)
		;
	py::class_< FTrailSocketSamplePoint >(m, "FTrailSocketSamplePoint")
		.def_readwrite("Position", &FTrailSocketSamplePoint::Position, py::return_value_policy::reference)
		.def_readwrite("Velocity", &FTrailSocketSamplePoint::Velocity, py::return_value_policy::reference)
		;
	py::class_< FTrailSamplePoint >(m, "FTrailSamplePoint")
		.def_readwrite("RelativeTime", &FTrailSamplePoint::RelativeTime)
		.def_readwrite("FirstEdgeSample", &FTrailSamplePoint::FirstEdgeSample, py::return_value_policy::reference)
		.def_readwrite("ControlPointSample", &FTrailSamplePoint::ControlPointSample, py::return_value_policy::reference)
		.def_readwrite("SecondEdgeSample", &FTrailSamplePoint::SecondEdgeSample, py::return_value_policy::reference)
		;
	py::class_< FTrailSample >(m, "FTrailSample")
		.def_readwrite("RelativeTime", &FTrailSample::RelativeTime)
		.def_readwrite("FirstEdgeSample", &FTrailSample::FirstEdgeSample, py::return_value_policy::reference)
		.def_readwrite("ControlPointSample", &FTrailSample::ControlPointSample, py::return_value_policy::reference)
		.def_readwrite("SecondEdgeSample", &FTrailSample::SecondEdgeSample, py::return_value_policy::reference)
		;
	py::class_< FAnimSetMeshLinkup >(m, "FAnimSetMeshLinkup")
		.def_readwrite("BoneToTrackTable", &FAnimSetMeshLinkup::BoneToTrackTable, py::return_value_policy::reference)
		;
	py::class_< FAnimGroup >(m, "FAnimGroup")
		.def_readwrite("SeqNodes", &FAnimGroup::SeqNodes, py::return_value_policy::reference)
		.def_readwrite("SynchMaster", &FAnimGroup::SynchMaster, py::return_value_policy::reference)
		.def_readwrite("NotifyMaster", &FAnimGroup::NotifyMaster, py::return_value_policy::reference)
		.def_readwrite("GroupName", &FAnimGroup::GroupName, py::return_value_policy::reference)
		.def_readwrite("RateScale", &FAnimGroup::RateScale)
		.def_readwrite("SynchPctPosition", &FAnimGroup::SynchPctPosition)
		;
	py::class_< FSkelControlListHead >(m, "FSkelControlListHead")
		.def_readwrite("BoneName", &FSkelControlListHead::BoneName, py::return_value_policy::reference)
		.def_readwrite("ControlHead", &FSkelControlListHead::ControlHead, py::return_value_policy::reference)
		;
	py::class_< FPreviewSkelMeshStruct >(m, "FPreviewSkelMeshStruct")
		.def_readwrite("DisplayName", &FPreviewSkelMeshStruct::DisplayName, py::return_value_policy::reference)
		.def_readwrite("PreviewSkelMesh", &FPreviewSkelMeshStruct::PreviewSkelMesh, py::return_value_policy::reference)
		.def_readwrite("PreviewMorphSets", &FPreviewSkelMeshStruct::PreviewMorphSets, py::return_value_policy::reference)
		;
	py::class_< FPreviewSocketStruct >(m, "FPreviewSocketStruct")
		.def_readwrite("DisplayName", &FPreviewSocketStruct::DisplayName, py::return_value_policy::reference)
		.def_readwrite("SocketName", &FPreviewSocketStruct::SocketName, py::return_value_policy::reference)
		.def_readwrite("PreviewSkelMesh", &FPreviewSocketStruct::PreviewSkelMesh, py::return_value_policy::reference)
		.def_readwrite("PreviewStaticMesh", &FPreviewSocketStruct::PreviewStaticMesh, py::return_value_policy::reference)
		;
	py::class_< FPreviewAnimSetsStruct >(m, "FPreviewAnimSetsStruct")
		.def_readwrite("DisplayName", &FPreviewAnimSetsStruct::DisplayName, py::return_value_policy::reference)
		.def_readwrite("PreviewAnimSets", &FPreviewAnimSetsStruct::PreviewAnimSets, py::return_value_policy::reference)
		;
	py::class_< F_ModifyHealthParams >(m, "F_ModifyHealthParams")
		.def_property("bHeal", [](F_ModifyHealthParams &self){return self.bHeal;}, [](F_ModifyHealthParams &self, bool value){self.bHeal = value ? 1 : 0;})
		.def_readwrite("DamageAmount", &F_ModifyHealthParams::DamageAmount)
		.def_readwrite("EventInstigator", &F_ModifyHealthParams::EventInstigator, py::return_value_policy::reference)
		.def_readwrite("HitLocation", &F_ModifyHealthParams::HitLocation, py::return_value_policy::reference)
		.def_readwrite("Momentum", &F_ModifyHealthParams::Momentum, py::return_value_policy::reference)
		.def_readwrite("DamageType", &F_ModifyHealthParams::DamageType, py::return_value_policy::reference)
		.def_readwrite("DamageTypeDefinition", &F_ModifyHealthParams::DamageTypeDefinition, py::return_value_policy::reference)
		.def_readwrite("ImpactDefinition", &F_ModifyHealthParams::ImpactDefinition, py::return_value_policy::reference)
		;
	py::class_< FNxDestructibleParametersFlag >(m, "FNxDestructibleParametersFlag")
		.def_property("ACCUMULATE_DAMAGE", [](FNxDestructibleParametersFlag &self){return self.ACCUMULATE_DAMAGE;}, [](FNxDestructibleParametersFlag &self, bool value){self.ACCUMULATE_DAMAGE = value ? 1 : 0;})
		.def_property("ASSET_DEFINED_SUPPORT", [](FNxDestructibleParametersFlag &self){return self.ASSET_DEFINED_SUPPORT;}, [](FNxDestructibleParametersFlag &self, bool value){self.ASSET_DEFINED_SUPPORT = value ? 1 : 0;})
		.def_property("WORLD_SUPPORT", [](FNxDestructibleParametersFlag &self){return self.WORLD_SUPPORT;}, [](FNxDestructibleParametersFlag &self, bool value){self.WORLD_SUPPORT = value ? 1 : 0;})
		.def_property("DEBRIS_TIMEOUT", [](FNxDestructibleParametersFlag &self){return self.DEBRIS_TIMEOUT;}, [](FNxDestructibleParametersFlag &self, bool value){self.DEBRIS_TIMEOUT = value ? 1 : 0;})
		.def_property("DEBRIS_MAX_SEPARATION", [](FNxDestructibleParametersFlag &self){return self.DEBRIS_MAX_SEPARATION;}, [](FNxDestructibleParametersFlag &self, bool value){self.DEBRIS_MAX_SEPARATION = value ? 1 : 0;})
		.def_property("CRUMBLE_SMALLEST_CHUNKS", [](FNxDestructibleParametersFlag &self){return self.CRUMBLE_SMALLEST_CHUNKS;}, [](FNxDestructibleParametersFlag &self, bool value){self.CRUMBLE_SMALLEST_CHUNKS = value ? 1 : 0;})
		.def_property("ACCURATE_RAYCASTS", [](FNxDestructibleParametersFlag &self){return self.ACCURATE_RAYCASTS;}, [](FNxDestructibleParametersFlag &self, bool value){self.ACCURATE_RAYCASTS = value ? 1 : 0;})
		.def_property("USE_VALID_BOUNDS", [](FNxDestructibleParametersFlag &self){return self.USE_VALID_BOUNDS;}, [](FNxDestructibleParametersFlag &self, bool value){self.USE_VALID_BOUNDS = value ? 1 : 0;})
		;
	py::class_< FNxDestructibleDepthParameters >(m, "FNxDestructibleDepthParameters")
		.def_property("TAKE_IMPACT_DAMAGE", [](FNxDestructibleDepthParameters &self){return self.TAKE_IMPACT_DAMAGE;}, [](FNxDestructibleDepthParameters &self, bool value){self.TAKE_IMPACT_DAMAGE = value ? 1 : 0;})
		.def_property("IGNORE_POSE_UPDATES", [](FNxDestructibleDepthParameters &self){return self.IGNORE_POSE_UPDATES;}, [](FNxDestructibleDepthParameters &self, bool value){self.IGNORE_POSE_UPDATES = value ? 1 : 0;})
		.def_property("IGNORE_RAYCAST_CALLBACKS", [](FNxDestructibleDepthParameters &self){return self.IGNORE_RAYCAST_CALLBACKS;}, [](FNxDestructibleDepthParameters &self, bool value){self.IGNORE_RAYCAST_CALLBACKS = value ? 1 : 0;})
		.def_property("IGNORE_CONTACT_CALLBACKS", [](FNxDestructibleDepthParameters &self){return self.IGNORE_CONTACT_CALLBACKS;}, [](FNxDestructibleDepthParameters &self, bool value){self.IGNORE_CONTACT_CALLBACKS = value ? 1 : 0;})
		.def_property("USER_FLAG", [](FNxDestructibleDepthParameters &self){return self.USER_FLAG;}, [](FNxDestructibleDepthParameters &self, bool value){self.USER_FLAG = value ? 1 : 0;})
		.def_property("USER_FLAG01", [](FNxDestructibleDepthParameters &self){return self.USER_FLAG01;}, [](FNxDestructibleDepthParameters &self, bool value){self.USER_FLAG01 = value ? 1 : 0;})
		.def_property("USER_FLAG02", [](FNxDestructibleDepthParameters &self){return self.USER_FLAG02;}, [](FNxDestructibleDepthParameters &self, bool value){self.USER_FLAG02 = value ? 1 : 0;})
		.def_property("USER_FLAG03", [](FNxDestructibleDepthParameters &self){return self.USER_FLAG03;}, [](FNxDestructibleDepthParameters &self, bool value){self.USER_FLAG03 = value ? 1 : 0;})
		;
	py::class_< FNxDestructibleParameters >(m, "FNxDestructibleParameters")
		.def_property("bFormExtendedStructures", [](FNxDestructibleParameters &self){return self.bFormExtendedStructures;}, [](FNxDestructibleParameters &self, bool value){self.bFormExtendedStructures = value ? 1 : 0;})
		.def_readwrite("DamageThreshold", &FNxDestructibleParameters::DamageThreshold)
		.def_readwrite("DamageToRadius", &FNxDestructibleParameters::DamageToRadius)
		.def_readwrite("DamageCap", &FNxDestructibleParameters::DamageCap)
		.def_readwrite("ForceToDamage", &FNxDestructibleParameters::ForceToDamage)
		.def_readwrite("ImpactVelocityThreshold", &FNxDestructibleParameters::ImpactVelocityThreshold)
		.def_readwrite("MaterialStrength", &FNxDestructibleParameters::MaterialStrength)
		.def_readwrite("DamageToPercentDeformation", &FNxDestructibleParameters::DamageToPercentDeformation)
		.def_readwrite("DeformationPercentLimit", &FNxDestructibleParameters::DeformationPercentLimit)
		.def_readwrite("SupportDepth", &FNxDestructibleParameters::SupportDepth)
		.def_readwrite("DebrisDepth", &FNxDestructibleParameters::DebrisDepth)
		.def_readwrite("EssentialDepth", &FNxDestructibleParameters::EssentialDepth)
		.def_readwrite("DebrisLifetimeMin", &FNxDestructibleParameters::DebrisLifetimeMin)
		.def_readwrite("DebrisLifetimeMax", &FNxDestructibleParameters::DebrisLifetimeMax)
		.def_readwrite("DebrisMaxSeparationMin", &FNxDestructibleParameters::DebrisMaxSeparationMin)
		.def_readwrite("DebrisMaxSeparationMax", &FNxDestructibleParameters::DebrisMaxSeparationMax)
		.def_readwrite("ValidBounds", &FNxDestructibleParameters::ValidBounds, py::return_value_policy::reference)
		.def_readwrite("MaxChunkSpeed", &FNxDestructibleParameters::MaxChunkSpeed)
		.def_readwrite("MassScaleExponent", &FNxDestructibleParameters::MassScaleExponent)
		.def_readwrite("Flags", &FNxDestructibleParameters::Flags, py::return_value_policy::reference)
		.def_readwrite("GrbVolumeLimit", &FNxDestructibleParameters::GrbVolumeLimit)
		.def_readwrite("GrbParticleSpacing", &FNxDestructibleParameters::GrbParticleSpacing)
		.def_readwrite("FractureImpulseScale", &FNxDestructibleParameters::FractureImpulseScale)
		.def_readwrite("DepthParameters", &FNxDestructibleParameters::DepthParameters, py::return_value_policy::reference)
		;
	py::class_< FDamageParameters >(m, "FDamageParameters")
		.def_readwrite("OverrideMode", &FDamageParameters::OverrideMode)
		.def_readwrite("BaseDamage", &FDamageParameters::BaseDamage)
		.def_readwrite("Radius", &FDamageParameters::Radius)
		.def_readwrite("Momentum", &FDamageParameters::Momentum)
		;
	py::class_< FDamagePair >(m, "FDamagePair")
		.def_readwrite("DamageCauserName", &FDamagePair::DamageCauserName, py::return_value_policy::reference)
		.def_readwrite("Params", &FDamagePair::Params, py::return_value_policy::reference)
		;
	py::class_< FAttributePriorityData >(m, "FAttributePriorityData")
		.def_readwrite("Attribute", &FAttributePriorityData::Attribute, py::return_value_policy::reference)
		.def_readwrite("PriorityIncrease", &FAttributePriorityData::PriorityIncrease)
		;
	py::class_< FAppliedAttributeEffect >(m, "FAppliedAttributeEffect")
		.def_readwrite("Context", &FAppliedAttributeEffect::Context, py::return_value_policy::reference)
		.def_readwrite("Attribute", &FAppliedAttributeEffect::Attribute, py::return_value_policy::reference)
		.def_readwrite("Modifier", &FAppliedAttributeEffect::Modifier, py::return_value_policy::reference)
		;
	py::class_< FAttributeInitializationData >(m, "FAttributeInitializationData")
		.def_readwrite("BaseValueConstant", &FAttributeInitializationData::BaseValueConstant)
		.def_readwrite("BaseValueAttribute", &FAttributeInitializationData::BaseValueAttribute, py::return_value_policy::reference)
		.def_readwrite("InitializationDefinition", &FAttributeInitializationData::InitializationDefinition, py::return_value_policy::reference)
		.def_readwrite("BaseValueScaleConstant", &FAttributeInitializationData::BaseValueScaleConstant)
		;
	py::class_< FAttributeEffectData >(m, "FAttributeEffectData")
		.def_readwrite("AttributeToModify", &FAttributeEffectData::AttributeToModify, py::return_value_policy::reference)
		.def_readwrite("ModifierType", &FAttributeEffectData::ModifierType)
		.def_readwrite("BaseModifierValue", &FAttributeEffectData::BaseModifierValue, py::return_value_policy::reference)
		;
	py::class_< FAttributeExpressionData >(m, "FAttributeExpressionData")
		.def_readwrite("AttributeOperand1", &FAttributeExpressionData::AttributeOperand1, py::return_value_policy::reference)
		.def_readwrite("ComparisonOperator", &FAttributeExpressionData::ComparisonOperator)
		.def_readwrite("Operand2Usage", &FAttributeExpressionData::Operand2Usage)
		.def_readwrite("AttributeOperand2", &FAttributeExpressionData::AttributeOperand2, py::return_value_policy::reference)
		.def_readwrite("ConstantOperand2", &FAttributeExpressionData::ConstantOperand2)
		;
	py::class_< FConditionalSoundData >(m, "FConditionalSoundData")
		.def_readwrite("Event", &FConditionalSoundData::Event, py::return_value_policy::reference)
		.def_readwrite("Cue", &FConditionalSoundData::Cue, py::return_value_policy::reference)
		.def_readwrite("Expressions", &FConditionalSoundData::Expressions, py::return_value_policy::reference)
		;
	py::class_< FBalanceFormula >(m, "FBalanceFormula")
		.def_property("bEnabled", [](FBalanceFormula &self){return self.bEnabled;}, [](FBalanceFormula &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_readwrite("Multiplier", &FBalanceFormula::Multiplier, py::return_value_policy::reference)
		.def_readwrite("Level", &FBalanceFormula::Level, py::return_value_policy::reference)
		.def_readwrite("Power", &FBalanceFormula::Power, py::return_value_policy::reference)
		.def_readwrite("Offset", &FBalanceFormula::Offset, py::return_value_policy::reference)
		;
	py::class_< FVariance >(m, "FVariance")
		.def_property("bEnabled", [](FVariance &self){return self.bEnabled;}, [](FVariance &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_property("bUseIntegerRandomization", [](FVariance &self){return self.bUseIntegerRandomization;}, [](FVariance &self, bool value){self.bUseIntegerRandomization = value ? 1 : 0;})
		.def_readwrite("LowerBound", &FVariance::LowerBound, py::return_value_policy::reference)
		.def_readwrite("UpperBound", &FVariance::UpperBound, py::return_value_policy::reference)
		;
	py::class_< FRange >(m, "FRange")
		.def_property("bEnableMinValueRestriction", [](FRange &self){return self.bEnableMinValueRestriction;}, [](FRange &self, bool value){self.bEnableMinValueRestriction = value ? 1 : 0;})
		.def_property("bEnableMaxValueRestriction", [](FRange &self){return self.bEnableMaxValueRestriction;}, [](FRange &self, bool value){self.bEnableMaxValueRestriction = value ? 1 : 0;})
		.def_readwrite("MinValue", &FRange::MinValue, py::return_value_policy::reference)
		.def_readwrite("MaxValue", &FRange::MaxValue, py::return_value_policy::reference)
		;
	py::class_< FConditionalValueExpression >(m, "FConditionalValueExpression")
		.def_readwrite("BaseValueIfTrue", &FConditionalValueExpression::BaseValueIfTrue, py::return_value_policy::reference)
		.def_readwrite("Expressions", &FConditionalValueExpression::Expressions, py::return_value_policy::reference)
		;
	py::class_< FConditionalInitializationExpressions >(m, "FConditionalInitializationExpressions")
		.def_property("bEnabled", [](FConditionalInitializationExpressions &self){return self.bEnabled;}, [](FConditionalInitializationExpressions &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_readwrite("ConditionalExpressionList", &FConditionalInitializationExpressions::ConditionalExpressionList, py::return_value_policy::reference)
		.def_readwrite("DefaultBaseValue", &FConditionalInitializationExpressions::DefaultBaseValue, py::return_value_policy::reference)
		;
	py::class_< FAttributeBaseValueData >(m, "FAttributeBaseValueData")
		.def_readwrite("Attribute", &FAttributeBaseValueData::Attribute, py::return_value_policy::reference)
		.def_readwrite("BaseValue", &FAttributeBaseValueData::BaseValue, py::return_value_policy::reference)
		;
	py::class_< FListener >(m, "FListener")
		.def_readwrite("PortalVolume", &FListener::PortalVolume, py::return_value_policy::reference)
		.def_readwrite("Location", &FListener::Location, py::return_value_policy::reference)
		.def_readwrite("Up", &FListener::Up, py::return_value_policy::reference)
		.def_readwrite("Right", &FListener::Right, py::return_value_policy::reference)
		.def_readwrite("Front", &FListener::Front, py::return_value_policy::reference)
		;
	py::class_< FAudioClassInfo >(m, "FAudioClassInfo")
		.def_readwrite("NumResident", &FAudioClassInfo::NumResident)
		.def_readwrite("SizeResident", &FAudioClassInfo::SizeResident)
		.def_readwrite("NumRealTime", &FAudioClassInfo::NumRealTime)
		.def_readwrite("SizeRealTime", &FAudioClassInfo::SizeRealTime)
		;
	py::class_< FGameStageRangeData >(m, "FGameStageRangeData")
		.def_readwrite("MinGameStage", &FGameStageRangeData::MinGameStage)
		.def_readwrite("MaxGameStage", &FGameStageRangeData::MaxGameStage)
		;
	py::class_< FGameStageGradeWeightData >(m, "FGameStageGradeWeightData")
		.def_readwrite("GameStageRequirement", &FGameStageGradeWeightData::GameStageRequirement, py::return_value_policy::reference)
		.def_readwrite("MinSpawnProbabilityModifier", &FGameStageGradeWeightData::MinSpawnProbabilityModifier, py::return_value_policy::reference)
		.def_readwrite("MaxSpawnProbabilityModifier", &FGameStageGradeWeightData::MaxSpawnProbabilityModifier, py::return_value_policy::reference)
		;
	py::class_< FBehaviorContextData >(m, "FBehaviorContextData")
		.def_readwrite("InstancedDataContextName", &FBehaviorContextData::InstancedDataContextName, py::return_value_policy::reference)
		.def_readwrite("ContextObject", &FBehaviorContextData::ContextObject, py::return_value_policy::reference)
		.def_readwrite("BehaviorContext", &FBehaviorContextData::BehaviorContext)
		.def_readwrite("bSupportsDefaultOutputLink", &FBehaviorContextData::bSupportsDefaultOutputLink)
		;
	py::class_< FBehaviorParameterUnion >(m, "FBehaviorParameterUnion")
		.def_readwrite("ParameterName", &FBehaviorParameterUnion::ParameterName, py::return_value_policy::reference)
		.def_readwrite("VectorData", &FBehaviorParameterUnion::VectorData, py::return_value_policy::reference)
		.def_readwrite("ActorData", &FBehaviorParameterUnion::ActorData, py::return_value_policy::reference)
		.def_readwrite("ImpactInfoData", &FBehaviorParameterUnion::ImpactInfoData, py::return_value_policy::reference)
		;
	py::class_< FBehaviorParameters >(m, "FBehaviorParameters")
		.def_readwrite("Parameters", &FBehaviorParameters::Parameters, py::return_value_policy::reference)
		;
	py::class_< FBehaviorOutputLinkDescriptionData >(m, "FBehaviorOutputLinkDescriptionData")
		.def_readwrite("LinkId", &FBehaviorOutputLinkDescriptionData::LinkId)
		;
	py::class_< FBehaviorKernelInfo >(m, "FBehaviorKernelInfo")
		.def_property("bHasLinkedOutputs", [](FBehaviorKernelInfo &self){return self.bHasLinkedOutputs;}, [](FBehaviorKernelInfo &self, bool value){self.bHasLinkedOutputs = value ? 1 : 0;})
		.def_property("bIsInitialRunOfThisBehavior", [](FBehaviorKernelInfo &self){return self.bIsInitialRunOfThisBehavior;}, [](FBehaviorKernelInfo &self, bool value){self.bIsInitialRunOfThisBehavior = value ? 1 : 0;})
		.def_readwrite("StateForThreadRunningThisBehavior", &FBehaviorKernelInfo::StateForThreadRunningThisBehavior, py::return_value_policy::reference)
		.def_readwrite("WorldTime", &FBehaviorKernelInfo::WorldTime)
		.def_readwrite("ExecutionTime", &FBehaviorKernelInfo::ExecutionTime)
		.def_readwrite("WorldDeltaTime", &FBehaviorKernelInfo::WorldDeltaTime)
		.def_readwrite("ExecutionDelayError", &FBehaviorKernelInfo::ExecutionDelayError)
		.def_readwrite("NextExecutionDelayTime", &FBehaviorKernelInfo::NextExecutionDelayTime)
		;
	py::class_< FCounterEventReactionData >(m, "FCounterEventReactionData")
		.def_readwrite("EventType", &FCounterEventReactionData::EventType)
		.def_readwrite("Behaviors", &FCounterEventReactionData::Behaviors, py::return_value_policy::reference)
		;
	py::class_< FBehaviorCounterState >(m, "FBehaviorCounterState")
		.def_readwrite("CurrentValue", &FBehaviorCounterState::CurrentValue)
		.def_readwrite("Target", &FBehaviorCounterState::Target)
		;
	py::class_< FCounterBehaviorUserState >(m, "FCounterBehaviorUserState")
		;
	py::class_< FIndependentSelectionData >(m, "FIndependentSelectionData")
		.def_readwrite("Probability", &FIndependentSelectionData::Probability, py::return_value_policy::reference)
		.def_readwrite("Behaviors", &FIndependentSelectionData::Behaviors, py::return_value_policy::reference)
		;
	py::class_< FScalarMaterialParameter >(m, "FScalarMaterialParameter")
		.def_readwrite("Name", &FScalarMaterialParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FScalarMaterialParameter::Value)
		.def_readwrite("ValueFromAttribute", &FScalarMaterialParameter::ValueFromAttribute, py::return_value_policy::reference)
		;
	py::class_< FVectorMaterialParameter >(m, "FVectorMaterialParameter")
		.def_readwrite("Name", &FVectorMaterialParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FVectorMaterialParameter::Value, py::return_value_policy::reference)
		.def_readwrite("VectorScale", &FVectorMaterialParameter::VectorScale, py::return_value_policy::reference)
		;
	py::class_< FTextureMaterialParameter >(m, "FTextureMaterialParameter")
		.def_readwrite("Name", &FTextureMaterialParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FTextureMaterialParameter::Value, py::return_value_policy::reference)
		;
	py::class_< FScalarParticleSystemParameter >(m, "FScalarParticleSystemParameter")
		.def_readwrite("Name", &FScalarParticleSystemParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FScalarParticleSystemParameter::Value, py::return_value_policy::reference)
		;
	py::class_< FVectorParticleSystemParameter >(m, "FVectorParticleSystemParameter")
		.def_readwrite("Name", &FVectorParticleSystemParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FVectorParticleSystemParameter::Value, py::return_value_policy::reference)
		.def_readwrite("VectorScale", &FVectorParticleSystemParameter::VectorScale, py::return_value_policy::reference)
		;
	py::class_< FColorParticleSystemParameter >(m, "FColorParticleSystemParameter")
		.def_readwrite("Name", &FColorParticleSystemParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FColorParticleSystemParameter::Value, py::return_value_policy::reference)
		;
	py::class_< FMaterialParticleSystemParameter >(m, "FMaterialParticleSystemParameter")
		.def_readwrite("Name", &FMaterialParticleSystemParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Value", &FMaterialParticleSystemParameter::Value, py::return_value_policy::reference)
		;
	py::class_< FActorParticleSystemParameter >(m, "FActorParticleSystemParameter")
		.def_readwrite("Name", &FActorParticleSystemParameter::Name, py::return_value_policy::reference)
		.def_readwrite("Context", &FActorParticleSystemParameter::Context, py::return_value_policy::reference)
		;
	py::class_< FStaticMeshComponentLODInfo >(m, "FStaticMeshComponentLODInfo")
		.def_readwrite("ShadowMaps", &FStaticMeshComponentLODInfo::ShadowMaps, py::return_value_policy::reference)
		.def_readwrite("ShadowVertexBuffers", &FStaticMeshComponentLODInfo::ShadowVertexBuffers, py::return_value_policy::reference)
		.def_readwrite("LightMap", &FStaticMeshComponentLODInfo::LightMap, py::return_value_policy::reference)
		.def_readwrite("OverrideVertexColors", &FStaticMeshComponentLODInfo::OverrideVertexColors, py::return_value_policy::reference)
		;
	py::class_< FPaintedVertex >(m, "FPaintedVertex")
		.def_readwrite("Position", &FPaintedVertex::Position, py::return_value_policy::reference)
		.def_readwrite("Normal", &FPaintedVertex::Normal, py::return_value_policy::reference)
		.def_readwrite("Color", &FPaintedVertex::Color, py::return_value_policy::reference)
		;
	py::class_< FFOscillator >(m, "FFOscillator")
		.def_readwrite("Amplitude", &FFOscillator::Amplitude)
		.def_readwrite("Frequency", &FFOscillator::Frequency)
		.def_readwrite("InitialOffset", &FFOscillator::InitialOffset)
		;
	py::class_< FVOscillator >(m, "FVOscillator")
		.def_readwrite("X", &FVOscillator::X, py::return_value_policy::reference)
		.def_readwrite("Y", &FVOscillator::Y, py::return_value_policy::reference)
		.def_readwrite("Z", &FVOscillator::Z, py::return_value_policy::reference)
		;
	py::class_< FROscillator >(m, "FROscillator")
		.def_readwrite("Pitch", &FROscillator::Pitch, py::return_value_policy::reference)
		.def_readwrite("Yaw", &FROscillator::Yaw, py::return_value_policy::reference)
		.def_readwrite("Roll", &FROscillator::Roll, py::return_value_policy::reference)
		;
	py::class_< FCameraShakeInstance >(m, "FCameraShakeInstance")
		.def_property("bBlendingIn", [](FCameraShakeInstance &self){return self.bBlendingIn;}, [](FCameraShakeInstance &self, bool value){self.bBlendingIn = value ? 1 : 0;})
		.def_property("bBlendingOut", [](FCameraShakeInstance &self){return self.bBlendingOut;}, [](FCameraShakeInstance &self, bool value){self.bBlendingOut = value ? 1 : 0;})
		.def_readwrite("SourceShake", &FCameraShakeInstance::SourceShake, py::return_value_policy::reference)
		.def_readwrite("SourceShakeName", &FCameraShakeInstance::SourceShakeName, py::return_value_policy::reference)
		.def_readwrite("OscillatorTimeRemaining", &FCameraShakeInstance::OscillatorTimeRemaining)
		.def_readwrite("CurrentBlendInTime", &FCameraShakeInstance::CurrentBlendInTime)
		.def_readwrite("CurrentBlendOutTime", &FCameraShakeInstance::CurrentBlendOutTime)
		.def_readwrite("LocSinOffset", &FCameraShakeInstance::LocSinOffset, py::return_value_policy::reference)
		.def_readwrite("RotSinOffset", &FCameraShakeInstance::RotSinOffset, py::return_value_policy::reference)
		.def_readwrite("FOVSinOffset", &FCameraShakeInstance::FOVSinOffset)
		.def_readwrite("Scale", &FCameraShakeInstance::Scale)
		.def_readwrite("AnimInst", &FCameraShakeInstance::AnimInst, py::return_value_policy::reference)
		.def_readwrite("PlaySpace", &FCameraShakeInstance::PlaySpace)
		.def_readwrite("UserPlaySpaceMatrix", &FCameraShakeInstance::UserPlaySpaceMatrix, py::return_value_policy::reference)
		;
	py::class_< FTextureGroupContainer >(m, "FTextureGroupContainer")
		.def_property("TEXTUREGROUP_World", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_World;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_World = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_WorldNormalMap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_WorldNormalMap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_WorldNormalMap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_WorldSpecular", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_WorldSpecular;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_WorldSpecular = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Character", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Character;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Character = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_CharacterNormalMap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_CharacterNormalMap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_CharacterNormalMap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_CharacterSpecular", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_CharacterSpecular;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_CharacterSpecular = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Weapon", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Weapon;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Weapon = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_WeaponNormalMap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_WeaponNormalMap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_WeaponNormalMap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_WeaponSpecular", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_WeaponSpecular;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_WeaponSpecular = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Vehicle", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Vehicle;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Vehicle = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_VehicleNormalMap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_VehicleNormalMap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_VehicleNormalMap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_VehicleSpecular", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_VehicleSpecular;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_VehicleSpecular = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Cinematic", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Cinematic;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Cinematic = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Effects", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Effects;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Effects = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_EffectsNotFiltered", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_EffectsNotFiltered;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_EffectsNotFiltered = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Skybox", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Skybox;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Skybox = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_UI", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_UI;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_UI = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Lightmap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Lightmap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Lightmap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_RenderTarget", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_RenderTarget;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_RenderTarget = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_MobileFlattened", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_MobileFlattened;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_MobileFlattened = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_ProcBuilding_Face", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_ProcBuilding_Face;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_ProcBuilding_Face = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_ProcBuilding_LightMap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_ProcBuilding_LightMap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_ProcBuilding_LightMap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Shadowmap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Shadowmap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Shadowmap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_ColorLookupTable", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_ColorLookupTable;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_ColorLookupTable = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Terrain_Heightmap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Terrain_Heightmap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Terrain_Heightmap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Terrain_Weightmap", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Terrain_Weightmap;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Terrain_Weightmap = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_ImageBasedReflection", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_ImageBasedReflection;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_ImageBasedReflection = value ? 1 : 0;})
		.def_property("TEXTUREGROUP_Bokeh", [](FTextureGroupContainer &self){return self.TEXTUREGROUP_Bokeh;}, [](FTextureGroupContainer &self, bool value){self.TEXTUREGROUP_Bokeh = value ? 1 : 0;})
		;
	py::class_< FTexture2DMipMap >(m, "FTexture2DMipMap")
		.def_readwrite("Data", &FTexture2DMipMap::Data, py::return_value_policy::reference)
		.def_readwrite("SizeX", &FTexture2DMipMap::SizeX)
		.def_readwrite("SizeY", &FTexture2DMipMap::SizeY)
		;
	py::class_< FTextureLinkedListMirror >(m, "FTextureLinkedListMirror")
		.def_readwrite("Element", &FTextureLinkedListMirror::Element, py::return_value_policy::reference)
		.def_readwrite("Next", &FTextureLinkedListMirror::Next, py::return_value_policy::reference)
		.def_readwrite("PrevLink", &FTextureLinkedListMirror::PrevLink, py::return_value_policy::reference)
		;
	py::class_< FCanvasIcon >(m, "FCanvasIcon")
		.def_readwrite("Texture", &FCanvasIcon::Texture, py::return_value_policy::reference)
		.def_readwrite("U", &FCanvasIcon::U)
		.def_readwrite("V", &FCanvasIcon::V)
		.def_readwrite("UL", &FCanvasIcon::UL)
		.def_readwrite("VL", &FCanvasIcon::VL)
		;
	py::class_< FDepthFieldGlowInfo >(m, "FDepthFieldGlowInfo")
		.def_property("bEnableGlow", [](FDepthFieldGlowInfo &self){return self.bEnableGlow;}, [](FDepthFieldGlowInfo &self, bool value){self.bEnableGlow = value ? 1 : 0;})
		.def_readwrite("GlowColor", &FDepthFieldGlowInfo::GlowColor, py::return_value_policy::reference)
		.def_readwrite("GlowOuterRadius", &FDepthFieldGlowInfo::GlowOuterRadius, py::return_value_policy::reference)
		.def_readwrite("GlowInnerRadius", &FDepthFieldGlowInfo::GlowInnerRadius, py::return_value_policy::reference)
		;
	py::class_< FFontRenderInfo >(m, "FFontRenderInfo")
		.def_property("bClipText", [](FFontRenderInfo &self){return self.bClipText;}, [](FFontRenderInfo &self, bool value){self.bClipText = value ? 1 : 0;})
		.def_property("bEnableShadow", [](FFontRenderInfo &self){return self.bEnableShadow;}, [](FFontRenderInfo &self, bool value){self.bEnableShadow = value ? 1 : 0;})
		.def_readwrite("GlowInfo", &FFontRenderInfo::GlowInfo, py::return_value_policy::reference)
		;
	py::class_< FCanvasUVTri >(m, "FCanvasUVTri")
		.def_readwrite("V0_Pos", &FCanvasUVTri::V0_Pos, py::return_value_policy::reference)
		.def_readwrite("V0_UV", &FCanvasUVTri::V0_UV, py::return_value_policy::reference)
		.def_readwrite("V1_Pos", &FCanvasUVTri::V1_Pos, py::return_value_policy::reference)
		.def_readwrite("V1_UV", &FCanvasUVTri::V1_UV, py::return_value_policy::reference)
		.def_readwrite("V2_Pos", &FCanvasUVTri::V2_Pos, py::return_value_policy::reference)
		.def_readwrite("V2_UV", &FCanvasUVTri::V2_UV, py::return_value_policy::reference)
		;
	py::class_< FTextSizingParameters >(m, "FTextSizingParameters")
		.def_readwrite("DrawX", &FTextSizingParameters::DrawX)
		.def_readwrite("DrawY", &FTextSizingParameters::DrawY)
		.def_readwrite("DrawXL", &FTextSizingParameters::DrawXL)
		.def_readwrite("DrawYL", &FTextSizingParameters::DrawYL)
		.def_readwrite("Scaling", &FTextSizingParameters::Scaling, py::return_value_policy::reference)
		.def_readwrite("DrawFont", &FTextSizingParameters::DrawFont, py::return_value_policy::reference)
		.def_readwrite("SpacingAdjust", &FTextSizingParameters::SpacingAdjust, py::return_value_policy::reference)
		.def_readwrite("ViewportHeight", &FTextSizingParameters::ViewportHeight)
		;
	py::class_< FWrappedStringElement >(m, "FWrappedStringElement")
		.def_readwrite("Value", &FWrappedStringElement::Value, py::return_value_policy::reference)
		.def_readwrite("LineExtent", &FWrappedStringElement::LineExtent, py::return_value_policy::reference)
		;
	py::class_< FDamageTypeResistance >(m, "FDamageTypeResistance")
		.def_readwrite("ResistanceToImpact", &FDamageTypeResistance::ResistanceToImpact, py::return_value_policy::reference)
		.def_readwrite("ResistanceToStatusEffect", &FDamageTypeResistance::ResistanceToStatusEffect, py::return_value_policy::reference)
		;
	py::class_< FUIRangeData >(m, "FUIRangeData")
		.def_property("bIntRange", [](FUIRangeData &self){return self.bIntRange;}, [](FUIRangeData &self, bool value){self.bIntRange = value ? 1 : 0;})
		.def_readwrite("CurrentValue", &FUIRangeData::CurrentValue)
		.def_readwrite("MinValue", &FUIRangeData::MinValue)
		.def_readwrite("MaxValue", &FUIRangeData::MaxValue)
		.def_readwrite("NudgeValue", &FUIRangeData::NudgeValue)
		;
	py::class_< FTextureCoordinates >(m, "FTextureCoordinates")
		.def_readwrite("U", &FTextureCoordinates::U)
		.def_readwrite("V", &FTextureCoordinates::V)
		.def_readwrite("UL", &FTextureCoordinates::UL)
		.def_readwrite("VL", &FTextureCoordinates::VL)
		;
	py::class_< FUIProviderScriptFieldValue >(m, "FUIProviderScriptFieldValue")
		.def_readwrite("PropertyTag", &FUIProviderScriptFieldValue::PropertyTag, py::return_value_policy::reference)
		.def_readwrite("PropertyType", &FUIProviderScriptFieldValue::PropertyType)
		.def_readwrite("StringValue", &FUIProviderScriptFieldValue::StringValue, py::return_value_policy::reference)
		.def_readwrite("ImageValue", &FUIProviderScriptFieldValue::ImageValue, py::return_value_policy::reference)
		.def_readwrite("ArrayValue", &FUIProviderScriptFieldValue::ArrayValue, py::return_value_policy::reference)
		.def_readwrite("RangeValue", &FUIProviderScriptFieldValue::RangeValue, py::return_value_policy::reference)
		.def_readwrite("NetIdValue", &FUIProviderScriptFieldValue::NetIdValue, py::return_value_policy::reference)
		.def_readwrite("AtlasCoordinates", &FUIProviderScriptFieldValue::AtlasCoordinates, py::return_value_policy::reference)
		;
	py::class_< FUIProviderFieldValue, FUIProviderScriptFieldValue >(m, "FUIProviderFieldValue")
		.def_readwrite("CustomStringNode", &FUIProviderFieldValue::CustomStringNode, py::return_value_policy::reference)
		;
	py::class_< FInputKeyAction >(m, "FInputKeyAction")
		.def_readwrite("InputKeyName", &FInputKeyAction::InputKeyName, py::return_value_policy::reference)
		.def_readwrite("InputKeyState", &FInputKeyAction::InputKeyState)
		.def_readwrite("TriggeredOps", &FInputKeyAction::TriggeredOps, py::return_value_policy::reference)
		.def_readwrite("ActionsToExecute", &FInputKeyAction::ActionsToExecute, py::return_value_policy::reference)
		;
	py::class_< FUIDataStoreBinding >(m, "FUIDataStoreBinding")
		.def_readwrite("Subscriber", &FUIDataStoreBinding::Subscriber, py::return_value_policy::reference)
		.def_readwrite("RequiredFieldType", &FUIDataStoreBinding::RequiredFieldType)
		.def_readwrite("MarkupString", &FUIDataStoreBinding::MarkupString, py::return_value_policy::reference)
		.def_readwrite("BindingIndex", &FUIDataStoreBinding::BindingIndex)
		.def_readwrite("DataStoreName", &FUIDataStoreBinding::DataStoreName, py::return_value_policy::reference)
		.def_readwrite("DataStoreField", &FUIDataStoreBinding::DataStoreField, py::return_value_policy::reference)
		.def_readwrite("ResolvedDataStore", &FUIDataStoreBinding::ResolvedDataStore, py::return_value_policy::reference)
		;
	py::class_< FInputEventParameters >(m, "FInputEventParameters")
		.def_property("bAltPressed", [](FInputEventParameters &self){return self.bAltPressed;}, [](FInputEventParameters &self, bool value){self.bAltPressed = value ? 1 : 0;})
		.def_property("bCtrlPressed", [](FInputEventParameters &self){return self.bCtrlPressed;}, [](FInputEventParameters &self, bool value){self.bCtrlPressed = value ? 1 : 0;})
		.def_property("bShiftPressed", [](FInputEventParameters &self){return self.bShiftPressed;}, [](FInputEventParameters &self, bool value){self.bShiftPressed = value ? 1 : 0;})
		.def_readwrite("PlayerIndex", &FInputEventParameters::PlayerIndex)
		.def_readwrite("ControllerId", &FInputEventParameters::ControllerId)
		.def_readwrite("InputKeyName", &FInputEventParameters::InputKeyName, py::return_value_policy::reference)
		.def_readwrite("EventType", &FInputEventParameters::EventType)
		.def_readwrite("InputDelta", &FInputEventParameters::InputDelta)
		.def_readwrite("DeltaTime", &FInputEventParameters::DeltaTime)
		;
	py::class_< FSubscribedInputEventParameters, FInputEventParameters >(m, "FSubscribedInputEventParameters")
		.def_readwrite("InputAliasName", &FSubscribedInputEventParameters::InputAliasName, py::return_value_policy::reference)
		;
	py::class_< FUIAxisEmulationDefinition >(m, "FUIAxisEmulationDefinition")
		.def_property("bEmulateButtonPress", [](FUIAxisEmulationDefinition &self){return self.bEmulateButtonPress;}, [](FUIAxisEmulationDefinition &self, bool value){self.bEmulateButtonPress = value ? 1 : 0;})
		.def_readwrite("AxisInputKey", &FUIAxisEmulationDefinition::AxisInputKey, py::return_value_policy::reference)
		.def_readwrite("AdjacentAxisInputKey", &FUIAxisEmulationDefinition::AdjacentAxisInputKey, py::return_value_policy::reference)
		;
	py::class_< FRawInputKeyEventData >(m, "FRawInputKeyEventData")
		.def_readwrite("InputKeyName", &FRawInputKeyEventData::InputKeyName, py::return_value_policy::reference)
		.def_readwrite("ModifierKeyFlags", &FRawInputKeyEventData::ModifierKeyFlags)
		;
	py::class_< FAutoCompleteCommand >(m, "FAutoCompleteCommand")
		.def_readwrite("Command", &FAutoCompleteCommand::Command, py::return_value_policy::reference)
		.def_readwrite("Desc", &FAutoCompleteCommand::Desc, py::return_value_policy::reference)
		;
	py::class_< FAutoCompleteNode >(m, "FAutoCompleteNode")
		.def_readwrite("IndexChar", &FAutoCompleteNode::IndexChar)
		.def_readwrite("AutoCompleteListIndices", &FAutoCompleteNode::AutoCompleteListIndices, py::return_value_policy::reference)
		.def_readwrite("ChildNodes", &FAutoCompleteNode::ChildNodes, py::return_value_policy::reference)
		;
	py::class_< FCovPosInfo >(m, "FCovPosInfo")
		.def_readwrite("Link", &FCovPosInfo::Link, py::return_value_policy::reference)
		.def_readwrite("LtSlotIdx", &FCovPosInfo::LtSlotIdx)
		.def_readwrite("RtSlotIdx", &FCovPosInfo::RtSlotIdx)
		.def_readwrite("LtToRtPct", &FCovPosInfo::LtToRtPct)
		.def_readwrite("Location", &FCovPosInfo::Location, py::return_value_policy::reference)
		.def_readwrite("Normal", &FCovPosInfo::Normal, py::return_value_policy::reference)
		.def_readwrite("Tangent", &FCovPosInfo::Tangent, py::return_value_policy::reference)
		;
	py::class_< FFireLinkItem >(m, "FFireLinkItem")
		.def_readwrite("SrcType", &FFireLinkItem::SrcType)
		.def_readwrite("SrcAction", &FFireLinkItem::SrcAction)
		.def_readwrite("DestType", &FFireLinkItem::DestType)
		.def_readwrite("DestAction", &FFireLinkItem::DestAction)
		;
	py::class_< FFireLink >(m, "FFireLink")
		.def_property("bFallbackLink", [](FFireLink &self){return self.bFallbackLink;}, [](FFireLink &self, bool value){self.bFallbackLink = value ? 1 : 0;})
		.def_property("bDynamicIndexInited", [](FFireLink &self){return self.bDynamicIndexInited;}, [](FFireLink &self, bool value){self.bDynamicIndexInited = value ? 1 : 0;})
		.def_readwrite("Interactions", &FFireLink::Interactions, py::return_value_policy::reference)
		.def_readwrite("PackedProperties_CoverPairRefAndDynamicInfo", &FFireLink::PackedProperties_CoverPairRefAndDynamicInfo)
		;
	py::class_< FDynamicLinkInfo >(m, "FDynamicLinkInfo")
		.def_readwrite("LastTargetLocation", &FDynamicLinkInfo::LastTargetLocation, py::return_value_policy::reference)
		.def_readwrite("LastSrcLocation", &FDynamicLinkInfo::LastSrcLocation, py::return_value_policy::reference)
		;
	py::class_< FCoverReference, FActorReference >(m, "FCoverReference")
		.def_readwrite("SlotIdx", &FCoverReference::SlotIdx)
		;
	py::class_< FExposedLink >(m, "FExposedLink")
		.def_readwrite("TargetActor", &FExposedLink::TargetActor, py::return_value_policy::reference)
		.def_readwrite("ExposedScale", &FExposedLink::ExposedScale)
		;
	py::class_< FSlotMoveRef >(m, "FSlotMoveRef")
		.def_readwrite("Poly", &FSlotMoveRef::Poly, py::return_value_policy::reference)
		.def_readwrite("Dest", &FSlotMoveRef::Dest, py::return_value_policy::reference)
		.def_readwrite("Direction", &FSlotMoveRef::Direction)
		;
	py::class_< FCoverInfo >(m, "FCoverInfo")
		.def_readwrite("Link", &FCoverInfo::Link, py::return_value_policy::reference)
		.def_readwrite("SlotIdx", &FCoverInfo::SlotIdx)
		;
	py::class_< FCoverSlot >(m, "FCoverSlot")
		.def_property("bLeanLeft", [](FCoverSlot &self){return self.bLeanLeft;}, [](FCoverSlot &self, bool value){self.bLeanLeft = value ? 1 : 0;})
		.def_property("bLeanRight", [](FCoverSlot &self){return self.bLeanRight;}, [](FCoverSlot &self, bool value){self.bLeanRight = value ? 1 : 0;})
		.def_property("bForceCanPopUp", [](FCoverSlot &self){return self.bForceCanPopUp;}, [](FCoverSlot &self, bool value){self.bForceCanPopUp = value ? 1 : 0;})
		.def_property("bCanPopUp", [](FCoverSlot &self){return self.bCanPopUp;}, [](FCoverSlot &self, bool value){self.bCanPopUp = value ? 1 : 0;})
		.def_property("bCanMantle", [](FCoverSlot &self){return self.bCanMantle;}, [](FCoverSlot &self, bool value){self.bCanMantle = value ? 1 : 0;})
		.def_property("bCanClimbUp", [](FCoverSlot &self){return self.bCanClimbUp;}, [](FCoverSlot &self, bool value){self.bCanClimbUp = value ? 1 : 0;})
		.def_property("bForceCanCoverSlip_Left", [](FCoverSlot &self){return self.bForceCanCoverSlip_Left;}, [](FCoverSlot &self, bool value){self.bForceCanCoverSlip_Left = value ? 1 : 0;})
		.def_property("bForceCanCoverSlip_Right", [](FCoverSlot &self){return self.bForceCanCoverSlip_Right;}, [](FCoverSlot &self, bool value){self.bForceCanCoverSlip_Right = value ? 1 : 0;})
		.def_property("bCanCoverSlip_Left", [](FCoverSlot &self){return self.bCanCoverSlip_Left;}, [](FCoverSlot &self, bool value){self.bCanCoverSlip_Left = value ? 1 : 0;})
		.def_property("bCanCoverSlip_Right", [](FCoverSlot &self){return self.bCanCoverSlip_Right;}, [](FCoverSlot &self, bool value){self.bCanCoverSlip_Right = value ? 1 : 0;})
		.def_property("bCanSwatTurn_Left", [](FCoverSlot &self){return self.bCanSwatTurn_Left;}, [](FCoverSlot &self, bool value){self.bCanSwatTurn_Left = value ? 1 : 0;})
		.def_property("bCanSwatTurn_Right", [](FCoverSlot &self){return self.bCanSwatTurn_Right;}, [](FCoverSlot &self, bool value){self.bCanSwatTurn_Right = value ? 1 : 0;})
		.def_property("bEnabled", [](FCoverSlot &self){return self.bEnabled;}, [](FCoverSlot &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_property("bAllowPopup", [](FCoverSlot &self){return self.bAllowPopup;}, [](FCoverSlot &self, bool value){self.bAllowPopup = value ? 1 : 0;})
		.def_property("bAllowMantle", [](FCoverSlot &self){return self.bAllowMantle;}, [](FCoverSlot &self, bool value){self.bAllowMantle = value ? 1 : 0;})
		.def_property("bAllowCoverSlip", [](FCoverSlot &self){return self.bAllowCoverSlip;}, [](FCoverSlot &self, bool value){self.bAllowCoverSlip = value ? 1 : 0;})
		.def_property("bAllowClimbUp", [](FCoverSlot &self){return self.bAllowClimbUp;}, [](FCoverSlot &self, bool value){self.bAllowClimbUp = value ? 1 : 0;})
		.def_property("bAllowSwatTurn", [](FCoverSlot &self){return self.bAllowSwatTurn;}, [](FCoverSlot &self, bool value){self.bAllowSwatTurn = value ? 1 : 0;})
		.def_property("bForceNoGroundAdjust", [](FCoverSlot &self){return self.bForceNoGroundAdjust;}, [](FCoverSlot &self, bool value){self.bForceNoGroundAdjust = value ? 1 : 0;})
		.def_property("bPlayerOnly", [](FCoverSlot &self){return self.bPlayerOnly;}, [](FCoverSlot &self, bool value){self.bPlayerOnly = value ? 1 : 0;})
		.def_property("bPreferLeanOverPopup", [](FCoverSlot &self){return self.bPreferLeanOverPopup;}, [](FCoverSlot &self, bool value){self.bPreferLeanOverPopup = value ? 1 : 0;})
		.def_property("bDestructible", [](FCoverSlot &self){return self.bDestructible;}, [](FCoverSlot &self, bool value){self.bDestructible = value ? 1 : 0;})
		.def_property("bSelected", [](FCoverSlot &self){return self.bSelected;}, [](FCoverSlot &self, bool value){self.bSelected = value ? 1 : 0;})
		.def_property("bFailedToFindSurface", [](FCoverSlot &self){return self.bFailedToFindSurface;}, [](FCoverSlot &self, bool value){self.bFailedToFindSurface = value ? 1 : 0;})
		.def_readwrite("SlotOwner", &FCoverSlot::SlotOwner, py::return_value_policy::reference)
		.def_readwrite("SlotValidAfterTime", &FCoverSlot::SlotValidAfterTime)
		.def_readwrite("ForceCoverType", &FCoverSlot::ForceCoverType)
		.def_readwrite("CoverType", &FCoverSlot::CoverType)
		.def_readwrite("LocationDescription", &FCoverSlot::LocationDescription)
		.def_readwrite("LocationOffset", &FCoverSlot::LocationOffset, py::return_value_policy::reference)
		.def_readwrite("RotationOffset", &FCoverSlot::RotationOffset, py::return_value_policy::reference)
		.def_readwrite("Actions", &FCoverSlot::Actions, py::return_value_policy::reference)
		.def_readwrite("FireLinks", &FCoverSlot::FireLinks, py::return_value_policy::reference)
		.def_readwrite("RejectedFireLinks", &FCoverSlot::RejectedFireLinks, py::return_value_policy::reference)
		.def_readwrite("ExposedCoverPackedProperties", &FCoverSlot::ExposedCoverPackedProperties, py::return_value_policy::reference)
		.def_readwrite("TurnTargetPackedProperties", &FCoverSlot::TurnTargetPackedProperties)
		.def_readwrite("SlipRefs", &FCoverSlot::SlipRefs, py::return_value_policy::reference)
		.def_readwrite("OverlapClaimsList", &FCoverSlot::OverlapClaimsList, py::return_value_policy::reference)
		;
	py::class_< FCoverMeshes >(m, "FCoverMeshes")
		.def_readwrite("Base", &FCoverMeshes::Base, py::return_value_policy::reference)
		.def_readwrite("LeanLeft", &FCoverMeshes::LeanLeft, py::return_value_policy::reference)
		.def_readwrite("LeanRight", &FCoverMeshes::LeanRight, py::return_value_policy::reference)
		.def_readwrite("LeanLeftPref", &FCoverMeshes::LeanLeftPref, py::return_value_policy::reference)
		.def_readwrite("LeanRightPref", &FCoverMeshes::LeanRightPref, py::return_value_policy::reference)
		.def_readwrite("Climb", &FCoverMeshes::Climb, py::return_value_policy::reference)
		.def_readwrite("Mantle", &FCoverMeshes::Mantle, py::return_value_policy::reference)
		.def_readwrite("SlipLeft", &FCoverMeshes::SlipLeft, py::return_value_policy::reference)
		.def_readwrite("SlipRight", &FCoverMeshes::SlipRight, py::return_value_policy::reference)
		.def_readwrite("SwatLeft", &FCoverMeshes::SwatLeft, py::return_value_policy::reference)
		.def_readwrite("SwatRight", &FCoverMeshes::SwatRight, py::return_value_policy::reference)
		.def_readwrite("PopUp", &FCoverMeshes::PopUp, py::return_value_policy::reference)
		.def_readwrite("PlayerOnly", &FCoverMeshes::PlayerOnly, py::return_value_policy::reference)
		;
	py::class_< FManualCoverTypeInfo >(m, "FManualCoverTypeInfo")
		.def_readwrite("SlotIndex", &FManualCoverTypeInfo::SlotIndex)
		.def_readwrite("ManualCoverType", &FManualCoverTypeInfo::ManualCoverType)
		;
	py::class_< FCoverReplicationInfo >(m, "FCoverReplicationInfo")
		.def_readwrite("Link", &FCoverReplicationInfo::Link, py::return_value_policy::reference)
		.def_readwrite("SlotsEnabled", &FCoverReplicationInfo::SlotsEnabled, py::return_value_policy::reference)
		.def_readwrite("SlotsDisabled", &FCoverReplicationInfo::SlotsDisabled, py::return_value_policy::reference)
		.def_readwrite("SlotsAdjusted", &FCoverReplicationInfo::SlotsAdjusted, py::return_value_policy::reference)
		.def_readwrite("SlotsCoverTypeChanged", &FCoverReplicationInfo::SlotsCoverTypeChanged, py::return_value_policy::reference)
		;
	py::class_< FCullDistanceSizePair >(m, "FCullDistanceSizePair")
		.def_readwrite("Size", &FCullDistanceSizePair::Size)
		.def_readwrite("CullDistance", &FCullDistanceSizePair::CullDistance)
		;
	py::class_< FPresetGeneratedPoint >(m, "FPresetGeneratedPoint")
		.def_property("TangentsValid", [](FPresetGeneratedPoint &self){return self.TangentsValid;}, [](FPresetGeneratedPoint &self, bool value){self.TangentsValid = value ? 1 : 0;})
		.def_readwrite("KeyIn", &FPresetGeneratedPoint::KeyIn)
		.def_readwrite("KeyOut", &FPresetGeneratedPoint::KeyOut)
		.def_readwrite("TangentIn", &FPresetGeneratedPoint::TangentIn)
		.def_readwrite("TangentOut", &FPresetGeneratedPoint::TangentOut)
		.def_readwrite("IntepMode", &FPresetGeneratedPoint::IntepMode)
		;
	py::class_< FDamageInfo >(m, "FDamageInfo")
		.def_readwrite("Instigator", &FDamageInfo::Instigator, py::return_value_policy::reference)
		.def_readwrite("HitLocation", &FDamageInfo::HitLocation, py::return_value_policy::reference)
		.def_readwrite("DamageType", &FDamageInfo::DamageType, py::return_value_policy::reference)
		.def_readwrite("DamageTypeDefinition", &FDamageInfo::DamageTypeDefinition, py::return_value_policy::reference)
		.def_readwrite("ImpactDefinition", &FDamageInfo::ImpactDefinition, py::return_value_policy::reference)
		;
	py::class_< FReflectionInfo >(m, "FReflectionInfo")
		.def_property("bReflectTowardAttacker", [](FReflectionInfo &self){return self.bReflectTowardAttacker;}, [](FReflectionInfo &self, bool value){self.bReflectTowardAttacker = value ? 1 : 0;})
		.def_property("bReflectProjectiles", [](FReflectionInfo &self){return self.bReflectProjectiles;}, [](FReflectionInfo &self, bool value){self.bReflectProjectiles = value ? 1 : 0;})
		.def_readwrite("ReflectionType", &FReflectionInfo::ReflectionType)
		.def_readwrite("ReflectedDamageScale", &FReflectionInfo::ReflectedDamageScale)
		.def_readwrite("ReflectedDamageToReflector", &FReflectionInfo::ReflectedDamageToReflector)
		.def_readwrite("ReflectedInaccuracyModifier", &FReflectionInfo::ReflectedInaccuracyModifier)
		;
	py::class_< FDamageEventSummary >(m, "FDamageEventSummary")
		.def_property("bWasCrit", [](FDamageEventSummary &self){return self.bWasCrit;}, [](FDamageEventSummary &self, bool value){self.bWasCrit = value ? 1 : 0;})
		.def_property("bWasInjured", [](FDamageEventSummary &self){return self.bWasInjured;}, [](FDamageEventSummary &self, bool value){self.bWasInjured = value ? 1 : 0;})
		.def_property("bWasMaxShield", [](FDamageEventSummary &self){return self.bWasMaxShield;}, [](FDamageEventSummary &self, bool value){self.bWasMaxShield = value ? 1 : 0;})
		.def_property("bWasMaxHealth", [](FDamageEventSummary &self){return self.bWasMaxHealth;}, [](FDamageEventSummary &self, bool value){self.bWasMaxHealth = value ? 1 : 0;})
		.def_property("bWasOneShotKill", [](FDamageEventSummary &self){return self.bWasOneShotKill;}, [](FDamageEventSummary &self, bool value){self.bWasOneShotKill = value ? 1 : 0;})
		.def_readwrite("InitialDamage", &FDamageEventSummary::InitialDamage)
		.def_readwrite("AIDamageScaleReduction", &FDamageEventSummary::AIDamageScaleReduction)
		.def_readwrite("DamageSourceReduction", &FDamageEventSummary::DamageSourceReduction)
		.def_readwrite("InstigatorDamageTypeReduction", &FDamageEventSummary::InstigatorDamageTypeReduction)
		.def_readwrite("ExpLevelDifferenceReduction", &FDamageEventSummary::ExpLevelDifferenceReduction)
		.def_readwrite("RecipientDamageTypeReduction", &FDamageEventSummary::RecipientDamageTypeReduction)
		.def_readwrite("HitRegionReduction", &FDamageEventSummary::HitRegionReduction)
		.def_readwrite("ShieldReduction", &FDamageEventSummary::ShieldReduction)
		.def_readwrite("IntrinsicArmorReduction", &FDamageEventSummary::IntrinsicArmorReduction)
		.def_readwrite("DamageSurfaceReduction", &FDamageEventSummary::DamageSurfaceReduction)
		.def_readwrite("HitRegionCapReduction", &FDamageEventSummary::HitRegionCapReduction)
		.def_readwrite("ProtectionTimerReduction", &FDamageEventSummary::ProtectionTimerReduction)
		.def_readwrite("ProjectileReflectionReduction", &FDamageEventSummary::ProjectileReflectionReduction)
		.def_readwrite("DamageSeverityPercent", &FDamageEventSummary::DamageSeverityPercent)
		.def_readwrite("DamageDealtToShields", &FDamageEventSummary::DamageDealtToShields)
		.def_readwrite("ExtraDamageDealtDueToAmplify", &FDamageEventSummary::ExtraDamageDealtDueToAmplify)
		.def_readwrite("FinalDamage", &FDamageEventSummary::FinalDamage)
		.def_readwrite("PreviousHealth", &FDamageEventSummary::PreviousHealth)
		.def_readwrite("HitRegion", &FDamageEventSummary::HitRegion, py::return_value_policy::reference)
		.def_readwrite("ReflectionData", &FDamageEventSummary::ReflectionData, py::return_value_policy::reference)
		;
	py::class_< FPlayerDataStoreGroup >(m, "FPlayerDataStoreGroup")
		.def_readwrite("PlayerOwner", &FPlayerDataStoreGroup::PlayerOwner, py::return_value_policy::reference)
		.def_readwrite("DataStores", &FPlayerDataStoreGroup::DataStores, py::return_value_policy::reference)
		;
	py::class_< FKeyBind >(m, "FKeyBind")
		.def_property("Control", [](FKeyBind &self){return self.Control;}, [](FKeyBind &self, bool value){self.Control = value ? 1 : 0;})
		.def_property("Shift", [](FKeyBind &self){return self.Shift;}, [](FKeyBind &self, bool value){self.Shift = value ? 1 : 0;})
		.def_property("Alt", [](FKeyBind &self){return self.Alt;}, [](FKeyBind &self, bool value){self.Alt = value ? 1 : 0;})
		.def_property("LeftTrigger", [](FKeyBind &self){return self.LeftTrigger;}, [](FKeyBind &self, bool value){self.LeftTrigger = value ? 1 : 0;})
		.def_property("RightTrigger", [](FKeyBind &self){return self.RightTrigger;}, [](FKeyBind &self, bool value){self.RightTrigger = value ? 1 : 0;})
		.def_property("bIgnoreCtrl", [](FKeyBind &self){return self.bIgnoreCtrl;}, [](FKeyBind &self, bool value){self.bIgnoreCtrl = value ? 1 : 0;})
		.def_property("bIgnoreShift", [](FKeyBind &self){return self.bIgnoreShift;}, [](FKeyBind &self, bool value){self.bIgnoreShift = value ? 1 : 0;})
		.def_property("bIgnoreAlt", [](FKeyBind &self){return self.bIgnoreAlt;}, [](FKeyBind &self, bool value){self.bIgnoreAlt = value ? 1 : 0;})
		.def_readwrite("Name", &FKeyBind::Name, py::return_value_policy::reference)
		.def_readwrite("Command", &FKeyBind::Command, py::return_value_policy::reference)
		;
	py::class_< FDecalReceiver >(m, "FDecalReceiver")
		.def_readwrite("Component", &FDecalReceiver::Component, py::return_value_policy::reference)
		.def_readwrite("RenderData", &FDecalReceiver::RenderData, py::return_value_policy::reference)
		;
	py::class_< FActiveDecalInfo >(m, "FActiveDecalInfo")
		.def_readwrite("Decal", &FActiveDecalInfo::Decal, py::return_value_policy::reference)
		.def_readwrite("LifetimeRemaining", &FActiveDecalInfo::LifetimeRemaining)
		;
	py::class_< FLightmassMaterialInterfaceSettings >(m, "FLightmassMaterialInterfaceSettings")
		.def_property("bCastShadowAsMasked", [](FLightmassMaterialInterfaceSettings &self){return self.bCastShadowAsMasked;}, [](FLightmassMaterialInterfaceSettings &self, bool value){self.bCastShadowAsMasked = value ? 1 : 0;})
		.def_property("bOverrideCastShadowAsMasked", [](FLightmassMaterialInterfaceSettings &self){return self.bOverrideCastShadowAsMasked;}, [](FLightmassMaterialInterfaceSettings &self, bool value){self.bOverrideCastShadowAsMasked = value ? 1 : 0;})
		.def_property("bOverrideEmissiveBoost", [](FLightmassMaterialInterfaceSettings &self){return self.bOverrideEmissiveBoost;}, [](FLightmassMaterialInterfaceSettings &self, bool value){self.bOverrideEmissiveBoost = value ? 1 : 0;})
		.def_property("bOverrideDiffuseBoost", [](FLightmassMaterialInterfaceSettings &self){return self.bOverrideDiffuseBoost;}, [](FLightmassMaterialInterfaceSettings &self, bool value){self.bOverrideDiffuseBoost = value ? 1 : 0;})
		.def_property("bOverrideSpecularBoost", [](FLightmassMaterialInterfaceSettings &self){return self.bOverrideSpecularBoost;}, [](FLightmassMaterialInterfaceSettings &self, bool value){self.bOverrideSpecularBoost = value ? 1 : 0;})
		.def_property("bOverrideExportResolutionScale", [](FLightmassMaterialInterfaceSettings &self){return self.bOverrideExportResolutionScale;}, [](FLightmassMaterialInterfaceSettings &self, bool value){self.bOverrideExportResolutionScale = value ? 1 : 0;})
		.def_property("bOverrideDistanceFieldPenumbraScale", [](FLightmassMaterialInterfaceSettings &self){return self.bOverrideDistanceFieldPenumbraScale;}, [](FLightmassMaterialInterfaceSettings &self, bool value){self.bOverrideDistanceFieldPenumbraScale = value ? 1 : 0;})
		.def_readwrite("DistanceFieldPenumbraScale", &FLightmassMaterialInterfaceSettings::DistanceFieldPenumbraScale)
		;
	py::class_< FMaterialInput >(m, "FMaterialInput")
		.def_readwrite("Expression", &FMaterialInput::Expression, py::return_value_policy::reference)
		.def_readwrite("Mask", &FMaterialInput::Mask)
		.def_readwrite("MaskR", &FMaterialInput::MaskR)
		.def_readwrite("MaskG", &FMaterialInput::MaskG)
		.def_readwrite("MaskB", &FMaterialInput::MaskB)
		.def_readwrite("MaskA", &FMaterialInput::MaskA)
		.def_readwrite("GCC64_Padding", &FMaterialInput::GCC64_Padding)
		;
	py::class_< FColorMaterialInput, FMaterialInput >(m, "FColorMaterialInput")
		.def_property("UseConstant", [](FColorMaterialInput &self){return self.UseConstant;}, [](FColorMaterialInput &self, bool value){self.UseConstant = value ? 1 : 0;})
		.def_readwrite("Constant", &FColorMaterialInput::Constant, py::return_value_policy::reference)
		;
	py::class_< FScalarMaterialInput, FMaterialInput >(m, "FScalarMaterialInput")
		.def_property("UseConstant", [](FScalarMaterialInput &self){return self.UseConstant;}, [](FScalarMaterialInput &self, bool value){self.UseConstant = value ? 1 : 0;})
		.def_readwrite("Constant", &FScalarMaterialInput::Constant)
		;
	py::class_< FVectorMaterialInput, FMaterialInput >(m, "FVectorMaterialInput")
		.def_property("UseConstant", [](FVectorMaterialInput &self){return self.UseConstant;}, [](FVectorMaterialInput &self, bool value){self.UseConstant = value ? 1 : 0;})
		.def_readwrite("Constant", &FVectorMaterialInput::Constant, py::return_value_policy::reference)
		;
	py::class_< FVector2MaterialInput, FMaterialInput >(m, "FVector2MaterialInput")
		.def_property("UseConstant", [](FVector2MaterialInput &self){return self.UseConstant;}, [](FVector2MaterialInput &self, bool value){self.UseConstant = value ? 1 : 0;})
		.def_readwrite("ConstantX", &FVector2MaterialInput::ConstantX)
		.def_readwrite("ConstantY", &FVector2MaterialInput::ConstantY)
		;
	py::class_< APhysicsVolume_FCheckpointRecord >(m, "APhysicsVolume_FCheckpointRecord")
		.def_property("bPainCausing", [](APhysicsVolume_FCheckpointRecord &self){return self.bPainCausing;}, [](APhysicsVolume_FCheckpointRecord &self, bool value){self.bPainCausing = value ? 1 : 0;})
		.def_property("bActive", [](APhysicsVolume_FCheckpointRecord &self){return self.bActive;}, [](APhysicsVolume_FCheckpointRecord &self, bool value){self.bActive = value ? 1 : 0;})
		;
	py::class_< FMarketplaceOffer >(m, "FMarketplaceOffer")
		.def_property("bIsUnrestrictedLicense", [](FMarketplaceOffer &self){return self.bIsUnrestrictedLicense;}, [](FMarketplaceOffer &self, bool value){self.bIsUnrestrictedLicense = value ? 1 : 0;})
		.def_property("bUserHasPurchased", [](FMarketplaceOffer &self){return self.bUserHasPurchased;}, [](FMarketplaceOffer &self, bool value){self.bUserHasPurchased = value ? 1 : 0;})
		.def_readwrite("OfferId", &FMarketplaceOffer::OfferId)
		.def_readwrite("ContentCategory", &FMarketplaceOffer::ContentCategory)
		.def_readwrite("OfferName", &FMarketplaceOffer::OfferName, py::return_value_policy::reference)
		.def_readwrite("ContentId", &FMarketplaceOffer::ContentId, py::return_value_policy::reference)
		.def_readwrite("LicenseMask", &FMarketplaceOffer::LicenseMask)
		;
	py::class_< FInstalledContentInfo >(m, "FInstalledContentInfo")
		.def_property("bHasSeen", [](FInstalledContentInfo &self){return self.bHasSeen;}, [](FInstalledContentInfo &self, bool value){self.bHasSeen = value ? 1 : 0;})
		.def_readwrite("ContentType", &FInstalledContentInfo::ContentType)
		.def_readwrite("ContentName", &FInstalledContentInfo::ContentName, py::return_value_policy::reference)
		.def_readwrite("ContentPath", &FInstalledContentInfo::ContentPath, py::return_value_policy::reference)
		.def_readwrite("Filename", &FInstalledContentInfo::Filename, py::return_value_policy::reference)
		.def_readwrite("DeviceID", &FInstalledContentInfo::DeviceID)
		.def_readwrite("LicenseMask", &FInstalledContentInfo::LicenseMask)
		.def_readwrite("CachedAppIdInfo", &FInstalledContentInfo::CachedAppIdInfo, py::return_value_policy::reference)
		;
	py::class_< FMarketplaceOfferDownloadState >(m, "FMarketplaceOfferDownloadState")
		.def_property("bIsDownloaded", [](FMarketplaceOfferDownloadState &self){return self.bIsDownloaded;}, [](FMarketplaceOfferDownloadState &self, bool value){self.bIsDownloaded = value ? 1 : 0;})
		.def_property("bIsInstalled", [](FMarketplaceOfferDownloadState &self){return self.bIsInstalled;}, [](FMarketplaceOfferDownloadState &self, bool value){self.bIsInstalled = value ? 1 : 0;})
		;
	py::class_< FRejectedContentInfo, FInstalledContentInfo >(m, "FRejectedContentInfo")
		.def_readwrite("Result", &FRejectedContentInfo::Result)
		;
	py::class_< FDlcContentId >(m, "FDlcContentId")
		.def_readwrite("PackageId", &FDlcContentId::PackageId)
		.def_readwrite("ContentId", &FDlcContentId::ContentId)
		;
	py::class_< FDlcContentInfo >(m, "FDlcContentInfo")
		.def_property("bIsInstalled", [](FDlcContentInfo &self){return self.bIsInstalled;}, [](FDlcContentInfo &self, bool value){self.bIsInstalled = value ? 1 : 0;})
		.def_property("bIsLicensed", [](FDlcContentInfo &self){return self.bIsLicensed;}, [](FDlcContentInfo &self, bool value){self.bIsLicensed = value ? 1 : 0;})
		.def_readwrite("ContentId", &FDlcContentInfo::ContentId, py::return_value_policy::reference)
		;
	py::class_< FDlcCompatibilityData >(m, "FDlcCompatibilityData")
		.def_readwrite("A", &FDlcCompatibilityData::A)
		.def_readwrite("B", &FDlcCompatibilityData::B)
		.def_readwrite("C", &FDlcCompatibilityData::C)
		.def_readwrite("D", &FDlcCompatibilityData::D)
		;
	py::class_< FDlcCompatibilityDataEx, FDlcCompatibilityData >(m, "FDlcCompatibilityDataEx")
		;
	py::class_< ADynamicBlockingVolume_FCheckpointRecord >(m, "ADynamicBlockingVolume_FCheckpointRecord")
		.def_property("bCollideActors", [](ADynamicBlockingVolume_FCheckpointRecord &self){return self.bCollideActors;}, [](ADynamicBlockingVolume_FCheckpointRecord &self, bool value){self.bCollideActors = value ? 1 : 0;})
		.def_property("bBlockActors", [](ADynamicBlockingVolume_FCheckpointRecord &self){return self.bBlockActors;}, [](ADynamicBlockingVolume_FCheckpointRecord &self, bool value){self.bBlockActors = value ? 1 : 0;})
		.def_property("bNeedsReplication", [](ADynamicBlockingVolume_FCheckpointRecord &self){return self.bNeedsReplication;}, [](ADynamicBlockingVolume_FCheckpointRecord &self, bool value){self.bNeedsReplication = value ? 1 : 0;})
		.def_readwrite("Location", &ADynamicBlockingVolume_FCheckpointRecord::Location, py::return_value_policy::reference)
		.def_readwrite("Rotation", &ADynamicBlockingVolume_FCheckpointRecord::Rotation, py::return_value_policy::reference)
		;
	py::class_< FViewParticleEmitterInstanceMotionBlurInfo >(m, "FViewParticleEmitterInstanceMotionBlurInfo")
		.def_readwrite("EmitterInstanceMBInfoMap", &FViewParticleEmitterInstanceMotionBlurInfo::EmitterInstanceMBInfoMap, py::return_value_policy::reference)
		;
	py::class_< FParticleSysParam >(m, "FParticleSysParam")
		.def_readwrite("Name", &FParticleSysParam::Name, py::return_value_policy::reference)
		.def_readwrite("ParamType", &FParticleSysParam::ParamType)
		.def_readwrite("Scalar", &FParticleSysParam::Scalar)
		.def_readwrite("Scalar_Low", &FParticleSysParam::Scalar_Low)
		.def_readwrite("Vector", &FParticleSysParam::Vector, py::return_value_policy::reference)
		.def_readwrite("Vector_Low", &FParticleSysParam::Vector_Low, py::return_value_policy::reference)
		.def_readwrite("Color", &FParticleSysParam::Color, py::return_value_policy::reference)
		.def_readwrite("Actor", &FParticleSysParam::Actor, py::return_value_policy::reference)
		.def_readwrite("Material", &FParticleSysParam::Material, py::return_value_policy::reference)
		.def_readwrite("Socket", &FParticleSysParam::Socket, py::return_value_policy::reference)
		;
	py::class_< FParticleEventData >(m, "FParticleEventData")
		.def_readwrite("Type", &FParticleEventData::Type)
		.def_readwrite("EventName", &FParticleEventData::EventName, py::return_value_policy::reference)
		.def_readwrite("EmitterTime", &FParticleEventData::EmitterTime)
		.def_readwrite("Location", &FParticleEventData::Location, py::return_value_policy::reference)
		.def_readwrite("Direction", &FParticleEventData::Direction, py::return_value_policy::reference)
		.def_readwrite("Velocity", &FParticleEventData::Velocity, py::return_value_policy::reference)
		;
	py::class_< FParticleEventSpawnData, FParticleEventData >(m, "FParticleEventSpawnData")
		;
	py::class_< FParticleEventDeathData, FParticleEventData >(m, "FParticleEventDeathData")
		.def_readwrite("ParticleTime", &FParticleEventDeathData::ParticleTime)
		;
	py::class_< FParticleEventCollideData, FParticleEventData >(m, "FParticleEventCollideData")
		.def_readwrite("ParticleTime", &FParticleEventCollideData::ParticleTime)
		.def_readwrite("Normal", &FParticleEventCollideData::Normal, py::return_value_policy::reference)
		.def_readwrite("Time", &FParticleEventCollideData::Time)
		.def_readwrite("Item", &FParticleEventCollideData::Item)
		.def_readwrite("BoneName", &FParticleEventCollideData::BoneName, py::return_value_policy::reference)
		;
	py::class_< FParticleEventTraceData, FParticleEventData >(m, "FParticleEventTraceData")
		.def_readwrite("ParticleTime", &FParticleEventTraceData::ParticleTime)
		;
	py::class_< FParticleEventKismetData, FParticleEventData >(m, "FParticleEventKismetData")
		.def_property("UsePSysCompLocation", [](FParticleEventKismetData &self){return self.UsePSysCompLocation;}, [](FParticleEventKismetData &self, bool value){self.UsePSysCompLocation = value ? 1 : 0;})
		.def_readwrite("Normal", &FParticleEventKismetData::Normal, py::return_value_policy::reference)
		;
	py::class_< FParticleEmitterInstanceMotionBlurInfo >(m, "FParticleEmitterInstanceMotionBlurInfo")
		.def_readwrite("ParticleMBInfoMap", &FParticleEmitterInstanceMotionBlurInfo::ParticleMBInfoMap, py::return_value_policy::reference)
		;
	py::class_< FParticleEmitterInstance >(m, "FParticleEmitterInstance")
		;
	py::class_< AEmitter_FCheckpointRecord >(m, "AEmitter_FCheckpointRecord")
		.def_property("bIsActive", [](AEmitter_FCheckpointRecord &self){return self.bIsActive;}, [](AEmitter_FCheckpointRecord &self, bool value){self.bIsActive = value ? 1 : 0;})
		;
	py::class_< FEmitterBaseInfo >(m, "FEmitterBaseInfo")
		.def_property("bInheritBaseScale", [](FEmitterBaseInfo &self){return self.bInheritBaseScale;}, [](FEmitterBaseInfo &self, bool value){self.bInheritBaseScale = value ? 1 : 0;})
		.def_readwrite("PSC", &FEmitterBaseInfo::PSC, py::return_value_policy::reference)
		.def_readwrite("Base", &FEmitterBaseInfo::Base, py::return_value_policy::reference)
		.def_readwrite("RelativeLocation", &FEmitterBaseInfo::RelativeLocation, py::return_value_policy::reference)
		.def_readwrite("RelativeRotation", &FEmitterBaseInfo::RelativeRotation, py::return_value_policy::reference)
		;
	py::class_< FParticleSystemLOD >(m, "FParticleSystemLOD")
		.def_property("bLit", [](FParticleSystemLOD &self){return self.bLit;}, [](FParticleSystemLOD &self, bool value){self.bLit = value ? 1 : 0;})
		;
	py::class_< FStatColorMapEntry >(m, "FStatColorMapEntry")
		.def_readwrite("In", &FStatColorMapEntry::In)
		.def_readwrite("Out", &FStatColorMapEntry::Out, py::return_value_policy::reference)
		;
	py::class_< FStatColorMapping >(m, "FStatColorMapping")
		.def_property("DisableBlend", [](FStatColorMapping &self){return self.DisableBlend;}, [](FStatColorMapping &self, bool value){self.DisableBlend = value ? 1 : 0;})
		.def_readwrite("StatName", &FStatColorMapping::StatName, py::return_value_policy::reference)
		.def_readwrite("ColorMap", &FStatColorMapping::ColorMap, py::return_value_policy::reference)
		;
	py::class_< FDropNoteInfo >(m, "FDropNoteInfo")
		.def_readwrite("Location", &FDropNoteInfo::Location, py::return_value_policy::reference)
		.def_readwrite("Rotation", &FDropNoteInfo::Rotation, py::return_value_policy::reference)
		.def_readwrite("Comment", &FDropNoteInfo::Comment, py::return_value_policy::reference)
		;
	py::class_< FPrimitiveMaterialRef >(m, "FPrimitiveMaterialRef")
		.def_readwrite("Primitive", &FPrimitiveMaterialRef::Primitive, py::return_value_policy::reference)
		.def_readwrite("MaterialIndex", &FPrimitiveMaterialRef::MaterialIndex)
		;
	py::class_< FPostProcessMaterialRef >(m, "FPostProcessMaterialRef")
		.def_readwrite("Effect", &FPostProcessMaterialRef::Effect, py::return_value_policy::reference)
		;
	py::class_< FMaterialReferenceList >(m, "FMaterialReferenceList")
		.def_readwrite("TargetMaterial", &FMaterialReferenceList::TargetMaterial, py::return_value_policy::reference)
		.def_readwrite("AffectedMaterialRefs", &FMaterialReferenceList::AffectedMaterialRefs, py::return_value_policy::reference)
		.def_readwrite("AffectedPPChainMaterialRefs", &FMaterialReferenceList::AffectedPPChainMaterialRefs, py::return_value_policy::reference)
		;
	py::class_< FVelocityObstacleStat >(m, "FVelocityObstacleStat")
		.def_readwrite("Position", &FVelocityObstacleStat::Position, py::return_value_policy::reference)
		.def_readwrite("Velocity", &FVelocityObstacleStat::Velocity, py::return_value_policy::reference)
		.def_readwrite("Radius", &FVelocityObstacleStat::Radius)
		.def_readwrite("Priority", &FVelocityObstacleStat::Priority)
		;
	py::class_< FGroupAnimationAndSoundIdentifier >(m, "FGroupAnimationAndSoundIdentifier")
		.def_readwrite("SoundNodeWaveName", &FGroupAnimationAndSoundIdentifier::SoundNodeWaveName, py::return_value_policy::reference)
		.def_readwrite("FaceFXGroupName", &FGroupAnimationAndSoundIdentifier::FaceFXGroupName, py::return_value_policy::reference)
		.def_readwrite("FaceFXAnimName", &FGroupAnimationAndSoundIdentifier::FaceFXAnimName, py::return_value_policy::reference)
		;
	py::class_< AFogVolumeDensityInfo_FCheckpointRecord >(m, "AFogVolumeDensityInfo_FCheckpointRecord")
		.def_property("bEnabled", [](AFogVolumeDensityInfo_FCheckpointRecord &self){return self.bEnabled;}, [](AFogVolumeDensityInfo_FCheckpointRecord &self, bool value){self.bEnabled = value ? 1 : 0;})
		;
	py::class_< FFoliageInstanceBase >(m, "FFoliageInstanceBase")
		.def_readwrite("Location", &FFoliageInstanceBase::Location, py::return_value_policy::reference)
		.def_readwrite("XAxis", &FFoliageInstanceBase::XAxis, py::return_value_policy::reference)
		.def_readwrite("YAxis", &FFoliageInstanceBase::YAxis, py::return_value_policy::reference)
		.def_readwrite("ZAxis", &FFoliageInstanceBase::ZAxis, py::return_value_policy::reference)
		.def_readwrite("DistanceFactorSquared", &FFoliageInstanceBase::DistanceFactorSquared)
		;
	py::class_< FStoredFoliageInstance, FFoliageInstanceBase >(m, "FStoredFoliageInstance")
		;
	py::class_< FFoliageMesh >(m, "FFoliageMesh")
		.def_property("bCreateInstancesOnBSP", [](FFoliageMesh &self){return self.bCreateInstancesOnBSP;}, [](FFoliageMesh &self, bool value){self.bCreateInstancesOnBSP = value ? 1 : 0;})
		.def_property("bCreateInstancesOnStaticMeshes", [](FFoliageMesh &self){return self.bCreateInstancesOnStaticMeshes;}, [](FFoliageMesh &self, bool value){self.bCreateInstancesOnStaticMeshes = value ? 1 : 0;})
		.def_property("bCreateInstancesOnTerrain", [](FFoliageMesh &self){return self.bCreateInstancesOnTerrain;}, [](FFoliageMesh &self, bool value){self.bCreateInstancesOnTerrain = value ? 1 : 0;})
		.def_readwrite("InstanceStaticMesh", &FFoliageMesh::InstanceStaticMesh, py::return_value_policy::reference)
		.def_readwrite("Material", &FFoliageMesh::Material, py::return_value_policy::reference)
		.def_readwrite("MaxDrawRadius", &FFoliageMesh::MaxDrawRadius)
		.def_readwrite("MinTransitionRadius", &FFoliageMesh::MinTransitionRadius)
		.def_readwrite("MinThinningRadius", &FFoliageMesh::MinThinningRadius)
		.def_readwrite("MinScale", &FFoliageMesh::MinScale, py::return_value_policy::reference)
		.def_readwrite("MaxScale", &FFoliageMesh::MaxScale, py::return_value_policy::reference)
		.def_readwrite("MinUniformScale", &FFoliageMesh::MinUniformScale)
		.def_readwrite("MaxUniformScale", &FFoliageMesh::MaxUniformScale)
		.def_readwrite("SwayScale", &FFoliageMesh::SwayScale)
		.def_readwrite("Seed", &FFoliageMesh::Seed)
		.def_readwrite("SurfaceAreaPerInstance", &FFoliageMesh::SurfaceAreaPerInstance)
		.def_readwrite("Component", &FFoliageMesh::Component, py::return_value_policy::reference)
		;
	py::class_< FFontImportOptionsData >(m, "FFontImportOptionsData")
		.def_property("bEnableAntialiasing", [](FFontImportOptionsData &self){return self.bEnableAntialiasing;}, [](FFontImportOptionsData &self, bool value){self.bEnableAntialiasing = value ? 1 : 0;})
		.def_property("bEnableBold", [](FFontImportOptionsData &self){return self.bEnableBold;}, [](FFontImportOptionsData &self, bool value){self.bEnableBold = value ? 1 : 0;})
		.def_property("bEnableItalic", [](FFontImportOptionsData &self){return self.bEnableItalic;}, [](FFontImportOptionsData &self, bool value){self.bEnableItalic = value ? 1 : 0;})
		.def_property("bEnableUnderline", [](FFontImportOptionsData &self){return self.bEnableUnderline;}, [](FFontImportOptionsData &self, bool value){self.bEnableUnderline = value ? 1 : 0;})
		.def_property("bAlphaOnly", [](FFontImportOptionsData &self){return self.bAlphaOnly;}, [](FFontImportOptionsData &self, bool value){self.bAlphaOnly = value ? 1 : 0;})
		.def_property("bCreatePrintableOnly", [](FFontImportOptionsData &self){return self.bCreatePrintableOnly;}, [](FFontImportOptionsData &self, bool value){self.bCreatePrintableOnly = value ? 1 : 0;})
		.def_property("bIncludeASCIIRange", [](FFontImportOptionsData &self){return self.bIncludeASCIIRange;}, [](FFontImportOptionsData &self, bool value){self.bIncludeASCIIRange = value ? 1 : 0;})
		.def_property("bEnableDropShadow", [](FFontImportOptionsData &self){return self.bEnableDropShadow;}, [](FFontImportOptionsData &self, bool value){self.bEnableDropShadow = value ? 1 : 0;})
		.def_property("bEnableLegacyMode", [](FFontImportOptionsData &self){return self.bEnableLegacyMode;}, [](FFontImportOptionsData &self, bool value){self.bEnableLegacyMode = value ? 1 : 0;})
		.def_property("bUseDistanceFieldAlpha", [](FFontImportOptionsData &self){return self.bUseDistanceFieldAlpha;}, [](FFontImportOptionsData &self, bool value){self.bUseDistanceFieldAlpha = value ? 1 : 0;})
		.def_readwrite("FontName", &FFontImportOptionsData::FontName, py::return_value_policy::reference)
		.def_readwrite("Height", &FFontImportOptionsData::Height)
		.def_readwrite("CharacterSet", &FFontImportOptionsData::CharacterSet)
		.def_readwrite("Chars", &FFontImportOptionsData::Chars, py::return_value_policy::reference)
		.def_readwrite("UnicodeRange", &FFontImportOptionsData::UnicodeRange, py::return_value_policy::reference)
		.def_readwrite("CharsFilePath", &FFontImportOptionsData::CharsFilePath, py::return_value_policy::reference)
		.def_readwrite("CharsFileWildcard", &FFontImportOptionsData::CharsFileWildcard, py::return_value_policy::reference)
		.def_readwrite("ForegroundColor", &FFontImportOptionsData::ForegroundColor, py::return_value_policy::reference)
		.def_readwrite("TexturePageWidth", &FFontImportOptionsData::TexturePageWidth)
		.def_readwrite("TexturePageMaxHeight", &FFontImportOptionsData::TexturePageMaxHeight)
		.def_readwrite("XPadding", &FFontImportOptionsData::XPadding)
		.def_readwrite("YPadding", &FFontImportOptionsData::YPadding)
		.def_readwrite("ExtendBoxTop", &FFontImportOptionsData::ExtendBoxTop)
		.def_readwrite("ExtendBoxBottom", &FFontImportOptionsData::ExtendBoxBottom)
		.def_readwrite("ExtendBoxRight", &FFontImportOptionsData::ExtendBoxRight)
		.def_readwrite("ExtendBoxLeft", &FFontImportOptionsData::ExtendBoxLeft)
		.def_readwrite("Kerning", &FFontImportOptionsData::Kerning)
		.def_readwrite("DistanceFieldScaleFactor", &FFontImportOptionsData::DistanceFieldScaleFactor)
		.def_readwrite("DistanceFieldScanRadiusScale", &FFontImportOptionsData::DistanceFieldScanRadiusScale)
		;
	py::class_< FFontCharacter >(m, "FFontCharacter")
		.def_readwrite("StartU", &FFontCharacter::StartU)
		.def_readwrite("StartV", &FFontCharacter::StartV)
		.def_readwrite("USize", &FFontCharacter::USize)
		.def_readwrite("VSize", &FFontCharacter::VSize)
		.def_readwrite("TextureIndex", &FFontCharacter::TextureIndex)
		.def_readwrite("VerticalOffset", &FFontCharacter::VerticalOffset)
		;
	py::class_< FWaveformSample >(m, "FWaveformSample")
		.def_readwrite("LeftAmplitude", &FWaveformSample::LeftAmplitude)
		.def_readwrite("RightAmplitude", &FWaveformSample::RightAmplitude)
		.def_readwrite("LeftFunction", &FWaveformSample::LeftFunction)
		.def_readwrite("RightFunction", &FWaveformSample::RightFunction)
		.def_readwrite("Duration", &FWaveformSample::Duration)
		;
	py::class_< FLevelStreamingStatus >(m, "FLevelStreamingStatus")
		.def_property("bShouldBeLoaded", [](FLevelStreamingStatus &self){return self.bShouldBeLoaded;}, [](FLevelStreamingStatus &self, bool value){self.bShouldBeLoaded = value ? 1 : 0;})
		.def_property("bShouldBeVisible", [](FLevelStreamingStatus &self){return self.bShouldBeVisible;}, [](FLevelStreamingStatus &self, bool value){self.bShouldBeVisible = value ? 1 : 0;})
		.def_readwrite("PackageName", &FLevelStreamingStatus::PackageName, py::return_value_policy::reference)
		;
	py::class_< FFullyLoadedPackagesInfo >(m, "FFullyLoadedPackagesInfo")
		.def_readwrite("FullyLoadType", &FFullyLoadedPackagesInfo::FullyLoadType)
		.def_readwrite("Tag", &FFullyLoadedPackagesInfo::Tag, py::return_value_policy::reference)
		.def_readwrite("PackagesToLoad", &FFullyLoadedPackagesInfo::PackagesToLoad, py::return_value_policy::reference)
		.def_readwrite("LoadedObjects", &FFullyLoadedPackagesInfo::LoadedObjects, py::return_value_policy::reference)
		;
	py::class_< FNamedNetDriver >(m, "FNamedNetDriver")
		.def_readwrite("NetDriverName", &FNamedNetDriver::NetDriverName, py::return_value_policy::reference)
		.def_readwrite("NetDriver", &FNamedNetDriver::NetDriver, py::return_value_policy::reference)
		;
	py::class_< FAnimTag >(m, "FAnimTag")
		.def_readwrite("Tag", &FAnimTag::Tag, py::return_value_policy::reference)
		.def_readwrite("Contains", &FAnimTag::Contains, py::return_value_policy::reference)
		;
	py::class_< FURL >(m, "FURL")
		.def_readwrite("Protocol", &FURL::Protocol, py::return_value_policy::reference)
		.def_readwrite("Host", &FURL::Host, py::return_value_policy::reference)
		.def_readwrite("Port", &FURL::Port)
		.def_readwrite("Map", &FURL::Map, py::return_value_policy::reference)
		.def_readwrite("Op", &FURL::Op, py::return_value_policy::reference)
		.def_readwrite("Portal", &FURL::Portal, py::return_value_policy::reference)
		.def_readwrite("Valid", &FURL::Valid)
		;
	py::class_< FGameClassShortName >(m, "FGameClassShortName")
		.def_readwrite("ShortName", &FGameClassShortName::ShortName, py::return_value_policy::reference)
		.def_readwrite("GameClassName", &FGameClassShortName::GameClassName, py::return_value_policy::reference)
		;
	py::class_< FGameTypePrefix >(m, "FGameTypePrefix")
		.def_property("bUsesCommonPackage", [](FGameTypePrefix &self){return self.bUsesCommonPackage;}, [](FGameTypePrefix &self, bool value){self.bUsesCommonPackage = value ? 1 : 0;})
		.def_readwrite("Prefix", &FGameTypePrefix::Prefix, py::return_value_policy::reference)
		.def_readwrite("GameType", &FGameTypePrefix::GameType, py::return_value_policy::reference)
		.def_readwrite("AdditionalGameTypes", &FGameTypePrefix::AdditionalGameTypes, py::return_value_policy::reference)
		.def_readwrite("ForcedObjects", &FGameTypePrefix::ForcedObjects, py::return_value_policy::reference)
		;
	py::class_< FPlayerInformation >(m, "FPlayerInformation")
		.def_property("bIsBot", [](FPlayerInformation &self){return self.bIsBot;}, [](FPlayerInformation &self, bool value){self.bIsBot = value ? 1 : 0;})
		.def_readwrite("ControllerName", &FPlayerInformation::ControllerName, py::return_value_policy::reference)
		.def_readwrite("PlayerName", &FPlayerInformation::PlayerName, py::return_value_policy::reference)
		.def_readwrite("UniqueId", &FPlayerInformation::UniqueId, py::return_value_policy::reference)
		;
	py::class_< FTeamInformation >(m, "FTeamInformation")
		.def_readwrite("TeamIndex", &FTeamInformation::TeamIndex)
		.def_readwrite("TeamName", &FTeamInformation::TeamName, py::return_value_policy::reference)
		.def_readwrite("TeamColor", &FTeamInformation::TeamColor, py::return_value_policy::reference)
		.def_readwrite("MaxSize", &FTeamInformation::MaxSize)
		;
	py::class_< FGameStatGroup >(m, "FGameStatGroup")
		.def_readwrite("Group", &FGameStatGroup::Group)
		.def_readwrite("Level", &FGameStatGroup::Level)
		;
	py::class_< FGameplayEventMetaData >(m, "FGameplayEventMetaData")
		.def_readwrite("EventID", &FGameplayEventMetaData::EventID)
		.def_readwrite("EventName", &FGameplayEventMetaData::EventName, py::return_value_policy::reference)
		.def_readwrite("StatGroup", &FGameplayEventMetaData::StatGroup, py::return_value_policy::reference)
		.def_readwrite("EventDataType", &FGameplayEventMetaData::EventDataType)
		;
	py::class_< FWeaponClassEventData >(m, "FWeaponClassEventData")
		.def_readwrite("WeaponClassName", &FWeaponClassEventData::WeaponClassName, py::return_value_policy::reference)
		;
	py::class_< FDamageClassEventData >(m, "FDamageClassEventData")
		.def_readwrite("DamageClassName", &FDamageClassEventData::DamageClassName, py::return_value_policy::reference)
		;
	py::class_< FProjectileClassEventData >(m, "FProjectileClassEventData")
		.def_readwrite("ProjectileClassName", &FProjectileClassEventData::ProjectileClassName, py::return_value_policy::reference)
		;
	py::class_< FPawnClassEventData >(m, "FPawnClassEventData")
		.def_readwrite("PawnClassName", &FPawnClassEventData::PawnClassName, py::return_value_policy::reference)
		;
	py::class_< FGameplayEventsHeader >(m, "FGameplayEventsHeader")
		.def_readwrite("EngineVersion", &FGameplayEventsHeader::EngineVersion)
		.def_readwrite("StatsWriterVersion", &FGameplayEventsHeader::StatsWriterVersion)
		.def_readwrite("StreamOffset", &FGameplayEventsHeader::StreamOffset)
		.def_readwrite("AggregateOffset", &FGameplayEventsHeader::AggregateOffset)
		.def_readwrite("FooterOffset", &FGameplayEventsHeader::FooterOffset)
		.def_readwrite("TotalStreamSize", &FGameplayEventsHeader::TotalStreamSize)
		.def_readwrite("FileSize", &FGameplayEventsHeader::FileSize)
		.def_readwrite("FilterClass", &FGameplayEventsHeader::FilterClass, py::return_value_policy::reference)
		.def_readwrite("Flags", &FGameplayEventsHeader::Flags)
		;
	py::class_< FGameSessionInformation >(m, "FGameSessionInformation")
		.def_property("bGameplaySessionInProgress", [](FGameSessionInformation &self){return self.bGameplaySessionInProgress;}, [](FGameSessionInformation &self, bool value){self.bGameplaySessionInProgress = value ? 1 : 0;})
		.def_readwrite("AppTitleID", &FGameSessionInformation::AppTitleID)
		.def_readwrite("PlatformType", &FGameSessionInformation::PlatformType)
		.def_readwrite("Language", &FGameSessionInformation::Language, py::return_value_policy::reference)
		.def_readwrite("GameplaySessionTimestamp", &FGameSessionInformation::GameplaySessionTimestamp, py::return_value_policy::reference)
		.def_readwrite("GameplaySessionStartTime", &FGameSessionInformation::GameplaySessionStartTime)
		.def_readwrite("GameplaySessionEndTime", &FGameSessionInformation::GameplaySessionEndTime)
		.def_readwrite("GameplaySessionID", &FGameSessionInformation::GameplaySessionID, py::return_value_policy::reference)
		.def_readwrite("GameClassName", &FGameSessionInformation::GameClassName, py::return_value_policy::reference)
		.def_readwrite("MapName", &FGameSessionInformation::MapName, py::return_value_policy::reference)
		.def_readwrite("MapURL", &FGameSessionInformation::MapURL, py::return_value_policy::reference)
		.def_readwrite("SessionInstance", &FGameSessionInformation::SessionInstance)
		.def_readwrite("GameTypeId", &FGameSessionInformation::GameTypeId)
		.def_readwrite("OwningNetId", &FGameSessionInformation::OwningNetId, py::return_value_policy::reference)
		.def_readwrite("PlaylistId", &FGameSessionInformation::PlaylistId)
		;
	py::class_< FMusicStateInfo >(m, "FMusicStateInfo")
		.def_readwrite("State", &FMusicStateInfo::State)
		.def_readwrite("CustomCombatMusicAkState", &FMusicStateInfo::CustomCombatMusicAkState, py::return_value_policy::reference)
		.def_readwrite("CustomAmbientMusicAkState", &FMusicStateInfo::CustomAmbientMusicAkState, py::return_value_policy::reference)
		;
	py::class_< FMusicTrackStruct >(m, "FMusicTrackStruct")
		.def_property("bAutoPlay", [](FMusicTrackStruct &self){return self.bAutoPlay;}, [](FMusicTrackStruct &self, bool value){self.bAutoPlay = value ? 1 : 0;})
		.def_property("bPersistentAcrossLevels", [](FMusicTrackStruct &self){return self.bPersistentAcrossLevels;}, [](FMusicTrackStruct &self, bool value){self.bPersistentAcrossLevels = value ? 1 : 0;})
		.def_readwrite("TheSoundCue", &FMusicTrackStruct::TheSoundCue, py::return_value_policy::reference)
		.def_readwrite("FadeInTime", &FMusicTrackStruct::FadeInTime)
		.def_readwrite("FadeInVolumeLevel", &FMusicTrackStruct::FadeInVolumeLevel)
		.def_readwrite("FadeOutTime", &FMusicTrackStruct::FadeOutTime)
		.def_readwrite("FadeOutVolumeLevel", &FMusicTrackStruct::FadeOutVolumeLevel)
		.def_readwrite("MP3Filename", &FMusicTrackStruct::MP3Filename, py::return_value_policy::reference)
		;
	py::class_< FNavMeshPathGoalEvaluatorCacheDatum >(m, "FNavMeshPathGoalEvaluatorCacheDatum")
		.def_readwrite("ListIdx", &FNavMeshPathGoalEvaluatorCacheDatum::ListIdx)
		;
	py::class_< FPhysXEmitterVerticalProperties >(m, "FPhysXEmitterVerticalProperties")
		.def_property("bDisableLod", [](FPhysXEmitterVerticalProperties &self){return self.bDisableLod;}, [](FPhysXEmitterVerticalProperties &self, bool value){self.bDisableLod = value ? 1 : 0;})
		.def_property("bApplyCylindricalPacketCulling", [](FPhysXEmitterVerticalProperties &self){return self.bApplyCylindricalPacketCulling;}, [](FPhysXEmitterVerticalProperties &self, bool value){self.bApplyCylindricalPacketCulling = value ? 1 : 0;})
		.def_readwrite("ParticlesLodMin", &FPhysXEmitterVerticalProperties::ParticlesLodMin)
		.def_readwrite("ParticlesLodMax", &FPhysXEmitterVerticalProperties::ParticlesLodMax)
		.def_readwrite("PacketsPerPhysXParticleSystemMax", &FPhysXEmitterVerticalProperties::PacketsPerPhysXParticleSystemMax)
		.def_readwrite("SpawnLodVsFifoBias", &FPhysXEmitterVerticalProperties::SpawnLodVsFifoBias)
		;
	py::class_< FPhysXVerticalProperties >(m, "FPhysXVerticalProperties")
		.def_readwrite("Emitters", &FPhysXVerticalProperties::Emitters, py::return_value_policy::reference)
		;
	py::class_< FHostMigrationState >(m, "FHostMigrationState")
		.def_property("bHostMigrationEnabled", [](FHostMigrationState &self){return self.bHostMigrationEnabled;}, [](FHostMigrationState &self, bool value){self.bHostMigrationEnabled = value ? 1 : 0;})
		.def_readwrite("HostMigrationProgress", &FHostMigrationState::HostMigrationProgress)
		.def_readwrite("HostMigrationElapsedTime", &FHostMigrationState::HostMigrationElapsedTime)
		.def_readwrite("HostMigrationTravelCountdown", &FHostMigrationState::HostMigrationTravelCountdown)
		.def_readwrite("HostMigrationTravelURL", &FHostMigrationState::HostMigrationTravelURL, py::return_value_policy::reference)
		;
	py::class_< FNavigationArea >(m, "FNavigationArea")
		.def_readwrite("AreaName", &FNavigationArea::AreaName, py::return_value_policy::reference)
		.def_readwrite("AreaColor", &FNavigationArea::AreaColor, py::return_value_policy::reference)
		;
	py::class_< FWorldFractureSettings >(m, "FWorldFractureSettings")
		.def_property("bEnableChanceOfPhysicsChunkOverride", [](FWorldFractureSettings &self){return self.bEnableChanceOfPhysicsChunkOverride;}, [](FWorldFractureSettings &self, bool value){self.bEnableChanceOfPhysicsChunkOverride = value ? 1 : 0;})
		.def_property("bLimitExplosionChunkSize", [](FWorldFractureSettings &self){return self.bLimitExplosionChunkSize;}, [](FWorldFractureSettings &self, bool value){self.bLimitExplosionChunkSize = value ? 1 : 0;})
		.def_property("bLimitDamageChunkSize", [](FWorldFractureSettings &self){return self.bLimitDamageChunkSize;}, [](FWorldFractureSettings &self, bool value){self.bLimitDamageChunkSize = value ? 1 : 0;})
		.def_readwrite("ChanceOfPhysicsChunkOverride", &FWorldFractureSettings::ChanceOfPhysicsChunkOverride)
		.def_readwrite("MaxExplosionChunkSize", &FWorldFractureSettings::MaxExplosionChunkSize)
		.def_readwrite("MaxDamageChunkSize", &FWorldFractureSettings::MaxDamageChunkSize)
		.def_readwrite("MaxNumFacturedChunksToSpawnInAFrame", &FWorldFractureSettings::MaxNumFacturedChunksToSpawnInAFrame)
		.def_readwrite("FractureExplosionVelScale", &FWorldFractureSettings::FractureExplosionVelScale)
		;
	py::class_< FNavMeshPathConstraintCacheDatum >(m, "FNavMeshPathConstraintCacheDatum")
		.def_readwrite("ListIdx", &FNavMeshPathConstraintCacheDatum::ListIdx)
		;
	py::class_< FLightmassWorldInfoSettings >(m, "FLightmassWorldInfoSettings")
		.def_property("bUseAmbientOcclusion", [](FLightmassWorldInfoSettings &self){return self.bUseAmbientOcclusion;}, [](FLightmassWorldInfoSettings &self, bool value){self.bUseAmbientOcclusion = value ? 1 : 0;})
		.def_property("bVisualizeMaterialDiffuse", [](FLightmassWorldInfoSettings &self){return self.bVisualizeMaterialDiffuse;}, [](FLightmassWorldInfoSettings &self, bool value){self.bVisualizeMaterialDiffuse = value ? 1 : 0;})
		.def_property("bVisualizeAmbientOcclusion", [](FLightmassWorldInfoSettings &self){return self.bVisualizeAmbientOcclusion;}, [](FLightmassWorldInfoSettings &self, bool value){self.bVisualizeAmbientOcclusion = value ? 1 : 0;})
		.def_property("bCompressShadowmap", [](FLightmassWorldInfoSettings &self){return self.bCompressShadowmap;}, [](FLightmassWorldInfoSettings &self, bool value){self.bCompressShadowmap = value ? 1 : 0;})
		.def_readwrite("StaticLightingLevelScale", &FLightmassWorldInfoSettings::StaticLightingLevelScale)
		.def_readwrite("NumIndirectLightingBounces", &FLightmassWorldInfoSettings::NumIndirectLightingBounces)
		.def_readwrite("EnvironmentColor", &FLightmassWorldInfoSettings::EnvironmentColor, py::return_value_policy::reference)
		.def_readwrite("EnvironmentIntensity", &FLightmassWorldInfoSettings::EnvironmentIntensity)
		.def_readwrite("EmissiveBoost", &FLightmassWorldInfoSettings::EmissiveBoost)
		.def_readwrite("DiffuseBoost", &FLightmassWorldInfoSettings::DiffuseBoost)
		.def_readwrite("SpecularBoost", &FLightmassWorldInfoSettings::SpecularBoost)
		.def_readwrite("IndirectNormalInfluenceBoost", &FLightmassWorldInfoSettings::IndirectNormalInfluenceBoost)
		.def_readwrite("DirectIlluminationOcclusionFraction", &FLightmassWorldInfoSettings::DirectIlluminationOcclusionFraction)
		.def_readwrite("IndirectIlluminationOcclusionFraction", &FLightmassWorldInfoSettings::IndirectIlluminationOcclusionFraction)
		.def_readwrite("OcclusionExponent", &FLightmassWorldInfoSettings::OcclusionExponent)
		.def_readwrite("FullyOccludedSamplesFraction", &FLightmassWorldInfoSettings::FullyOccludedSamplesFraction)
		.def_readwrite("MaxOcclusionDistance", &FLightmassWorldInfoSettings::MaxOcclusionDistance)
		;
	py::class_< FScreenMessageString >(m, "FScreenMessageString")
		.def_readwrite("Key", &FScreenMessageString::Key, py::return_value_policy::reference)
		.def_readwrite("ScreenMessage", &FScreenMessageString::ScreenMessage, py::return_value_policy::reference)
		.def_readwrite("DisplayColor", &FScreenMessageString::DisplayColor, py::return_value_policy::reference)
		.def_readwrite("TimeToDisplay", &FScreenMessageString::TimeToDisplay)
		.def_readwrite("CurrentTimeDisplayed", &FScreenMessageString::CurrentTimeDisplayed)
		;
	py::class_< FApexModuleDestructibleSettings >(m, "FApexModuleDestructibleSettings")
		.def_property("bOverrideMaxChunkSeparationLOD", [](FApexModuleDestructibleSettings &self){return self.bOverrideMaxChunkSeparationLOD;}, [](FApexModuleDestructibleSettings &self, bool value){self.bOverrideMaxChunkSeparationLOD = value ? 1 : 0;})
		.def_readwrite("MaxChunkIslandCount", &FApexModuleDestructibleSettings::MaxChunkIslandCount)
		.def_readwrite("MaxRrbActorCount", &FApexModuleDestructibleSettings::MaxRrbActorCount)
		.def_readwrite("MaxChunkSeparationLOD", &FApexModuleDestructibleSettings::MaxChunkSeparationLOD)
		;
	py::class_< FPhysXSimulationProperties >(m, "FPhysXSimulationProperties")
		.def_property("bUseHardware", [](FPhysXSimulationProperties &self){return self.bUseHardware;}, [](FPhysXSimulationProperties &self, bool value){self.bUseHardware = value ? 1 : 0;})
		.def_property("bFixedTimeStep", [](FPhysXSimulationProperties &self){return self.bFixedTimeStep;}, [](FPhysXSimulationProperties &self, bool value){self.bFixedTimeStep = value ? 1 : 0;})
		.def_readwrite("TimeStep", &FPhysXSimulationProperties::TimeStep)
		.def_readwrite("MaxSubSteps", &FPhysXSimulationProperties::MaxSubSteps)
		;
	py::class_< FPhysXSceneProperties >(m, "FPhysXSceneProperties")
		.def_readwrite("PrimaryScene", &FPhysXSceneProperties::PrimaryScene, py::return_value_policy::reference)
		.def_readwrite("CompartmentRigidBody", &FPhysXSceneProperties::CompartmentRigidBody, py::return_value_policy::reference)
		.def_readwrite("CompartmentFluid", &FPhysXSceneProperties::CompartmentFluid, py::return_value_policy::reference)
		.def_readwrite("CompartmentCloth", &FPhysXSceneProperties::CompartmentCloth, py::return_value_policy::reference)
		.def_readwrite("CompartmentSoftBody", &FPhysXSceneProperties::CompartmentSoftBody, py::return_value_policy::reference)
		;
	py::class_< FCompartmentRunList >(m, "FCompartmentRunList")
		.def_property("RigidBody", [](FCompartmentRunList &self){return self.RigidBody;}, [](FCompartmentRunList &self, bool value){self.RigidBody = value ? 1 : 0;})
		.def_property("Fluid", [](FCompartmentRunList &self){return self.Fluid;}, [](FCompartmentRunList &self, bool value){self.Fluid = value ? 1 : 0;})
		.def_property("Cloth", [](FCompartmentRunList &self){return self.Cloth;}, [](FCompartmentRunList &self, bool value){self.Cloth = value ? 1 : 0;})
		.def_property("SoftBody", [](FCompartmentRunList &self){return self.SoftBody;}, [](FCompartmentRunList &self, bool value){self.SoftBody = value ? 1 : 0;})
		;
	py::class_< FNetViewer >(m, "FNetViewer")
		.def_readwrite("InViewer", &FNetViewer::InViewer, py::return_value_policy::reference)
		.def_readwrite("Viewer", &FNetViewer::Viewer, py::return_value_policy::reference)
		.def_readwrite("ViewLocation", &FNetViewer::ViewLocation, py::return_value_policy::reference)
		.def_readwrite("ViewDir", &FNetViewer::ViewDir, py::return_value_policy::reference)
		;
	py::class_< FLevelGroup >(m, "FLevelGroup")
		.def_property("bCollapsed", [](FLevelGroup &self){return self.bCollapsed;}, [](FLevelGroup &self, bool value){self.bCollapsed = value ? 1 : 0;})
		.def_readwrite("GroupColor", &FLevelGroup::GroupColor, py::return_value_policy::reference)
		.def_readwrite("Levels", &FLevelGroup::Levels, py::return_value_policy::reference)
		.def_readwrite("LevelGridVolumes", &FLevelGroup::LevelGridVolumes, py::return_value_policy::reference)
		.def_readwrite("GroupName", &FLevelGroup::GroupName, py::return_value_policy::reference)
		;
	py::class_< FTitleSafeZoneArea >(m, "FTitleSafeZoneArea")
		.def_readwrite("MaxPercentX", &FTitleSafeZoneArea::MaxPercentX)
		.def_readwrite("MaxPercentY", &FTitleSafeZoneArea::MaxPercentY)
		.def_readwrite("RecommendedPercentX", &FTitleSafeZoneArea::RecommendedPercentX)
		.def_readwrite("RecommendedPercentY", &FTitleSafeZoneArea::RecommendedPercentY)
		;
	py::class_< FPerPlayerSplitscreenData >(m, "FPerPlayerSplitscreenData")
		.def_readwrite("SizeX", &FPerPlayerSplitscreenData::SizeX)
		.def_readwrite("SizeY", &FPerPlayerSplitscreenData::SizeY)
		.def_readwrite("OriginX", &FPerPlayerSplitscreenData::OriginX)
		.def_readwrite("OriginY", &FPerPlayerSplitscreenData::OriginY)
		;
	py::class_< FSplitscreenData >(m, "FSplitscreenData")
		.def_readwrite("PlayerData", &FSplitscreenData::PlayerData, py::return_value_policy::reference)
		;
	py::class_< FDebugDisplayProperty >(m, "FDebugDisplayProperty")
		.def_property("bSpecialProperty", [](FDebugDisplayProperty &self){return self.bSpecialProperty;}, [](FDebugDisplayProperty &self, bool value){self.bSpecialProperty = value ? 1 : 0;})
		.def_readwrite("Obj", &FDebugDisplayProperty::Obj, py::return_value_policy::reference)
		.def_readwrite("PropertyName", &FDebugDisplayProperty::PropertyName, py::return_value_policy::reference)
		;
	py::class_< FGBXConnectedNavMesh >(m, "FGBXConnectedNavMesh")
		.def_readwrite("Mesh", &FGBXConnectedNavMesh::Mesh, py::return_value_policy::reference)
		.def_readwrite("MeshID", &FGBXConnectedNavMesh::MeshID)
		;
	py::class_< FGBXNavMeshVertex, FVector >(m, "FGBXNavMeshVertex")
		;
	py::class_< FGBXNavMeshPoly >(m, "FGBXNavMeshPoly")
		;
	py::class_< FGBXNavmeshCrossLevelConnection >(m, "FGBXNavmeshCrossLevelConnection")
		;
	py::class_< FGBXNavMeshSpecialMove >(m, "FGBXNavMeshSpecialMove")
		.def_readwrite("DestinationPolyIdx", &FGBXNavMeshSpecialMove::DestinationPolyIdx)
		.def_readwrite("DestinationMeshIdx", &FGBXNavMeshSpecialMove::DestinationMeshIdx)
		.def_readwrite("CrossLevelMoverIdx", &FGBXNavMeshSpecialMove::CrossLevelMoverIdx)
		.def_readwrite("ActorSpecialMoveId", &FGBXNavMeshSpecialMove::ActorSpecialMoveId)
		.def_readwrite("Mover", &FGBXNavMeshSpecialMove::Mover, py::return_value_policy::reference)
		.def_readwrite("LocalSpaceSrcLocation", &FGBXNavMeshSpecialMove::LocalSpaceSrcLocation, py::return_value_policy::reference)
		.def_readwrite("LocalSpaceDestLocation", &FGBXNavMeshSpecialMove::LocalSpaceDestLocation, py::return_value_policy::reference)
		;
	py::class_< FGBXNavMeshPolyData >(m, "FGBXNavMeshPolyData")
		.def_readwrite("CrossLevelConnections", &FGBXNavMeshPolyData::CrossLevelConnections, py::return_value_policy::reference)
		.def_readwrite("SpecialMoves", &FGBXNavMeshPolyData::SpecialMoves, py::return_value_policy::reference)
		;
	py::class_< FGBXNavMeshPathSize >(m, "FGBXNavMeshPathSize")
		.def_readwrite("Radius", &FGBXNavMeshPathSize::Radius)
		.def_readwrite("Height", &FGBXNavMeshPathSize::Height)
		.def_readwrite("DrawColor", &FGBXNavMeshPathSize::DrawColor, py::return_value_policy::reference)
		.def_readwrite("ObstacleDrawColor", &FGBXNavMeshPathSize::ObstacleDrawColor, py::return_value_policy::reference)
		.def_readwrite("StartIndex", &FGBXNavMeshPathSize::StartIndex)
		;
	py::class_< FGBXNavMeshObstacleData >(m, "FGBXNavMeshObstacleData")
		.def_readwrite("Obstacle", &FGBXNavMeshObstacleData::Obstacle, py::return_value_policy::reference)
		.def_readwrite("MinAffectedPathSize", &FGBXNavMeshObstacleData::MinAffectedPathSize)
		;
	py::class_< FGBXNavMeshPolyRef >(m, "FGBXNavMeshPolyRef")
		.def_readwrite("NavMesh", &FGBXNavMeshPolyRef::NavMesh, py::return_value_policy::reference)
		.def_readwrite("PolyIdx", &FGBXNavMeshPolyRef::PolyIdx)
		;
	py::class_< FGBXNavMeshLookupCell >(m, "FGBXNavMeshLookupCell")
		.def_readwrite("IntersectingPolys", &FGBXNavMeshLookupCell::IntersectingPolys, py::return_value_policy::reference)
		;
	py::class_< FGBXNavMeshPolyLookup >(m, "FGBXNavMeshPolyLookup")
		.def_readwrite("XCells", &FGBXNavMeshPolyLookup::XCells)
		.def_readwrite("YCells", &FGBXNavMeshPolyLookup::YCells)
		.def_readwrite("Origin", &FGBXNavMeshPolyLookup::Origin, py::return_value_policy::reference)
		.def_readwrite("CellSize", &FGBXNavMeshPolyLookup::CellSize, py::return_value_policy::reference)
		.def_readwrite("CellIndices", &FGBXNavMeshPolyLookup::CellIndices, py::return_value_policy::reference)
		.def_readwrite("Cells", &FGBXNavMeshPolyLookup::Cells, py::return_value_policy::reference)
		;
	py::class_< FGBXLineCheckResult >(m, "FGBXLineCheckResult")
		.def_readwrite("Location", &FGBXLineCheckResult::Location, py::return_value_policy::reference)
		.def_readwrite("Normal", &FGBXLineCheckResult::Normal, py::return_value_policy::reference)
		.def_readwrite("Time", &FGBXLineCheckResult::Time)
		;
	py::class_< FIGBXNavMeshObstaclePointer >(m, "FIGBXNavMeshObstaclePointer")
		.def_readwrite("Dummy", &FIGBXNavMeshObstaclePointer::Dummy, py::return_value_policy::reference)
		;
	py::class_< FGBXNavMeshPathPoint >(m, "FGBXNavMeshPathPoint")
		.def_readwrite("Poly", &FGBXNavMeshPathPoint::Poly, py::return_value_policy::reference)
		.def_readwrite("Location", &FGBXNavMeshPathPoint::Location, py::return_value_policy::reference)
		.def_readwrite("SpecialMoveId", &FGBXNavMeshPathPoint::SpecialMoveId)
		.def_readwrite("NextPathObjectDistance", &FGBXNavMeshPathPoint::NextPathObjectDistance)
		.def_readwrite("CrossedObstacles", &FGBXNavMeshPathPoint::CrossedObstacles, py::return_value_policy::reference)
		;
	py::class_< FGBXNavMeshPath >(m, "FGBXNavMeshPath")
		.def_readwrite("PathPoints", &FGBXNavMeshPath::PathPoints, py::return_value_policy::reference)
		.def_readwrite("CurrentPathIdx", &FGBXNavMeshPath::CurrentPathIdx)
		;
	py::class_< FNavMeshPathParams >(m, "FNavMeshPathParams")
		.def_property("bCanMantle", [](FNavMeshPathParams &self){return self.bCanMantle;}, [](FNavMeshPathParams &self, bool value){self.bCanMantle = value ? 1 : 0;})
		.def_property("bCanPhysicsJump", [](FNavMeshPathParams &self){return self.bCanPhysicsJump;}, [](FNavMeshPathParams &self, bool value){self.bCanPhysicsJump = value ? 1 : 0;})
		.def_property("bNeedsMantleValidityTest", [](FNavMeshPathParams &self){return self.bNeedsMantleValidityTest;}, [](FNavMeshPathParams &self, bool value){self.bNeedsMantleValidityTest = value ? 1 : 0;})
		.def_property("bAbleToSearch", [](FNavMeshPathParams &self){return self.bAbleToSearch;}, [](FNavMeshPathParams &self, bool value){self.bAbleToSearch = value ? 1 : 0;})
		.def_readwrite("Interface", &FNavMeshPathParams::Interface, py::return_value_policy::reference)
		.def_readwrite("PhysicsJumpCostMultiplier", &FNavMeshPathParams::PhysicsJumpCostMultiplier)
		.def_readwrite("SearchExtent", &FNavMeshPathParams::SearchExtent, py::return_value_policy::reference)
		.def_readwrite("SearchLaneMultiplier", &FNavMeshPathParams::SearchLaneMultiplier)
		.def_readwrite("SearchStart", &FNavMeshPathParams::SearchStart, py::return_value_policy::reference)
		.def_readwrite("MaxDropHeight", &FNavMeshPathParams::MaxDropHeight)
		.def_readwrite("MinWalkableZ", &FNavMeshPathParams::MinWalkableZ)
		.def_readwrite("MaxHoverDistance", &FNavMeshPathParams::MaxHoverDistance)
		.def_readwrite("ObstaclesToIgnore", &FNavMeshPathParams::ObstaclesToIgnore, py::return_value_policy::reference)
		.def_readwrite("LookAheadDistance", &FNavMeshPathParams::LookAheadDistance)
		.def_readwrite("CornerCutDistance", &FNavMeshPathParams::CornerCutDistance)
		.def_readwrite("LookInterpRate", &FNavMeshPathParams::LookInterpRate)
		;
	py::class_< FPolySegmentSpan >(m, "FPolySegmentSpan")
		.def_readwrite("Poly", &FPolySegmentSpan::Poly, py::return_value_policy::reference)
		.def_readwrite("P1", &FPolySegmentSpan::P1, py::return_value_policy::reference)
		.def_readwrite("P2", &FPolySegmentSpan::P2, py::return_value_policy::reference)
		;
	py::class_< FEdgePointer >(m, "FEdgePointer")
		.def_readwrite("Dummy", &FEdgePointer::Dummy, py::return_value_policy::reference)
		;
	py::class_< FPathStore >(m, "FPathStore")
		.def_readwrite("EdgeList", &FPathStore::EdgeList, py::return_value_policy::reference)
		.def_readwrite("PathDistances", &FPathStore::PathDistances, py::return_value_policy::reference)
		;
	py::class_< FPlayerOwnedComponent >(m, "FPlayerOwnedComponent")
		.def_readwrite("PlayerOwner", &FPlayerOwnedComponent::PlayerOwner, py::return_value_policy::reference)
		.def_readwrite("Component", &FPlayerOwnedComponent::Component, py::return_value_policy::reference)
		;
	py::class_< FAkCallBackGetRTPC >(m, "FAkCallBackGetRTPC")
		.def_readwrite("RTPC", &FAkCallBackGetRTPC::RTPC, py::return_value_policy::reference)
		.def_readwrite("Owner", &FAkCallBackGetRTPC::Owner, py::return_value_policy::reference)
		.def_readwrite("Component", &FAkCallBackGetRTPC::Component, py::return_value_policy::reference)
		.def_readwrite("CallbackValue", &FAkCallBackGetRTPC::CallbackValue)
		;
	py::class_< FGestaltAccessoryPartEntry >(m, "FGestaltAccessoryPartEntry")
		.def_readwrite("PartName", &FGestaltAccessoryPartEntry::PartName, py::return_value_policy::reference)
		.def_readwrite("BoneName", &FGestaltAccessoryPartEntry::BoneName, py::return_value_policy::reference)
		.def_readwrite("MatrixIndex", &FGestaltAccessoryPartEntry::MatrixIndex)
		;
	py::class_< FGestaltAccessoryGroupEntry >(m, "FGestaltAccessoryGroupEntry")
		.def_readwrite("GroupName", &FGestaltAccessoryGroupEntry::GroupName, py::return_value_policy::reference)
		.def_readwrite("GestaltAccessoryPartList", &FGestaltAccessoryGroupEntry::GestaltAccessoryPartList, py::return_value_policy::reference)
		;
	py::class_< FGestaltAccessoryMeshEntry >(m, "FGestaltAccessoryMeshEntry")
		.def_readwrite("MeshName", &FGestaltAccessoryMeshEntry::MeshName, py::return_value_policy::reference)
		.def_readwrite("GestaltAccessoryGroupList", &FGestaltAccessoryMeshEntry::GestaltAccessoryGroupList, py::return_value_policy::reference)
		;
	py::class_< FGPMCollection >(m, "FGPMCollection")
		.def_readwrite("CollectionData", &FGPMCollection::CollectionData, py::return_value_policy::reference)
		;
	py::class_< FActorToLookAt >(m, "FActorToLookAt")
		.def_property("CurrentlyBeingLookedAt", [](FActorToLookAt &self){return self.CurrentlyBeingLookedAt;}, [](FActorToLookAt &self, bool value){self.CurrentlyBeingLookedAt = value ? 1 : 0;})
		.def_readwrite("Actor", &FActorToLookAt::Actor, py::return_value_policy::reference)
		.def_readwrite("Rating", &FActorToLookAt::Rating)
		.def_readwrite("EnteredTime", &FActorToLookAt::EnteredTime)
		.def_readwrite("LastKnownDistance", &FActorToLookAt::LastKnownDistance)
		.def_readwrite("StartTimeBeingLookedAt", &FActorToLookAt::StartTimeBeingLookedAt)
		;
	py::class_< FHybridNavVisualizationVert >(m, "FHybridNavVisualizationVert")
		.def_property("bValidSegmentEndpoint", [](FHybridNavVisualizationVert &self){return self.bValidSegmentEndpoint;}, [](FHybridNavVisualizationVert &self, bool value){self.bValidSegmentEndpoint = value ? 1 : 0;})
		.def_readwrite("Vert", &FHybridNavVisualizationVert::Vert, py::return_value_policy::reference)
		;
	py::class_< FHybridNavVisualizationVertsForNavPoint >(m, "FHybridNavVisualizationVertsForNavPoint")
		.def_property("bWasDrawn", [](FHybridNavVisualizationVertsForNavPoint &self){return self.bWasDrawn;}, [](FHybridNavVisualizationVertsForNavPoint &self, bool value){self.bWasDrawn = value ? 1 : 0;})
		.def_readwrite("Verts", &FHybridNavVisualizationVertsForNavPoint::Verts, py::return_value_policy::reference)
		.def_readwrite("FirstVertDrawn", &FHybridNavVisualizationVertsForNavPoint::FirstVertDrawn, py::return_value_policy::reference)
		.def_readwrite("LastVertDrawn", &FHybridNavVisualizationVertsForNavPoint::LastVertDrawn, py::return_value_policy::reference)
		.def_readwrite("VerticalReach", &FHybridNavVisualizationVertsForNavPoint::VerticalReach)
		;
	py::class_< FHybridNavVisualizationPerfStats >(m, "FHybridNavVisualizationPerfStats")
		.def_readwrite("VisualizationBuildingStartTime", &FHybridNavVisualizationPerfStats::VisualizationBuildingStartTime)
		.def_readwrite("VisualizationBuildingEndTime", &FHybridNavVisualizationPerfStats::VisualizationBuildingEndTime)
		.def_readwrite("CyclesBuildingVisualization", &FHybridNavVisualizationPerfStats::CyclesBuildingVisualization)
		.def_readwrite("NumberOfNodesConsidered", &FHybridNavVisualizationPerfStats::NumberOfNodesConsidered)
		.def_readwrite("NumberOfTraces", &FHybridNavVisualizationPerfStats::NumberOfTraces)
		.def_readwrite("NumberOfEndPointAttempts", &FHybridNavVisualizationPerfStats::NumberOfEndPointAttempts)
		.def_readwrite("NumberOfSideAttempts", &FHybridNavVisualizationPerfStats::NumberOfSideAttempts)
		.def_readwrite("NumberOfNodesInVisualization", &FHybridNavVisualizationPerfStats::NumberOfNodesInVisualization)
		.def_readwrite("NumberOfPointsInVisualization", &FHybridNavVisualizationPerfStats::NumberOfPointsInVisualization)
		.def_readwrite("NumClosestNodesRequests", &FHybridNavVisualizationPerfStats::NumClosestNodesRequests)
		.def_readwrite("NumClosestNodeTests", &FHybridNavVisualizationPerfStats::NumClosestNodeTests)
		;
	py::class_< FReplicatedCoordinatedEffect >(m, "FReplicatedCoordinatedEffect")
		.def_readwrite("Effects", &FReplicatedCoordinatedEffect::Effects)
		.def_readwrite("Targets", &FReplicatedCoordinatedEffect::Targets)
		;
	py::class_< FGBXNavMeshSpecialMoveConnection >(m, "FGBXNavMeshSpecialMoveConnection")
		.def_readwrite("SrcPoly", &FGBXNavMeshSpecialMoveConnection::SrcPoly, py::return_value_policy::reference)
		.def_readwrite("SrcLocation", &FGBXNavMeshSpecialMoveConnection::SrcLocation, py::return_value_policy::reference)
		.def_readwrite("DestPoly", &FGBXNavMeshSpecialMoveConnection::DestPoly, py::return_value_policy::reference)
		.def_readwrite("DestLocation", &FGBXNavMeshSpecialMoveConnection::DestLocation, py::return_value_policy::reference)
		.def_readwrite("MoveId", &FGBXNavMeshSpecialMoveConnection::MoveId)
		;
	py::class_< FIniLocFileEntry >(m, "FIniLocFileEntry")
		.def_property("bIsUnicode", [](FIniLocFileEntry &self){return self.bIsUnicode;}, [](FIniLocFileEntry &self, bool value){self.bIsUnicode = value ? 1 : 0;})
		.def_readwrite("Filename", &FIniLocFileEntry::Filename, py::return_value_policy::reference)
		.def_readwrite("ReadState", &FIniLocFileEntry::ReadState)
		;
	py::class_< FBodyInstanceDataUnion >(m, "FBodyInstanceDataUnion")
		.def_readwrite("Data", &FBodyInstanceDataUnion::Data, py::return_value_policy::reference)
		.def_readwrite("ParentAttachmentIdentifier", &FBodyInstanceDataUnion::ParentAttachmentIdentifier, py::return_value_policy::reference)
		.def_readwrite("AttachmentBaseInstanceDataIndex", &FBodyInstanceDataUnion::AttachmentBaseInstanceDataIndex)
		.def_readwrite("SwitchIdentifier", &FBodyInstanceDataUnion::SwitchIdentifier)
		;
	py::class_< FBodyCompositionData >(m, "FBodyCompositionData")
		.def_property("HasHomingTargetComponents", [](FBodyCompositionData &self){return self.HasHomingTargetComponents;}, [](FBodyCompositionData &self, bool value){self.HasHomingTargetComponents = value ? 1 : 0;})
		.def_readwrite("Attachments", &FBodyCompositionData::Attachments, py::return_value_policy::reference)
		.def_readwrite("MaxExpectedComponents", &FBodyCompositionData::MaxExpectedComponents)
		;
	py::class_< FInstancedStaticMeshInstanceData >(m, "FInstancedStaticMeshInstanceData")
		.def_readwrite("Transform", &FInstancedStaticMeshInstanceData::Transform, py::return_value_policy::reference)
		.def_readwrite("LightmapUVBias", &FInstancedStaticMeshInstanceData::LightmapUVBias, py::return_value_policy::reference)
		.def_readwrite("ShadowmapUVBias", &FInstancedStaticMeshInstanceData::ShadowmapUVBias, py::return_value_policy::reference)
		;
	py::class_< FInstancedStaticMeshMappingInfo >(m, "FInstancedStaticMeshMappingInfo")
		.def_readwrite("Mapping", &FInstancedStaticMeshMappingInfo::Mapping, py::return_value_policy::reference)
		.def_readwrite("LightMap", &FInstancedStaticMeshMappingInfo::LightMap, py::return_value_policy::reference)
		.def_readwrite("LightmapTexture", &FInstancedStaticMeshMappingInfo::LightmapTexture, py::return_value_policy::reference)
		.def_readwrite("ShadowmapTexture", &FInstancedStaticMeshMappingInfo::ShadowmapTexture, py::return_value_policy::reference)
		;
	py::class_< AInterpActor_FCheckpointRecord >(m, "AInterpActor_FCheckpointRecord")
		.def_property("bHidden", [](AInterpActor_FCheckpointRecord &self){return self.bHidden;}, [](AInterpActor_FCheckpointRecord &self, bool value){self.bHidden = value ? 1 : 0;})
		.def_property("bIsShutdown", [](AInterpActor_FCheckpointRecord &self){return self.bIsShutdown;}, [](AInterpActor_FCheckpointRecord &self, bool value){self.bIsShutdown = value ? 1 : 0;})
		.def_property("bNeedsPositionReplication", [](AInterpActor_FCheckpointRecord &self){return self.bNeedsPositionReplication;}, [](AInterpActor_FCheckpointRecord &self, bool value){self.bNeedsPositionReplication = value ? 1 : 0;})
		.def_readwrite("Location", &AInterpActor_FCheckpointRecord::Location, py::return_value_policy::reference)
		.def_readwrite("Rotation", &AInterpActor_FCheckpointRecord::Rotation, py::return_value_policy::reference)
		.def_readwrite("CollisionType", &AInterpActor_FCheckpointRecord::CollisionType)
		;
	py::class_< FCurveEdEntry >(m, "FCurveEdEntry")
		.def_readwrite("CurveObject", &FCurveEdEntry::CurveObject, py::return_value_policy::reference)
		.def_readwrite("CurveColor", &FCurveEdEntry::CurveColor, py::return_value_policy::reference)
		.def_readwrite("CurveName", &FCurveEdEntry::CurveName, py::return_value_policy::reference)
		.def_readwrite("bHideCurve", &FCurveEdEntry::bHideCurve)
		.def_readwrite("bColorCurve", &FCurveEdEntry::bColorCurve)
		.def_readwrite("bFloatingPointColorCurve", &FCurveEdEntry::bFloatingPointColorCurve)
		.def_readwrite("bClamp", &FCurveEdEntry::bClamp)
		.def_readwrite("ClampLow", &FCurveEdEntry::ClampLow)
		.def_readwrite("ClampHigh", &FCurveEdEntry::ClampHigh)
		;
	py::class_< FCurveEdTab >(m, "FCurveEdTab")
		.def_readwrite("TabName", &FCurveEdTab::TabName, py::return_value_policy::reference)
		.def_readwrite("Curves", &FCurveEdTab::Curves, py::return_value_policy::reference)
		.def_readwrite("ViewStartInput", &FCurveEdTab::ViewStartInput)
		.def_readwrite("ViewEndInput", &FCurveEdTab::ViewEndInput)
		.def_readwrite("ViewStartOutput", &FCurveEdTab::ViewStartOutput)
		.def_readwrite("ViewEndOutput", &FCurveEdTab::ViewEndOutput)
		;
	py::class_< FAnimSetBakeAndPruneStatus >(m, "FAnimSetBakeAndPruneStatus")
		.def_property("bReferencedButUnused", [](FAnimSetBakeAndPruneStatus &self){return self.bReferencedButUnused;}, [](FAnimSetBakeAndPruneStatus &self, bool value){self.bReferencedButUnused = value ? 1 : 0;})
		.def_property("bSkipBakeAndPrune", [](FAnimSetBakeAndPruneStatus &self){return self.bSkipBakeAndPrune;}, [](FAnimSetBakeAndPruneStatus &self, bool value){self.bSkipBakeAndPrune = value ? 1 : 0;})
		.def_readwrite("AnimSetName", &FAnimSetBakeAndPruneStatus::AnimSetName, py::return_value_policy::reference)
		;
	py::class_< FInterpEdSelKey >(m, "FInterpEdSelKey")
		.def_readwrite("Group", &FInterpEdSelKey::Group, py::return_value_policy::reference)
		.def_readwrite("Track", &FInterpEdSelKey::Track, py::return_value_policy::reference)
		.def_readwrite("KeyIndex", &FInterpEdSelKey::KeyIndex)
		.def_readwrite("UnsnappedPosition", &FInterpEdSelKey::UnsnappedPosition)
		;
	py::class_< FSubTrackGroup >(m, "FSubTrackGroup")
		.def_property("bIsCollapsed", [](FSubTrackGroup &self){return self.bIsCollapsed;}, [](FSubTrackGroup &self, bool value){self.bIsCollapsed = value ? 1 : 0;})
		.def_property("bIsSelected", [](FSubTrackGroup &self){return self.bIsSelected;}, [](FSubTrackGroup &self, bool value){self.bIsSelected = value ? 1 : 0;})
		.def_readwrite("GroupName", &FSubTrackGroup::GroupName, py::return_value_policy::reference)
		.def_readwrite("TrackIndices", &FSubTrackGroup::TrackIndices, py::return_value_policy::reference)
		;
	py::class_< FSupportedSubTrackInfo >(m, "FSupportedSubTrackInfo")
		.def_readwrite("SupportedClass", &FSupportedSubTrackInfo::SupportedClass, py::return_value_policy::reference)
		.def_readwrite("SubTrackName", &FSupportedSubTrackInfo::SubTrackName, py::return_value_policy::reference)
		.def_readwrite("GroupIndex", &FSupportedSubTrackInfo::GroupIndex)
		;
	py::class_< FAnimControlTrackKey >(m, "FAnimControlTrackKey")
		.def_property("bLooping", [](FAnimControlTrackKey &self){return self.bLooping;}, [](FAnimControlTrackKey &self, bool value){self.bLooping = value ? 1 : 0;})
		.def_property("bReverse", [](FAnimControlTrackKey &self){return self.bReverse;}, [](FAnimControlTrackKey &self, bool value){self.bReverse = value ? 1 : 0;})
		.def_readwrite("StartTime", &FAnimControlTrackKey::StartTime)
		.def_readwrite("AnimSeqName", &FAnimControlTrackKey::AnimSeqName, py::return_value_policy::reference)
		.def_readwrite("AnimStartOffset", &FAnimControlTrackKey::AnimStartOffset)
		.def_readwrite("AnimEndOffset", &FAnimControlTrackKey::AnimEndOffset)
		.def_readwrite("AnimPlayRate", &FAnimControlTrackKey::AnimPlayRate)
		;
	py::class_< FBoolTrackKey >(m, "FBoolTrackKey")
		.def_property("Value", [](FBoolTrackKey &self){return self.Value;}, [](FBoolTrackKey &self, bool value){self.Value = value ? 1 : 0;})
		.def_readwrite("Time", &FBoolTrackKey::Time)
		;
	py::class_< FCommentTrackKey >(m, "FCommentTrackKey")
		.def_readwrite("Time", &FCommentTrackKey::Time)
		.def_readwrite("Comment", &FCommentTrackKey::Comment, py::return_value_policy::reference)
		;
	py::class_< FDirectorTrackCut >(m, "FDirectorTrackCut")
		.def_readwrite("Time", &FDirectorTrackCut::Time)
		.def_readwrite("TransitionTime", &FDirectorTrackCut::TransitionTime)
		.def_readwrite("TargetCamGroup", &FDirectorTrackCut::TargetCamGroup, py::return_value_policy::reference)
		;
	py::class_< FEventTrackKey >(m, "FEventTrackKey")
		.def_readwrite("Time", &FEventTrackKey::Time)
		.def_readwrite("EventName", &FEventTrackKey::EventName, py::return_value_policy::reference)
		;
	py::class_< FFaceFXTrackKey >(m, "FFaceFXTrackKey")
		.def_readwrite("StartTime", &FFaceFXTrackKey::StartTime)
		.def_readwrite("FaceFXGroupName", &FFaceFXTrackKey::FaceFXGroupName, py::return_value_policy::reference)
		.def_readwrite("FaceFXSeqName", &FFaceFXTrackKey::FaceFXSeqName, py::return_value_policy::reference)
		;
	py::class_< FFaceFXSoundCueKey >(m, "FFaceFXSoundCueKey")
		.def_readwrite("FaceFXSoundCue", &FFaceFXSoundCueKey::FaceFXSoundCue, py::return_value_policy::reference)
		.def_readwrite("FaceFXAkEvent", &FFaceFXSoundCueKey::FaceFXAkEvent, py::return_value_policy::reference)
		;
	py::class_< FHeadTrackingKey >(m, "FHeadTrackingKey")
		.def_readwrite("Time", &FHeadTrackingKey::Time)
		.def_readwrite("Action", &FHeadTrackingKey::Action)
		;
	py::class_< FFloatMaterialParamMICData >(m, "FFloatMaterialParamMICData")
		.def_readwrite("MICs", &FFloatMaterialParamMICData::MICs, py::return_value_policy::reference)
		.def_readwrite("MICResetFloats", &FFloatMaterialParamMICData::MICResetFloats, py::return_value_policy::reference)
		;
	py::class_< FToggleTrackKey >(m, "FToggleTrackKey")
		.def_readwrite("Time", &FToggleTrackKey::Time)
		.def_readwrite("ToggleAction", &FToggleTrackKey::ToggleAction)
		;
	py::class_< FVectorMaterialParamMICData >(m, "FVectorMaterialParamMICData")
		.def_readwrite("MICs", &FVectorMaterialParamMICData::MICs, py::return_value_policy::reference)
		.def_readwrite("MICResetVectors", &FVectorMaterialParamMICData::MICResetVectors, py::return_value_policy::reference)
		;
	py::class_< FVisibilityTrackKey >(m, "FVisibilityTrackKey")
		.def_readwrite("Time", &FVisibilityTrackKey::Time)
		.def_readwrite("Action", &FVisibilityTrackKey::Action)
		.def_readwrite("ActiveCondition", &FVisibilityTrackKey::ActiveCondition)
		;
	py::class_< FInterpLookupPoint >(m, "FInterpLookupPoint")
		.def_readwrite("GroupName", &FInterpLookupPoint::GroupName, py::return_value_policy::reference)
		.def_readwrite("Time", &FInterpLookupPoint::Time)
		;
	py::class_< FInterpLookupTrack >(m, "FInterpLookupTrack")
		.def_readwrite("Points", &FInterpLookupTrack::Points, py::return_value_policy::reference)
		;
	py::class_< FParticleReplayTrackKey >(m, "FParticleReplayTrackKey")
		.def_readwrite("Time", &FParticleReplayTrackKey::Time)
		.def_readwrite("Duration", &FParticleReplayTrackKey::Duration)
		.def_readwrite("ClipIDNumber", &FParticleReplayTrackKey::ClipIDNumber)
		;
	py::class_< FSoundTrackKey >(m, "FSoundTrackKey")
		.def_readwrite("Time", &FSoundTrackKey::Time)
		.def_readwrite("Volume", &FSoundTrackKey::Volume)
		.def_readwrite("Pitch", &FSoundTrackKey::Pitch)
		.def_readwrite("Sound", &FSoundTrackKey::Sound, py::return_value_policy::reference)
		;
	py::class_< FTeleportKeyData >(m, "FTeleportKeyData")
		.def_readwrite("KeyTime", &FTeleportKeyData::KeyTime)
		.def_readwrite("LocationKey", &FTeleportKeyData::LocationKey, py::return_value_policy::reference)
		.def_readwrite("RotationKey", &FTeleportKeyData::RotationKey, py::return_value_policy::reference)
		;
	py::class_< FImpulseData >(m, "FImpulseData")
		.def_readwrite("Impulse", &FImpulseData::Impulse, py::return_value_policy::reference)
		.def_readwrite("Source", &FImpulseData::Source, py::return_value_policy::reference)
		;
	py::class_< FLandscapeWeightmapUsage >(m, "FLandscapeWeightmapUsage")
		;
	py::class_< FLandscapeLayerInfo >(m, "FLandscapeLayerInfo")
		.def_property("bNoWeightBlend", [](FLandscapeLayerInfo &self){return self.bNoWeightBlend;}, [](FLandscapeLayerInfo &self, bool value){self.bNoWeightBlend = value ? 1 : 0;})
		.def_readwrite("LayerName", &FLandscapeLayerInfo::LayerName, py::return_value_policy::reference)
		.def_readwrite("Hardness", &FLandscapeLayerInfo::Hardness)
		;
	py::class_< FLandscapeAddCollision >(m, "FLandscapeAddCollision")
		;
	py::class_< FWeightmapLayerAllocationInfo >(m, "FWeightmapLayerAllocationInfo")
		.def_readwrite("LayerName", &FWeightmapLayerAllocationInfo::LayerName, py::return_value_policy::reference)
		.def_readwrite("WeightmapTextureIndex", &FWeightmapLayerAllocationInfo::WeightmapTextureIndex)
		.def_readwrite("WeightmapTextureChannel", &FWeightmapLayerAllocationInfo::WeightmapTextureChannel)
		;
	py::class_< FLensFlareElement >(m, "FLensFlareElement")
		.def_property("bIsEnabled", [](FLensFlareElement &self){return self.bIsEnabled;}, [](FLensFlareElement &self, bool value){self.bIsEnabled = value ? 1 : 0;})
		.def_property("bUseSourceDistance", [](FLensFlareElement &self){return self.bUseSourceDistance;}, [](FLensFlareElement &self, bool value){self.bUseSourceDistance = value ? 1 : 0;})
		.def_property("bNormalizeRadialDistance", [](FLensFlareElement &self){return self.bNormalizeRadialDistance;}, [](FLensFlareElement &self, bool value){self.bNormalizeRadialDistance = value ? 1 : 0;})
		.def_property("bModulateColorBySource", [](FLensFlareElement &self){return self.bModulateColorBySource;}, [](FLensFlareElement &self, bool value){self.bModulateColorBySource = value ? 1 : 0;})
		.def_property("bOrientTowardsSource", [](FLensFlareElement &self){return self.bOrientTowardsSource;}, [](FLensFlareElement &self, bool value){self.bOrientTowardsSource = value ? 1 : 0;})
		.def_readwrite("ElementName", &FLensFlareElement::ElementName, py::return_value_policy::reference)
		.def_readwrite("RayDistance", &FLensFlareElement::RayDistance)
		.def_readwrite("Size", &FLensFlareElement::Size, py::return_value_policy::reference)
		.def_readwrite("LFMaterials", &FLensFlareElement::LFMaterials, py::return_value_policy::reference)
		.def_readwrite("LFMaterialIndex", &FLensFlareElement::LFMaterialIndex, py::return_value_policy::reference)
		.def_readwrite("Scaling", &FLensFlareElement::Scaling, py::return_value_policy::reference)
		.def_readwrite("AxisScaling", &FLensFlareElement::AxisScaling, py::return_value_policy::reference)
		.def_readwrite("Rotation", &FLensFlareElement::Rotation, py::return_value_policy::reference)
		.def_readwrite("Color", &FLensFlareElement::Color, py::return_value_policy::reference)
		.def_readwrite("Alpha", &FLensFlareElement::Alpha, py::return_value_policy::reference)
		.def_readwrite("Offset", &FLensFlareElement::Offset, py::return_value_policy::reference)
		.def_readwrite("DistMap_Scale", &FLensFlareElement::DistMap_Scale, py::return_value_policy::reference)
		.def_readwrite("DistMap_Color", &FLensFlareElement::DistMap_Color, py::return_value_policy::reference)
		.def_readwrite("DistMap_Alpha", &FLensFlareElement::DistMap_Alpha, py::return_value_policy::reference)
		;
	py::class_< FLensFlareElementCurvePair >(m, "FLensFlareElementCurvePair")
		.def_readwrite("CurveName", &FLensFlareElementCurvePair::CurveName, py::return_value_policy::reference)
		.def_readwrite("CurveObject", &FLensFlareElementCurvePair::CurveObject, py::return_value_policy::reference)
		;
	py::class_< FLensFlareElementMaterials >(m, "FLensFlareElementMaterials")
		.def_readwrite("ElementMaterials", &FLensFlareElementMaterials::ElementMaterials, py::return_value_policy::reference)
		;
	py::class_< FLensFlareElementInstance >(m, "FLensFlareElementInstance")
		;
	py::class_< FLevelGridCellCoordinate >(m, "FLevelGridCellCoordinate")
		.def_readwrite("X", &FLevelGridCellCoordinate::X)
		.def_readwrite("Y", &FLevelGridCellCoordinate::Y)
		.def_readwrite("Z", &FLevelGridCellCoordinate::Z)
		;
	py::class_< ALevelStreamingVolume_FCheckpointRecord >(m, "ALevelStreamingVolume_FCheckpointRecord")
		.def_property("bDisabled", [](ALevelStreamingVolume_FCheckpointRecord &self){return self.bDisabled;}, [](ALevelStreamingVolume_FCheckpointRecord &self, bool value){self.bDisabled = value ? 1 : 0;})
		;
	py::class_< FPostProcessSettingsOverride >(m, "FPostProcessSettingsOverride")
		.def_property("bBlendingIn", [](FPostProcessSettingsOverride &self){return self.bBlendingIn;}, [](FPostProcessSettingsOverride &self, bool value){self.bBlendingIn = value ? 1 : 0;})
		.def_property("bBlendingOut", [](FPostProcessSettingsOverride &self){return self.bBlendingOut;}, [](FPostProcessSettingsOverride &self, bool value){self.bBlendingOut = value ? 1 : 0;})
		.def_readwrite("Settings", &FPostProcessSettingsOverride::Settings, py::return_value_policy::reference)
		.def_readwrite("CurrentBlendInTime", &FPostProcessSettingsOverride::CurrentBlendInTime)
		.def_readwrite("CurrentBlendOutTime", &FPostProcessSettingsOverride::CurrentBlendOutTime)
		.def_readwrite("BlendInDuration", &FPostProcessSettingsOverride::BlendInDuration)
		.def_readwrite("BlendOutDuration", &FPostProcessSettingsOverride::BlendOutDuration)
		.def_readwrite("BlendStartTime", &FPostProcessSettingsOverride::BlendStartTime)
		;
	py::class_< FWorldLightingOverride >(m, "FWorldLightingOverride")
		.def_property("RemovalRequested", [](FWorldLightingOverride &self){return self.RemovalRequested;}, [](FWorldLightingOverride &self, bool value){self.RemovalRequested = value ? 1 : 0;})
		.def_readwrite("DirectionOffset", &FWorldLightingOverride::DirectionOffset, py::return_value_policy::reference)
		.def_readwrite("FadeInTime", &FWorldLightingOverride::FadeInTime)
		.def_readwrite("FadeOutTime", &FWorldLightingOverride::FadeOutTime)
		.def_readwrite("RemainingFadeTime", &FWorldLightingOverride::RemainingFadeTime)
		.def_readwrite("pMovie", &FWorldLightingOverride::pMovie, py::return_value_policy::reference)
		;
	py::class_< FCurrentPostProcessVolumeInfo >(m, "FCurrentPostProcessVolumeInfo")
		.def_readwrite("LastSettings", &FCurrentPostProcessVolumeInfo::LastSettings, py::return_value_policy::reference)
		.def_readwrite("LastVolumeUsed", &FCurrentPostProcessVolumeInfo::LastVolumeUsed, py::return_value_policy::reference)
		.def_readwrite("BlendStartTime", &FCurrentPostProcessVolumeInfo::BlendStartTime)
		.def_readwrite("LastBlendTime", &FCurrentPostProcessVolumeInfo::LastBlendTime)
		;
	py::class_< FSynchronizedActorVisibilityHistory >(m, "FSynchronizedActorVisibilityHistory")
		.def_readwrite("State", &FSynchronizedActorVisibilityHistory::State, py::return_value_policy::reference)
		.def_readwrite("CriticalSection", &FSynchronizedActorVisibilityHistory::CriticalSection, py::return_value_policy::reference)
		;
	py::class_< FManufacturerGradeData >(m, "FManufacturerGradeData")
		.def_readwrite("DisplayName", &FManufacturerGradeData::DisplayName, py::return_value_policy::reference)
		;
	py::class_< FManufacturerCustomGradeWeightData >(m, "FManufacturerCustomGradeWeightData")
		.def_readwrite("Manufacturer", &FManufacturerCustomGradeWeightData::Manufacturer, py::return_value_policy::reference)
		.def_readwrite("DefaultWeightIndex", &FManufacturerCustomGradeWeightData::DefaultWeightIndex)
		;
	py::class_< FExpressionInput >(m, "FExpressionInput")
		.def_readwrite("Expression", &FExpressionInput::Expression, py::return_value_policy::reference)
		.def_readwrite("Mask", &FExpressionInput::Mask)
		.def_readwrite("MaskR", &FExpressionInput::MaskR)
		.def_readwrite("MaskG", &FExpressionInput::MaskG)
		.def_readwrite("MaskB", &FExpressionInput::MaskB)
		.def_readwrite("MaskA", &FExpressionInput::MaskA)
		.def_readwrite("GCC64_Padding", &FExpressionInput::GCC64_Padding)
		;
	py::class_< FCustomInput >(m, "FCustomInput")
		.def_readwrite("InputName", &FCustomInput::InputName, py::return_value_policy::reference)
		.def_readwrite("Input", &FCustomInput::Input, py::return_value_policy::reference)
		;
	py::class_< FFontParameterValue >(m, "FFontParameterValue")
		.def_readwrite("ParameterName", &FFontParameterValue::ParameterName, py::return_value_policy::reference)
		.def_readwrite("FontValue", &FFontParameterValue::FontValue, py::return_value_policy::reference)
		.def_readwrite("FontPage", &FFontParameterValue::FontPage)
		.def_readwrite("ExpressionGUID", &FFontParameterValue::ExpressionGUID, py::return_value_policy::reference)
		;
	py::class_< FScalarParameterValue >(m, "FScalarParameterValue")
		.def_readwrite("ParameterName", &FScalarParameterValue::ParameterName, py::return_value_policy::reference)
		.def_readwrite("ParameterValue", &FScalarParameterValue::ParameterValue)
		.def_readwrite("ExpressionGUID", &FScalarParameterValue::ExpressionGUID, py::return_value_policy::reference)
		;
	py::class_< FTextureParameterValue >(m, "FTextureParameterValue")
		.def_readwrite("ParameterName", &FTextureParameterValue::ParameterName, py::return_value_policy::reference)
		.def_readwrite("ParameterValue", &FTextureParameterValue::ParameterValue, py::return_value_policy::reference)
		.def_readwrite("ExpressionGUID", &FTextureParameterValue::ExpressionGUID, py::return_value_policy::reference)
		;
	py::class_< FVectorParameterValue >(m, "FVectorParameterValue")
		.def_readwrite("ParameterName", &FVectorParameterValue::ParameterName, py::return_value_policy::reference)
		.def_readwrite("ParameterValue", &FVectorParameterValue::ParameterValue, py::return_value_policy::reference)
		.def_readwrite("ExpressionGUID", &FVectorParameterValue::ExpressionGUID, py::return_value_policy::reference)
		;
	py::class_< FParameterValueOverTime >(m, "FParameterValueOverTime")
		.def_property("bLoop", [](FParameterValueOverTime &self){return self.bLoop;}, [](FParameterValueOverTime &self, bool value){self.bLoop = value ? 1 : 0;})
		.def_property("bAutoActivate", [](FParameterValueOverTime &self){return self.bAutoActivate;}, [](FParameterValueOverTime &self, bool value){self.bAutoActivate = value ? 1 : 0;})
		.def_property("bNormalizeTime", [](FParameterValueOverTime &self){return self.bNormalizeTime;}, [](FParameterValueOverTime &self, bool value){self.bNormalizeTime = value ? 1 : 0;})
		.def_property("bOffsetFromEnd", [](FParameterValueOverTime &self){return self.bOffsetFromEnd;}, [](FParameterValueOverTime &self, bool value){self.bOffsetFromEnd = value ? 1 : 0;})
		.def_readwrite("ExpressionGUID", &FParameterValueOverTime::ExpressionGUID, py::return_value_policy::reference)
		.def_readwrite("StartTime", &FParameterValueOverTime::StartTime)
		.def_readwrite("ParameterName", &FParameterValueOverTime::ParameterName, py::return_value_policy::reference)
		.def_readwrite("CycleTime", &FParameterValueOverTime::CycleTime)
		.def_readwrite("OffsetTime", &FParameterValueOverTime::OffsetTime)
		;
	py::class_< FFontParameterValueOverTime, FParameterValueOverTime >(m, "FFontParameterValueOverTime")
		.def_readwrite("FontValue", &FFontParameterValueOverTime::FontValue, py::return_value_policy::reference)
		.def_readwrite("FontPage", &FFontParameterValueOverTime::FontPage)
		;
	py::class_< FScalarParameterValueOverTime, FParameterValueOverTime >(m, "FScalarParameterValueOverTime")
		.def_readwrite("ParameterValue", &FScalarParameterValueOverTime::ParameterValue)
		.def_readwrite("ParameterValueCurve", &FScalarParameterValueOverTime::ParameterValueCurve, py::return_value_policy::reference)
		;
	py::class_< FTextureParameterValueOverTime, FParameterValueOverTime >(m, "FTextureParameterValueOverTime")
		.def_readwrite("ParameterValue", &FTextureParameterValueOverTime::ParameterValue, py::return_value_policy::reference)
		;
	py::class_< FVectorParameterValueOverTime, FParameterValueOverTime >(m, "FVectorParameterValueOverTime")
		.def_readwrite("ParameterValue", &FVectorParameterValueOverTime::ParameterValue, py::return_value_policy::reference)
		.def_readwrite("ParameterValueCurve", &FVectorParameterValueOverTime::ParameterValueCurve, py::return_value_policy::reference)
		;
	py::class_< FMorphNodeConn >(m, "FMorphNodeConn")
		.def_readwrite("ChildNodes", &FMorphNodeConn::ChildNodes, py::return_value_policy::reference)
		.def_readwrite("ConnName", &FMorphNodeConn::ConnName, py::return_value_policy::reference)
		.def_readwrite("DrawY", &FMorphNodeConn::DrawY)
		;
	py::class_< FBoneAngleMorph >(m, "FBoneAngleMorph")
		.def_readwrite("Angle", &FBoneAngleMorph::Angle)
		.def_readwrite("TargetWeight", &FBoneAngleMorph::TargetWeight)
		;
	py::class_< FBiasedGoalActor >(m, "FBiasedGoalActor")
		.def_readwrite("Goal", &FBiasedGoalActor::Goal, py::return_value_policy::reference)
		.def_readwrite("ExtraCost", &FBiasedGoalActor::ExtraCost)
		;
	py::class_< ANavMeshObstacle_FCheckpointRecord >(m, "ANavMeshObstacle_FCheckpointRecord")
		.def_property("bEnabled", [](ANavMeshObstacle_FCheckpointRecord &self){return self.bEnabled;}, [](ANavMeshObstacle_FCheckpointRecord &self, bool value){self.bEnabled = value ? 1 : 0;})
		;
	py::class_< FMMStats_Timer >(m, "FMMStats_Timer")
		.def_property("bInProgress", [](FMMStats_Timer &self){return self.bInProgress;}, [](FMMStats_Timer &self, bool value){self.bInProgress = value ? 1 : 0;})
		.def_readwrite("MSecs", &FMMStats_Timer::MSecs, py::return_value_policy::reference)
		;
	py::class_< FOnlineProfileSetting >(m, "FOnlineProfileSetting")
		.def_readwrite("Owner", &FOnlineProfileSetting::Owner)
		.def_readwrite("ProfileSetting", &FOnlineProfileSetting::ProfileSetting, py::return_value_policy::reference)
		;
	py::class_< FUIDataProviderField >(m, "FUIDataProviderField")
		.def_readwrite("FieldTag", &FUIDataProviderField::FieldTag, py::return_value_policy::reference)
		.def_readwrite("FieldType", &FUIDataProviderField::FieldType)
		.def_readwrite("FieldProviders", &FUIDataProviderField::FieldProviders, py::return_value_policy::reference)
		;
	py::class_< FRecentParty >(m, "FRecentParty")
		.def_readwrite("PartyLeader", &FRecentParty::PartyLeader, py::return_value_policy::reference)
		.def_readwrite("PartyMembers", &FRecentParty::PartyMembers, py::return_value_policy::reference)
		;
	py::class_< FCurrentPlayerMet >(m, "FCurrentPlayerMet")
		.def_readwrite("TeamNum", &FCurrentPlayerMet::TeamNum)
		.def_readwrite("Skill", &FCurrentPlayerMet::Skill)
		.def_readwrite("NetId", &FCurrentPlayerMet::NetId, py::return_value_policy::reference)
		;
	py::class_< FOnlineStatsColumn >(m, "FOnlineStatsColumn")
		.def_readwrite("ColumnNo", &FOnlineStatsColumn::ColumnNo)
		.def_readwrite("StatValue", &FOnlineStatsColumn::StatValue, py::return_value_policy::reference)
		;
	py::class_< FOnlineStatsRow >(m, "FOnlineStatsRow")
		.def_readwrite("PlayerID", &FOnlineStatsRow::PlayerID, py::return_value_policy::reference)
		.def_readwrite("Rank", &FOnlineStatsRow::Rank, py::return_value_policy::reference)
		.def_readwrite("NickName", &FOnlineStatsRow::NickName, py::return_value_policy::reference)
		.def_readwrite("Columns", &FOnlineStatsRow::Columns, py::return_value_policy::reference)
		;
	py::class_< FColumnMetaData >(m, "FColumnMetaData")
		.def_readwrite("Id", &FColumnMetaData::Id)
		.def_readwrite("Name", &FColumnMetaData::Name, py::return_value_policy::reference)
		.def_readwrite("ColumnName", &FColumnMetaData::ColumnName, py::return_value_policy::reference)
		;
	py::class_< FParticleBurst >(m, "FParticleBurst")
		.def_readwrite("Count", &FParticleBurst::Count)
		.def_readwrite("CountLow", &FParticleBurst::CountLow)
		.def_readwrite("Time", &FParticleBurst::Time)
		.def_readwrite("CountDistribution", &FParticleBurst::CountDistribution, py::return_value_policy::reference)
		;
	py::class_< FParticleCurvePair >(m, "FParticleCurvePair")
		.def_readwrite("CurveName", &FParticleCurvePair::CurveName, py::return_value_policy::reference)
		.def_readwrite("CurveObject", &FParticleCurvePair::CurveObject, py::return_value_policy::reference)
		;
	py::class_< FParticleRandomSeedInfo >(m, "FParticleRandomSeedInfo")
		.def_property("bGetSeedFromInstance", [](FParticleRandomSeedInfo &self){return self.bGetSeedFromInstance;}, [](FParticleRandomSeedInfo &self, bool value){self.bGetSeedFromInstance = value ? 1 : 0;})
		.def_property("bInstanceSeedIsIndex", [](FParticleRandomSeedInfo &self){return self.bInstanceSeedIsIndex;}, [](FParticleRandomSeedInfo &self, bool value){self.bInstanceSeedIsIndex = value ? 1 : 0;})
		.def_property("bResetSeedOnEmitterLooping", [](FParticleRandomSeedInfo &self){return self.bResetSeedOnEmitterLooping;}, [](FParticleRandomSeedInfo &self, bool value){self.bResetSeedOnEmitterLooping = value ? 1 : 0;})
		.def_readwrite("ParameterName", &FParticleRandomSeedInfo::ParameterName, py::return_value_policy::reference)
		.def_readwrite("RandomSeeds", &FParticleRandomSeedInfo::RandomSeeds, py::return_value_policy::reference)
		;
	py::class_< FBeamModifierOptions >(m, "FBeamModifierOptions")
		.def_property("bModify", [](FBeamModifierOptions &self){return self.bModify;}, [](FBeamModifierOptions &self, bool value){self.bModify = value ? 1 : 0;})
		.def_property("bScale", [](FBeamModifierOptions &self){return self.bScale;}, [](FBeamModifierOptions &self, bool value){self.bScale = value ? 1 : 0;})
		.def_property("bLock", [](FBeamModifierOptions &self){return self.bLock;}, [](FBeamModifierOptions &self, bool value){self.bLock = value ? 1 : 0;})
		;
	py::class_< FParticleEvent_GenerateInfo >(m, "FParticleEvent_GenerateInfo")
		.def_property("FirstTimeOnly", [](FParticleEvent_GenerateInfo &self){return self.FirstTimeOnly;}, [](FParticleEvent_GenerateInfo &self, bool value){self.FirstTimeOnly = value ? 1 : 0;})
		.def_property("LastTimeOnly", [](FParticleEvent_GenerateInfo &self){return self.LastTimeOnly;}, [](FParticleEvent_GenerateInfo &self, bool value){self.LastTimeOnly = value ? 1 : 0;})
		.def_property("UseReflectedImpactVector", [](FParticleEvent_GenerateInfo &self){return self.UseReflectedImpactVector;}, [](FParticleEvent_GenerateInfo &self, bool value){self.UseReflectedImpactVector = value ? 1 : 0;})
		.def_readwrite("Type", &FParticleEvent_GenerateInfo::Type)
		.def_readwrite("Frequency", &FParticleEvent_GenerateInfo::Frequency)
		.def_readwrite("LowFreq", &FParticleEvent_GenerateInfo::LowFreq)
		.def_readwrite("ParticleFrequency", &FParticleEvent_GenerateInfo::ParticleFrequency)
		.def_readwrite("CustomName", &FParticleEvent_GenerateInfo::CustomName, py::return_value_policy::reference)
		.def_readwrite("ParticleModuleEventsToSendToGame", &FParticleEvent_GenerateInfo::ParticleModuleEventsToSendToGame, py::return_value_policy::reference)
		;
	py::class_< FLocationBoneSocketInfo >(m, "FLocationBoneSocketInfo")
		.def_readwrite("BoneSocketName", &FLocationBoneSocketInfo::BoneSocketName, py::return_value_policy::reference)
		.def_readwrite("Offset", &FLocationBoneSocketInfo::Offset, py::return_value_policy::reference)
		;
	py::class_< FOrbitOptions >(m, "FOrbitOptions")
		.def_property("bProcessDuringSpawn", [](FOrbitOptions &self){return self.bProcessDuringSpawn;}, [](FOrbitOptions &self, bool value){self.bProcessDuringSpawn = value ? 1 : 0;})
		.def_property("bProcessDuringUpdate", [](FOrbitOptions &self){return self.bProcessDuringUpdate;}, [](FOrbitOptions &self, bool value){self.bProcessDuringUpdate = value ? 1 : 0;})
		.def_property("bUseEmitterTime", [](FOrbitOptions &self){return self.bUseEmitterTime;}, [](FOrbitOptions &self, bool value){self.bUseEmitterTime = value ? 1 : 0;})
		;
	py::class_< FEmitterDynamicParameter >(m, "FEmitterDynamicParameter")
		.def_property("bUseEmitterTime", [](FEmitterDynamicParameter &self){return self.bUseEmitterTime;}, [](FEmitterDynamicParameter &self, bool value){self.bUseEmitterTime = value ? 1 : 0;})
		.def_property("bSpawnTimeOnly", [](FEmitterDynamicParameter &self){return self.bSpawnTimeOnly;}, [](FEmitterDynamicParameter &self, bool value){self.bSpawnTimeOnly = value ? 1 : 0;})
		.def_property("bScaleVelocityByParamValue", [](FEmitterDynamicParameter &self){return self.bScaleVelocityByParamValue;}, [](FEmitterDynamicParameter &self, bool value){self.bScaleVelocityByParamValue = value ? 1 : 0;})
		.def_readwrite("ParamName", &FEmitterDynamicParameter::ParamName, py::return_value_policy::reference)
		.def_readwrite("ValueMethod", &FEmitterDynamicParameter::ValueMethod)
		.def_readwrite("ParamValue", &FEmitterDynamicParameter::ParamValue, py::return_value_policy::reference)
		;
	py::class_< FBeamTargetData >(m, "FBeamTargetData")
		.def_readwrite("TargetName", &FBeamTargetData::TargetName, py::return_value_policy::reference)
		.def_readwrite("TargetPercentage", &FBeamTargetData::TargetPercentage)
		;
	py::class_< FPhysXEmitterVerticalLodProperties >(m, "FPhysXEmitterVerticalLodProperties")
		.def_readwrite("WeightForFifo", &FPhysXEmitterVerticalLodProperties::WeightForFifo)
		.def_readwrite("WeightForSpawnLod", &FPhysXEmitterVerticalLodProperties::WeightForSpawnLod)
		.def_readwrite("SpawnLodRateVsLifeBias", &FPhysXEmitterVerticalLodProperties::SpawnLodRateVsLifeBias)
		.def_readwrite("RelativeFadeoutTime", &FPhysXEmitterVerticalLodProperties::RelativeFadeoutTime)
		;
	py::class_< FLODSoloTrack >(m, "FLODSoloTrack")
		.def_readwrite("SoloEnableSetting", &FLODSoloTrack::SoloEnableSetting, py::return_value_policy::reference)
		;
	py::class_< FParticleEmitterReplayFrame >(m, "FParticleEmitterReplayFrame")
		.def_readwrite("EmitterType", &FParticleEmitterReplayFrame::EmitterType)
		.def_readwrite("OriginalEmitterIndex", &FParticleEmitterReplayFrame::OriginalEmitterIndex)
		.def_readwrite("FrameState", &FParticleEmitterReplayFrame::FrameState, py::return_value_policy::reference)
		;
	py::class_< FParticleSystemReplayFrame >(m, "FParticleSystemReplayFrame")
		.def_readwrite("Emitters", &FParticleSystemReplayFrame::Emitters, py::return_value_policy::reference)
		;
	py::class_< FPersistentData >(m, "FPersistentData")
		.def_readwrite("VfTable", &FPersistentData::VfTable, py::return_value_policy::reference)
		;
	py::class_< FPersistentSequenceEventData, FPersistentData >(m, "FPersistentSequenceEventData")
		.def_readwrite("TriggerCount", &FPersistentSequenceEventData::TriggerCount)
		;
	py::class_< FPersistentSeqAct_InterpData, FPersistentData >(m, "FPersistentSeqAct_InterpData")
		.def_readwrite("Position", &FPersistentSeqAct_InterpData::Position)
		;
	py::class_< APointLightToggleable_FCheckpointRecord >(m, "APointLightToggleable_FCheckpointRecord")
		.def_property("bEnabled", [](APointLightToggleable_FCheckpointRecord &self){return self.bEnabled;}, [](APointLightToggleable_FCheckpointRecord &self, bool value){self.bEnabled = value ? 1 : 0;})
		;
	py::class_< FActivateOp >(m, "FActivateOp")
		.def_readwrite("ActivatorOp", &FActivateOp::ActivatorOp, py::return_value_policy::reference)
		.def_readwrite("Op", &FActivateOp::Op, py::return_value_policy::reference)
		.def_readwrite("InputIdx", &FActivateOp::InputIdx)
		.def_readwrite("RemainingDelay", &FActivateOp::RemainingDelay)
		;
	py::class_< FQueuedActivationInfo >(m, "FQueuedActivationInfo")
		.def_property("bPushTop", [](FQueuedActivationInfo &self){return self.bPushTop;}, [](FQueuedActivationInfo &self, bool value){self.bPushTop = value ? 1 : 0;})
		.def_readwrite("ActivatedEvent", &FQueuedActivationInfo::ActivatedEvent, py::return_value_policy::reference)
		.def_readwrite("InOriginator", &FQueuedActivationInfo::InOriginator, py::return_value_policy::reference)
		.def_readwrite("InInstigator", &FQueuedActivationInfo::InInstigator, py::return_value_policy::reference)
		.def_readwrite("ActivateIndices", &FQueuedActivationInfo::ActivateIndices, py::return_value_policy::reference)
		;
	py::class_< FKCachedConvexDataElement >(m, "FKCachedConvexDataElement")
		.def_readwrite("ConvexElementData", &FKCachedConvexDataElement::ConvexElementData, py::return_value_policy::reference)
		;
	py::class_< FKCachedConvexData >(m, "FKCachedConvexData")
		.def_readwrite("CachedConvexElements", &FKCachedConvexData::CachedConvexElements, py::return_value_policy::reference)
		;
	py::class_< FLinearDOFSetup >(m, "FLinearDOFSetup")
		.def_readwrite("bLimited", &FLinearDOFSetup::bLimited)
		.def_readwrite("LimitSize", &FLinearDOFSetup::LimitSize)
		;
	py::class_< FResourcePoolIdentityState >(m, "FResourcePoolIdentityState")
		.def_readwrite("PoolDefinition", &FResourcePoolIdentityState::PoolDefinition, py::return_value_policy::reference)
		.def_readwrite("PoolGUID", &FResourcePoolIdentityState::PoolGUID)
		;
	py::class_< FRarelyChangedPoolState >(m, "FRarelyChangedPoolState")
		.def_readwrite("ConsumptionRate", &FRarelyChangedPoolState::ConsumptionRate)
		.def_readwrite("ActiveRegenerationRate", &FRarelyChangedPoolState::ActiveRegenerationRate)
		.def_readwrite("OnIdleRegenerationRate", &FRarelyChangedPoolState::OnIdleRegenerationRate)
		.def_readwrite("OnIdleRegenerationDelay", &FRarelyChangedPoolState::OnIdleRegenerationDelay)
		.def_readwrite("PassiveRegenerationRate", &FRarelyChangedPoolState::PassiveRegenerationRate)
		;
	py::class_< FPathSizeInfo >(m, "FPathSizeInfo")
		.def_readwrite("Desc", &FPathSizeInfo::Desc, py::return_value_policy::reference)
		.def_readwrite("Radius", &FPathSizeInfo::Radius)
		.def_readwrite("Height", &FPathSizeInfo::Height)
		.def_readwrite("CrouchHeight", &FPathSizeInfo::CrouchHeight)
		.def_readwrite("PathColor", &FPathSizeInfo::PathColor)
		;
	py::class_< FCameraCutInfo >(m, "FCameraCutInfo")
		.def_readwrite("Location", &FCameraCutInfo::Location, py::return_value_policy::reference)
		.def_readwrite("TimeStamp", &FCameraCutInfo::TimeStamp)
		;
	py::class_< FSavedTransform >(m, "FSavedTransform")
		.def_readwrite("Location", &FSavedTransform::Location, py::return_value_policy::reference)
		.def_readwrite("Rotation", &FSavedTransform::Rotation, py::return_value_policy::reference)
		;
	py::class_< FLevelStreamingNameCombo >(m, "FLevelStreamingNameCombo")
		.def_readwrite("Level", &FLevelStreamingNameCombo::Level, py::return_value_policy::reference)
		.def_readwrite("LevelName", &FLevelStreamingNameCombo::LevelName, py::return_value_policy::reference)
		;
	py::class_< FSwitchClassInfo >(m, "FSwitchClassInfo")
		.def_readwrite("ClassName", &FSwitchClassInfo::ClassName, py::return_value_policy::reference)
		.def_readwrite("bFallThru", &FSwitchClassInfo::bFallThru)
		;
	py::class_< FSwitchObjectCase >(m, "FSwitchObjectCase")
		.def_property("bFallThru", [](FSwitchObjectCase &self){return self.bFallThru;}, [](FSwitchObjectCase &self, bool value){self.bFallThru = value ? 1 : 0;})
		.def_property("bDefaultValue", [](FSwitchObjectCase &self){return self.bDefaultValue;}, [](FSwitchObjectCase &self, bool value){self.bDefaultValue = value ? 1 : 0;})
		.def_readwrite("ObjectValue", &FSwitchObjectCase::ObjectValue, py::return_value_policy::reference)
		;
	py::class_< FShadowRelevanceSizePair >(m, "FShadowRelevanceSizePair")
		.def_readwrite("Size", &FShadowRelevanceSizePair::Size)
		.def_readwrite("DynamicShadowCastRelevance", &FShadowRelevanceSizePair::DynamicShadowCastRelevance)
		.def_readwrite("OverrideStaticShadowSettings", &FShadowRelevanceSizePair::OverrideStaticShadowSettings)
		;
	py::class_< FSoftBodyTetraLink >(m, "FSoftBodyTetraLink")
		.def_readwrite("Index", &FSoftBodyTetraLink::Index)
		.def_readwrite("Bary", &FSoftBodyTetraLink::Bary, py::return_value_policy::reference)
		;
	py::class_< FSoftBodySpecialBoneInfo >(m, "FSoftBodySpecialBoneInfo")
		.def_readwrite("BoneName", &FSoftBodySpecialBoneInfo::BoneName, py::return_value_policy::reference)
		.def_readwrite("BoneType", &FSoftBodySpecialBoneInfo::BoneType)
		.def_readwrite("AttachedVertexIndices", &FSoftBodySpecialBoneInfo::AttachedVertexIndices, py::return_value_policy::reference)
		;
	py::class_< FClothSpecialBoneInfo >(m, "FClothSpecialBoneInfo")
		.def_readwrite("BoneName", &FClothSpecialBoneInfo::BoneName, py::return_value_policy::reference)
		.def_readwrite("BoneType", &FClothSpecialBoneInfo::BoneType)
		.def_readwrite("AttachedVertexIndices", &FClothSpecialBoneInfo::AttachedVertexIndices, py::return_value_policy::reference)
		;
	py::class_< FTriangleSortSettings >(m, "FTriangleSortSettings")
		.def_readwrite("TriangleSorting", &FTriangleSortSettings::TriangleSorting)
		.def_readwrite("CustomLeftRightAxis", &FTriangleSortSettings::CustomLeftRightAxis)
		.def_readwrite("CustomLeftRightBoneName", &FTriangleSortSettings::CustomLeftRightBoneName, py::return_value_policy::reference)
		;
	py::class_< FSkeletalMeshLODInfo >(m, "FSkeletalMeshLODInfo")
		.def_property("bDisableCompressions", [](FSkeletalMeshLODInfo &self){return self.bDisableCompressions;}, [](FSkeletalMeshLODInfo &self, bool value){self.bDisableCompressions = value ? 1 : 0;})
		.def_readwrite("DisplayFactor", &FSkeletalMeshLODInfo::DisplayFactor)
		.def_readwrite("LODHysteresis", &FSkeletalMeshLODInfo::LODHysteresis)
		.def_readwrite("LODMaterialMap", &FSkeletalMeshLODInfo::LODMaterialMap, py::return_value_policy::reference)
		.def_readwrite("bEnableShadowCasting", &FSkeletalMeshLODInfo::bEnableShadowCasting, py::return_value_policy::reference)
		.def_readwrite("TriangleSorting", &FSkeletalMeshLODInfo::TriangleSorting, py::return_value_policy::reference)
		.def_readwrite("TriangleSortSettings", &FSkeletalMeshLODInfo::TriangleSortSettings, py::return_value_policy::reference)
		;
	py::class_< FBoneMirrorExport >(m, "FBoneMirrorExport")
		.def_readwrite("BoneName", &FBoneMirrorExport::BoneName, py::return_value_policy::reference)
		.def_readwrite("SourceBoneName", &FBoneMirrorExport::SourceBoneName, py::return_value_policy::reference)
		.def_readwrite("BoneFlipAxis", &FBoneMirrorExport::BoneFlipAxis)
		;
	py::class_< FBoneMirrorInfo >(m, "FBoneMirrorInfo")
		.def_readwrite("SourceIndex", &FBoneMirrorInfo::SourceIndex)
		.def_readwrite("BoneFlipAxis", &FBoneMirrorInfo::BoneFlipAxis)
		;
	py::class_< FSkelMeshActorControlTarget >(m, "FSkelMeshActorControlTarget")
		.def_readwrite("ControlName", &FSkelMeshActorControlTarget::ControlName, py::return_value_policy::reference)
		.def_readwrite("TargetActor", &FSkelMeshActorControlTarget::TargetActor, py::return_value_policy::reference)
		;
	py::class_< ASkeletalMeshActor_FCheckpointRecord >(m, "ASkeletalMeshActor_FCheckpointRecord")
		.def_property("bReplicated", [](ASkeletalMeshActor_FCheckpointRecord &self){return self.bReplicated;}, [](ASkeletalMeshActor_FCheckpointRecord &self, bool value){self.bReplicated = value ? 1 : 0;})
		.def_property("bHidden", [](ASkeletalMeshActor_FCheckpointRecord &self){return self.bHidden;}, [](ASkeletalMeshActor_FCheckpointRecord &self, bool value){self.bHidden = value ? 1 : 0;})
		.def_property("bSavedPosition", [](ASkeletalMeshActor_FCheckpointRecord &self){return self.bSavedPosition;}, [](ASkeletalMeshActor_FCheckpointRecord &self, bool value){self.bSavedPosition = value ? 1 : 0;})
		.def_readwrite("Location", &ASkeletalMeshActor_FCheckpointRecord::Location, py::return_value_policy::reference)
		.def_readwrite("Rotation", &ASkeletalMeshActor_FCheckpointRecord::Rotation, py::return_value_policy::reference)
		;
	py::class_< FSkelMaterialSetterDatum >(m, "FSkelMaterialSetterDatum")
		.def_readwrite("MaterialIndex", &FSkelMaterialSetterDatum::MaterialIndex)
		.def_readwrite("TheMaterial", &FSkelMaterialSetterDatum::TheMaterial, py::return_value_policy::reference)
		;
	py::class_< FSoundClassEditorData >(m, "FSoundClassEditorData")
		.def_readwrite("NodePosX", &FSoundClassEditorData::NodePosX)
		.def_readwrite("NodePosY", &FSoundClassEditorData::NodePosY)
		;
	py::class_< FSoundClassProperties >(m, "FSoundClassProperties")
		.def_property("bApplyEffects", [](FSoundClassProperties &self){return self.bApplyEffects;}, [](FSoundClassProperties &self, bool value){self.bApplyEffects = value ? 1 : 0;})
		.def_property("bAlwaysPlay", [](FSoundClassProperties &self){return self.bAlwaysPlay;}, [](FSoundClassProperties &self, bool value){self.bAlwaysPlay = value ? 1 : 0;})
		.def_property("bIsUISound", [](FSoundClassProperties &self){return self.bIsUISound;}, [](FSoundClassProperties &self, bool value){self.bIsUISound = value ? 1 : 0;})
		.def_property("bIsMusic", [](FSoundClassProperties &self){return self.bIsMusic;}, [](FSoundClassProperties &self, bool value){self.bIsMusic = value ? 1 : 0;})
		.def_property("bReverb", [](FSoundClassProperties &self){return self.bReverb;}, [](FSoundClassProperties &self, bool value){self.bReverb = value ? 1 : 0;})
		.def_property("bCenterChannelOnly", [](FSoundClassProperties &self){return self.bCenterChannelOnly;}, [](FSoundClassProperties &self, bool value){self.bCenterChannelOnly = value ? 1 : 0;})
		.def_property("bIsDialog", [](FSoundClassProperties &self){return self.bIsDialog;}, [](FSoundClassProperties &self, bool value){self.bIsDialog = value ? 1 : 0;})
		.def_property("bIsAmbience", [](FSoundClassProperties &self){return self.bIsAmbience;}, [](FSoundClassProperties &self, bool value){self.bIsAmbience = value ? 1 : 0;})
		.def_readwrite("Volume", &FSoundClassProperties::Volume)
		.def_readwrite("Pitch", &FSoundClassProperties::Pitch)
		.def_readwrite("StereoBleed", &FSoundClassProperties::StereoBleed)
		.def_readwrite("LFEBleed", &FSoundClassProperties::LFEBleed)
		.def_readwrite("VoiceCenterChannelVolume", &FSoundClassProperties::VoiceCenterChannelVolume)
		.def_readwrite("RadioFilterVolume", &FSoundClassProperties::RadioFilterVolume)
		.def_readwrite("RadioFilterVolumeThreshold", &FSoundClassProperties::RadioFilterVolumeThreshold)
		;
	py::class_< FSoundNodeEditorData >(m, "FSoundNodeEditorData")
		.def_readwrite("NodePosX", &FSoundNodeEditorData::NodePosX)
		.def_readwrite("NodePosY", &FSoundNodeEditorData::NodePosY)
		;
	py::class_< FSoundClassAdjuster >(m, "FSoundClassAdjuster")
		.def_property("bApplyToChildren", [](FSoundClassAdjuster &self){return self.bApplyToChildren;}, [](FSoundClassAdjuster &self, bool value){self.bApplyToChildren = value ? 1 : 0;})
		.def_readwrite("SoundClassName", &FSoundClassAdjuster::SoundClassName)
		.def_readwrite("SoundClass", &FSoundClassAdjuster::SoundClass, py::return_value_policy::reference)
		.def_readwrite("VolumeAdjuster", &FSoundClassAdjuster::VolumeAdjuster)
		.def_readwrite("PitchAdjuster", &FSoundClassAdjuster::PitchAdjuster)
		.def_readwrite("VoiceCenterChannelVolumeAdjuster", &FSoundClassAdjuster::VoiceCenterChannelVolumeAdjuster)
		;
	py::class_< FAudioEQEffect >(m, "FAudioEQEffect")
		.def_readwrite("RootTime", &FAudioEQEffect::RootTime, py::return_value_policy::reference)
		.def_readwrite("HFFrequency", &FAudioEQEffect::HFFrequency)
		.def_readwrite("HFGain", &FAudioEQEffect::HFGain)
		.def_readwrite("MFCutoffFrequency", &FAudioEQEffect::MFCutoffFrequency)
		.def_readwrite("MFBandwidth", &FAudioEQEffect::MFBandwidth)
		.def_readwrite("MFGain", &FAudioEQEffect::MFGain)
		.def_readwrite("LFFrequency", &FAudioEQEffect::LFFrequency)
		.def_readwrite("LFGain", &FAudioEQEffect::LFGain)
		;
	py::class_< FRecognisableWord >(m, "FRecognisableWord")
		.def_readwrite("Id", &FRecognisableWord::Id)
		.def_readwrite("ReferenceWord", &FRecognisableWord::ReferenceWord, py::return_value_policy::reference)
		.def_readwrite("PhoneticWord", &FRecognisableWord::PhoneticWord, py::return_value_policy::reference)
		;
	py::class_< FRecogVocabulary >(m, "FRecogVocabulary")
		.def_readwrite("WhoDictionary", &FRecogVocabulary::WhoDictionary, py::return_value_policy::reference)
		.def_readwrite("WhatDictionary", &FRecogVocabulary::WhatDictionary, py::return_value_policy::reference)
		.def_readwrite("WhereDictionary", &FRecogVocabulary::WhereDictionary, py::return_value_policy::reference)
		.def_readwrite("VocabName", &FRecogVocabulary::VocabName, py::return_value_policy::reference)
		.def_readwrite("VocabData", &FRecogVocabulary::VocabData, py::return_value_policy::reference)
		.def_readwrite("WorkingVocabData", &FRecogVocabulary::WorkingVocabData, py::return_value_policy::reference)
		;
	py::class_< FRecogUserData >(m, "FRecogUserData")
		.def_readwrite("ActiveVocabularies", &FRecogUserData::ActiveVocabularies)
		.def_readwrite("UserData", &FRecogUserData::UserData, py::return_value_policy::reference)
		;
	py::class_< FSplineConnection >(m, "FSplineConnection")
		.def_readwrite("SplineComponent", &FSplineConnection::SplineComponent, py::return_value_policy::reference)
		.def_readwrite("ConnectTo", &FSplineConnection::ConnectTo, py::return_value_policy::reference)
		;
	py::class_< FSplineMeshParams >(m, "FSplineMeshParams")
		.def_readwrite("StartPos", &FSplineMeshParams::StartPos, py::return_value_policy::reference)
		.def_readwrite("StartTangent", &FSplineMeshParams::StartTangent, py::return_value_policy::reference)
		.def_readwrite("StartScale", &FSplineMeshParams::StartScale, py::return_value_policy::reference)
		.def_readwrite("StartRoll", &FSplineMeshParams::StartRoll)
		.def_readwrite("StartOffset", &FSplineMeshParams::StartOffset, py::return_value_policy::reference)
		.def_readwrite("EndPos", &FSplineMeshParams::EndPos, py::return_value_policy::reference)
		.def_readwrite("EndTangent", &FSplineMeshParams::EndTangent, py::return_value_policy::reference)
		.def_readwrite("EndScale", &FSplineMeshParams::EndScale, py::return_value_policy::reference)
		.def_readwrite("EndRoll", &FSplineMeshParams::EndRoll)
		.def_readwrite("EndOffset", &FSplineMeshParams::EndOffset, py::return_value_policy::reference)
		;
	py::class_< ASpotLightToggleable_FCheckpointRecord >(m, "ASpotLightToggleable_FCheckpointRecord")
		.def_property("bEnabled", [](ASpotLightToggleable_FCheckpointRecord &self){return self.bEnabled;}, [](ASpotLightToggleable_FCheckpointRecord &self, bool value){self.bEnabled = value ? 1 : 0;})
		;
	py::class_< FSMMaterialSetterDatum >(m, "FSMMaterialSetterDatum")
		.def_readwrite("MaterialIndex", &FSMMaterialSetterDatum::MaterialIndex)
		.def_readwrite("TheMaterial", &FSMMaterialSetterDatum::TheMaterial, py::return_value_policy::reference)
		;
	py::class_< FVehicleState >(m, "FVehicleState")
		.def_property("bServerHandbrake", [](FVehicleState &self){return self.bServerHandbrake;}, [](FVehicleState &self, bool value){self.bServerHandbrake = value ? 1 : 0;})
		.def_readwrite("RBState", &FVehicleState::RBState, py::return_value_policy::reference)
		.def_readwrite("ServerBrake", &FVehicleState::ServerBrake)
		.def_readwrite("ServerGas", &FVehicleState::ServerGas)
		.def_readwrite("ServerSteering", &FVehicleState::ServerSteering)
		.def_readwrite("ServerRise", &FVehicleState::ServerRise)
		.def_readwrite("ServerView", &FVehicleState::ServerView)
		;
	py::class_< FSearchState >(m, "FSearchState")
		.def_readwrite("Subject", &FSearchState::Subject, py::return_value_policy::reference)
		.def_readwrite("Type", &FSearchState::Type)
		.def_readwrite("ListIndex", &FSearchState::ListIndex)
		.def_readwrite("CurrentList", &FSearchState::CurrentList, py::return_value_policy::reference)
		;
	py::class_< FTerrainHeight >(m, "FTerrainHeight")
		;
	py::class_< FTerrainInfoData >(m, "FTerrainInfoData")
		;
	py::class_< FTerrainLayer >(m, "FTerrainLayer")
		.def_property("Highlighted", [](FTerrainLayer &self){return self.Highlighted;}, [](FTerrainLayer &self, bool value){self.Highlighted = value ? 1 : 0;})
		.def_property("WireframeHighlighted", [](FTerrainLayer &self){return self.WireframeHighlighted;}, [](FTerrainLayer &self, bool value){self.WireframeHighlighted = value ? 1 : 0;})
		.def_property("Hidden", [](FTerrainLayer &self){return self.Hidden;}, [](FTerrainLayer &self, bool value){self.Hidden = value ? 1 : 0;})
		.def_readwrite("Name", &FTerrainLayer::Name, py::return_value_policy::reference)
		.def_readwrite("Setup", &FTerrainLayer::Setup, py::return_value_policy::reference)
		.def_readwrite("AlphaMapIndex", &FTerrainLayer::AlphaMapIndex)
		.def_readwrite("HighlightColor", &FTerrainLayer::HighlightColor, py::return_value_policy::reference)
		.def_readwrite("WireframeColor", &FTerrainLayer::WireframeColor, py::return_value_policy::reference)
		;
	py::class_< FTerrainDecorationInstance >(m, "FTerrainDecorationInstance")
		.def_readwrite("Component", &FTerrainDecorationInstance::Component, py::return_value_policy::reference)
		.def_readwrite("X", &FTerrainDecorationInstance::X)
		.def_readwrite("Y", &FTerrainDecorationInstance::Y)
		.def_readwrite("Scale", &FTerrainDecorationInstance::Scale)
		.def_readwrite("Yaw", &FTerrainDecorationInstance::Yaw)
		;
	py::class_< FTerrainDecoration >(m, "FTerrainDecoration")
		.def_readwrite("Factory", &FTerrainDecoration::Factory, py::return_value_policy::reference)
		.def_readwrite("MinScale", &FTerrainDecoration::MinScale)
		.def_readwrite("MaxScale", &FTerrainDecoration::MaxScale)
		.def_readwrite("Density", &FTerrainDecoration::Density)
		.def_readwrite("SlopeRotationBlend", &FTerrainDecoration::SlopeRotationBlend)
		.def_readwrite("RandSeed", &FTerrainDecoration::RandSeed)
		.def_readwrite("Instances", &FTerrainDecoration::Instances, py::return_value_policy::reference)
		;
	py::class_< FTerrainDecoLayer >(m, "FTerrainDecoLayer")
		.def_readwrite("Name", &FTerrainDecoLayer::Name, py::return_value_policy::reference)
		.def_readwrite("Decorations", &FTerrainDecoLayer::Decorations, py::return_value_policy::reference)
		.def_readwrite("AlphaMapIndex", &FTerrainDecoLayer::AlphaMapIndex)
		;
	py::class_< FAlphaMap >(m, "FAlphaMap")
		;
	py::class_< ATerrain_FTerrainWeightedMaterial >(m, "ATerrain_FTerrainWeightedMaterial")
		;
	py::class_< FSelectedTerrainVertex >(m, "FSelectedTerrainVertex")
		.def_readwrite("X", &FSelectedTerrainVertex::X)
		.def_readwrite("Y", &FSelectedTerrainVertex::Y)
		.def_readwrite("Weight", &FSelectedTerrainVertex::Weight)
		;
	py::class_< FTerrainMaterialResource >(m, "FTerrainMaterialResource")
		;
	py::class_< FCachedTerrainMaterialArray >(m, "FCachedTerrainMaterialArray")
		.def_readwrite("CachedMaterials", &FCachedTerrainMaterialArray::CachedMaterials, py::return_value_policy::reference)
		;
	py::class_< FTerrainBVTree >(m, "FTerrainBVTree")
		.def_readwrite("Nodes", &FTerrainBVTree::Nodes, py::return_value_policy::reference)
		;
	py::class_< FTerrainkDOPTree >(m, "FTerrainkDOPTree")
		.def_readwrite("Nodes", &FTerrainkDOPTree::Nodes, py::return_value_policy::reference)
		.def_readwrite("Triangles", &FTerrainkDOPTree::Triangles, py::return_value_policy::reference)
		;
	py::class_< FFilterLimit >(m, "FFilterLimit")
		.def_property("Enabled", [](FFilterLimit &self){return self.Enabled;}, [](FFilterLimit &self, bool value){self.Enabled = value ? 1 : 0;})
		.def_readwrite("Base", &FFilterLimit::Base)
		.def_readwrite("NoiseScale", &FFilterLimit::NoiseScale)
		.def_readwrite("NoiseAmount", &FFilterLimit::NoiseAmount)
		;
	py::class_< FTerrainFilteredMaterial >(m, "FTerrainFilteredMaterial")
		.def_property("UseNoise", [](FTerrainFilteredMaterial &self){return self.UseNoise;}, [](FTerrainFilteredMaterial &self, bool value){self.UseNoise = value ? 1 : 0;})
		.def_readwrite("NoiseScale", &FTerrainFilteredMaterial::NoiseScale)
		.def_readwrite("NoisePercent", &FTerrainFilteredMaterial::NoisePercent)
		.def_readwrite("MinHeight", &FTerrainFilteredMaterial::MinHeight, py::return_value_policy::reference)
		.def_readwrite("MaxHeight", &FTerrainFilteredMaterial::MaxHeight, py::return_value_policy::reference)
		.def_readwrite("MinSlope", &FTerrainFilteredMaterial::MinSlope, py::return_value_policy::reference)
		.def_readwrite("MaxSlope", &FTerrainFilteredMaterial::MaxSlope, py::return_value_policy::reference)
		.def_readwrite("Alpha", &FTerrainFilteredMaterial::Alpha)
		.def_readwrite("Material", &FTerrainFilteredMaterial::Material, py::return_value_policy::reference)
		;
	py::class_< FTerrainFoliageMesh >(m, "FTerrainFoliageMesh")
		.def_readwrite("StaticMesh", &FTerrainFoliageMesh::StaticMesh, py::return_value_policy::reference)
		.def_readwrite("Material", &FTerrainFoliageMesh::Material, py::return_value_policy::reference)
		.def_readwrite("Density", &FTerrainFoliageMesh::Density)
		.def_readwrite("MaxDrawRadius", &FTerrainFoliageMesh::MaxDrawRadius)
		.def_readwrite("MinTransitionRadius", &FTerrainFoliageMesh::MinTransitionRadius)
		.def_readwrite("MinScale", &FTerrainFoliageMesh::MinScale)
		.def_readwrite("MaxScale", &FTerrainFoliageMesh::MaxScale)
		.def_readwrite("MinUniformScale", &FTerrainFoliageMesh::MinUniformScale)
		.def_readwrite("MaxUniformScale", &FTerrainFoliageMesh::MaxUniformScale)
		.def_readwrite("MinThinningRadius", &FTerrainFoliageMesh::MinThinningRadius)
		.def_readwrite("Seed", &FTerrainFoliageMesh::Seed)
		.def_readwrite("SwayScale", &FTerrainFoliageMesh::SwayScale)
		.def_readwrite("AlphaMapThreshold", &FTerrainFoliageMesh::AlphaMapThreshold)
		.def_readwrite("SlopeRotationBlend", &FTerrainFoliageMesh::SlopeRotationBlend)
		;
	py::class_< UTerrainWeightMapTexture_FTerrainWeightedMaterial >(m, "UTerrainWeightMapTexture_FTerrainWeightedMaterial")
		;
	py::class_< FSourceTexture2DRegion >(m, "FSourceTexture2DRegion")
		.def_readwrite("OffsetX", &FSourceTexture2DRegion::OffsetX)
		.def_readwrite("OffsetY", &FSourceTexture2DRegion::OffsetY)
		.def_readwrite("SizeX", &FSourceTexture2DRegion::SizeX)
		.def_readwrite("SizeY", &FSourceTexture2DRegion::SizeY)
		.def_readwrite("Texture2D", &FSourceTexture2DRegion::Texture2D, py::return_value_policy::reference)
		;
	py::class_< ATrigger_FCheckpointRecord >(m, "ATrigger_FCheckpointRecord")
		.def_property("bCollideActors", [](ATrigger_FCheckpointRecord &self){return self.bCollideActors;}, [](ATrigger_FCheckpointRecord &self, bool value){self.bCollideActors = value ? 1 : 0;})
		;
	py::class_< FLevelStreamingData >(m, "FLevelStreamingData")
		.def_property("bShouldBeLoaded", [](FLevelStreamingData &self){return self.bShouldBeLoaded;}, [](FLevelStreamingData &self, bool value){self.bShouldBeLoaded = value ? 1 : 0;})
		.def_property("bShouldBeVisible", [](FLevelStreamingData &self){return self.bShouldBeVisible;}, [](FLevelStreamingData &self, bool value){self.bShouldBeVisible = value ? 1 : 0;})
		.def_property("bShouldBlockOnLoad", [](FLevelStreamingData &self){return self.bShouldBlockOnLoad;}, [](FLevelStreamingData &self, bool value){self.bShouldBlockOnLoad = value ? 1 : 0;})
		.def_readwrite("Level", &FLevelStreamingData::Level, py::return_value_policy::reference)
		;
	py::class_< FPlayerStorageArrayProvider >(m, "FPlayerStorageArrayProvider")
		.def_readwrite("PlayerStorageId", &FPlayerStorageArrayProvider::PlayerStorageId)
		.def_readwrite("PlayerStorageName", &FPlayerStorageArrayProvider::PlayerStorageName, py::return_value_policy::reference)
		.def_readwrite("Provider", &FPlayerStorageArrayProvider::Provider, py::return_value_policy::reference)
		;
	py::class_< FSettingsArrayProvider >(m, "FSettingsArrayProvider")
		.def_readwrite("SettingsId", &FSettingsArrayProvider::SettingsId)
		.def_readwrite("SettingsName", &FSettingsArrayProvider::SettingsName, py::return_value_policy::reference)
		.def_readwrite("Provider", &FSettingsArrayProvider::Provider, py::return_value_policy::reference)
		;
	py::class_< FDynamicResourceProviderDefinition >(m, "FDynamicResourceProviderDefinition")
		.def_readwrite("ProviderTag", &FDynamicResourceProviderDefinition::ProviderTag, py::return_value_policy::reference)
		.def_readwrite("ProviderClassName", &FDynamicResourceProviderDefinition::ProviderClassName, py::return_value_policy::reference)
		.def_readwrite("ProviderClass", &FDynamicResourceProviderDefinition::ProviderClass, py::return_value_policy::reference)
		;
	py::class_< FGameResourceDataProvider >(m, "FGameResourceDataProvider")
		.def_property("bExpandProviders", [](FGameResourceDataProvider &self){return self.bExpandProviders;}, [](FGameResourceDataProvider &self, bool value){self.bExpandProviders = value ? 1 : 0;})
		.def_readwrite("ProviderTag", &FGameResourceDataProvider::ProviderTag, py::return_value_policy::reference)
		.def_readwrite("ProviderClassName", &FGameResourceDataProvider::ProviderClassName, py::return_value_policy::reference)
		.def_readwrite("ProviderClass", &FGameResourceDataProvider::ProviderClass, py::return_value_policy::reference)
		;
	py::class_< FUIInputKeyData >(m, "FUIInputKeyData")
		.def_readwrite("InputKeyData", &FUIInputKeyData::InputKeyData, py::return_value_policy::reference)
		.def_readwrite("ButtonFontMarkupString", &FUIInputKeyData::ButtonFontMarkupString, py::return_value_policy::reference)
		;
	py::class_< FUIDataStoreInputAlias >(m, "FUIDataStoreInputAlias")
		.def_readwrite("AliasName", &FUIDataStoreInputAlias::AliasName, py::return_value_policy::reference)
		;
	py::class_< FGameSearchCfg >(m, "FGameSearchCfg")
		.def_readwrite("GameSearchClass", &FGameSearchCfg::GameSearchClass, py::return_value_policy::reference)
		.def_readwrite("DefaultGameSettingsClass", &FGameSearchCfg::DefaultGameSettingsClass, py::return_value_policy::reference)
		.def_readwrite("SearchResultsProviderClass", &FGameSearchCfg::SearchResultsProviderClass, py::return_value_policy::reference)
		.def_readwrite("DesiredSettingsProvider", &FGameSearchCfg::DesiredSettingsProvider, py::return_value_policy::reference)
		.def_readwrite("SearchResults", &FGameSearchCfg::SearchResults, py::return_value_policy::reference)
		.def_readwrite("Search", &FGameSearchCfg::Search, py::return_value_policy::reference)
		.def_readwrite("SearchName", &FGameSearchCfg::SearchName, py::return_value_policy::reference)
		;
	py::class_< FGameSettingsCfg >(m, "FGameSettingsCfg")
		.def_readwrite("GameSettingsClass", &FGameSettingsCfg::GameSettingsClass, py::return_value_policy::reference)
		.def_readwrite("Provider", &FGameSettingsCfg::Provider, py::return_value_policy::reference)
		.def_readwrite("GameSettings", &FGameSettingsCfg::GameSettings, py::return_value_policy::reference)
		.def_readwrite("SettingsName", &FGameSettingsCfg::SettingsName, py::return_value_policy::reference)
		;
	py::class_< FRankMetaData >(m, "FRankMetaData")
		.def_readwrite("RankName", &FRankMetaData::RankName, py::return_value_policy::reference)
		.def_readwrite("RankColumnName", &FRankMetaData::RankColumnName, py::return_value_policy::reference)
		;
	py::class_< FPlayerNickMetaData >(m, "FPlayerNickMetaData")
		.def_readwrite("PlayerNickName", &FPlayerNickMetaData::PlayerNickName, py::return_value_policy::reference)
		.def_readwrite("PlayerNickColumnName", &FPlayerNickMetaData::PlayerNickColumnName, py::return_value_policy::reference)
		;
	py::class_< FUIMenuInputMap >(m, "FUIMenuInputMap")
		.def_readwrite("FieldName", &FUIMenuInputMap::FieldName, py::return_value_policy::reference)
		.def_readwrite("Set", &FUIMenuInputMap::Set, py::return_value_policy::reference)
		.def_readwrite("MappedText", &FUIMenuInputMap::MappedText, py::return_value_policy::reference)
		;
	py::class_< FUIKeyRepeatData >(m, "FUIKeyRepeatData")
		.def_readwrite("CurrentRepeatKey", &FUIKeyRepeatData::CurrentRepeatKey, py::return_value_policy::reference)
		.def_readwrite("NextRepeatTime", &FUIKeyRepeatData::NextRepeatTime, py::return_value_policy::reference)
		;
	py::class_< FUIAxisEmulationData, FUIKeyRepeatData >(m, "FUIAxisEmulationData")
		.def_property("bEnabled", [](FUIAxisEmulationData &self){return self.bEnabled;}, [](FUIAxisEmulationData &self, bool value){self.bEnabled = value ? 1 : 0;})
		;
	py::class_< FSoundEventMapping >(m, "FSoundEventMapping")
		.def_readwrite("SoundEventName", &FSoundEventMapping::SoundEventName, py::return_value_policy::reference)
		.def_readwrite("SoundToPlay", &FSoundEventMapping::SoundToPlay, py::return_value_policy::reference)
		;
	py::class_< FUIStatData >(m, "FUIStatData")
		.def_property("bDisplayAsModifierOnly", [](FUIStatData &self){return self.bDisplayAsModifierOnly;}, [](FUIStatData &self, bool value){self.bDisplayAsModifierOnly = value ? 1 : 0;})
		.def_readwrite("AttributeStyle", &FUIStatData::AttributeStyle)
		.def_readwrite("SupplementalAttributeStyle", &FUIStatData::SupplementalAttributeStyle)
		.def_readwrite("StatCombinationMethod", &FUIStatData::StatCombinationMethod)
		.def_readwrite("Attribute", &FUIStatData::Attribute, py::return_value_policy::reference)
		.def_readwrite("ConstraintAttribute", &FUIStatData::ConstraintAttribute, py::return_value_policy::reference)
		.def_readwrite("SupplementalAttributeExpression", &FUIStatData::SupplementalAttributeExpression, py::return_value_policy::reference)
		.def_readwrite("SupplementalAttributeToAppend", &FUIStatData::SupplementalAttributeToAppend, py::return_value_policy::reference)
		;
	py::class_< FAttributeSlotEffectData >(m, "FAttributeSlotEffectData")
		.def_property("bExternalSlot", [](FAttributeSlotEffectData &self){return self.bExternalSlot;}, [](FAttributeSlotEffectData &self, bool value){self.bExternalSlot = value ? 1 : 0;})
		.def_property("bRunEffectsAsSkill", [](FAttributeSlotEffectData &self){return self.bRunEffectsAsSkill;}, [](FAttributeSlotEffectData &self, bool value){self.bRunEffectsAsSkill = value ? 1 : 0;})
		.def_property("bIncludeInFunStats", [](FAttributeSlotEffectData &self){return self.bIncludeInFunStats;}, [](FAttributeSlotEffectData &self, bool value){self.bIncludeInFunStats = value ? 1 : 0;})
		.def_property("bIncludeAlliesAsTarget", [](FAttributeSlotEffectData &self){return self.bIncludeAlliesAsTarget;}, [](FAttributeSlotEffectData &self, bool value){self.bIncludeAlliesAsTarget = value ? 1 : 0;})
		.def_property("bEnforceMinimumGrade", [](FAttributeSlotEffectData &self){return self.bEnforceMinimumGrade;}, [](FAttributeSlotEffectData &self, bool value){self.bEnforceMinimumGrade = value ? 1 : 0;})
		.def_property("bEnforceMaximumGrade", [](FAttributeSlotEffectData &self){return self.bEnforceMaximumGrade;}, [](FAttributeSlotEffectData &self, bool value){self.bEnforceMaximumGrade = value ? 1 : 0;})
		.def_readwrite("SlotName", &FAttributeSlotEffectData::SlotName, py::return_value_policy::reference)
		.def_readwrite("AttributeToModify", &FAttributeSlotEffectData::AttributeToModify, py::return_value_policy::reference)
		.def_readwrite("ConstraintAttribute", &FAttributeSlotEffectData::ConstraintAttribute, py::return_value_policy::reference)
		.def_readwrite("ModifierType", &FAttributeSlotEffectData::ModifierType)
		.def_readwrite("BaseModifierValue", &FAttributeSlotEffectData::BaseModifierValue, py::return_value_policy::reference)
		.def_readwrite("PerGradeUpgrade", &FAttributeSlotEffectData::PerGradeUpgrade, py::return_value_policy::reference)
		.def_readwrite("MinimumGrade", &FAttributeSlotEffectData::MinimumGrade)
		.def_readwrite("MaximumGrade", &FAttributeSlotEffectData::MaximumGrade)
		.def_readwrite("TargetInstanceDataName", &FAttributeSlotEffectData::TargetInstanceDataName, py::return_value_policy::reference)
		;
	py::class_< FAttributeSlotUpgradeData >(m, "FAttributeSlotUpgradeData")
		.def_property("bActivateSlot", [](FAttributeSlotUpgradeData &self){return self.bActivateSlot;}, [](FAttributeSlotUpgradeData &self, bool value){self.bActivateSlot = value ? 1 : 0;})
		.def_readwrite("SlotName", &FAttributeSlotUpgradeData::SlotName, py::return_value_policy::reference)
		.def_readwrite("GradeIncrease", &FAttributeSlotUpgradeData::GradeIncrease)
		;
	py::class_< FInventorySerialNumber >(m, "FInventorySerialNumber")
		.def_readwrite("State", &FInventorySerialNumber::State)
		.def_readwrite("RunningCounter", &FInventorySerialNumber::RunningCounter)
		.def_readwrite("EncryptedLength", &FInventorySerialNumber::EncryptedLength)
		;
	py::class_< FAttributeSlotData >(m, "FAttributeSlotData")
		.def_property("bExternalSlot", [](FAttributeSlotData &self){return self.bExternalSlot;}, [](FAttributeSlotData &self, bool value){self.bExternalSlot = value ? 1 : 0;})
		.def_property("bRunEffectsAsSkill", [](FAttributeSlotData &self){return self.bRunEffectsAsSkill;}, [](FAttributeSlotData &self, bool value){self.bRunEffectsAsSkill = value ? 1 : 0;})
		.def_property("bActivated", [](FAttributeSlotData &self){return self.bActivated;}, [](FAttributeSlotData &self, bool value){self.bActivated = value ? 1 : 0;})
		.def_property("bIncludeAlliesAsTarget", [](FAttributeSlotData &self){return self.bIncludeAlliesAsTarget;}, [](FAttributeSlotData &self, bool value){self.bIncludeAlliesAsTarget = value ? 1 : 0;})
		.def_property("bIncludeInModifierText", [](FAttributeSlotData &self){return self.bIncludeInModifierText;}, [](FAttributeSlotData &self, bool value){self.bIncludeInModifierText = value ? 1 : 0;})
		.def_property("bEnforceMinimumGrade", [](FAttributeSlotData &self){return self.bEnforceMinimumGrade;}, [](FAttributeSlotData &self, bool value){self.bEnforceMinimumGrade = value ? 1 : 0;})
		.def_property("bEnforceMaximumGrade", [](FAttributeSlotData &self){return self.bEnforceMaximumGrade;}, [](FAttributeSlotData &self, bool value){self.bEnforceMaximumGrade = value ? 1 : 0;})
		.def_readwrite("SlotName", &FAttributeSlotData::SlotName, py::return_value_policy::reference)
		.def_readwrite("MinimumGrade", &FAttributeSlotData::MinimumGrade)
		.def_readwrite("MaximumGrade", &FAttributeSlotData::MaximumGrade)
		.def_readwrite("TargetInstanceDataName", &FAttributeSlotData::TargetInstanceDataName, py::return_value_policy::reference)
		.def_readwrite("EffectGrade", &FAttributeSlotData::EffectGrade)
		.def_readwrite("AttributeToModify", &FAttributeSlotData::AttributeToModify, py::return_value_policy::reference)
		.def_readwrite("ConstraintAttribute", &FAttributeSlotData::ConstraintAttribute, py::return_value_policy::reference)
		.def_readwrite("ModifierType", &FAttributeSlotData::ModifierType)
		.def_readwrite("BaseModifierValue", &FAttributeSlotData::BaseModifierValue, py::return_value_policy::reference)
		.def_readwrite("PerGradeUpgrade", &FAttributeSlotData::PerGradeUpgrade, py::return_value_policy::reference)
		.def_readwrite("ComputedModifierValue", &FAttributeSlotData::ComputedModifierValue)
		;
	py::class_< FWorldEventSource >(m, "FWorldEventSource")
		.def_property("bNeedsUpdate", [](FWorldEventSource &self){return self.bNeedsUpdate;}, [](FWorldEventSource &self, bool value){self.bNeedsUpdate = value ? 1 : 0;})
		.def_readwrite("AkEvent", &FWorldEventSource::AkEvent, py::return_value_policy::reference)
		.def_readwrite("GroupActor", &FWorldEventSource::GroupActor, py::return_value_policy::reference)
		.def_readwrite("AkComponents", &FWorldEventSource::AkComponents, py::return_value_policy::reference)
		.def_readwrite("Sources", &FWorldEventSource::Sources, py::return_value_policy::reference)
		.def_readwrite("LastUpdateTime", &FWorldEventSource::LastUpdateTime)
		;

}