#include "stdafx.h"
// Using =======================================================================
using namespace boost::python;

// Module ======================================================================
void Export_pystes_UPopulationMaster()
{
    class_< UPopulationMaster, bases< UObject >  , boost::noncopyable>("UPopulationMaster", no_init)
        .def_readwrite("OpportunityList", &UPopulationMaster::OpportunityList)
        .def_readwrite("ActiveActorCost", &UPopulationMaster::ActiveActorCost)
        .def_readwrite("MaxActorCost", &UPopulationMaster::MaxActorCost)
        .def_readwrite("MasterThinkRate", &UPopulationMaster::MasterThinkRate)
        .def_readwrite("MasterTestForDestroyRate", &UPopulationMaster::MasterTestForDestroyRate)
        .def_readwrite("IfIrrelevantDestroyTimeout", &UPopulationMaster::IfIrrelevantDestroyTimeout)
        .def_readwrite("PopulationMasterStats", &UPopulationMaster::PopulationMasterStats)
        .def_readwrite("EncounterList", &UPopulationMaster::EncounterList)
        .def_readwrite("SecondsElapsed", &UPopulationMaster::SecondsElapsed)
        .def_readwrite("NextOpportunityTickTime", &UPopulationMaster::NextOpportunityTickTime)
        .def_readwrite("NextDestroyTestTickTime", &UPopulationMaster::NextDestroyTestTickTime)
        .def_readwrite("PopulationRespawnDelayInSeconds", &UPopulationMaster::PopulationRespawnDelayInSeconds)
        .def("StaticClass", &UPopulationMaster::StaticClass, return_value_policy< reference_existing_object >())
        .def("GetActorSpawnedFromOpportunity", &UPopulationMaster::GetActorSpawnedFromOpportunity, return_value_policy< reference_existing_object >())
        .def("GetSavedActorDebugInfoForOpportunity", &UPopulationMaster::GetSavedActorDebugInfoForOpportunity)
        .def("GetNumberOfSavedActorsForOpportunity", &UPopulationMaster::GetNumberOfSavedActorsForOpportunity)
        .def("WillActorsOpportunityBeResetOnLevelLoad", &UPopulationMaster::WillActorsOpportunityBeResetOnLevelLoad)
        .def("ResetRespawn", &UPopulationMaster::ResetRespawn)
        .def("GetStreamingLevelForActor", &UPopulationMaster::GetStreamingLevelForActor, return_value_policy< reference_existing_object >())
        .def("HasCapacityToSpawnFromFactories", &UPopulationMaster::HasCapacityToSpawnFromFactories)
        .def("HasCapacityToSpawnFromFactory", &UPopulationMaster::HasCapacityToSpawnFromFactory)
        .def("IsPopulationSystemAtCapacity", &UPopulationMaster::IsPopulationSystemAtCapacity)
        .def("StatProfileStop", &UPopulationMaster::StatProfileStop)
        .def("StatProfileStart", &UPopulationMaster::StatProfileStart)
        .def("GetStatProfileTime", &UPopulationMaster::GetStatProfileTime)
        .def("AddSavedActor", &UPopulationMaster::AddSavedActor)
        .def("DisconnectEncounter", &UPopulationMaster::DisconnectEncounter)
        .def("ConnectEncounter", &UPopulationMaster::ConnectEncounter)
        .def("DisconnectOpportunity", &UPopulationMaster::DisconnectOpportunity)
        .def("ConnectOpportunity", &UPopulationMaster::ConnectOpportunity)
        .def("GetWorldInfo", &UPopulationMaster::GetWorldInfo, return_value_policy< reference_existing_object >())
        .def("DestroySpawnedActors", &UPopulationMaster::DestroySpawnedActors)
        .def("RemoveSpawnedActor", &UPopulationMaster::RemoveSpawnedActor)
        .def("SetSpawnedActorsReuse", &UPopulationMaster::SetSpawnedActorsReuse)
        .def("AddExternalActor", &UPopulationMaster::AddExternalActor)
        .def("SpawnActorFromOpportunity", &UPopulationMaster::SpawnActorFromOpportunity, return_value_policy< reference_existing_object >())
        .def("SpawnActor", &UPopulationMaster::SpawnActor, return_value_policy< reference_existing_object >())
        .def("GetPopulationOpportunityIndex", &UPopulationMaster::GetPopulationOpportunityIndex)
        .def("GetActorsOpportunity", &UPopulationMaster::GetActorsOpportunity, return_value_policy< reference_existing_object >())
        .def("SpawnPopulationControlledActor", &UPopulationMaster::SpawnPopulationControlledActor, return_value_policy< reference_existing_object >())
        .staticmethod("StaticClass")
  ;
}