#include "stdafx.h"
// Using =======================================================================
using namespace boost::python;

// Module ======================================================================
void Export_pystes_UGearboxCoverStateManager()
{
    class_< UGearboxCoverStateManager, bases< UObject >  , boost::noncopyable>("UGearboxCoverStateManager", no_init)
        .def_readwrite("MyGearboxPawn", &UGearboxCoverStateManager::MyGearboxPawn)
        .def_readwrite("DesiredCoverState", &UGearboxCoverStateManager::DesiredCoverState)
        .def_readwrite("CurrentCoverState", &UGearboxCoverStateManager::CurrentCoverState)
        .def_readwrite("DesiredCoverTransition", &UGearboxCoverStateManager::DesiredCoverTransition)
        .def_readwrite("CurrentCoverTransition", &UGearboxCoverStateManager::CurrentCoverTransition)
        .def_readwrite("DesiredCoverInfo", &UGearboxCoverStateManager::DesiredCoverInfo)
        .def_readwrite("CurrentCoverInfo", &UGearboxCoverStateManager::CurrentCoverInfo)
        .def_readwrite("LastCoverInfo", &UGearboxCoverStateManager::LastCoverInfo)
        .def_readwrite("CoverDebugInnerRadius", &UGearboxCoverStateManager::CoverDebugInnerRadius)
        .def_readwrite("CoverDebugOuterRadius", &UGearboxCoverStateManager::CoverDebugOuterRadius)
        .def_readwrite("CoverDebugSearchAngle", &UGearboxCoverStateManager::CoverDebugSearchAngle)
        .def_readwrite("CoverDebugSearchDirection", &UGearboxCoverStateManager::CoverDebugSearchDirection)
        .def_readwrite("CoverDebugSearchOrigin", &UGearboxCoverStateManager::CoverDebugSearchOrigin)
        .def_readwrite("CoverDebugList", &UGearboxCoverStateManager::CoverDebugList)
        .def_readwrite("HorizontalCoverAngleDegrees", &UGearboxCoverStateManager::HorizontalCoverAngleDegrees)
        .def_readwrite("VerticalCoverAngleDegrees", &UGearboxCoverStateManager::VerticalCoverAngleDegrees)
        .def("StaticClass", &UGearboxCoverStateManager::StaticClass, return_value_policy< reference_existing_object >())
        .def("IsChangingDirection", &UGearboxCoverStateManager::IsChangingDirection)
        .def("IsMantlingOverCoverInProgress", &UGearboxCoverStateManager::IsMantlingOverCoverInProgress)
        .def("IsReturnFromPeekInProgress", &UGearboxCoverStateManager::IsReturnFromPeekInProgress)
        .def("IsPeekTransitionInProgress", &UGearboxCoverStateManager::IsPeekTransitionInProgress)
        .def("IsPeekedUp", &UGearboxCoverStateManager::IsPeekedUp)
        .def("IsReturnFromLeanOutInProgress", &UGearboxCoverStateManager::IsReturnFromLeanOutInProgress)
        .def("IsLeanOutTransitionInProgress", &UGearboxCoverStateManager::IsLeanOutTransitionInProgress)
        .def("IsLeanedOut", &UGearboxCoverStateManager::IsLeanedOut)
        .def("IsReturnFromPopUpInProgress", &UGearboxCoverStateManager::IsReturnFromPopUpInProgress)
        .def("IsPopUpTransitionInProgress", &UGearboxCoverStateManager::IsPopUpTransitionInProgress)
        .def("IsPoppedUp", &UGearboxCoverStateManager::IsPoppedUp)
        .def("IsExecutingAnyTransition", &UGearboxCoverStateManager::IsExecutingAnyTransition)
        .def("GetDesiredState", &UGearboxCoverStateManager::GetDesiredState)
        .def("GetCurrentTransition", &UGearboxCoverStateManager::GetCurrentTransition)
        .def("OnMantleOverCoverAnimEnd", &UGearboxCoverStateManager::OnMantleOverCoverAnimEnd)
        .def("OnTransitionAnimEndEx", &UGearboxCoverStateManager::OnTransitionAnimEndEx)
        .def("OnTransitionAnimEnd", &UGearboxCoverStateManager::OnTransitionAnimEnd)
        .def("OnDismountAnimEnd", &UGearboxCoverStateManager::OnDismountAnimEnd)
        .def("OnMountAnimEnd", &UGearboxCoverStateManager::OnMountAnimEnd)
        .def("MantleOverCover", &UGearboxCoverStateManager::MantleOverCover)
        .def("ReturnToCover", &UGearboxCoverStateManager::ReturnToCover)
        .def("LeanOutForFiring", &UGearboxCoverStateManager::LeanOutForFiring)
        .def("PopUpForFiring", &UGearboxCoverStateManager::PopUpForFiring)
        .def("Peek", &UGearboxCoverStateManager::Peek)
        .def("DetachFromCover", &UGearboxCoverStateManager::DetachFromCover)
        .def("DismountCover", &UGearboxCoverStateManager::DismountCover)
        .def("ClaimAndMountCover", &UGearboxCoverStateManager::ClaimAndMountCover)
        .def("MountDesiredCover", &UGearboxCoverStateManager::MountDesiredCover)
        .def("ClearDesiredCover", &UGearboxCoverStateManager::ClearDesiredCover)
        .def("GetCurrentCoverLocationAndRotation", &UGearboxCoverStateManager::GetCurrentCoverLocationAndRotation)
        .def("GetDesiredCoverLocationAndRotation", &UGearboxCoverStateManager::GetDesiredCoverLocationAndRotation)
        .def("HasDesiredCover", &UGearboxCoverStateManager::HasDesiredCover)
        .def("GetLastCoverHeight", &UGearboxCoverStateManager::GetLastCoverHeight)
        .def("GetCurrentCoverHeight", &UGearboxCoverStateManager::GetCurrentCoverHeight)
        .def("GetDesiredCoverHeight", &UGearboxCoverStateManager::GetDesiredCoverHeight)
        .def("WasCoveredFrom", &UGearboxCoverStateManager::WasCoveredFrom)
        .def("WillBeCoveredFrom", &UGearboxCoverStateManager::WillBeCoveredFrom)
        .def("IsCoveredFrom", &UGearboxCoverStateManager::IsCoveredFrom)
        .def("IsDismountInProgress", &UGearboxCoverStateManager::IsDismountInProgress)
        .def("IsMountInProgress", &UGearboxCoverStateManager::IsMountInProgress)
        .def("WasMountedOnCover", &UGearboxCoverStateManager::WasMountedOnCover)
        .def("IsMountedOnCover", &UGearboxCoverStateManager::IsMountedOnCover)
        .def("IsUsingCover", &UGearboxCoverStateManager::IsUsingCover)
        .def("OnCoverStateChanged", &UGearboxCoverStateManager::OnCoverStateChanged)
        .def("GetLastCover", &UGearboxCoverStateManager::GetLastCover)
        .def("GetCurrentCover", &UGearboxCoverStateManager::GetCurrentCover)
        .def("GetDesiredCover", &UGearboxCoverStateManager::GetDesiredCover)
        .def("FindCoverAndClaim", &UGearboxCoverStateManager::FindCoverAndClaim)
        .def("Initialize", &UGearboxCoverStateManager::Initialize)
        .staticmethod("StaticClass")
  ;
}