#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_APlayerController(py::module &m)
{
    py::class_< APlayerController, AController   >(m, "APlayerController")
		.def_static("StaticClass", &APlayerController::StaticClass, py::return_value_policy::reference)
        .def_readwrite("Player", &APlayerController::Player)
        .def_readwrite("PlayerCamera", &APlayerController::PlayerCamera)
        .def_readwrite("CameraClass", &APlayerController::CameraClass)
        .def_readwrite("MaxResponseTime", &APlayerController::MaxResponseTime)
        .def_readwrite("WaitDelay", &APlayerController::WaitDelay)
        .def_readwrite("AcknowledgedPawn", &APlayerController::AcknowledgedPawn)
        .def_readwrite("DoubleClickDir", &APlayerController::DoubleClickDir)
        .def_readwrite("LastAckedAnalogPct", &APlayerController::LastAckedAnalogPct)
        .def_readwrite("bIgnoreMoveInput", &APlayerController::bIgnoreMoveInput)
        .def_readwrite("bIgnoreLookInput", &APlayerController::bIgnoreLookInput)
        .def_readwrite("bIgnoreButtonInput", &APlayerController::bIgnoreButtonInput)
        .def_readwrite("bRun", &APlayerController::bRun)
        .def_readwrite("bDuck", &APlayerController::bDuck)
        .def_readwrite("NetPlayerIndex", &APlayerController::NetPlayerIndex)
        .def_readwrite("ViewTarget", &APlayerController::ViewTarget)
        .def_readwrite("RealViewTarget", &APlayerController::RealViewTarget)
        .def_readwrite("ControllingDirTrackInst", &APlayerController::ControllingDirTrackInst)
        .def_readwrite("FOVAngle", &APlayerController::FOVAngle)
        .def_readwrite("DesiredFOV", &APlayerController::DesiredFOV)
        .def_readwrite("DesiredFOVBaseValue", &APlayerController::DesiredFOVBaseValue)
        .def_readwrite("DesiredFOVModifierStack", &APlayerController::DesiredFOVModifierStack)
        .def_readwrite("DefaultFOV", &APlayerController::DefaultFOV)
        .def_readwrite("LODDistanceFactor", &APlayerController::LODDistanceFactor)
        .def_readwrite("ForegroundFOV", &APlayerController::ForegroundFOV)
        .def_readwrite("TargetViewRotation", &APlayerController::TargetViewRotation)
        .def_readwrite("TargetEyeHeight", &APlayerController::TargetEyeHeight)
        .def_readwrite("BlendedTargetViewRotation", &APlayerController::BlendedTargetViewRotation)
        .def_readwrite("myHUD", &APlayerController::myHUD)
        .def_readwrite("SavedMoveClass", &APlayerController::SavedMoveClass)
        .def_readwrite("SavedMoves", &APlayerController::SavedMoves)
        .def_readwrite("FreeMoves", &APlayerController::FreeMoves)
        .def_readwrite("PendingMove", &APlayerController::PendingMove)
        .def_readwrite("LastAckedAccel", &APlayerController::LastAckedAccel)
        .def_readwrite("CurrentTimeStamp", &APlayerController::CurrentTimeStamp)
        .def_readwrite("LastUpdateTime", &APlayerController::LastUpdateTime)
        .def_readwrite("ServerTimeStamp", &APlayerController::ServerTimeStamp)
        .def_readwrite("TimeMargin", &APlayerController::TimeMargin)
        .def_readwrite("ClientUpdateTime", &APlayerController::ClientUpdateTime)
        .def_readwrite("MaxTimeMargin", &APlayerController::MaxTimeMargin)
        .def_readwrite("LastActiveTime", &APlayerController::LastActiveTime)
        .def_readwrite("ClientCap", &APlayerController::ClientCap)
        .def_readwrite("DynamicPingThreshold", &APlayerController::DynamicPingThreshold)
        .def_readwrite("LastPingUpdate", &APlayerController::LastPingUpdate)
        .def_readwrite("LastSpeedHackLog", &APlayerController::LastSpeedHackLog)
        .def_readwrite("PendingAdjustment", &APlayerController::PendingAdjustment)
        .def_readwrite("GroundPitch", &APlayerController::GroundPitch)
        .def_readwrite("CheatManager", &APlayerController::CheatManager)
        .def_readwrite("CheatClass", &APlayerController::CheatClass)
        .def_readwrite("PlayerInput", &APlayerController::PlayerInput)
        .def_readwrite("InputClass", &APlayerController::InputClass)
        .def_readwrite("FailedPathStart", &APlayerController::FailedPathStart)
        .def_readwrite("CylinderComponent", &APlayerController::CylinderComponent)
        .def_readwrite("ForceFeedbackManagerClassName", &APlayerController::ForceFeedbackManagerClassName)
        .def_readwrite("ForceFeedbackManager", &APlayerController::ForceFeedbackManager)
        .def_readwrite("CurrentWaveform", &APlayerController::CurrentWaveform)
        .def_readwrite("Interactions", &APlayerController::Interactions)
        .def_readwrite("VoiceMuteList", &APlayerController::VoiceMuteList)
        .def_readwrite("GameplayVoiceMuteList", &APlayerController::GameplayVoiceMuteList)
        .def_readwrite("VoicePacketFilter", &APlayerController::VoicePacketFilter)
        .def_readwrite("ConnectedPeers", &APlayerController::ConnectedPeers)
        .def_readwrite("BestNextHostPeers", &APlayerController::BestNextHostPeers)
        .def_readwrite("MigratedSearchToJoin", &APlayerController::MigratedSearchToJoin)
        .def_readwrite("OnlineSub", &APlayerController::OnlineSub)
        .def_readwrite("VoiceInterface", &APlayerController::VoiceInterface)
        .def_readwrite("OnlinePlayerData", &APlayerController::OnlinePlayerData)
        .def_readwrite("StringAliasMap", &APlayerController::StringAliasMap)
        .def_readwrite("InteractDistance", &APlayerController::InteractDistance)
        .def_readwrite("DelayedJoinSessionName", &APlayerController::DelayedJoinSessionName)
        .def_readwrite("LastPresenceStatusUpdateString", &APlayerController::LastPresenceStatusUpdateString)
        .def_readwrite("LastLocationStatusUpdateString", &APlayerController::LastLocationStatusUpdateString)
        .def_readwrite("InputRequests", &APlayerController::InputRequests)
        .def_readwrite("LastBroadcastTime", &APlayerController::LastBroadcastTime)
        .def_readwrite("PendingMapChangeLevelNames", &APlayerController::PendingMapChangeLevelNames)
        .def_readwrite("MyCoverReplicator", &APlayerController::MyCoverReplicator)
        .def_readwrite("DebugTextList", &APlayerController::DebugTextList)
        .def_readwrite("SpectatorCameraSpeed", &APlayerController::SpectatorCameraSpeed)
        .def_readwrite("PendingSwapConnection", &APlayerController::PendingSwapConnection)
        .def_readwrite("MinRespawnDelay", &APlayerController::MinRespawnDelay)
        .def_readwrite("MaxConcurrentHearSounds", &APlayerController::MaxConcurrentHearSounds)
        .def_readwrite("HearSoundActiveComponents", &APlayerController::HearSoundActiveComponents)
        .def_readwrite("HearSoundPoolComponents", &APlayerController::HearSoundPoolComponents)
        .def_readwrite("LastSpectatorStateSynchTime", &APlayerController::LastSpectatorStateSynchTime)
        .def_readwrite("HoldingDest", &APlayerController::HoldingDest)
        .def_readwrite("HoldingRotation", &APlayerController::HoldingRotation)
        .def_readwrite("HoldingDestActor", &APlayerController::HoldingDestActor)
        .def_readwrite("LoadingMovieLoadedLevelNames", &APlayerController::LoadingMovieLoadedLevelNames)
        .def("eventUpdateScaleformHUDVisibility", &APlayerController::eventUpdateScaleformHUDVisibility)
        .def("eventNotifyUIRefresh", &APlayerController::eventNotifyUIRefresh)
        .def("eventPreTransitionCleanup", &APlayerController::eventPreTransitionCleanup)
        .def("PS3SplitScreenUsingSameUser", &APlayerController::PS3SplitScreenUsingSameUser)
        .def("GetPS3SplitScreenUserName", &APlayerController::GetPS3SplitScreenUserName)
        .def("GetPS3SplitScreenUserNumber", &APlayerController::GetPS3SplitScreenUserNumber)
        .def("GetPS3SplitScreenPlayerChosenResult", &APlayerController::GetPS3SplitScreenPlayerChosenResult)
        .def("PS3UserSelect", &APlayerController::PS3UserSelect)
        .def("ServerDestroy", &APlayerController::ServerDestroy)
        .def("CanDrop", &APlayerController::CanDrop)
        .def("GetDLCPackageMask", &APlayerController::GetDLCPackageMask)
        .def("ClearAllPoolComponents", &APlayerController::ClearAllPoolComponents)
        .def("OnGameInviteAcceptedP3", &APlayerController::OnGameInviteAcceptedP3)
        .def("OnGameInviteAcceptedP2", &APlayerController::OnGameInviteAcceptedP2)
        .def("OnGameInviteAcceptedP1", &APlayerController::OnGameInviteAcceptedP1)
        .def("OnGameInviteAcceptedP0", &APlayerController::OnGameInviteAcceptedP0)
        .def("OnGameInviteAcceptedP", &APlayerController::OnGameInviteAcceptedP)
        .def("PreOnGameInviteAccepted", &APlayerController::PreOnGameInviteAccepted)
        .def("AllDestinationLevelsAreVisible", &APlayerController::AllDestinationLevelsAreVisible)
        .def("eventReleaseHolding", &APlayerController::eventReleaseHolding)
        .def("SetGlobalVolumeMultiplier", &APlayerController::SetGlobalVolumeMultiplier)
        .def("NativeSetGlobalVolumeMultiplier", &APlayerController::NativeSetGlobalVolumeMultiplier)
        .def("eventNotifyDisconnect", &APlayerController::eventNotifyDisconnect)
        .def("ReceivedGameClass", &APlayerController::ReceivedGameClass)
        .def("LogOutBugItAIGoToLogFile", &APlayerController::LogOutBugItAIGoToLogFile)
        .def("LogOutBugItGoToLogFile", &APlayerController::LogOutBugItGoToLogFile)
        .def("DisableDebugAI", &APlayerController::DisableDebugAI)
        .def("ToggleAnimThreading", &APlayerController::ToggleAnimThreading)
        .def("eventOnEngineInitialTick", &APlayerController::eventOnEngineInitialTick)
        .def("BugItStringCreator", &APlayerController::BugItStringCreator)
        .def("BugItAI", &APlayerController::BugItAI)
        .def("LogLoc", &APlayerController::LogLoc)
        .def("BugIt", &APlayerController::BugIt)
        .def("HasPeerConnection", &APlayerController::HasPeerConnection)
        .def("OnSetSoundMode", &APlayerController::OnSetSoundMode)
        .def("eventClientSpawnCameraLensEffect", &APlayerController::eventClientSpawnCameraLensEffect)
        .def("DebugCameraAnims", &APlayerController::DebugCameraAnims)
        .def("eventClientStopCameraAnim", &APlayerController::eventClientStopCameraAnim)
        .def("eventClientPlayCameraAnim", &APlayerController::eventClientPlayCameraAnim)
        .def("ClientStopCameraShake", &APlayerController::ClientStopCameraShake)
        .def("ClientPlayCameraShake", &APlayerController::ClientPlayCameraShake)
        .def("DoForceFeedbackForScreenShake", &APlayerController::DoForceFeedbackForScreenShake)
        .def("TestMovieStop", &APlayerController::TestMovieStop)
        .def("TestMovie", &APlayerController::TestMovie)
        .def("NativeTestMovieStop", &APlayerController::NativeTestMovieStop)
        .def("NativeTestMovie", &APlayerController::NativeTestMovie)
        .def("InputMatchDelegate", &APlayerController::InputMatchDelegate)
        .def("Sentinel_PostAcquireTravelTheWorldPoints", &APlayerController::Sentinel_PostAcquireTravelTheWorldPoints)
        .def("Sentinel_PreAcquireTravelTheWorldPoints", &APlayerController::Sentinel_PreAcquireTravelTheWorldPoints)
        .def("Sentinel_SetupForGamebasedTravelTheWorld", &APlayerController::Sentinel_SetupForGamebasedTravelTheWorld)
        .def("OnFlyThroughHasEnded", &APlayerController::OnFlyThroughHasEnded)
        .def("eventGetAchievementProgression", [](APlayerController &self , int AchievementId) { float* pyCurrentValue = (float*)malloc(sizeof(float)) ; float* pyMaxValue = (float*)malloc(sizeof(float)) ;  bool ret =  self.eventGetAchievementProgression(AchievementId, pyCurrentValue, pyMaxValue); return py::make_tuple(ret, *pyCurrentValue, *pyMaxValue); })
        .def("GetPartyGameTypeName", &APlayerController::GetPartyGameTypeName)
        .def("GetPartyMapName", &APlayerController::GetPartyMapName)
        .def("IsPartyLeader", &APlayerController::IsPartyLeader)
        .def("eventClientAddTextureStreamingLoc", &APlayerController::eventClientAddTextureStreamingLoc)
        .def("eventClientPrestreamTextures", &APlayerController::eventClientPrestreamTextures)
        .def("eventClientSetForceMipLevelsToBeResident", &APlayerController::eventClientSetForceMipLevelsToBeResident)
        .def("ClientControlMovieTexture", &APlayerController::ClientControlMovieTexture)
        .def("GetSplitscreenPlayerCount", &APlayerController::GetSplitscreenPlayerCount)
        .def("GetSplitscreenPlayerByIndex", &APlayerController::GetSplitscreenPlayerByIndex, py::return_value_policy::reference)
        .def("IsSplitscreenPlayer", [](APlayerController &self ) { int* pyout_SplitscreenPlayerIndex = (int*)malloc(sizeof(int)) ;  bool ret =  self.IsSplitscreenPlayer(pyout_SplitscreenPlayerIndex); return py::make_tuple(ret, *pyout_SplitscreenPlayerIndex); })
        .def("IsPrimaryPlayer", &APlayerController::IsPrimaryPlayer)
        .def("ServerNotifyPartyHostLeaving", &APlayerController::ServerNotifyPartyHostLeaving)
        .def("ClientNotifyPartyHostLeaving", &APlayerController::ClientNotifyPartyHostLeaving)
        .def("ClientReturnToParty", &APlayerController::ClientReturnToParty)
        .def("OnJoinTravelToSessionComplete", &APlayerController::OnJoinTravelToSessionComplete)
        .def("PreJoinUpdateGameSettings", &APlayerController::PreJoinUpdateGameSettings)
        .def("ClientTravelToSession", [](APlayerController &self , struct FName SessionName, class UClass* SearchClass) { unsigned char* pyPlatformSpecificInfo = (unsigned char*)malloc(sizeof(unsigned char)) ;   self.ClientTravelToSession(SessionName, SearchClass, pyPlatformSpecificInfo); return py::make_tuple(*pyPlatformSpecificInfo); })
        .def("PathClear", &APlayerController::PathClear)
        .def("PathChild", &APlayerController::PathChild)
        .def("PathStep", &APlayerController::PathStep)
        .def("ShouldCheckRemoteControlCheckbox", &APlayerController::ShouldCheckRemoteControlCheckbox)
        .def("NotifyGameUnPaused", &APlayerController::NotifyGameUnPaused)
        .def("NotifyGamePaused", &APlayerController::NotifyGamePaused)
        .def("eventSoakPause", &APlayerController::eventSoakPause)
        .def("IncrementNumberOfMatchesPlayed", &APlayerController::IncrementNumberOfMatchesPlayed)
        .def("CanViewUserCreatedContent", &APlayerController::CanViewUserCreatedContent)
        .def("ClientEndOnlineGame", &APlayerController::ClientEndOnlineGame)
        .def("ClientStartOnlineGame", &APlayerController::ClientStartOnlineGame)
        .def("ServerRegisterClientStatGuid", &APlayerController::ServerRegisterClientStatGuid)
        .def("OnRegisterHostStatGuidComplete", &APlayerController::OnRegisterHostStatGuidComplete)
        .def("ClientRegisterHostStatGuid", &APlayerController::ClientRegisterHostStatGuid)
        .def("eventRemoveAllDebugStrings", &APlayerController::eventRemoveAllDebugStrings)
        .def("eventRemoveDebugText", &APlayerController::eventRemoveDebugText)
        .def("eventAddDebugText", &APlayerController::eventAddDebugText)
        .def("eventDrawDebugTextList", &APlayerController::eventDrawDebugTextList)
        .def("OnDestroy", &APlayerController::OnDestroy)
        .def("ClientStartNetworkedVoice", &APlayerController::ClientStartNetworkedVoice)
        .def("ClientStopNetworkedVoice", &APlayerController::ClientStopNetworkedVoice)
        .def("ClientSetHostUniqueId", &APlayerController::ClientSetHostUniqueId)
        .def("ClientWriteLeaderboardStats", &APlayerController::ClientWriteLeaderboardStats)
        .def("ClientWriteOnlinePlayerScores", &APlayerController::ClientWriteOnlinePlayerScores)
        .def("ClientArbitratedMatchEnded", &APlayerController::ClientArbitratedMatchEnded)
        .def("NotifyNotEnoughSpaceInInvite", &APlayerController::NotifyNotEnoughSpaceInInvite)
        .def("NotifyNotAllPlayersCanJoinInvite", &APlayerController::NotifyNotAllPlayersCanJoinInvite)
        .def("NotifyInviteFailed", &APlayerController::NotifyInviteFailed)
        .def("OnInviteJoinComplete", &APlayerController::OnInviteJoinComplete)
        .def("ModifyClientURL", &APlayerController::ModifyClientURL)
        .def("OnDestroyForInviteComplete", &APlayerController::OnDestroyForInviteComplete)
        .def("OnEndForInviteComplete", &APlayerController::OnEndForInviteComplete)
        .def("ClearInviteDelegates", &APlayerController::ClearInviteDelegates)
        .def("CanAllPlayersPlayOnline", &APlayerController::CanAllPlayersPlayOnline)
        .def("InviteHasEnoughSpace", &APlayerController::InviteHasEnoughSpace)
        .def("OnGameInviteAccepted", &APlayerController::OnGameInviteAccepted)
        .def("ServerRegisteredForArbitration", &APlayerController::ServerRegisteredForArbitration)
        .def("OnArbitrationRegisterComplete", &APlayerController::OnArbitrationRegisterComplete)
        .def("ClientRegisterForArbitration", &APlayerController::ClientRegisterForArbitration)
        .def("eventClientWasKicked", &APlayerController::eventClientWasKicked)
        .def("IsShowingSubtitles", &APlayerController::IsShowingSubtitles)
        .def("SetShowSubtitles", &APlayerController::SetShowSubtitles)
        .def("eventNotifyDirectorControl", &APlayerController::eventNotifyDirectorControl)
        .def("eventServerUnmutePlayer", &APlayerController::eventServerUnmutePlayer)
        .def("eventServerMutePlayer", &APlayerController::eventServerMutePlayer)
        .def("GameplayUnmutePlayer", &APlayerController::GameplayUnmutePlayer)
        .def("GameplayMutePlayer", &APlayerController::GameplayMutePlayer)
        .def("eventClientUnmutePlayer", &APlayerController::eventClientUnmutePlayer)
        .def("eventClientMutePlayer", &APlayerController::eventClientMutePlayer)
        .def("ClientVoiceHandshakeComplete", &APlayerController::ClientVoiceHandshakeComplete)
        .def("GetPlayerControllerFromNetId", &APlayerController::GetPlayerControllerFromNetId, py::return_value_policy::reference)
        .def("ClientSetOnlineStatus", &APlayerController::ClientSetOnlineStatus)
        .def("SeamlessTravelFrom", &APlayerController::SeamlessTravelFrom)
        .def("SeamlessTravelTo", &APlayerController::SeamlessTravelTo)
        .def("eventGetSeamlessTravelActorList", &APlayerController::eventGetSeamlessTravelActorList)
        .def("IsPlayerMuted", &APlayerController::IsPlayerMuted)
        .def("GetUIController", &APlayerController::GetUIController, py::return_value_policy::reference)
        .def("SaveActorConfig", &APlayerController::SaveActorConfig)
        .def("SaveClassConfig", &APlayerController::SaveClassConfig)
        .def("ClientWaitForLevelsVisible", &APlayerController::ClientWaitForLevelsVisible)
        .def("eventClientSetBlockOnAsyncLoading", &APlayerController::eventClientSetBlockOnAsyncLoading)
        .def("eventClientFlushLevelStreaming", &APlayerController::eventClientFlushLevelStreaming)
        .def("eventClientCancelPendingMapChange", &APlayerController::eventClientCancelPendingMapChange)
        .def("eventClientCommitMapChange", &APlayerController::eventClientCommitMapChange)
        .def("DelayedPrepareMapChange", &APlayerController::DelayedPrepareMapChange)
        .def("eventClientPrepareMapChange", &APlayerController::eventClientPrepareMapChange)
        .def("eventClientFindPlayMovie", &APlayerController::eventClientFindPlayMovie)
        .def("eventServerCheckForHoldingRelease", &APlayerController::eventServerCheckForHoldingRelease)
        .def("eventServerUpdateLevelVisibility", &APlayerController::eventServerUpdateLevelVisibility)
        .def("ClientUpdateLevelStreamingStatus", &APlayerController::ClientUpdateLevelStreamingStatus)
        .def("eventLevelStreamingStatusChanged", &APlayerController::eventLevelStreamingStatusChanged)
        .def("eventClientForceGarbageCollection", &APlayerController::eventClientForceGarbageCollection)
        .def("OnConsoleCommand", &APlayerController::OnConsoleCommand)
        .def("ResetPlayerMovementInput", &APlayerController::ResetPlayerMovementInput)
        .def("eventIsButtonInputIgnored", &APlayerController::eventIsButtonInputIgnored)
        .def("IgnoreButtonInput", &APlayerController::IgnoreButtonInput)
        .def("IsLookInputIgnored", &APlayerController::IsLookInputIgnored)
        .def("IgnoreLookInput", &APlayerController::IgnoreLookInput)
        .def("IsMoveInputIgnored", &APlayerController::IsMoveInputIgnored)
        .def("IgnoreMoveInput", &APlayerController::IgnoreMoveInput)
        .def("ClientSetCinematicMode", &APlayerController::ClientSetCinematicMode)
        .def("SetCinematicMode", &APlayerController::SetCinematicMode)
        .def("OnToggleCinematicMode", &APlayerController::OnToggleCinematicMode)
        .def("IsForceFeedbackAllowed", &APlayerController::IsForceFeedbackAllowed)
        .def("eventClientStopForceFeedbackWaveform", &APlayerController::eventClientStopForceFeedbackWaveform)
        .def("DoForceFeedbackWaveform", &APlayerController::DoForceFeedbackWaveform)
        .def("ClientPlayForceFeedbackWaveform", &APlayerController::ClientPlayForceFeedbackWaveform)
        .def("IsShotForceFeedbackAllowedByPlayerProfile", &APlayerController::IsShotForceFeedbackAllowedByPlayerProfile)
        .def("eventPlayRumble", &APlayerController::eventPlayRumble)
        .def("OnForceFeedback", &APlayerController::OnForceFeedback)
        .def("NotifyTakeHit", &APlayerController::NotifyTakeHit)
        .def("ShowGameState", &APlayerController::ShowGameState)
        .def("ShowPlayerState", &APlayerController::ShowPlayerState)
        .def("ServerRemoteEvent", &APlayerController::ServerRemoteEvent)
        .def("RE", &APlayerController::RE)
        .def("RemoteEvent", &APlayerController::RemoteEvent)
        .def("ListCE", &APlayerController::ListCE)
        .def("ListConsoleEvents", &APlayerController::ListConsoleEvents)
        .def("CE", &APlayerController::CE)
        .def("CauseEvent", &APlayerController::CauseEvent)
        .def("ServerCauseEvent", &APlayerController::ServerCauseEvent)
        .def("OnToggleHUD", &APlayerController::OnToggleHUD)
        .def("OnSetCameraTarget", &APlayerController::OnSetCameraTarget)
        .def("ClientClearKismetText", &APlayerController::ClientClearKismetText)
        .def("ClientDrawKismetText", &APlayerController::ClientDrawKismetText)
        .def("OnDrawText", &APlayerController::OnDrawText)
        .def("ClientIgnoreLookInput", &APlayerController::ClientIgnoreLookInput)
        .def("ClientIgnoreMoveInput", &APlayerController::ClientIgnoreMoveInput)
        .def("OnToggleInput", &APlayerController::OnToggleInput)
        .def("DrawHUD", &APlayerController::DrawHUD)
        .def("CanRestartPlayer", &APlayerController::CanRestartPlayer)
        .def("ServerViewSelf", &APlayerController::ServerViewSelf)
        .def("ViewAPlayer", &APlayerController::ViewAPlayer)
        .def("GetNextViewablePlayer", &APlayerController::GetNextViewablePlayer, py::return_value_policy::reference)
        .def("ServerViewPrevPlayer", &APlayerController::ServerViewPrevPlayer)
        .def("ServerViewNextPlayer", &APlayerController::ServerViewNextPlayer)
        .def("ServerSetSpectatorLocation", &APlayerController::ServerSetSpectatorLocation)
        .def("IsSpectating", &APlayerController::IsSpectating)
        .def("AdjustPlayerWalkingMoveAccel", &APlayerController::AdjustPlayerWalkingMoveAccel)
        .def("CheckJumpOrDuck", &APlayerController::CheckJumpOrDuck)
        .def("eventLimitViewRotation", &APlayerController::eventLimitViewRotation)
        .def("ProcessViewRotation", &APlayerController::ProcessViewRotation)
        .def("UpdateRotation", &APlayerController::UpdateRotation)
        .def("ViewShake", &APlayerController::ViewShake)
        .def("GetPlayerViewPoint", &APlayerController::GetPlayerViewPoint)
        .def("eventSpawnPlayerCamera", &APlayerController::eventSpawnPlayerCamera)
        .def("ServerVerifyViewTarget", &APlayerController::ServerVerifyViewTarget)
        .def("GetViewTarget", &APlayerController::GetViewTarget, py::return_value_policy::reference)
        .def("eventClientSetViewTarget", &APlayerController::eventClientSetViewTarget)
        .def("SetViewTargetWithBlend", &APlayerController::SetViewTargetWithBlend)
        .def("SetViewTarget", &APlayerController::SetViewTarget)
        .def("eventGetFOVAngleForeground", &APlayerController::eventGetFOVAngleForeground)
        .def("IsLocalController", &APlayerController::IsLocalController)
        .def("IsLocalPlayerController", &APlayerController::IsLocalPlayerController)
        .def("eventGetFOVAngle", &APlayerController::eventGetFOVAngle)
        .def("AdjustFOV", &APlayerController::AdjustFOV)
        .def("eventNotifyLanded", &APlayerController::eventNotifyLanded)
        .def("AimHelpDot", &APlayerController::AimHelpDot)
        .def("GetAdjustedAimFor", &APlayerController::GetAdjustedAimFor)
        .def("eventCameraLookAtFinished", &APlayerController::eventCameraLookAtFinished)
        .def("AimingHelp", &APlayerController::AimingHelp)
        .def("PlayerMove", &APlayerController::PlayerMove)
        .def("eventPlayerTick", &APlayerController::eventPlayerTick)
        .def("NotifyChangedWeapon", &APlayerController::NotifyChangedWeapon)
        .def("ClientGameEnded", &APlayerController::ClientGameEnded)
        .def("GameHasEnded", &APlayerController::GameHasEnded)
        .def("ClientRestart", &APlayerController::ClientRestart)
        .def("EnterStartState", &APlayerController::EnterStartState)
        .def("ForceSingleNetUpdateFor", &APlayerController::ForceSingleNetUpdateFor)
        .def("HasClientLoadedCurrentWorld", &APlayerController::HasClientLoadedCurrentWorld)
        .def("eventNotifyLoadedWorld", &APlayerController::eventNotifyLoadedWorld)
        .def("eventServerNotifyLoadedWorld", &APlayerController::eventServerNotifyLoadedWorld)
        .def("Restart", &APlayerController::Restart)
        .def("eventClientSetProgressMessage", &APlayerController::eventClientSetProgressMessage)
        .def("SwitchLevel", &APlayerController::SwitchLevel)
        .def("ServerChangeTeam", &APlayerController::ServerChangeTeam)
        .def("ChangeTeam", &APlayerController::ChangeTeam)
        .def("SwitchTeam", &APlayerController::SwitchTeam)
        .def("ServerChangeName", &APlayerController::ServerChangeName)
        .def("SetName", &APlayerController::SetName)
        .def("ServerSuicide", &APlayerController::ServerSuicide)
        .def("Suicide", &APlayerController::Suicide)
        .def("TriggerInteracted", &APlayerController::TriggerInteracted)
        .def("FindVehicleToDrive", &APlayerController::FindVehicleToDrive)
        .def("PerformedUseAction", &APlayerController::PerformedUseAction)
        .def("ServerUse", &APlayerController::ServerUse)
        .def("Use", &APlayerController::Use)
        .def("GetTriggerUseList", &APlayerController::GetTriggerUseList)
        .def("StopAltFire", &APlayerController::StopAltFire)
        .def("StartAltFire", &APlayerController::StartAltFire)
        .def("StopFire", &APlayerController::StopFire)
        .def("StartFire", &APlayerController::StartFire)
        .def("NextWeapon", &APlayerController::NextWeapon)
        .def("PrevWeapon", &APlayerController::PrevWeapon)
        .def("ServerThrowWeapon", &APlayerController::ServerThrowWeapon)
        .def("ThrowWeapon", &APlayerController::ThrowWeapon)
        .def("UTrace", &APlayerController::UTrace)
        .def("ServerUTrace", &APlayerController::ServerUTrace)
        .def("eventConditionalPause", &APlayerController::eventConditionalPause)
        .def("ServerPause", &APlayerController::ServerPause)
        .def("Pause", &APlayerController::Pause)
        .def("IsPaused", &APlayerController::IsPaused)
        .def("SetPause", &APlayerController::SetPause)
        .def("CanUnpause", &APlayerController::CanUnpause)
        .def("ClientPauseRumble", &APlayerController::ClientPauseRumble)
        .def("PauseRumbleForAllPlayers", &APlayerController::PauseRumbleForAllPlayers)
        .def("LocalTravel", &APlayerController::LocalTravel)
        .def("RestartLevel", &APlayerController::RestartLevel)
        .def("ServerSpeech", &APlayerController::ServerSpeech)
        .def("Speech", &APlayerController::Speech)
        .def("ServerRestartGame", &APlayerController::ServerRestartGame)
        .def("HandleWalking", &APlayerController::HandleWalking)
        .def("ServerUpdateCamera", &APlayerController::ServerUpdateCamera)
        .def("CallServerMove", &APlayerController::CallServerMove)
        .def("ReplicateMove", &APlayerController::ReplicateMove)
        .def("CompressAccel", &APlayerController::CompressAccel)
        .def("GetFreeMove", &APlayerController::GetFreeMove, py::return_value_policy::reference)
        .def("ClientUpdatePosition", &APlayerController::ClientUpdatePosition)
        .def("ClearAckedMoves", &APlayerController::ClearAckedMoves)
        .def("ServerUpdatePing", &APlayerController::ServerUpdatePing)
        .def("UpdateStateFromAdjustment", &APlayerController::UpdateStateFromAdjustment)
        .def("LongClientAdjustPosition", &APlayerController::LongClientAdjustPosition)
        .def("SkipPositionUpdateForRM", &APlayerController::SkipPositionUpdateForRM)
        .def("UpdatePing", &APlayerController::UpdatePing)
        .def("ClientAdjustPosition", &APlayerController::ClientAdjustPosition)
        .def("ClientAckGoodMove", &APlayerController::ClientAckGoodMove)
        .def("ClientCapBandwidth", &APlayerController::ClientCapBandwidth)
        .def("ShortClientAdjustPosition", &APlayerController::ShortClientAdjustPosition)
        .def("VeryShortClientAdjustPosition", &APlayerController::VeryShortClientAdjustPosition)
        .def("eventMoveAutonomous", &APlayerController::eventMoveAutonomous)
        .def("ProcessMove", &APlayerController::ProcessMove)
        .def("UncompressAnalogMovePct", &APlayerController::UncompressAnalogMovePct)
        .def("CompressAnalogMovePct", &APlayerController::CompressAnalogMovePct)
        .def("ProcessDrive", &APlayerController::ProcessDrive)
        .def("ServerDrive", &APlayerController::ServerDrive)
        .def("eventSendClientAdjustment", &APlayerController::eventSendClientAdjustment)
        .def("ServerMove", &APlayerController::ServerMove)
        .def("PCServerMoveInner", &APlayerController::PCServerMoveInner)
        .def("OldServerMove", &APlayerController::OldServerMove)
        .def("DualServerMove", &APlayerController::DualServerMove)
        .def("ForceDeathUpdate", &APlayerController::ForceDeathUpdate)
        .def("UsingFirstPersonCamera", &APlayerController::UsingFirstPersonCamera)
        .def("eventClientSetCameraFade", &APlayerController::eventClientSetCameraFade)
        .def("eventResetCameraMode", &APlayerController::eventResetCameraMode)
        .def("SetCameraMode", &APlayerController::SetCameraMode)
        .def("ClientSetCameraMode", &APlayerController::ClientSetCameraMode)
        .def("ServerCamera", &APlayerController::ServerCamera)
        .def("Camera", &APlayerController::Camera)
        .def("eventPreClientTravel", &APlayerController::eventPreClientTravel)
        .def("ServerTeamSay", &APlayerController::ServerTeamSay)
        .def("TeamSay", &APlayerController::TeamSay)
        .def("ClientAdminMessage", &APlayerController::ClientAdminMessage)
        .def("ServerSay", &APlayerController::ServerSay)
        .def("Say", &APlayerController::Say)
        .def("AllowTextMessage", &APlayerController::AllowTextMessage)
        .def("ServerMutate", &APlayerController::ServerMutate)
        .def("Mutate", &APlayerController::Mutate)
        .def("FOV", &APlayerController::FOV)
        .def("ResetFOV", &APlayerController::ResetFOV)
        .def("SetFOV", &APlayerController::SetFOV)
        .def("FixFOV", &APlayerController::FixFOV)
        .def("eventDestroyed", &APlayerController::eventDestroyed)
        .def("CleanupPawn", &APlayerController::CleanupPawn)
        .def("eventClearOnlineDelegates", &APlayerController::eventClearOnlineDelegates)
        .def("OnPartyMembersInfoChanged", &APlayerController::OnPartyMembersInfoChanged)
        .def("OnPartyMemberListChanged", &APlayerController::OnPartyMemberListChanged)
        .def("RegisterOnlineDelegates", &APlayerController::RegisterOnlineDelegates)
        .def("PlayBeepSound", &APlayerController::PlayBeepSound)
        .def("eventTeamMessage", &APlayerController::eventTeamMessage)
        .def("SpeakTTS", &APlayerController::SpeakTTS)
        .def("TeamTalk", &APlayerController::TeamTalk)
        .def("Talk", &APlayerController::Talk)
        .def("CreateTTSSoundCue", &APlayerController::CreateTTSSoundCue, py::return_value_policy::reference)
        .def("AllowTTSMessageFrom", &APlayerController::AllowTTSMessageFrom)
        .def("CanCommunicate", &APlayerController::CanCommunicate)
        .def("eventClientMessage", &APlayerController::eventClientMessage)
        .def("ClientPlayActorFaceFXAnim", &APlayerController::ClientPlayActorFaceFXAnim)
        .def("eventKismet_ClientStopSound", &APlayerController::eventKismet_ClientStopSound)
        .def("eventClientStopSound", &APlayerController::eventClientStopSound)
        .def("eventKismet_ClientPlaySound", &APlayerController::eventKismet_ClientPlaySound)
        .def("IsClosestLocalPlayerToActor", &APlayerController::IsClosestLocalPlayerToActor)
        .def("eventWwiseClientHearSoundReliable", &APlayerController::eventWwiseClientHearSoundReliable)
        .def("eventWwiseClientHearSound", &APlayerController::eventWwiseClientHearSound)
        .def("eventClientPlayAkEvent", &APlayerController::eventClientPlayAkEvent)
        .def("eventClientHearSound", &APlayerController::eventClientHearSound)
        .def("GetPooledAudioComponent", &APlayerController::GetPooledAudioComponent, py::return_value_policy::reference)
        .def("HearSoundFinished", &APlayerController::HearSoundFinished)
        .def("eventClientPlaySound", &APlayerController::eventClientPlaySound)
        .def("eventClearHUDMessage", &APlayerController::eventClearHUDMessage)
        .def("eventDisplayHUDMessage", &APlayerController::eventDisplayHUDMessage)
        .def("eventReceiveLocalizedMessage", &APlayerController::eventReceiveLocalizedMessage)
        .def("CleanupPRI", &APlayerController::CleanupPRI)
        .def("HandlePickup", &APlayerController::HandlePickup)
        .def("SetLobbyShown", &APlayerController::SetLobbyShown)
        .def("WasLobbyShown", &APlayerController::WasLobbyShown)
        .def("ClientNotifyPostinitialize", &APlayerController::ClientNotifyPostinitialize)
        .def("ClientSetHUD", &APlayerController::ClientSetHUD)
        .def("PawnDied", &APlayerController::PawnDied)
        .def("eventUnPossess", &APlayerController::eventUnPossess)
        .def("ServerAcknowledgePossession", &APlayerController::ServerAcknowledgePossession)
        .def("AcknowledgePossession", &APlayerController::AcknowledgePossession)
        .def("eventPossess", &APlayerController::eventPossess)
        .def("GivePawn", &APlayerController::GivePawn)
        .def("AskForPawn", &APlayerController::AskForPawn)
        .def("ClientGotoState", &APlayerController::ClientGotoState)
        .def("IsMouseAvailable", &APlayerController::IsMouseAvailable)
        .def("IsKeyboardAvailable", &APlayerController::IsKeyboardAvailable)
        .def("SetUseTiltForwardAndBack", &APlayerController::SetUseTiltForwardAndBack)
        .def("SetOnlyUseControllerTiltInput", &APlayerController::SetOnlyUseControllerTiltInput)
        .def("SetControllerTiltActive", &APlayerController::SetControllerTiltActive)
        .def("SetControllerTiltDesiredIfAvailable", &APlayerController::SetControllerTiltDesiredIfAvailable)
        .def("IsControllerTiltActive", &APlayerController::IsControllerTiltActive)
        .def("SetRumbleScale", &APlayerController::SetRumbleScale)
        .def("ReloadProfileSettings", &APlayerController::ReloadProfileSettings)
        .def("UnregisterStandardPlayerDataStores", &APlayerController::UnregisterStandardPlayerDataStores)
        .def("UnregisterPlayerDataStores", &APlayerController::UnregisterPlayerDataStores)
        .def("RegisterStandardPlayerDataStores", &APlayerController::RegisterStandardPlayerDataStores)
        .def("RegisterCustomPlayerDataStores", &APlayerController::RegisterCustomPlayerDataStores)
        .def("RegisterPlayerDataStores", &APlayerController::RegisterPlayerDataStores)
        .def("ClientInitializeDataStores", &APlayerController::ClientInitializeDataStores)
        .def("eventInitInputSystem", &APlayerController::eventInitInputSystem)
        .def("GetOnlineSubsystem", &APlayerController::GetOnlineSubsystem, py::return_value_policy::reference)
        .def("PostControllerIdChange", &APlayerController::PostControllerIdChange)
        .def("PreControllerIdChange", &APlayerController::PreControllerIdChange)
        .def("CleanOutSavedMoves", &APlayerController::CleanOutSavedMoves)
        .def("ClientReset", &APlayerController::ClientReset)
        .def("Reset", &APlayerController::Reset)
        .def("SpawnDefaultHUD", &APlayerController::SpawnDefaultHUD)
        .def("EnableCheats", &APlayerController::EnableCheats)
        .def("AddCheats", &APlayerController::AddCheats)
        .def("eventKickWarning", &APlayerController::eventKickWarning)
        .def("ServerGivePawn", &APlayerController::ServerGivePawn)
        .def("ServerShortTimeout", &APlayerController::ServerShortTimeout)
        .def("ResetTimeMargin", &APlayerController::ResetTimeMargin)
        .def("OnJoinMigratedGame", &APlayerController::OnJoinMigratedGame)
        .def("PeerDesignatedAsClient", &APlayerController::PeerDesignatedAsClient)
        .def("OnUnregisterPlayerCompleteForJoinMigrate", &APlayerController::OnUnregisterPlayerCompleteForJoinMigrate)
        .def("eventPeerReceivedMigratedSession", [](APlayerController &self , struct FUniqueNetId FromPeerNetId, struct FName SessionName, class UClass* SearchClass) { unsigned char* pyPlatformSpecificInfo = (unsigned char*)malloc(sizeof(unsigned char)) ;   self.eventPeerReceivedMigratedSession(FromPeerNetId, SessionName, SearchClass, pyPlatformSpecificInfo); return py::make_tuple(*pyPlatformSpecificInfo); })
        .def("TellPeerToTravelToSession", [](APlayerController &self , struct FUniqueNetId ToPeerNetId, struct FName SessionName, class UClass* SearchClass, int PlatformSpecificInfoSize) { unsigned char* pyPlatformSpecificInfo = (unsigned char*)malloc(sizeof(unsigned char)) ;   self.TellPeerToTravelToSession(ToPeerNetId, SessionName, SearchClass, pyPlatformSpecificInfo, PlatformSpecificInfoSize); return py::make_tuple(*pyPlatformSpecificInfo); })
        .def("TellPeerToTravel", &APlayerController::TellPeerToTravel)
        .def("PeerTravelAsHost", &APlayerController::PeerTravelAsHost)
        .def("GetNewPeerHostURL", &APlayerController::GetNewPeerHostURL)
        .def("PeerDesignatedAsHost", &APlayerController::PeerDesignatedAsHost)
        .def("GetCurrentSearchClass", &APlayerController::GetCurrentSearchClass, py::return_value_policy::reference)
        .def("OnHostMigratedOnlineGame", &APlayerController::OnHostMigratedOnlineGame)
        .def("OnUnregisterPlayerCompleteForHostMigrate", &APlayerController::OnUnregisterPlayerCompleteForHostMigrate)
        .def("RemoveMissingPeersFromSession", &APlayerController::RemoveMissingPeersFromSession)
        .def("OnMissingPeersUnregistered", &APlayerController::OnMissingPeersUnregistered)
        .def("GetRegisteredPlayersInSession", &APlayerController::GetRegisteredPlayersInSession)
        .def("NotifyHostMigrationStarted", &APlayerController::NotifyHostMigrationStarted)
        .def("eventMigrateNewHost", &APlayerController::eventMigrateNewHost)
        .def("IsBestHostPeer", &APlayerController::IsBestHostPeer)
        .def("eventNotifyPeerDisconnectHost", &APlayerController::eventNotifyPeerDisconnectHost)
        .def("ClientUpdateBestNextHosts", &APlayerController::ClientUpdateBestNextHosts)
        .def("ServerRemovePeer", &APlayerController::ServerRemovePeer)
        .def("ServerAddPeer", &APlayerController::ServerAddPeer)
        .def("eventRemovePeer", &APlayerController::eventRemovePeer)
        .def("eventAddPeer", &APlayerController::eventAddPeer)
        .def("FindConnectedPeerIndex", &APlayerController::FindConnectedPeerIndex)
        .def("eventReceivedPlayer", &APlayerController::eventReceivedPlayer)
        .def("eventPostBeginPlay", &APlayerController::eventPostBeginPlay)
        .def("SpawnCoverReplicator", &APlayerController::SpawnCoverReplicator, py::return_value_policy::reference)
        .def("CanUnpauseControllerConnected", &APlayerController::CanUnpauseControllerConnected)
        .def("OnControllerChanged", &APlayerController::OnControllerChanged)
        .def("CanUnpauseExternalUI", &APlayerController::CanUnpauseExternalUI)
        .def("OnExternalUIChanged", &APlayerController::OnExternalUIChanged)
        .def("ForceClearUnpauseDelegates", &APlayerController::ForceClearUnpauseDelegates)
        .def("DisableActorHeadTracking", &APlayerController::DisableActorHeadTracking)
        .def("EnableActorHeadTracking", [](APlayerController &self , class AActor* TargetActor, struct FName* TrackControllerName, unsigned long bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, struct FName* TargetBoneNames) { class UClass** pyActorClassesToLookAt = 0 ;   self.EnableActorHeadTracking(TargetActor, TrackControllerName, pyActorClassesToLookAt, bLookAtPawns, MinLookAtTime, MaxLookAtTime, MaxInterestTime, LookAtActorRadius, TargetBoneNames); return py::make_tuple(*pyActorClassesToLookAt); })
        .def("eventFellOutOfWorld", &APlayerController::eventFellOutOfWorld)
        .def("CleanUpAudioComponents", &APlayerController::CleanUpAudioComponents)
        .def("FindStairRotation", &APlayerController::FindStairRotation)
        .def("eventServerProcessConvolve", &APlayerController::eventServerProcessConvolve)
        .def("eventClientConvolve", &APlayerController::eventClientConvolve)
        .def("SetAudioGroupVolume", &APlayerController::SetAudioGroupVolume)
        .def("SetAllowMatureLanguage", &APlayerController::SetAllowMatureLanguage)
        .def("PasteFromClipboard", &APlayerController::PasteFromClipboard)
        .def("CopyToClipboard", &APlayerController::CopyToClipboard)
        .def("GetDefaultURL", &APlayerController::GetDefaultURL)
        .def("UpdateURL", &APlayerController::UpdateURL)
        .def("eventClientTravel", &APlayerController::eventClientTravel)
        .def("ConsoleCommand", &APlayerController::ConsoleCommand)
        .def("GetServerNetworkAddress", &APlayerController::GetServerNetworkAddress)
        .def("GetPlayerNetworkAddress", &APlayerController::GetPlayerNetworkAddress)
        .def("SetNetSpeed", &APlayerController::SetNetSpeed)
          ;
}