#include "stdafx.h"
// Using =======================================================================
namespace py = pybind11;

// Module ======================================================================
void Export_pystes_GearboxFramework_structs(py::module &m)
{
	py::class_< FAIHoldData >(m, "FAIHoldData")
		.def_readwrite("HoldName", &FAIHoldData::HoldName)
		.def_readwrite("HoldTag", &FAIHoldData::HoldTag)
  ;
	py::class_< FAIResourceData >(m, "FAIResourceData")
		.def_readwrite("Resource", &FAIResourceData::Resource)
		.def_readwrite("CanRun", &FAIResourceData::CanRun)
		.def_readwrite("Running", &FAIResourceData::Running)
  ;
	py::class_< FAIRange >(m, "FAIRange")
		.def_readwrite("MinVal", &FAIRange::MinVal)
		.def_readwrite("MaxVal", &FAIRange::MaxVal)
  ;
	py::class_< FAITreeData >(m, "FAITreeData")
		.def_property("bStopIfCannotRun", [](FAITreeData &self){return self.bStopIfCannotRun;}, [](FAITreeData &self, bool value){self.bStopIfCannotRun = value ? 1 : 0;})
		.def_property("bHoldingResource", [](FAITreeData &self){return self.bHoldingResource;}, [](FAITreeData &self, bool value){self.bHoldingResource = value ? 1 : 0;})
		.def_property("bInterrupt", [](FAITreeData &self){return self.bInterrupt;}, [](FAITreeData &self, bool value){self.bInterrupt = value ? 1 : 0;})
		.def_readwrite("AI", &FAITreeData::AI)
		.def_readwrite("Type", &FAITreeData::Type)
		.def_readwrite("Children", &FAITreeData::Children)
		.def_readwrite("Resource", &FAITreeData::Resource)
		.def_readwrite("CanRunIf", &FAITreeData::CanRunIf)
		.def_readwrite("TimedStart", &FAITreeData::TimedStart)
		.def_readwrite("TimedReset", &FAITreeData::TimedReset)
		.def_readwrite("TimedFail", &FAITreeData::TimedFail)
		.def_readwrite("ActiveChild", &FAITreeData::ActiveChild)
		.def_readwrite("NextActiveChild", &FAITreeData::NextActiveChild)
		.def_readwrite("LastFailTime", &FAITreeData::LastFailTime)
		.def_readwrite("NextTimedRun", &FAITreeData::NextTimedRun)
		.def_readwrite("NextTimedFail", &FAITreeData::NextTimedFail)
		.def_readwrite("NextTimedResource", &FAITreeData::NextTimedResource)
		.def_readwrite("Action", &FAITreeData::Action)
		.def_readwrite("LoopCount", &FAITreeData::LoopCount)
		.def_readwrite("LastRandomChild", &FAITreeData::LastRandomChild)
		.def_readwrite("Weights", &FAITreeData::Weights)
		.def_readwrite("LoopCountMax", &FAITreeData::LoopCountMax)
		.def_readwrite("Conditions", &FAITreeData::Conditions)
		.def_readwrite("NextSequentialChild", &FAITreeData::NextSequentialChild)
		.def_readwrite("PosX", &FAITreeData::PosX)
		.def_readwrite("PosY", &FAITreeData::PosY)
		.def_readwrite("NodeName", &FAITreeData::NodeName)
		.def_readwrite("ActionFailName", &FAITreeData::ActionFailName)
		.def_readwrite("FailReason", &FAITreeData::FailReason)
  ;
	py::class_< FPriorityData >(m, "FPriorityData")
		.def_readwrite("Description", &FPriorityData::Description)
		.def_readwrite("Condition", &FPriorityData::Condition)
  ;
	py::class_< FFlagDefinitionInitialization >(m, "FFlagDefinitionInitialization")
		.def_readwrite("FlagToSet", &FFlagDefinitionInitialization::FlagToSet)
		.def_readwrite("ChanceTrue", &FFlagDefinitionInitialization::ChanceTrue)
		.def_readwrite("ProbabilityTrue", &FFlagDefinitionInitialization::ProbabilityTrue)
		.def_readwrite("Duration", &FFlagDefinitionInitialization::Duration)
  ;
	py::class_< FCoverDebugScoringInfo >(m, "FCoverDebugScoringInfo")
		.def_readwrite("PriorityName", &FCoverDebugScoringInfo::PriorityName)
		.def_readwrite("Score", &FCoverDebugScoringInfo::Score)
  ;
	py::class_< FCoverDebugPriority >(m, "FCoverDebugPriority")
		.def_property("IsACandidate", [](FCoverDebugPriority &self){return self.IsACandidate;}, [](FCoverDebugPriority &self, bool value){self.IsACandidate = value ? 1 : 0;})
		.def_property("IsBestCandidate", [](FCoverDebugPriority &self){return self.IsBestCandidate;}, [](FCoverDebugPriority &self, bool value){self.IsBestCandidate = value ? 1 : 0;})
		.def_readwrite("Score", &FCoverDebugPriority::Score)
		.def_readwrite("Distance", &FCoverDebugPriority::Distance)
		.def_readwrite("TheCoverActor", &FCoverDebugPriority::TheCoverActor)
		.def_readwrite("SlotNdx", &FCoverDebugPriority::SlotNdx)
		.def_readwrite("FailString", &FCoverDebugPriority::FailString)
		.def_readwrite("ScoringInfo", &FCoverDebugPriority::ScoringInfo)
  ;
	py::class_< FValidNameRange >(m, "FValidNameRange")
		.def_readwrite("Start", &FValidNameRange::Start)
		.def_readwrite("End", &FValidNameRange::End)
  ;
	py::class_< FObjectKey >(m, "FObjectKey")
		.def_readwrite("ObjectName", &FObjectKey::ObjectName)
		.def_readwrite("AdditionalKey", &FObjectKey::AdditionalKey)
  ;
	py::class_< FLevelStateRecord >(m, "FLevelStateRecord")
		.def_readwrite("LevelName", &FLevelStateRecord::LevelName)
		.def_readwrite("LevelLoaded", &FLevelStateRecord::LevelLoaded)
		.def_readwrite("ObjectKeys", &FLevelStateRecord::ObjectKeys)
  ;
	py::class_< FVantageSpot >(m, "FVantageSpot")
		.def_readwrite("Location", &FVantageSpot::Location)
		.def_readwrite("VantageType", &FVantageSpot::VantageType)
  ;
	py::class_< FGearboxCoverState >(m, "FGearboxCoverState")
		.def_readwrite("TheCoverActor", &FGearboxCoverState::TheCoverActor)
		.def_readwrite("SlotIndex", &FGearboxCoverState::SlotIndex)
		.def_readwrite("State", &FGearboxCoverState::State)
		.def_readwrite("ExtendedState", &FGearboxCoverState::ExtendedState)
		.def_readwrite("MetaData", &FGearboxCoverState::MetaData)
		.def_readwrite("ExtendedMetaData", &FGearboxCoverState::ExtendedMetaData)
  ;
	py::class_< FGearboxCoverTransition >(m, "FGearboxCoverTransition")
		.def_readwrite("Action", &FGearboxCoverTransition::Action)
		.def_readwrite("ExtendedAction", &FGearboxCoverTransition::ExtendedAction)
  ;
	py::class_< FCoverCandidate >(m, "FCoverCandidate")
		.def_readwrite("TheCoverActor", &FCoverCandidate::TheCoverActor)
		.def_readwrite("SlotNdx", &FCoverCandidate::SlotNdx)
		.def_readwrite("Score", &FCoverCandidate::Score)
  ;
	py::class_< FPopulationActor >(m, "FPopulationActor")
		.def_property("TestVisibility", [](FPopulationActor &self){return self.TestVisibility;}, [](FPopulationActor &self, bool value){self.TestVisibility = value ? 1 : 0;})
		.def_property("TestFOV", [](FPopulationActor &self){return self.TestFOV;}, [](FPopulationActor &self, bool value){self.TestFOV = value ? 1 : 0;})
		.def_readwrite("SpawnFactory", &FPopulationActor::SpawnFactory)
		.def_readwrite("Probability", &FPopulationActor::Probability)
		.def_readwrite("MaxActiveAtOneTime", &FPopulationActor::MaxActiveAtOneTime)
  ;
	py::class_< FLocationInfo >(m, "FLocationInfo")
		.def_property("IsPlayerInfo", [](FLocationInfo &self){return self.IsPlayerInfo;}, [](FLocationInfo &self, bool value){self.IsPlayerInfo = value ? 1 : 0;})
		.def_readwrite("Location", &FLocationInfo::Location)
  ;
	py::class_< FActionSequenceRandomData >(m, "FActionSequenceRandomData")
		.def_readwrite("ProbabilityData", &FActionSequenceRandomData::ProbabilityData)
		.def_readwrite("ActionToRunWhenTrue", &FActionSequenceRandomData::ActionToRunWhenTrue)
  ;
	py::class_< FSubarrayData >(m, "FSubarrayData")
		.def_readwrite("ArrayIndexAndLength", &FSubarrayData::ArrayIndexAndLength)
  ;
	py::class_< FBehaviorSequenceActionData2 >(m, "FBehaviorSequenceActionData2")
		.def_readwrite("Behavior", &FBehaviorSequenceActionData2::Behavior)
		.def_readwrite("LinkedVariables", &FBehaviorSequenceActionData2::LinkedVariables)
		.def_readwrite("OutputLinks", &FBehaviorSequenceActionData2::OutputLinks)
  ;
	py::class_< FBehaviorVariableValue >(m, "FBehaviorVariableValue")
		.def_readwrite("IntValue", &FBehaviorVariableValue::IntValue)
		.def_readwrite("FloatValue", &FBehaviorVariableValue::FloatValue)
		.def_readwrite("VectorValue", &FBehaviorVariableValue::VectorValue)
		.def_readwrite("ObjectValue", &FBehaviorVariableValue::ObjectValue)
		.def_readwrite("VariableType", &FBehaviorVariableValue::VariableType)
  ;
	py::class_< FBehaviorVariableValueUnion_Mirror >(m, "FBehaviorVariableValueUnion_Mirror")
		.def_readwrite("Data", &FBehaviorVariableValueUnion_Mirror::Data)
  ;
	py::class_< FBehaviorVariableData >(m, "FBehaviorVariableData")
		.def_readwrite("Name", &FBehaviorVariableData::Name)
		.def_readwrite("Type", &FBehaviorVariableData::Type)
		.def_readwrite("Value", &FBehaviorVariableData::Value)
  ;
	py::class_< FBehaviorEventUserData >(m, "FBehaviorEventUserData")
		.def_property("bEnabled", [](FBehaviorEventUserData &self){return self.bEnabled;}, [](FBehaviorEventUserData &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_property("bReplicate", [](FBehaviorEventUserData &self){return self.bReplicate;}, [](FBehaviorEventUserData &self, bool value){self.bReplicate = value ? 1 : 0;})
		.def_readwrite("EventName", &FBehaviorEventUserData::EventName)
		.def_readwrite("MaxTriggerCount", &FBehaviorEventUserData::MaxTriggerCount)
		.def_readwrite("ReTriggerDelay", &FBehaviorEventUserData::ReTriggerDelay)
		.def_readwrite("FilterObject", &FBehaviorEventUserData::FilterObject)
  ;
	py::class_< FBehaviorVariableLinkData >(m, "FBehaviorVariableLinkData")
		.def_readwrite("PropertyName", &FBehaviorVariableLinkData::PropertyName)
		.def_readwrite("ConnectionIndex", &FBehaviorVariableLinkData::ConnectionIndex)
		.def_readwrite("LinkedVariables", &FBehaviorVariableLinkData::LinkedVariables)
		.def_readwrite("CachedProperty", &FBehaviorVariableLinkData::CachedProperty)
  ;
	py::class_< FBehaviorActionLinkData >(m, "FBehaviorActionLinkData")
		.def_readwrite("LinkedBehavior", &FBehaviorActionLinkData::LinkedBehavior)
		.def_readwrite("ActivateDelay", &FBehaviorActionLinkData::ActivateDelay)
  ;
	py::class_< FBehaviorOutputLinkData >(m, "FBehaviorOutputLinkData")
		.def_readwrite("LinkId", &FBehaviorOutputLinkData::LinkId)
		.def_readwrite("LinkedActions", &FBehaviorOutputLinkData::LinkedActions)
  ;
	py::class_< FBehaviorEventData >(m, "FBehaviorEventData")
		.def_readwrite("UserData", &FBehaviorEventData::UserData)
		.def_readwrite("OutputVariables", &FBehaviorEventData::OutputVariables)
		.def_readwrite("OutputLinks", &FBehaviorEventData::OutputLinks)
  ;
	py::class_< FBehaviorEventData2 >(m, "FBehaviorEventData2")
		.def_readwrite("UserData", &FBehaviorEventData2::UserData)
		.def_readwrite("OutputVariables", &FBehaviorEventData2::OutputVariables)
		.def_readwrite("OutputLinks", &FBehaviorEventData2::OutputLinks)
  ;
	py::class_< FBehaviorSequenceActionData >(m, "FBehaviorSequenceActionData")
		.def_readwrite("Behavior", &FBehaviorSequenceActionData::Behavior)
		.def_readwrite("ContextVariables", &FBehaviorSequenceActionData::ContextVariables)
		.def_readwrite("LinkedVariables", &FBehaviorSequenceActionData::LinkedVariables)
		.def_readwrite("OutputVariables", &FBehaviorSequenceActionData::OutputVariables)
		.def_readwrite("OutputLinks", &FBehaviorSequenceActionData::OutputLinks)
  ;
	py::class_< FBehaviorOutputLinkData2 >(m, "FBehaviorOutputLinkData2")
		.def_readwrite("LinkIdAndLinkedBehavior", &FBehaviorOutputLinkData2::LinkIdAndLinkedBehavior)
		.def_readwrite("ActivateDelay", &FBehaviorOutputLinkData2::ActivateDelay)
  ;
	py::class_< FBehaviorVariableLinkData2 >(m, "FBehaviorVariableLinkData2")
		.def_readwrite("PropertyName", &FBehaviorVariableLinkData2::PropertyName)
		.def_readwrite("VariableLinkType", &FBehaviorVariableLinkData2::VariableLinkType)
		.def_readwrite("ConnectionIndex", &FBehaviorVariableLinkData2::ConnectionIndex)
		.def_readwrite("LinkedVariables", &FBehaviorVariableLinkData2::LinkedVariables)
		.def_readwrite("CachedProperty", &FBehaviorVariableLinkData2::CachedProperty)
  ;
	py::class_< FBehaviorSequenceData >(m, "FBehaviorSequenceData")
		.def_property("bEnabledOnSpawn", [](FBehaviorSequenceData &self){return self.bEnabledOnSpawn;}, [](FBehaviorSequenceData &self, bool value){self.bEnabledOnSpawn = value ? 1 : 0;})
		.def_property("bSequenceEnabledMutex", [](FBehaviorSequenceData &self){return self.bSequenceEnabledMutex;}, [](FBehaviorSequenceData &self, bool value){self.bSequenceEnabledMutex = value ? 1 : 0;})
		.def_readwrite("BehaviorSequenceName", &FBehaviorSequenceData::BehaviorSequenceName)
		.def_readwrite("CustomEnableCondition", &FBehaviorSequenceData::CustomEnableCondition)
		.def_readwrite("EventData", &FBehaviorSequenceData::EventData)
		.def_readwrite("EventData2", &FBehaviorSequenceData::EventData2)
		.def_readwrite("BehaviorData", &FBehaviorSequenceData::BehaviorData)
		.def_readwrite("BehaviorData2", &FBehaviorSequenceData::BehaviorData2)
		.def_readwrite("VariableData", &FBehaviorSequenceData::VariableData)
		.def_readwrite("ConsolidatedOutputLinkData", &FBehaviorSequenceData::ConsolidatedOutputLinkData)
		.def_readwrite("ConsolidatedVariableLinkData", &FBehaviorSequenceData::ConsolidatedVariableLinkData)
		.def_readwrite("ConsolidatedLinkedVariables", &FBehaviorSequenceData::ConsolidatedLinkedVariables)
  ;
	py::class_< FDebugListItem >(m, "FDebugListItem")
		.def_readwrite("DisplayType", &FDebugListItem::DisplayType)
		.def_readwrite("Location", &FDebugListItem::Location)
		.def_readwrite("Location2", &FDebugListItem::Location2)
		.def_readwrite("Location3", &FDebugListItem::Location3)
		.def_readwrite("Texture", &FDebugListItem::Texture)
		.def_readwrite("U", &FDebugListItem::U)
		.def_readwrite("V", &FDebugListItem::V)
		.def_readwrite("UL", &FDebugListItem::UL)
		.def_readwrite("VL", &FDebugListItem::VL)
		.def_readwrite("Scale", &FDebugListItem::Scale)
		.def_readwrite("TextString", &FDebugListItem::TextString)
		.def_readwrite("TextColor", &FDebugListItem::TextColor)
		.def_readwrite("Alignment", &FDebugListItem::Alignment)
  ;
	py::class_< FBehaviorConsumerHandle >(m, "FBehaviorConsumerHandle")
		.def_readwrite("PID", &FBehaviorConsumerHandle::PID)
  ;
	py::class_< FTimeStampedRecord >(m, "FTimeStampedRecord")
		.def_readwrite("DeathTimeStamp", &FTimeStampedRecord::DeathTimeStamp)
  ;
	py::class_< FKnowledgeRecordStruct >(m, "FKnowledgeRecordStruct")
		.def_readwrite("TheObj", &FKnowledgeRecordStruct::TheObj)
		.def_readwrite("InUse", &FKnowledgeRecordStruct::InUse)
		.def_readwrite("DeathTimeStamp", &FTimeStampedRecord::DeathTimeStamp)
  ;
	py::class_< FAIResourceRestriction >(m, "FAIResourceRestriction")
		.def_readwrite("MaxUsers", &FAIResourceRestriction::MaxUsers)
		.def_readwrite("MinUsers", &FAIResourceRestriction::MinUsers)
		.def_readwrite("Resource", &FAIResourceRestriction::Resource)
  ;
	py::class_< FOutputLink >(m, "FOutputLink")
		.def_readwrite("Links", &FOutputLink::Links)
  ;
	py::class_< FVariableLink >(m, "FVariableLink")
		.def_readwrite("Links", &FVariableLink::Links)
  ;
	py::class_< FSpecialMoveData >(m, "FSpecialMoveData")
		.def_readwrite("Data", &FSpecialMoveData::Data)
		.def_readwrite("PlayRateScale", &FSpecialMoveData::PlayRateScale)
		.def_readwrite("Duration", &FSpecialMoveData::Duration)
		.def_readwrite("CallbackName", &FSpecialMoveData::CallbackName)
		.def_readwrite("CallbackObject", &FSpecialMoveData::CallbackObject)
		.def_readwrite("SMD", &FSpecialMoveData::SMD)
  ;
	py::class_< FSlotAnimParameters >(m, "FSlotAnimParameters")
		.def_readwrite("SMData", &FSlotAnimParameters::SMData)
		.def_readwrite("CustomAnimDef", &FSlotAnimParameters::CustomAnimDef)
		.def_readwrite("CustomAnimName", &FSlotAnimParameters::CustomAnimName)
		.def_readwrite("PerBoneWeights", &FSlotAnimParameters::PerBoneWeights)
		.def_readwrite("TransformReqBone", &FSlotAnimParameters::TransformReqBone)
		.def_readwrite("TransformReqBoneIndex", &FSlotAnimParameters::TransformReqBoneIndex)
  ;
	py::class_< FSpecializedBehaviorEvent >(m, "FSpecializedBehaviorEvent")
		.def_readwrite("EventName", &FSpecializedBehaviorEvent::EventName)
  ;
	py::class_< FBehaviorTimerState >(m, "FBehaviorTimerState")
		.def_property("bIsRunning", [](FBehaviorTimerState &self){return self.bIsRunning;}, [](FBehaviorTimerState &self, bool value){self.bIsRunning = value ? 1 : 0;})
		.def_readwrite("Delay", &FBehaviorTimerState::Delay)
		.def_readwrite("EventTime", &FBehaviorTimerState::EventTime)
  ;
	py::class_< FTimerBehaviorUserState >(m, "FTimerBehaviorUserState")
  ;
	py::class_< FTimerEventReactionData >(m, "FTimerEventReactionData")
		.def_readwrite("EventType", &FTimerEventReactionData::EventType)
		.def_readwrite("Behaviors", &FTimerEventReactionData::Behaviors)
  ;
	py::class_< FGbxMessageSimpleMetaData >(m, "FGbxMessageSimpleMetaData")
		.def_readwrite("FloatData", &FGbxMessageSimpleMetaData::FloatData)
		.def_readwrite("IntData", &FGbxMessageSimpleMetaData::IntData)
		.def_readwrite("NameData", &FGbxMessageSimpleMetaData::NameData)
		.def_readwrite("VectorData", &FGbxMessageSimpleMetaData::VectorData)
  ;
	py::class_< FRelativeDirectionData >(m, "FRelativeDirectionData")
		.def_readwrite("Direction", &FRelativeDirectionData::Direction)
		.def_readwrite("ConeAroundDirection", &FRelativeDirectionData::ConeAroundDirection)
		.def_readwrite("AdditionalRotation", &FRelativeDirectionData::AdditionalRotation)
  ;
	py::class_< FAttachmentLocationData >(m, "FAttachmentLocationData")
		.def_readwrite("Location", &FAttachmentLocationData::Location)
		.def_readwrite("AttachmentBase", &FAttachmentLocationData::AttachmentBase)
		.def_readwrite("AttachmentName", &FAttachmentLocationData::AttachmentName)
  ;
	py::class_< FProviderRecord >(m, "FProviderRecord")
		.def_readwrite("ProviderDefinition", &FProviderRecord::ProviderDefinition)
		.def_readwrite("ReferenceCount", &FProviderRecord::ReferenceCount)
  ;
	py::class_< FBehaviorExecutionRecord >(m, "FBehaviorExecutionRecord")
		.def_readwrite("OwningProcessID", &FBehaviorExecutionRecord::OwningProcessID)
		.def_readwrite("ProvidersIndex", &FBehaviorExecutionRecord::ProvidersIndex)
		.def_readwrite("SequencesDataIndex", &FBehaviorExecutionRecord::SequencesDataIndex)
		.def_readwrite("BehaviorNumber", &FBehaviorExecutionRecord::BehaviorNumber)
		.def_readwrite("BehaviorName", &FBehaviorExecutionRecord::BehaviorName)
		.def_readwrite("TimeOfExecution", &FBehaviorExecutionRecord::TimeOfExecution)
  ;
	py::class_< FBehaviorThread >(m, "FBehaviorThread")
		.def_readwrite("ThreadState", &FBehaviorThread::ThreadState)
		.def_readwrite("OwningProcessID", &FBehaviorThread::OwningProcessID)
		.def_readwrite("ThreadSequenceState", &FBehaviorThread::ThreadSequenceState)
		.def_readwrite("NextBehavior", &FBehaviorThread::NextBehavior)
		.def_readwrite("ActivateTime", &FBehaviorThread::ActivateTime)
		.def_readwrite("BehaviorStartedTime", &FBehaviorThread::BehaviorStartedTime)
  ;
	py::class_< FBehaviorEventState >(m, "FBehaviorEventState")
		.def_readwrite("TriggerCount", &FBehaviorEventState::TriggerCount)
		.def_readwrite("LastTriggerTime", &FBehaviorEventState::LastTriggerTime)
		.def_readwrite("FilterObject", &FBehaviorEventState::FilterObject)
  ;
	py::class_< FBehaviorVariableState >(m, "FBehaviorVariableState")
		.def_readwrite("Name", &FBehaviorVariableState::Name)
		.def_readwrite("Type", &FBehaviorVariableState::Type)
		.def_readwrite("Value", &FBehaviorVariableState::Value)
  ;
	py::class_< FBehaviorSequenceState >(m, "FBehaviorSequenceState")
		.def_property("bIsEnabled", [](FBehaviorSequenceState &self){return self.bIsEnabled;}, [](FBehaviorSequenceState &self, bool value){self.bIsEnabled = value ? 1 : 0;})
		.def_readwrite("ProvidersIndex", &FBehaviorSequenceState::ProvidersIndex)
		.def_readwrite("SequencesDataIndex", &FBehaviorSequenceState::SequencesDataIndex)
		.def_readwrite("SequenceEnabledBitIndex", &FBehaviorSequenceState::SequenceEnabledBitIndex)
		.def_readwrite("EventStateHead", &FBehaviorSequenceState::EventStateHead)
		.def_readwrite("VariableStateHead", &FBehaviorSequenceState::VariableStateHead)
  ;
	py::class_< FBehaviorProcess >(m, "FBehaviorProcess")
		.def_readwrite("Owner", &FBehaviorProcess::Owner)
		.def_readwrite("ProcessID", &FBehaviorProcess::ProcessID)
		.def_readwrite("SequenceEnabledBitField", &FBehaviorProcess::SequenceEnabledBitField)
		.def_readwrite("ProcessState", &FBehaviorProcess::ProcessState)
		.def_readwrite("NextSequenceEnabledBitIndexToUse", &FBehaviorProcess::NextSequenceEnabledBitIndexToUse)
		.def_readwrite("bSupportsReplicatedSequenceState", &FBehaviorProcess::bSupportsReplicatedSequenceState)
		.def_readwrite("NumPendingProviderRemovalRequests", &FBehaviorProcess::NumPendingProviderRemovalRequests)
		.def_readwrite("Sequences", &FBehaviorProcess::Sequences)
		.def_readwrite("Events", &FBehaviorProcess::Events)
		.def_readwrite("Variables", &FBehaviorProcess::Variables)
  ;
	py::class_< FProviderRemovalRequest >(m, "FProviderRemovalRequest")
		.def_readwrite("ConsumerHandle", &FProviderRemovalRequest::ConsumerHandle)
		.def_readwrite("ProvidersIndex", &FProviderRemovalRequest::ProvidersIndex)
  ;
	py::class_< FBehaviorKernelArrayStats >(m, "FBehaviorKernelArrayStats")
		.def_readwrite("UsedSlots", &FBehaviorKernelArrayStats::UsedSlots)
		.def_readwrite("UnusedSlots", &FBehaviorKernelArrayStats::UnusedSlots)
		.def_readwrite("PeakUsage", &FBehaviorKernelArrayStats::PeakUsage)
		.def_readwrite("ContainerSlack", &FBehaviorKernelArrayStats::ContainerSlack)
  ;
	py::class_< FBehaviorKernelStats >(m, "FBehaviorKernelStats")
		.def_readwrite("NumProcessesCreated", &FBehaviorKernelStats::NumProcessesCreated)
		.def_readwrite("NumThreadsCreated", &FBehaviorKernelStats::NumThreadsCreated)
		.def_readwrite("NumWaitingThreads", &FBehaviorKernelStats::NumWaitingThreads)
		.def_readwrite("NumEventsActivated", &FBehaviorKernelStats::NumEventsActivated)
		.def_readwrite("NumEventsIgnored", &FBehaviorKernelStats::NumEventsIgnored)
		.def_readwrite("NumBehaviorsRun", &FBehaviorKernelStats::NumBehaviorsRun)
		.def_readwrite("ProcessListStats", &FBehaviorKernelStats::ProcessListStats)
		.def_readwrite("ProviderListStats", &FBehaviorKernelStats::ProviderListStats)
		.def_readwrite("ObjectVariablesListStats", &FBehaviorKernelStats::ObjectVariablesListStats)
		.def_readwrite("DynamicBehaviorsListStats", &FBehaviorKernelStats::DynamicBehaviorsListStats)
		.def_readwrite("ProvidersIndexFreeListLength", &FBehaviorKernelStats::ProvidersIndexFreeListLength)
		.def_readwrite("ObjectVariablesFreeListLength", &FBehaviorKernelStats::ObjectVariablesFreeListLength)
		.def_readwrite("TotalMemoryUsed", &FBehaviorKernelStats::TotalMemoryUsed)
		.def_readwrite("MemoryUsedBySlack", &FBehaviorKernelStats::MemoryUsedBySlack)
  ;
	py::class_< FReplicatedBehaviorConsumerState >(m, "FReplicatedBehaviorConsumerState")
		.def_property("bIsProcessSuspended", [](FReplicatedBehaviorConsumerState &self){return self.bIsProcessSuspended;}, [](FReplicatedBehaviorConsumerState &self, bool value){self.bIsProcessSuspended = value ? 1 : 0;})
		.def_property("bNeedToApplyThisState", [](FReplicatedBehaviorConsumerState &self){return self.bNeedToApplyThisState;}, [](FReplicatedBehaviorConsumerState &self, bool value){self.bNeedToApplyThisState = value ? 1 : 0;})
		.def_readwrite("BehaviorSequenceEnabledFlags", &FReplicatedBehaviorConsumerState::BehaviorSequenceEnabledFlags)
  ;
	py::class_< FReplicatedBehaviorEvent >(m, "FReplicatedBehaviorEvent")
		.def_readwrite("SequenceIndex", &FReplicatedBehaviorEvent::SequenceIndex)
		.def_readwrite("EventCounter", &FReplicatedBehaviorEvent::EventCounter)
		.def_readwrite("EventIndex", &FReplicatedBehaviorEvent::EventIndex)
		.def_readwrite("EventOutput", &FReplicatedBehaviorEvent::EventOutput)
  ;
	py::class_< FLinkedBehaviorSequence >(m, "FLinkedBehaviorSequence")
		.def_readwrite("ConsumerHandle", &FLinkedBehaviorSequence::ConsumerHandle)
		.def_readwrite("SequenceState", &FLinkedBehaviorSequence::SequenceState)
  ;
	py::class_< FBehaviorTriggerMessageStruct >(m, "FBehaviorTriggerMessageStruct")
		.def_readwrite("MessageDefinition", &FBehaviorTriggerMessageStruct::MessageDefinition)
		.def_readwrite("Instigator", &FBehaviorTriggerMessageStruct::Instigator)
		.def_readwrite("OtherEventParticipant", &FBehaviorTriggerMessageStruct::OtherEventParticipant)
		.def_readwrite("Behaviors", &FBehaviorTriggerMessageStruct::Behaviors)
  ;
	py::class_< FExposureCacheStruct >(m, "FExposureCacheStruct")
		.def_readwrite("FromPawnName", &FExposureCacheStruct::FromPawnName)
		.def_readwrite("ToActorName", &FExposureCacheStruct::ToActorName)
		.def_readwrite("TimeCached", &FExposureCacheStruct::TimeCached)
		.def_readwrite("NextUpdateTime", &FExposureCacheStruct::NextUpdateTime)
		.def_readwrite("Exposure", &FExposureCacheStruct::Exposure)
		.def_readwrite("FromLoc", &FExposureCacheStruct::FromLoc)
		.def_readwrite("ToLoc", &FExposureCacheStruct::ToLoc)
		.def_readwrite("Vantage", &FExposureCacheStruct::Vantage)
  ;
	py::class_< FExposureUpdateStruct >(m, "FExposureUpdateStruct")
		.def_readwrite("FromPawn", &FExposureUpdateStruct::FromPawn)
		.def_readwrite("ToActor", &FExposureUpdateStruct::ToActor)
		.def_readwrite("TimeRequested", &FExposureUpdateStruct::TimeRequested)
		.def_readwrite("Exposure", &FExposureUpdateStruct::Exposure)
		.def_readwrite("Vantage", &FExposureUpdateStruct::Vantage)
		.def_readwrite("ShouldRemove", &FExposureUpdateStruct::ShouldRemove)
  ;
	py::class_< FBucketStruct >(m, "FBucketStruct")
		.def_readwrite("NdxToStartCheckFrom", &FBucketStruct::NdxToStartCheckFrom)
		.def_readwrite("DistanceSquared", &FBucketStruct::DistanceSquared)
		.def_readwrite("MaxLineChecksPerFrame", &FBucketStruct::MaxLineChecksPerFrame)
		.def_readwrite("MaxIterationsPerFrame", &FBucketStruct::MaxIterationsPerFrame)
		.def_readwrite("Exposures", &FBucketStruct::Exposures)
  ;
	py::class_< FPointExposureData >(m, "FPointExposureData")
		.def_readwrite("Looker", &FPointExposureData::Looker)
		.def_readwrite("Point", &FPointExposureData::Point)
		.def_readwrite("Point2", &FPointExposureData::Point2)
		.def_readwrite("Exposure", &FPointExposureData::Exposure)
		.def_readwrite("LastCheckTime", &FPointExposureData::LastCheckTime)
		.def_readwrite("LastUpdateTime", &FPointExposureData::LastUpdateTime)
  ;
	py::class_< FFeatherBoneBlendData >(m, "FFeatherBoneBlendData")
		.def_readwrite("StartBoneName", &FFeatherBoneBlendData::StartBoneName)
		.def_readwrite("BlendWeight", &FFeatherBoneBlendData::BlendWeight)
  ;
	py::class_< FFiringBehaviorBurstInfo >(m, "FFiringBehaviorBurstInfo")
		.def_readwrite("Instigator", &FFiringBehaviorBurstInfo::Instigator)
		.def_readwrite("InstigatorWeapon", &FFiringBehaviorBurstInfo::InstigatorWeapon)
		.def_readwrite("TargetActor", &FFiringBehaviorBurstInfo::TargetActor)
		.def_readwrite("NumShots", &FFiringBehaviorBurstInfo::NumShots)
		.def_readwrite("RefireRate", &FFiringBehaviorBurstInfo::RefireRate)
		.def_readwrite("TargetInfo", &FFiringBehaviorBurstInfo::TargetInfo)
		.def_readwrite("FireType", &FFiringBehaviorBurstInfo::FireType)
  ;
	py::class_< FConditionalPattern >(m, "FConditionalPattern")
		.def_readwrite("Conditions", &FConditionalPattern::Conditions)
		.def_readwrite("Pattern", &FConditionalPattern::Pattern)
  ;
	py::class_< FFlagEvalConditional >(m, "FFlagEvalConditional")
		.def_readwrite("FlagEvalType", &FFlagEvalConditional::FlagEvalType)
		.def_readwrite("FlagDefinition", &FFlagEvalConditional::FlagDefinition)
		.def_readwrite("TimeSeconds", &FFlagEvalConditional::TimeSeconds)
  ;
	py::class_< FFlagEvalORConnector >(m, "FFlagEvalORConnector")
		.def_readwrite("ANDChain", &FFlagEvalORConnector::ANDChain)
  ;
	py::class_< Fs_actorList >(m, "Fs_actorList")
		.def_readwrite("LevelName", &Fs_actorList::LevelName)
		.def_readwrite("Actor", &Fs_actorList::Actor)
  ;
	py::class_< FSparkResult >(m, "FSparkResult")
		.def_property("RequestSucceeded", [](FSparkResult &self){return self.RequestSucceeded;}, [](FSparkResult &self, bool value){self.RequestSucceeded = value ? 1 : 0;})
		.def_readwrite("ErrorCode", &FSparkResult::ErrorCode)
		.def_readwrite("HttpStatusCode", &FSparkResult::HttpStatusCode)
		.def_readwrite("ResponseBody", &FSparkResult::ResponseBody)
  ;
	py::class_< FHttpParameters >(m, "FHttpParameters")
		.def_property("IsResponseDesired", [](FHttpParameters &self){return self.IsResponseDesired;}, [](FHttpParameters &self, bool value){self.IsResponseDesired = value ? 1 : 0;})
		.def_readwrite("ServiceConfiguration", &FHttpParameters::ServiceConfiguration)
		.def_readwrite("SubService", &FHttpParameters::SubService)
		.def_readwrite("ContentType", &FHttpParameters::ContentType)
		.def_readwrite("CustomContentType", &FHttpParameters::CustomContentType)
		.def_readwrite("AcceptsType", &FHttpParameters::AcceptsType)
		.def_readwrite("CustomAcceptsType", &FHttpParameters::CustomAcceptsType)
		.def_readwrite("Method", &FHttpParameters::Method)
  ;
	py::class_< FEntitlementResult >(m, "FEntitlementResult")
		.def_property("Consumable", [](FEntitlementResult &self){return self.Consumable;}, [](FEntitlementResult &self, bool value){self.Consumable = value ? 1 : 0;})
		.def_readwrite("Identifier", &FEntitlementResult::Identifier)
		.def_readwrite("Payload", &FEntitlementResult::Payload)
		.def_readwrite("Id", &FEntitlementResult::Id)
		.def_readwrite("Consumed", &FEntitlementResult::Consumed)
		.def_readwrite("ConsumableAmount", &FEntitlementResult::ConsumableAmount)
  ;
	py::class_< FOfferResult >(m, "FOfferResult")
		.def_property("Notified", [](FOfferResult &self){return self.Notified;}, [](FOfferResult &self, bool value){self.Notified = value ? 1 : 0;})
		.def_readwrite("TitleEfigs", &FOfferResult::TitleEfigs)
		.def_readwrite("DescriptionEfigs", &FOfferResult::DescriptionEfigs)
		.def_readwrite("Id", &FOfferResult::Id)
		.def_readwrite("DateUnlocked", &FOfferResult::DateUnlocked)
  ;
	py::class_< FServiceParameterResult >(m, "FServiceParameterResult")
		.def_readwrite("Key", &FServiceParameterResult::Key)
		.def_readwrite("Value", &FServiceParameterResult::Value)
  ;
	py::class_< FServiceResult >(m, "FServiceResult")
		.def_readwrite("ServiceName", &FServiceResult::ServiceName)
		.def_readwrite("ConfigurationGroup", &FServiceResult::ConfigurationGroup)
		.def_readwrite("Parameters", &FServiceResult::Parameters)
  ;
	py::class_< FArchwayResult >(m, "FArchwayResult")
		.def_property("InProgress", [](FArchwayResult &self){return self.InProgress;}, [](FArchwayResult &self, bool value){self.InProgress = value ? 1 : 0;})
		.def_property("Success", [](FArchwayResult &self){return self.Success;}, [](FArchwayResult &self, bool value){self.Success = value ? 1 : 0;})
		.def_property("DisableSpark", [](FArchwayResult &self){return self.DisableSpark;}, [](FArchwayResult &self, bool value){self.DisableSpark = value ? 1 : 0;})
		.def_property("TimeOut", [](FArchwayResult &self){return self.TimeOut;}, [](FArchwayResult &self, bool value){self.TimeOut = value ? 1 : 0;})
		.def_property("HasShiftAccount", [](FArchwayResult &self){return self.HasShiftAccount;}, [](FArchwayResult &self, bool value){self.HasShiftAccount = value ? 1 : 0;})
		.def_readwrite("RequestId", &FArchwayResult::RequestId)
		.def_readwrite("GearboxUserToken", &FArchwayResult::GearboxUserToken)
		.def_readwrite("GearboxUserEmail", &FArchwayResult::GearboxUserEmail)
		.def_readwrite("Messages", &FArchwayResult::Messages)
		.def_readwrite("Entitlements", &FArchwayResult::Entitlements)
		.def_readwrite("Offers", &FArchwayResult::Offers)
		.def_readwrite("Services", &FArchwayResult::Services)
		.def_readwrite("EmergencyMessage", &FArchwayResult::EmergencyMessage)
  ;
	py::class_< FNodeData >(m, "FNodeData")
		.def_readwrite("Node", &FNodeData::Node)
		.def_readwrite("Weight", &FNodeData::Weight)
  ;
	py::class_< FSMBehavior >(m, "FSMBehavior")
		.def_property("PlayServer", [](FSMBehavior &self){return self.PlayServer;}, [](FSMBehavior &self, bool value){self.PlayServer = value ? 1 : 0;})
		.def_property("PlayClient", [](FSMBehavior &self){return self.PlayClient;}, [](FSMBehavior &self, bool value){self.PlayClient = value ? 1 : 0;})
		.def_property("PlayLocal", [](FSMBehavior &self){return self.PlayLocal;}, [](FSMBehavior &self, bool value){self.PlayLocal = value ? 1 : 0;})
		.def_readwrite("Behaviors", &FSMBehavior::Behaviors)
  ;
	py::class_< FCoverSpotInfo >(m, "FCoverSpotInfo")
		.def_readwrite("TheCoverActor", &FCoverSpotInfo::TheCoverActor)
		.def_readwrite("CoverSlotIndex", &FCoverSpotInfo::CoverSlotIndex)
		.def_readwrite("CoverSpotWorldLocation", &FCoverSpotInfo::CoverSpotWorldLocation)
		.def_readwrite("CoverHeight", &FCoverSpotInfo::CoverHeight)
		.def_readwrite("ExtendedInfo1", &FCoverSpotInfo::ExtendedInfo1)
		.def_readwrite("ExtendedInfo2", &FCoverSpotInfo::ExtendedInfo2)
		.def_readwrite("ExtendedInfo3", &FCoverSpotInfo::ExtendedInfo3)
  ;
	py::class_< FGearboxDialogData >(m, "FGearboxDialogData")
		.def_readwrite("NameTag", &FGearboxDialogData::NameTag)
		.def_readwrite("TalkAkEvent", &FGearboxDialogData::TalkAkEvent)
		.def_readwrite("AkAudioUniqueID", &FGearboxDialogData::AkAudioUniqueID)
		.def_readwrite("Pitch", &FGearboxDialogData::Pitch)
  ;
	py::class_< FGearboxDialogReplicatedData >(m, "FGearboxDialogReplicatedData")
		.def_readwrite("Pitch", &FGearboxDialogReplicatedData::Pitch)
		.def_readwrite("TalkAkEvent", &FGearboxDialogReplicatedData::TalkAkEvent)
		.def_readwrite("AkAudioUniqueID", &FGearboxDialogReplicatedData::AkAudioUniqueID)
		.def_readwrite("TalkAct", &FGearboxDialogReplicatedData::TalkAct)
		.def_readwrite("EventTag", &FGearboxDialogReplicatedData::EventTag)
  ;
	py::class_< FOutputLinkToStruct >(m, "FOutputLinkToStruct")
		.def_readwrite("FromNodeID", &FOutputLinkToStruct::FromNodeID)
		.def_readwrite("LinkNumber", &FOutputLinkToStruct::LinkNumber)
		.def_readwrite("ToNodeID", &FOutputLinkToStruct::ToNodeID)
  ;
	py::class_< FDialogEventData >(m, "FDialogEventData")
		.def_property("bEnabled", [](FDialogEventData &self){return self.bEnabled;}, [](FDialogEventData &self, bool value){self.bEnabled = value ? 1 : 0;})
		.def_readwrite("Tag", &FDialogEventData::Tag)
		.def_readwrite("OutputAction", &FDialogEventData::OutputAction)
  ;
	py::class_< FDialogEventInfo >(m, "FDialogEventInfo")
		.def_readwrite("Event", &FDialogEventInfo::Event)
		.def_readwrite("NodeID", &FDialogEventInfo::NodeID)
  ;
	py::class_< FTalkActData >(m, "FTalkActData")
		.def_property("bInstigatorTalker", [](FTalkActData &self){return self.bInstigatorTalker;}, [](FTalkActData &self, bool value){self.bInstigatorTalker = value ? 1 : 0;})
		.def_readwrite("OutputDelay", &FTalkActData::OutputDelay)
		.def_readwrite("TalkData", &FTalkActData::TalkData)
		.def_readwrite("TalkerVariable", &FTalkActData::TalkerVariable)
		.def_readwrite("OutputAction", &FTalkActData::OutputAction)
  ;
	py::class_< FMovieStateData >(m, "FMovieStateData")
		.def_readwrite("State", &FMovieStateData::State)
		.def_readwrite("Mode", &FMovieStateData::Mode)
		.def_readwrite("Context", &FMovieStateData::Context)
		.def_readwrite("ASArgs", &FMovieStateData::ASArgs)
  ;
	py::class_< FMovieStateStruct >(m, "FMovieStateStruct")
		.def_readwrite("States", &FMovieStateStruct::States)
		.def_readwrite("Flags", &FMovieStateStruct::Flags)
  ;
	py::class_< FReplicatedNounAttributeState >(m, "FReplicatedNounAttributeState")
		.def_property("bOnlyRelevantToOwner", [](FReplicatedNounAttributeState &self){return self.bOnlyRelevantToOwner;}, [](FReplicatedNounAttributeState &self, bool value){self.bOnlyRelevantToOwner = value ? 1 : 0;})
		.def_readwrite("NounName", &FReplicatedNounAttributeState::NounName)
		.def_readwrite("Value", &FReplicatedNounAttributeState::Value)
  ;
	py::class_< FNounAttributeState >(m, "FNounAttributeState")
		.def_readwrite("NounName", &FNounAttributeState::NounName)
		.def_readwrite("Value", &FNounAttributeState::Value)
		.def_readwrite("BaseValue", &FNounAttributeState::BaseValue)
		.def_readwrite("ModifierStack", &FNounAttributeState::ModifierStack)
		.def_readwrite("ReplicationStrategy", &FNounAttributeState::ReplicationStrategy)
		.def_readwrite("IndexInReplicationArray", &FNounAttributeState::IndexInReplicationArray)
  ;
	py::class_< FDynamicFlagInstanceData >(m, "FDynamicFlagInstanceData")
		.def_readwrite("DynamicFlag", &FDynamicFlagInstanceData::DynamicFlag)
		.def_readwrite("LastEvaluatedExpressionTime", &FDynamicFlagInstanceData::LastEvaluatedExpressionTime)
  ;
	py::class_< FEventRecord >(m, "FEventRecord")
		.def_readwrite("EventDefinition", &FEventRecord::EventDefinition)
		.def_readwrite("OtherEventParticipantObject", &FEventRecord::OtherEventParticipantObject)
  ;
	py::class_< FRuleSetReference >(m, "FRuleSetReference")
		.def_readwrite("ReferenceName", &FRuleSetReference::ReferenceName)
		.def_readwrite("ReferenceRuleSet", &FRuleSetReference::ReferenceRuleSet)
  ;
	py::class_< FTargetIteratorData >(m, "FTargetIteratorData")
		.def_readwrite("Iterator", &FTargetIteratorData::Iterator)
		.def_readwrite("Weight", &FTargetIteratorData::Weight)
  ;
	py::class_< FPathFindData >(m, "FPathFindData")
		.def_property("bFinalDestIsActor", [](FPathFindData &self){return self.bFinalDestIsActor;}, [](FPathFindData &self, bool value){self.bFinalDestIsActor = value ? 1 : 0;})
		.def_property("bCanArriveEarly", [](FPathFindData &self){return self.bCanArriveEarly;}, [](FPathFindData &self, bool value){self.bCanArriveEarly = value ? 1 : 0;})
		.def_readwrite("Path", &FPathFindData::Path)
		.def_readwrite("FinalDest", &FPathFindData::FinalDest)
		.def_readwrite("MaxRangeToDest", &FPathFindData::MaxRangeToDest)
		.def_readwrite("AnchorPoly", &FPathFindData::AnchorPoly)
  ;
	py::class_< FReplicatedSpecialMoveData >(m, "FReplicatedSpecialMoveData")
		.def_readwrite("Data", &FReplicatedSpecialMoveData::Data)
		.def_readwrite("PlayRateScale", &FReplicatedSpecialMoveData::PlayRateScale)
		.def_readwrite("Duration", &FReplicatedSpecialMoveData::Duration)
		.def_readwrite("DirtyCounter", &FReplicatedSpecialMoveData::DirtyCounter)
		.def_readwrite("SMD", &FReplicatedSpecialMoveData::SMD)
  ;
	py::class_< FRuleInfo >(m, "FRuleInfo")
		.def_property("bIsRunning", [](FRuleInfo &self){return self.bIsRunning;}, [](FRuleInfo &self, bool value){self.bIsRunning = value ? 1 : 0;})
		.def_property("bHasFinishedCode", [](FRuleInfo &self){return self.bHasFinishedCode;}, [](FRuleInfo &self, bool value){self.bHasFinishedCode = value ? 1 : 0;})
		.def_property("bIsDisabled", [](FRuleInfo &self){return self.bIsDisabled;}, [](FRuleInfo &self, bool value){self.bIsDisabled = value ? 1 : 0;})
		.def_property("bIsContainer", [](FRuleInfo &self){return self.bIsContainer;}, [](FRuleInfo &self, bool value){self.bIsContainer = value ? 1 : 0;})
		.def_readwrite("RuleName", &FRuleInfo::RuleName)
		.def_readwrite("RuleNameString", &FRuleInfo::RuleNameString)
		.def_readwrite("RunningSequence", &FRuleInfo::RunningSequence)
		.def_readwrite("LatentAction", &FRuleInfo::LatentAction)
		.def_readwrite("ColorCodedStrings", &FRuleInfo::ColorCodedStrings)
		.def_readwrite("ContainerRuleStartNdx", &FRuleInfo::ContainerRuleStartNdx)
		.def_readwrite("ContainerRuleNumSubRules", &FRuleInfo::ContainerRuleNumSubRules)
  ;
	py::class_< FIconData >(m, "FIconData")
		.def_readwrite("U", &FIconData::U)
		.def_readwrite("V", &FIconData::V)
		.def_readwrite("UL", &FIconData::UL)
		.def_readwrite("VL", &FIconData::VL)
		.def_readwrite("Scale", &FIconData::Scale)
  ;
	py::class_< FAwarenessInfo >(m, "FAwarenessInfo")
		.def_property("IsInfinitelyFarAway", [](FAwarenessInfo &self){return self.IsInfinitelyFarAway;}, [](FAwarenessInfo &self, bool value){self.IsInfinitelyFarAway = value ? 1 : 0;})
		.def_readwrite("Location", &FAwarenessInfo::Location)
		.def_readwrite("Radius", &FAwarenessInfo::Radius)
		.def_readwrite("AwarenessZoneName", &FAwarenessInfo::AwarenessZoneName)
		.def_readwrite("ZoneColor", &FAwarenessInfo::ZoneColor)
  ;
	py::class_< FLastVisibleInfo >(m, "FLastVisibleInfo")
		.def_readwrite("LastVisibleLocation", &FLastVisibleInfo::LastVisibleLocation)
		.def_readwrite("CurrentLocation", &FLastVisibleInfo::CurrentLocation)
  ;
	py::class_< FDebugExposure >(m, "FDebugExposure")
		.def_property("IsPlayerInfo", [](FDebugExposure &self){return self.IsPlayerInfo;}, [](FDebugExposure &self, bool value){self.IsPlayerInfo = value ? 1 : 0;})
		.def_readwrite("TargetExposure", &FDebugExposure::TargetExposure)
		.def_readwrite("MyExposure", &FDebugExposure::MyExposure)
		.def_readwrite("InWorldLocation", &FDebugExposure::InWorldLocation)
  ;
	py::class_< FViewConeInfo >(m, "FViewConeInfo")
		.def_property("Has360DegreesAwareness", [](FViewConeInfo &self){return self.Has360DegreesAwareness;}, [](FViewConeInfo &self, bool value){self.Has360DegreesAwareness = value ? 1 : 0;})
		.def_readwrite("ConeOrigin", &FViewConeInfo::ConeOrigin)
		.def_readwrite("ConeDirection", &FViewConeInfo::ConeDirection)
		.def_readwrite("ConeAngle", &FViewConeInfo::ConeAngle)
		.def_readwrite("ConeLength", &FViewConeInfo::ConeLength)
		.def_readwrite("ConeColor", &FViewConeInfo::ConeColor)
  ;
	py::class_< FCoverDebugScoringData >(m, "FCoverDebugScoringData")
		.def_readwrite("PriorityName", &FCoverDebugScoringData::PriorityName)
		.def_readwrite("Score", &FCoverDebugScoringData::Score)
  ;
	py::class_< FCoverDebugInfo >(m, "FCoverDebugInfo")
		.def_property("IsACandidate", [](FCoverDebugInfo &self){return self.IsACandidate;}, [](FCoverDebugInfo &self, bool value){self.IsACandidate = value ? 1 : 0;})
		.def_property("IsBestCandidate", [](FCoverDebugInfo &self){return self.IsBestCandidate;}, [](FCoverDebugInfo &self, bool value){self.IsBestCandidate = value ? 1 : 0;})
		.def_readwrite("CoverRegionName", &FCoverDebugInfo::CoverRegionName)
		.def_readwrite("Score", &FCoverDebugInfo::Score)
		.def_readwrite("Distance", &FCoverDebugInfo::Distance)
		.def_readwrite("FailString", &FCoverDebugInfo::FailString)
		.def_readwrite("LeftEndPoint", &FCoverDebugInfo::LeftEndPoint)
		.def_readwrite("RightEndPoint", &FCoverDebugInfo::RightEndPoint)
		.def_readwrite("CoverDirection", &FCoverDebugInfo::CoverDirection)
		.def_readwrite("ScoringInfo", &FCoverDebugInfo::ScoringInfo)
  ;
	py::class_< FTargetPriorityInfo >(m, "FTargetPriorityInfo")
		.def_readwrite("TargetName", &FTargetPriorityInfo::TargetName)
		.def_readwrite("ShortName", &FTargetPriorityInfo::ShortName)
		.def_readwrite("Value", &FTargetPriorityInfo::Value)
		.def_readwrite("BarColor", &FTargetPriorityInfo::BarColor)
  ;
	py::class_< FTargetDebugDatum >(m, "FTargetDebugDatum")
		.def_property("bCurrent", [](FTargetDebugDatum &self){return self.bCurrent;}, [](FTargetDebugDatum &self, bool value){self.bCurrent = value ? 1 : 0;})
		.def_property("bIsPlayer", [](FTargetDebugDatum &self){return self.bIsPlayer;}, [](FTargetDebugDatum &self, bool value){self.bIsPlayer = value ? 1 : 0;})
		.def_readwrite("TargetName", &FTargetDebugDatum::TargetName)
		.def_readwrite("TotalPriority", &FTargetDebugDatum::TotalPriority)
		.def_readwrite("PriorityData", &FTargetDebugDatum::PriorityData)
  ;
	py::class_< FAIHoldDebugData >(m, "FAIHoldDebugData")
		.def_readwrite("HoldName", &FAIHoldDebugData::HoldName)
		.def_readwrite("HoldTag", &FAIHoldDebugData::HoldTag)
  ;
	py::class_< FGearboxViewShakeInfo >(m, "FGearboxViewShakeInfo")
		.def_readwrite("OffsetMag", &FGearboxViewShakeInfo::OffsetMag)
		.def_readwrite("OffsetRate", &FGearboxViewShakeInfo::OffsetRate)
		.def_readwrite("OffsetTime", &FGearboxViewShakeInfo::OffsetTime)
		.def_readwrite("RotMag", &FGearboxViewShakeInfo::RotMag)
		.def_readwrite("RotRate", &FGearboxViewShakeInfo::RotRate)
		.def_readwrite("RotTime", &FGearboxViewShakeInfo::RotTime)
		.def_readwrite("FOVMag", &FGearboxViewShakeInfo::FOVMag)
		.def_readwrite("FOVRate", &FGearboxViewShakeInfo::FOVRate)
		.def_readwrite("FOVTime", &FGearboxViewShakeInfo::FOVTime)
  ;
	py::class_< FStepConfiguration >(m, "FStepConfiguration")
		.def_readwrite("FirstAttemptDelay", &FStepConfiguration::FirstAttemptDelay)
		.def_readwrite("BaseRetrySeconds", &FStepConfiguration::BaseRetrySeconds)
		.def_readwrite("RetryMultiplier", &FStepConfiguration::RetryMultiplier)
		.def_readwrite("MaxRetryAttempts", &FStepConfiguration::MaxRetryAttempts)
		.def_readwrite("RetryJitter", &FStepConfiguration::RetryJitter)
  ;
	py::class_< FThumbnailRenderData >(m, "FThumbnailRenderData")
		.def_readwrite("Context", &FThumbnailRenderData::Context)
		.def_readwrite("RenderTarget", &FThumbnailRenderData::RenderTarget)
		.def_readwrite("ResultTexture", &FThumbnailRenderData::ResultTexture)
		.def_readwrite("UpdateType", &FThumbnailRenderData::UpdateType)
		.def_readwrite("Mesh", &FThumbnailRenderData::Mesh)
		.def_readwrite("TextureSizeX", &FThumbnailRenderData::TextureSizeX)
		.def_readwrite("TextureSizeY", &FThumbnailRenderData::TextureSizeY)
		.def_readwrite("SizeX", &FThumbnailRenderData::SizeX)
		.def_readwrite("SizeY", &FThumbnailRenderData::SizeY)
		.def_readwrite("ReferencedTextures", &FThumbnailRenderData::ReferencedTextures)
		.def_readwrite("StopStreamTexturesTime", &FThumbnailRenderData::StopStreamTexturesTime)
  ;
	py::class_< FThumbnailLightData >(m, "FThumbnailLightData")
		.def_readwrite("Direction", &FThumbnailLightData::Direction)
		.def_readwrite("Light", &FThumbnailLightData::Light)
  ;
	py::class_< FGestaltPart >(m, "FGestaltPart")
		.def_readwrite("SkeletalMeshFragment", &FGestaltPart::SkeletalMeshFragment)
		.def_readwrite("SkeletalMeshFragmentName", &FGestaltPart::SkeletalMeshFragmentName)
		.def_readwrite("MaterialIndex", &FGestaltPart::MaterialIndex)
		.def_readwrite("FirstIndex", &FGestaltPart::FirstIndex)
		.def_readwrite("NumPrimitives", &FGestaltPart::NumPrimitives)
  ;
	py::class_< FGestaltInfo >(m, "FGestaltInfo")
		.def_readwrite("Parts", &FGestaltInfo::Parts)
  ;
	py::class_< FGestaltAccessoryNameEntry >(m, "FGestaltAccessoryNameEntry")
		.def_readwrite("SkeletalMeshFragmentName", &FGestaltAccessoryNameEntry::SkeletalMeshFragmentName)
  ;
	py::class_< FGestaltSocketRemapEntry >(m, "FGestaltSocketRemapEntry")
		.def_readwrite("SkeletalMeshFragment", &FGestaltSocketRemapEntry::SkeletalMeshFragment)
		.def_readwrite("SkeletalMeshFragmentName", &FGestaltSocketRemapEntry::SkeletalMeshFragmentName)
		.def_readwrite("OriginalSocketName", &FGestaltSocketRemapEntry::OriginalSocketName)
		.def_readwrite("MangledSocketName", &FGestaltSocketRemapEntry::MangledSocketName)
  ;
	py::class_< FGestaltPartBoundsEntry >(m, "FGestaltPartBoundsEntry")
		.def_readwrite("SkeletalMeshFragmentName", &FGestaltPartBoundsEntry::SkeletalMeshFragmentName)
		.def_readwrite("ReferencePoseBounds", &FGestaltPartBoundsEntry::ReferencePoseBounds)
  ;
	py::class_< FGestaltPartPermutation >(m, "FGestaltPartPermutation")
		.def_readwrite("MeshName", &FGestaltPartPermutation::MeshName)
		.def_readwrite("GroupName", &FGestaltPartPermutation::GroupName)
		.def_readwrite("PartName", &FGestaltPartPermutation::PartName)
  ;
	py::class_< FMovieInstanceArray >(m, "FMovieInstanceArray")
		.def_readwrite("Movies", &FMovieInstanceArray::Movies)
		.def_readwrite("PoolParent", &FMovieInstanceArray::PoolParent)
  ;
	py::class_< FGFxMenuLink >(m, "FGFxMenuLink")
		.def_readwrite("MenuName", &FGFxMenuLink::MenuName)
		.def_readwrite("Definition", &FGFxMenuLink::Definition)
  ;
	py::class_< FHUDCoordValue >(m, "FHUDCoordValue")
		.def_property("bCacheValid", [](FHUDCoordValue &self){return self.bCacheValid;}, [](FHUDCoordValue &self, bool value){self.bCacheValid = value ? 1 : 0;})
		.def_readwrite("Type", &FHUDCoordValue::Type)
		.def_readwrite("Value", &FHUDCoordValue::Value)
		.def_readwrite("CurrentValue", &FHUDCoordValue::CurrentValue)
  ;
	py::class_< FHUDAnchorPoint >(m, "FHUDAnchorPoint")
		.def_readwrite("MoviePoint", &FHUDAnchorPoint::MoviePoint)
		.def_readwrite("ScreenPoint", &FHUDAnchorPoint::ScreenPoint)
  ;
	py::class_< FGearboxGFxPlayParameters >(m, "FGearboxGFxPlayParameters")
		.def_readwrite("Definition", &FGearboxGFxPlayParameters::Definition)
		.def_readwrite("OtherObject", &FGearboxGFxPlayParameters::OtherObject)
		.def_readwrite("PlayerOwner", &FGearboxGFxPlayParameters::PlayerOwner)
  ;
	py::class_< FAttributeValuePair >(m, "FAttributeValuePair")
		.def_readwrite("Key", &FAttributeValuePair::Key)
		.def_readwrite("Value", &FAttributeValuePair::Value)
  ;
	py::class_< FSpecialMoveValuePair >(m, "FSpecialMoveValuePair")
		.def_readwrite("Key", &FSpecialMoveValuePair::Key)
		.def_readwrite("Value", &FSpecialMoveValuePair::Value)
  ;
	py::class_< FCustomEventReactionData >(m, "FCustomEventReactionData")
		.def_property("bReplicateEvent", [](FCustomEventReactionData &self){return self.bReplicateEvent;}, [](FCustomEventReactionData &self, bool value){self.bReplicateEvent = value ? 1 : 0;})
		.def_readwrite("EventName", &FCustomEventReactionData::EventName)
		.def_readwrite("Behaviors", &FCustomEventReactionData::Behaviors)
  ;
	py::class_< FHitTargetRecord >(m, "FHitTargetRecord")
		.def_readwrite("vecHitLoc", &FHitTargetRecord::vecHitLoc)
		.def_readwrite("flDamage", &FHitTargetRecord::flDamage)
		.def_readwrite("flHitTime", &FHitTargetRecord::flHitTime)
  ;
	py::class_< FPriorityDebugStruct >(m, "FPriorityDebugStruct")
		.def_property("AutomaticTopPriority", [](FPriorityDebugStruct &self){return self.AutomaticTopPriority;}, [](FPriorityDebugStruct &self, bool value){self.AutomaticTopPriority = value ? 1 : 0;})
		.def_readwrite("IteratorName", &FPriorityDebugStruct::IteratorName)
		.def_readwrite("ShortName", &FPriorityDebugStruct::ShortName)
		.def_readwrite("PriorityValue", &FPriorityDebugStruct::PriorityValue)
  ;
	py::class_< FEncounterLimitState >(m, "FEncounterLimitState")
		.def_readwrite("NumTotalSpawned", &FEncounterLimitState::NumTotalSpawned)
		.def_readwrite("NumCurrentlyActive", &FEncounterLimitState::NumCurrentlyActive)
  ;
	py::class_< FEncounterLimitData >(m, "FEncounterLimitData")
		.def_readwrite("ActorTags", &FEncounterLimitData::ActorTags)
		.def_readwrite("MaxTotalToSpawn", &FEncounterLimitData::MaxTotalToSpawn)
		.def_readwrite("MaxActiveAtATime", &FEncounterLimitData::MaxActiveAtATime)
		.def_readwrite("ConstraintType", &FEncounterLimitData::ConstraintType)
		.def_readwrite("LimitState", &FEncounterLimitData::LimitState)
  ;
	py::class_< FEncounterWaveData >(m, "FEncounterWaveData")
		.def_property("WaveComplete", [](FEncounterWaveData &self){return self.WaveComplete;}, [](FEncounterWaveData &self, bool value){self.WaveComplete = value ? 1 : 0;})
		.def_property("AllKilledInWave", [](FEncounterWaveData &self){return self.AllKilledInWave;}, [](FEncounterWaveData &self, bool value){self.AllKilledInWave = value ? 1 : 0;})
		.def_readwrite("InitialDelay", &FEncounterWaveData::InitialDelay)
		.def_readwrite("PercentToComplete", &FEncounterWaveData::PercentToComplete)
		.def_readwrite("EncounterPopulationDef", &FEncounterWaveData::EncounterPopulationDef)
		.def_readwrite("MemberOpportunities", &FEncounterWaveData::MemberOpportunities)
		.def_readwrite("SpawnLimits", &FEncounterWaveData::SpawnLimits)
  ;
	py::class_< FSpawnOption >(m, "FSpawnOption")
		.def_readwrite("Factory", &FSpawnOption::Factory)
		.def_readwrite("ComputedProbability", &FSpawnOption::ComputedProbability)
  ;
	py::class_< FDestructionParameters >(m, "FDestructionParameters")
		.def_property("bActorExemptFromIrrelevancyTests", [](FDestructionParameters &self){return self.bActorExemptFromIrrelevancyTests;}, [](FDestructionParameters &self, bool value){self.bActorExemptFromIrrelevancyTests = value ? 1 : 0;})
  ;
	py::class_< FSpawnedPopulationActor >(m, "FSpawnedPopulationActor")
		.def_property("Reuse", [](FSpawnedPopulationActor &self){return self.Reuse;}, [](FSpawnedPopulationActor &self, bool value){self.Reuse = value ? 1 : 0;})
		.def_property("bIsDead", [](FSpawnedPopulationActor &self){return self.bIsDead;}, [](FSpawnedPopulationActor &self, bool value){self.bIsDead = value ? 1 : 0;})
		.def_property("bCanSave", [](FSpawnedPopulationActor &self){return self.bCanSave;}, [](FSpawnedPopulationActor &self, bool value){self.bCanSave = value ? 1 : 0;})
		.def_property("bShouldRemove", [](FSpawnedPopulationActor &self){return self.bShouldRemove;}, [](FSpawnedPopulationActor &self, bool value){self.bShouldRemove = value ? 1 : 0;})
		.def_readwrite("SpawnedActor", &FSpawnedPopulationActor::SpawnedActor)
		.def_readwrite("SpawnFactory", &FSpawnedPopulationActor::SpawnFactory)
		.def_readwrite("FactoryDestructionParams", &FSpawnedPopulationActor::FactoryDestructionParams)
		.def_readwrite("flLastInRadiusOrVisible", &FSpawnedPopulationActor::flLastInRadiusOrVisible)
		.def_readwrite("SpawnCost", &FSpawnedPopulationActor::SpawnCost)
		.def_readwrite("CreationFlags", &FSpawnedPopulationActor::CreationFlags)
  ;
	py::class_< FRemovedPopulationActor >(m, "FRemovedPopulationActor")
		.def_property("bReuseActor", [](FRemovedPopulationActor &self){return self.bReuseActor;}, [](FRemovedPopulationActor &self, bool value){self.bReuseActor = value ? 1 : 0;})
		.def_readwrite("CreationFlags", &FRemovedPopulationActor::CreationFlags)
		.def_readwrite("FactoryPath", &FRemovedPopulationActor::FactoryPath)
  ;
	py::class_< FOpportunitySavedState >(m, "FOpportunitySavedState")
		.def_readwrite("SelectedSpawnIdx", &FOpportunitySavedState::SelectedSpawnIdx)
		.def_readwrite("NumTotalActors", &FOpportunitySavedState::NumTotalActors)
		.def_readwrite("MaxActiveActors", &FOpportunitySavedState::MaxActiveActors)
		.def_readwrite("NumActiveActors", &FOpportunitySavedState::NumActiveActors)
		.def_readwrite("NextSpawnTime", &FOpportunitySavedState::NextSpawnTime)
  ;
	py::class_< FOpportunityCleanupParameters >(m, "FOpportunityCleanupParameters")
		.def_property("bCleanupActorsWhenIrrelevant", [](FOpportunityCleanupParameters &self){return self.bCleanupActorsWhenIrrelevant;}, [](FOpportunityCleanupParameters &self, bool value){self.bCleanupActorsWhenIrrelevant = value ? 1 : 0;})
		.def_property("bRequireOpportunityToBeInactive", [](FOpportunityCleanupParameters &self){return self.bRequireOpportunityToBeInactive;}, [](FOpportunityCleanupParameters &self, bool value){self.bRequireOpportunityToBeInactive = value ? 1 : 0;})
		.def_readwrite("ActorIrrelvantDistance", &FOpportunityCleanupParameters::ActorIrrelvantDistance)
  ;
	py::class_< FPopulationOpportunityTracker >(m, "FPopulationOpportunityTracker")
		.def_property("DynamicOpportunity", [](FPopulationOpportunityTracker &self){return self.DynamicOpportunity;}, [](FPopulationOpportunityTracker &self, bool value){self.DynamicOpportunity = value ? 1 : 0;})
		.def_property("bHasSavedState", [](FPopulationOpportunityTracker &self){return self.bHasSavedState;}, [](FPopulationOpportunityTracker &self, bool value){self.bHasSavedState = value ? 1 : 0;})
		.def_readwrite("OpportunityOutermostName", &FPopulationOpportunityTracker::OpportunityOutermostName)
		.def_readwrite("OpportunityName", &FPopulationOpportunityTracker::OpportunityName)
		.def_readwrite("LoadedOpportunity", &FPopulationOpportunityTracker::LoadedOpportunity)
		.def_readwrite("SpawnedActors", &FPopulationOpportunityTracker::SpawnedActors)
		.def_readwrite("SavedActorsList", &FPopulationOpportunityTracker::SavedActorsList)
		.def_readwrite("ActorsRemovedWhileUnloaded", &FPopulationOpportunityTracker::ActorsRemovedWhileUnloaded)
		.def_readwrite("bTotalResetOnLevelLoad", &FPopulationOpportunityTracker::bTotalResetOnLevelLoad)
		.def_readwrite("RespawnStyle", &FPopulationOpportunityTracker::RespawnStyle)
		.def_readwrite("RespawnDelayStartTime", &FPopulationOpportunityTracker::RespawnDelayStartTime)
		.def_readwrite("SavedState", &FPopulationOpportunityTracker::SavedState)
		.def_readwrite("OpportunityCleanupParams", &FPopulationOpportunityTracker::OpportunityCleanupParams)
  ;
	py::class_< FPopulationMasterStat >(m, "FPopulationMasterStat")
		.def_readwrite("StatName", &FPopulationMasterStat::StatName)
		.def_readwrite("StatTime", &FPopulationMasterStat::StatTime)
		.def_readwrite("StatMaxTime", &FPopulationMasterStat::StatMaxTime)
		.def_readwrite("StatIterations", &FPopulationMasterStat::StatIterations)
		.def_readwrite("IterationStartTime", &FPopulationMasterStat::IterationStartTime)
  ;
	py::class_< FEncounterWaveTracker >(m, "FEncounterWaveTracker")
		.def_readwrite("nWaveIdx", &FEncounterWaveTracker::nWaveIdx)
		.def_readwrite("nLimitStateIdx", &FEncounterWaveTracker::nLimitStateIdx)
		.def_readwrite("LimitSaveState", &FEncounterWaveTracker::LimitSaveState)
  ;
	py::class_< FEncounterTracker >(m, "FEncounterTracker")
		.def_property("bNeedsKismetUpdate", [](FEncounterTracker &self){return self.bNeedsKismetUpdate;}, [](FEncounterTracker &self, bool value){self.bNeedsKismetUpdate = value ? 1 : 0;})
		.def_readwrite("LoadedEncounter", &FEncounterTracker::LoadedEncounter)
		.def_readwrite("EncountersLevel", &FEncounterTracker::EncountersLevel)
		.def_readwrite("EncounterPath", &FEncounterTracker::EncounterPath)
		.def_readwrite("EncounterCompletionSaveState", &FEncounterTracker::EncounterCompletionSaveState)
		.def_readwrite("EncounterSaveState", &FEncounterTracker::EncounterSaveState)
		.def_readwrite("RespawnDelayStartTime", &FEncounterTracker::RespawnDelayStartTime)
  ;
	py::class_< FPopulationOpportunityStat >(m, "FPopulationOpportunityStat")
		.def_readwrite("PercentNodeReduction", &FPopulationOpportunityStat::PercentNodeReduction)
  ;
	py::class_< FPopulationOpportunitySavedActor >(m, "FPopulationOpportunitySavedActor")
		.def_readwrite("FactoryPath", &FPopulationOpportunitySavedActor::FactoryPath)
		.def_readwrite("TimeActorSaved", &FPopulationOpportunitySavedActor::TimeActorSaved)
		.def_readwrite("SpawnActorLocation", &FPopulationOpportunitySavedActor::SpawnActorLocation)
		.def_readwrite("SpawnActorRotation", &FPopulationOpportunitySavedActor::SpawnActorRotation)
		.def_readwrite("CreationFlags", &FPopulationOpportunitySavedActor::CreationFlags)
		.def_readwrite("CustomActorData", &FPopulationOpportunitySavedActor::CustomActorData)
  ;
	py::class_< FPopulationOptionAreaPopDefData >(m, "FPopulationOptionAreaPopDefData")
		.def_readwrite("PopulationDef", &FPopulationOptionAreaPopDefData::PopulationDef)
		.def_readwrite("MaxTotalActorsFormula", &FPopulationOptionAreaPopDefData::MaxTotalActorsFormula)
		.def_readwrite("MaxTotalActors", &FPopulationOptionAreaPopDefData::MaxTotalActors)
		.def_readwrite("MaxActiveActors", &FPopulationOptionAreaPopDefData::MaxActiveActors)
		.def_readwrite("RespawnDelay", &FPopulationOptionAreaPopDefData::RespawnDelay)
		.def_readwrite("RespawnDelayAfterDeath", &FPopulationOptionAreaPopDefData::RespawnDelayAfterDeath)
  ;
	py::class_< FPopulationOptionAreaData >(m, "FPopulationOptionAreaData")
		.def_readwrite("ExpressionDef", &FPopulationOptionAreaData::ExpressionDef)
		.def_readwrite("PopulationDefinitions", &FPopulationOptionAreaData::PopulationDefinitions)
  ;
	py::class_< FPopulationOptionSpawnDefData >(m, "FPopulationOptionSpawnDefData")
		.def_readwrite("PopulationDefName", &FPopulationOptionSpawnDefData::PopulationDefName)
		.def_readwrite("NumTotalActors", &FPopulationOptionSpawnDefData::NumTotalActors)
		.def_readwrite("NumActiveActors", &FPopulationOptionSpawnDefData::NumActiveActors)
		.def_readwrite("NextSpawnTime", &FPopulationOptionSpawnDefData::NextSpawnTime)
  ;
	py::class_< FPopulationAreaOptionSpawnData >(m, "FPopulationAreaOptionSpawnData")
		.def_readwrite("Data", &FPopulationAreaOptionSpawnData::Data)
  ;
	py::class_< FPopulationOptionSpawnData >(m, "FPopulationOptionSpawnData")
		.def_readwrite("PopulationDefName", &FPopulationOptionSpawnData::PopulationDefName)
		.def_readwrite("MaxActiveActors", &FPopulationOptionSpawnData::MaxActiveActors)
		.def_readwrite("NumTotalActors", &FPopulationOptionSpawnData::NumTotalActors)
		.def_readwrite("NumActiveActors", &FPopulationOptionSpawnData::NumActiveActors)
		.def_readwrite("NextSpawnTime", &FPopulationOptionSpawnData::NextSpawnTime)
  ;
	py::class_< FColumnDataStruct >(m, "FColumnDataStruct")
		.def_readwrite("HeaderText", &FColumnDataStruct::HeaderText)
		.def_readwrite("Value", &FColumnDataStruct::Value)
		.def_readwrite("BarColor", &FColumnDataStruct::BarColor)
  ;
	py::class_< FSavedRandomValue >(m, "FSavedRandomValue")
		.def_readwrite("ContextName", &FSavedRandomValue::ContextName)
		.def_readwrite("SavedValue", &FSavedRandomValue::SavedValue)
		.def_readwrite("ExpirationTime", &FSavedRandomValue::ExpirationTime)
  ;
	py::class_< FRuleEngineLoadBalanceStruct >(m, "FRuleEngineLoadBalanceStruct")
		.def_readwrite("RuleEngine", &FRuleEngineLoadBalanceStruct::RuleEngine)
		.def_readwrite("TimeSinceLastUpdate", &FRuleEngineLoadBalanceStruct::TimeSinceLastUpdate)
		.def_readwrite("Priority", &FRuleEngineLoadBalanceStruct::Priority)
  ;
	py::class_< FDebugLoadBalance >(m, "FDebugLoadBalance")
		.def_property("bIsInQueue", [](FDebugLoadBalance &self){return self.bIsInQueue;}, [](FDebugLoadBalance &self, bool value){self.bIsInQueue = value ? 1 : 0;})
		.def_readwrite("RuleEngine", &FDebugLoadBalance::RuleEngine)
		.def_readwrite("TimeSinceUpdate", &FDebugLoadBalance::TimeSinceUpdate)
		.def_readwrite("TimeToDoLastUpdate", &FDebugLoadBalance::TimeToDoLastUpdate)
		.def_readwrite("Priority", &FDebugLoadBalance::Priority)
  ;
	py::class_< FRELBManagerStats >(m, "FRELBManagerStats")
		.def_readwrite("TotalTimeUpdated", &FRELBManagerStats::TotalTimeUpdated)
		.def_readwrite("MaxTimeUpdating", &FRELBManagerStats::MaxTimeUpdating)
		.def_readwrite("NumUpdated", &FRELBManagerStats::NumUpdated)
		.def_readwrite("AveragePriority", &FRELBManagerStats::AveragePriority)
		.def_readwrite("LowestPriority", &FRELBManagerStats::LowestPriority)
		.def_readwrite("HighestPriority", &FRELBManagerStats::HighestPriority)
  ;
	py::class_< FDebugStringData >(m, "FDebugStringData")
		.def_readwrite("DebugStr", &FDebugStringData::DebugStr)
		.def_readwrite("StrColor", &FDebugStringData::StrColor)
  ;
	py::class_< FDebugEntryData >(m, "FDebugEntryData")
		.def_readwrite("DebugStrs", &FDebugEntryData::DebugStrs)
  ;
	py::class_< FSparkOutstandingRequest >(m, "FSparkOutstandingRequest")
		.def_property("WantResponse", [](FSparkOutstandingRequest &self){return self.WantResponse;}, [](FSparkOutstandingRequest &self, bool value){self.WantResponse = value ? 1 : 0;})
		.def_property("ScriptCallback", [](FSparkOutstandingRequest &self){return self.ScriptCallback;}, [](FSparkOutstandingRequest &self, bool value){self.ScriptCallback = value ? 1 : 0;})
		.def_readwrite("State", &FSparkOutstandingRequest::State)
		.def_readwrite("SleepUntil", &FSparkOutstandingRequest::SleepUntil)
		.def_readwrite("RequestCompleteDelegate", &FSparkOutstandingRequest::RequestCompleteDelegate)
		.def_readwrite("RequestIdentifier", &FSparkOutstandingRequest::RequestIdentifier)
		.def_readwrite("SparkUpdateCallback", &FSparkOutstandingRequest::SparkUpdateCallback)
		.def_readwrite("HttpRequest", &FSparkOutstandingRequest::HttpRequest)
		.def_readwrite("RequestBody", &FSparkOutstandingRequest::RequestBody)
		.def_readwrite("ResponseBody", &FSparkOutstandingRequest::ResponseBody)
		.def_readwrite("RetryNumber", &FSparkOutstandingRequest::RetryNumber)
		.def_readwrite("BaseRetryIntervalSeconds", &FSparkOutstandingRequest::BaseRetryIntervalSeconds)
		.def_readwrite("MaxRetryAttempts", &FSparkOutstandingRequest::MaxRetryAttempts)
		.def_readwrite("RetryMultiplier", &FSparkOutstandingRequest::RetryMultiplier)
		.def_readwrite("RetryJitter", &FSparkOutstandingRequest::RetryJitter)
		.def_readwrite("HttpTimeout", &FSparkOutstandingRequest::HttpTimeout)
		.def_readwrite("ReadBufferSize", &FSparkOutstandingRequest::ReadBufferSize)
		.def_readwrite("Accept", &FSparkOutstandingRequest::Accept)
		.def_readwrite("ContentType", &FSparkOutstandingRequest::ContentType)
		.def_readwrite("Method", &FSparkOutstandingRequest::Method)
		.def_readwrite("URL", &FSparkOutstandingRequest::URL)
		.def_readwrite("RequestStartTime", &FSparkOutstandingRequest::RequestStartTime)
  ;
	py::class_< FSparkMicropatch >(m, "FSparkMicropatch")
		.def_property("bApplied", [](FSparkMicropatch &self){return self.bApplied;}, [](FSparkMicropatch &self, bool value){self.bApplied = value ? 1 : 0;})
		.def_readwrite("ObjectPath", &FSparkMicropatch::ObjectPath)
		.def_readwrite("PropertyPath", &FSparkMicropatch::PropertyPath)
		.def_readwrite("OriginalValue", &FSparkMicropatch::OriginalValue)
		.def_readwrite("NewValue", &FSparkMicropatch::NewValue)
  ;
	py::class_< FSMExpressionList >(m, "FSMExpressionList")
		.def_readwrite("Expression", &FSMExpressionList::Expression)
		.def_readwrite("SMD", &FSMExpressionList::SMD)
  ;
	py::class_< FSMRandomPair >(m, "FSMRandomPair")
		.def_readwrite("Weight", &FSMRandomPair::Weight)
		.def_readwrite("SMD", &FSMRandomPair::SMD)
  ;
	py::class_< FStateAttributeData >(m, "FStateAttributeData")
		.def_readwrite("Key", &FStateAttributeData::Key)
		.def_readwrite("Attribute", &FStateAttributeData::Attribute)
  ;
	py::class_< FWireLinkage >(m, "FWireLinkage")
		.def_readwrite("Offset", &FWireLinkage::Offset)
		.def_readwrite("Width", &FWireLinkage::Width)
		.def_readwrite("Slack", &FWireLinkage::Slack)
		.def_readwrite("Segments", &FWireLinkage::Segments)
		.def_readwrite("Link", &FWireLinkage::Link)
  ;
	py::class_< FNewsArticle >(m, "FNewsArticle")
		.def_readwrite("Header", &FNewsArticle::Header)
		.def_readwrite("Body", &FNewsArticle::Body)
  ;

}