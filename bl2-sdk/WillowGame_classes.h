#pragma once
// Borderlands 2 (1.8.5) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

#include "stdafx.h"

//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class WillowGame.AchievementUtility
// 0x0000 (0x003C - 0x003C)
class UAchievementUtility : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AchievementUtility");
		return ptr;
	}


	static TArray<unsigned char> ShouldUnlockAchievementFromUnlockType(unsigned char UnlockType, const struct FString& StringData, int IntData, bool bCanBeGreater, bool bCheckStringAndIntData, bool bCanBeLess);
};


// Class WillowGame.ActionSkill
// 0x00AC (0x0188 - 0x0234)
class AActionSkill : public AActor
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x0188(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IITimerBehavior;                                  // 0x018C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IICustomEvent;                                    // 0x0190(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x0194(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0198(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x019C(0x0004) (Const, Native, NoExport)
	float                                              TickRate;                                                 // 0x01A0(0x0004)
	float                                              NextTick;                                                 // 0x01A4(0x0004)
	class AController*                                 MyController;                                             // 0x01A8(0x0004)
	class AWillowPawn*                                 MyWillowPawn;                                             // 0x01AC(0x0004)
	class AWillowPlayerPawn*                           MyWillowPlayerPawn;                                       // 0x01B0(0x0004)
	class AWillowPlayerController*                     MyWillowPC;                                               // 0x01B4(0x0004)
	class AWillowMind*                                 MyWillowMind;                                             // 0x01B8(0x0004)
	class AWillowPawn*                                 TargetPawn;                                               // 0x01BC(0x0004) (Net)
	struct FInstanceDataSet                            InstanceState;                                            // 0x01C0(0x000C) (Transient, Component, NeedCtorLink)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x01CC(0x0004)
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                          // 0x01D0(0x000C) (Net, RepNotify)
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                                  // 0x01DC(0x0004) (Net, RepNotify)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x01E0(0x0004) (Edit)
	struct FTimerBehaviorUserState                     ActionSkillTimers;                                        // 0x01E4(0x0024)
	struct FActionSkillCustomEventReplicationData      CustomEventReplication;                                   // 0x0208(0x000C) (Net, RepNotify)
	unsigned long                                      bInitialized : 1;                                         // 0x0214(0x0004)
	unsigned long                                      bDebugEnabled : 1;                                        // 0x0214(0x0004)
	unsigned long                                      bBlockDeactivate : 1;                                     // 0x0214(0x0004)
	unsigned long                                      bWantsDeactivate : 1;                                     // 0x0214(0x0004)
	unsigned long                                      bWantsDestroy : 1;                                        // 0x0214(0x0004)
	unsigned long                                      bActionSkillNearingCompletionEventFired : 1;              // 0x0214(0x0004)
	unsigned long                                      bAllowAutomaticActiveAbilityActivation : 1;               // 0x0214(0x0004) (Edit, Const)
	unsigned long                                      bRestrictActiveAbilityByCount : 1;                        // 0x0214(0x0004) (Edit, Const)
	unsigned long                                      bRestrictActiveAbilityByTimeFrequency : 1;                // 0x0214(0x0004) (Edit, Const)
	unsigned long                                      bAllowAutomaticCooldownAbilityActivation : 1;             // 0x0214(0x0004) (Edit, Const)
	unsigned long                                      bRestrictCooldownAbilityByCount : 1;                      // 0x0214(0x0004) (Edit, Const)
	unsigned long                                      bRestrictCooldownAbilityByTimeFrequency : 1;              // 0x0214(0x0004) (Edit, Const)
	float                                              ActionSkillNearingCompletionTime;                         // 0x0218(0x0004) (Edit)
	int                                                MaxActivationCountPerActiveCycle;                         // 0x021C(0x0004) (Edit, Const)
	float                                              ActiveAbilityActivationTimeFrequency;                     // 0x0220(0x0004) (Edit, Const)
	int                                                MaxActivationCountPerCooldownCycle;                       // 0x0224(0x0004) (Edit, Const)
	float                                              CooldownAbilityActivationTimeFrequency;                   // 0x0228(0x0004) (Edit, Const)
	class USkillDefinition*                            MeleeOverrideSkill;                                       // 0x022C(0x0004) (Edit, Const)
	int                                                TimeStarted;                                              // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActionSkill");
		return ptr;
	}


	bool ShouldResetOnInterruptedGrenadeThrow();
	bool CanResetActionSkill();
	bool OverrideCrosshairVisibility(bool bVisible, bool bForScope);
	float GetDeferredActionSkillTime();
	void TickActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie, float ActionSkillTime, float DeltaTime);
	void DisableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void EnableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	class UObject* GetActionSkillEventContextObject();
	void RunCustomEvent(const struct FName& EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData);
	void HandleTimerEvent(unsigned char EventType, const struct FBehaviorParameters& EventData);
	bool SetTimerState(unsigned char TimerId, const struct FBehaviorTimerState& TimerState);
	bool GetTimerState(unsigned char TimerId, struct FBehaviorTimerState* TimerState);
	float GetTimeSeconds();
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	void EnableDebug(bool DebugEnabled);
	void NotifyActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn);
	void StartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn);
	void ClientStartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn);
	bool AllowNewActiveAbilityActivation(int* CurrentActionSkillActiveAbilityCount, float* NextActionSkillActiveAbilityTime);
	bool AllowAutomaticActiveAbilityActivation();
	bool AllowNewCooldownAbilityActivation(int* CurrentActionSkillCooldownAbilityCount, float* NextActionSkillCooldownAbilityTime);
	bool AllowAutomaticCooldownAbilityActivation();
	void OnActionSkillTick(float DeltaTime);
	bool OverridesStandardMelee();
	bool ReadyToInterceptMelee(class AWillowPawn* AutoAimTarget);
	void OnActionSkillOwnerMelee(class AWillowPawn* TargetIfAvailable);
	void OnActionSkillWeaponsRestricted(bool bWeaponsRestricted);
	void OnActionSkillOwnerInjured();
	void OnActionSkillKilledEnemy(class AWillowPawn* KilledPawn);
	void OnActionSkillShowBackMenu(bool bOpened);
	void OnActionSkillFakePause(bool bPaused);
	void OnActionSkillOwnerTouchedActor(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnActionSkillOwnerHitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void OnActionSkillOwnerStoppedWalking();
	void OnActionSkillOwnerBeganWalking(unsigned char PreviousPhysics);
	void OnActionSkillOwnerBeganFalling(unsigned char PreviousPhysics);
	void OnActionSkillOwnerAllieganceChanged(class UPawnAllegiance* NewAllegiance);
	void OnActionSkillOwnerWeaponSwitched(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void OnActionSkillOwnerDied();
	void OwnerLostAutoAimTarget(const FScriptInterface& OldTargetable);
	void OwnerAcquiredAutoAimTarget(const FScriptInterface& NewTargetable);
	void TornOff();
	void TearOff();
	void OnActionSkillEnded();
	bool IsDeactivateBlocked();
	void ClientActionSkillWantsToDeactivate();
	void OnActionSkillWantsToDeactivate();
	void OnActionSkillStarted(class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn);
	void ReplicatedEvent(const struct FName& VarName);
	void OnActionSkillOwnerShowBackMenu(class APawn* SkillInstigator, bool bOpened, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnTimerEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnActionSkillNearingCompletion(class APawn* SkillInstigator, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnActionSkillOwnerMeleeOverridden(class APawn* SkillInstigator, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnOwnerLostAutoAimTarget(class APawn* SkillOwner, class AActor* OldTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnOwnerAcquiredAutoAimTarget(class APawn* SkillOwner, class AActor* NewTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnActionSkillDeactivated(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnActionSkillActivated(class APawn* SkillInstigator, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnActionSkillActiveAbilityNotified(class APawn* SkillInstigator, float ActiveTimeRemaining, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnActionSkillActiveAbilityActivated(class APawn* SkillInstigator, float ActiveTimeRemaining, class APawn* SkillTargetIfAvailable, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.ScorpioActionSkill
// 0x0014 (0x0234 - 0x0248)
class AScorpioActionSkill : public AActionSkill
{
public:
	class ADeployableTurretActor*                      ScorpioSpawnedActor;                                      // 0x0234(0x0004)
	class ADeployableTurretActor*                      GeminiSpawnedActor;                                       // 0x0238(0x0004)
	class AWillowProjectile*                           ActiveProjectile;                                         // 0x023C(0x0004)
	class USkillDefinition*                            GeminiSkill;                                              // 0x0240(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      ThrowScorpioSMD;                                          // 0x0244(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ScorpioActionSkill");
		return ptr;
	}


	bool ShouldResetOnInterruptedGrenadeThrow();
	bool CanResetActionSkill();
	void NotifySkillActorDied(class AActor* SkillActor);
	class UObject* GetActionSkillEventContextObject();
	void ClientDeployScorpio();
	void DeployScorpio();
	void PlayThrowAnimation();
	void DestroyOwnedInstanceData();
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	bool AllowNewActiveAbilityActivation(int* CurrentActionSkillActiveAbilityCount, float* NextActionSkillActiveAbilityTime);
	void StartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* AutoAimTarget);
	void OnActionSkillOwnerDied();
	void OnActionSkillEnded();
	void OnActionSkillStarted(class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn);
};


// Class WillowGame.ActorFactoryInteractiveObject
// 0x0004 (0x007C - 0x0080)
class UActorFactoryInteractiveObject : public UActorFactory
{
public:
	class UInteractiveObjectDefinition*                Definition;                                               // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryInteractiveObject");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowElevatorButton
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryWillowElevatorButton : public UActorFactoryInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowElevatorButton");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryMissionPickupSpawner
// 0x0004 (0x007C - 0x0080)
class UActorFactoryMissionPickupSpawner : public UActorFactory
{
public:
	class UMissionItemDefinition*                      Definition;                                               // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryMissionPickupSpawner");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryMissionPickupFailsafe
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryMissionPickupFailsafe : public UActorFactoryMissionPickupSpawner
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryMissionPickupFailsafe");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryPopulationOpportunityArea
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPopulationOpportunityArea : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryPopulationOpportunityArea");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryPopulationOpportunityDen
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPopulationOpportunityDen : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryPopulationOpportunityDen");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowCoopPlayerStart
// 0x0000 (0x007C - 0x007C)
class UActorFactoryWillowCoopPlayerStart : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowCoopPlayerStart");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowElevator
// 0x0000 (0x0094 - 0x0094)
class UActorFactoryWillowElevator : public UActorFactoryMover
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowElevator");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowPawn
// 0x0004 (0x007C - 0x0080)
class UActorFactoryWillowPawn : public UActorFactory
{
public:
	class AWillowPawn*                                 PawnArchetype;                                            // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowPawn");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowTrigger
// 0x0000 (0x007C - 0x007C)
class UActorFactoryWillowTrigger : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowTrigger");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowVehicle
// 0x0004 (0x007C - 0x0080)
class UActorFactoryWillowVehicle : public UActorFactory
{
public:
	class AWillowVehicle*                              VehicleArchetype;                                         // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowVehicle");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowVehicleFactory
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryWillowVehicleFactory : public UActorFactoryWillowVehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowVehicleFactory");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryWillowWaypoint
// 0x0000 (0x007C - 0x007C)
class UActorFactoryWillowWaypoint : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryWillowWaypoint");
		return ptr;
	}

};


// Class WillowGame.AdvancedAxisDefinition
// 0x001C (0x003C - 0x0058)
class UAdvancedAxisDefinition : public UGBXDefinition
{
public:
	float                                              Speed;                                                    // 0x003C(0x0004) (Edit, Const)
	float                                              ZoomSpeed;                                                // 0x0040(0x0004) (Edit, Const)
	float                                              DeadZone;                                                 // 0x0044(0x0004) (Edit, Const)
	float                                              AccelThreshold;                                           // 0x0048(0x0004) (Edit, Const)
	float                                              AccelRate;                                                // 0x004C(0x0004) (Edit, Const)
	float                                              AccelSpeed;                                               // 0x0050(0x0004) (Edit, Const)
	float                                              AccelWarmup;                                              // 0x0054(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AdvancedAxisDefinition");
		return ptr;
	}

};


// Class WillowGame.AIPawnBalanceModifierDefinition
// 0x001C (0x003C - 0x0058)
class UAIPawnBalanceModifierDefinition : public UGBXDefinition
{
public:
	struct FString                                     AIPawnBalanceDefinitionPath;                              // 0x003C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bEmptyAttributeStartingValues : 1;                        // 0x0048(0x0004) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x004C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AIPawnBalanceModifierDefinition");
		return ptr;
	}

};


// Class WillowGame.AIResourceAttributeValueResolver
// 0x0004 (0x003C - 0x0040)
class UAIResourceAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UAIResource*                                 Resource;                                                 // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AIResourceAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.AmmoDropWeightAttributeValueResolver
// 0x0054 (0x003C - 0x0090)
class UAmmoDropWeightAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UResourceDefinition*                         Resource;                                                 // 0x003C(0x0004) (Edit, Const)
	struct FAttributeInitializationData                ResourceThreshold;                                        // 0x0040(0x0010) (Edit, Const)
	struct FAttributeInitializationData                AboveThresholdWeight;                                     // 0x0050(0x0010) (Edit, Const)
	struct FAttributeInitializationData                NoPoolWeight;                                             // 0x0060(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MinBelowThresholdWeight;                                  // 0x0070(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MaxBelowThresholdWeight;                                  // 0x0080(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AmmoDropWeightAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.AmmoResourcePool
// 0x0000 (0x0118 - 0x0118)
class UAmmoResourcePool : public UResourcePool
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AmmoResourcePool");
		return ptr;
	}


	void GetDebugText(TArray<struct FString>* DebugText);
	float GetExtraAmmoRegen();
};


// Class WillowGame.AmmoResourceUpgradeAttributeValueResolver
// 0x0008 (0x003C - 0x0044)
class UAmmoResourceUpgradeAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UResourceDefinition*                         AssociatedResource;                                       // 0x003C(0x0004) (Edit, Const)
	int                                                AmmoResourceUpgradesArrayIndex;                           // 0x0040(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AmmoResourceUpgradeAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.AnemoneInfectionDefinition
// 0x0060 (0x003C - 0x009C)
class UAnemoneInfectionDefinition : public UGBXDefinition
{
public:
	float                                              FullInfectionTime;                                        // 0x003C(0x0004) (Edit)
	float                                              FullHealingTime;                                          // 0x0040(0x0004) (Edit)
	class UGFxMovieDefinition*                         MovieDefinition;                                          // 0x0044(0x0004) (Edit)
	float                                              DisplaySpeed;                                             // 0x0048(0x0004) (Edit)
	float                                              DiscoveryTextHiddenTime;                                  // 0x004C(0x0004) (Edit)
	class UParticleSystem*                             InfectionFXTemplate;                                      // 0x0050(0x0004) (Edit)
	class USkillDefinition*                            GasCloudSkill;                                            // 0x0054(0x0004) (Edit)
	class UParticleSystem*                             SkillFXTemplate;                                          // 0x0058(0x0004) (Edit)
	float                                              SkillFXInTime;                                            // 0x005C(0x0004) (Edit)
	float                                              SkillFXOutTime;                                           // 0x0060(0x0004) (Edit)
	class UParticleSystem*                             SmallAmbientFXTemplate;                                   // 0x0064(0x0004) (Edit)
	class UParticleSystem*                             LargeAmbientFXTemplate;                                   // 0x0068(0x0004) (Edit)
	class UAkEvent*                                    StartEvent;                                               // 0x006C(0x0004) (Edit)
	class UAkEvent*                                    StopEvent;                                                // 0x0070(0x0004) (Edit)
	class UAkRtpc*                                     AkRtpc;                                                   // 0x0074(0x0004) (Edit)
	class UMissionObjectiveDefinition*                 LinkedObjective;                                          // 0x0078(0x0004) (Edit)
	struct FAttributeInitializationData                FullyInfectedDamage;                                      // 0x007C(0x0010) (Edit, Const)
	class UClass*                                      DamageType;                                               // 0x008C(0x0004) (Edit)
	float                                              DamageFrequency;                                          // 0x0090(0x0004) (Edit)
	float                                              FogDensityValue;                                          // 0x0094(0x0004) (Edit)
	float                                              FogRampUpTime;                                            // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AnemoneInfectionDefinition");
		return ptr;
	}

};


// Class WillowGame.IScreenParticle
// 0x0000 (0x003C - 0x003C)
class UIScreenParticle : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IScreenParticle");
		return ptr;
	}


	void UpdateVisibilityOfAllActiveScreenParticles();
	bool ScreenParticlesShouldBeVisible();
	void SetUpVoGScreenParticle(class UParticleSystem* Template, const struct FName& TextureMovieParamName);
	void HideScreenParticle(class UParticleSystem* Template, const struct FName& ParticleTag, bool bAllowParticleToFinish);
	void ShowScreenParticle(const struct FScreenParticleInitParams& InitParams);
};


// Class WillowGame.IUpdatePostProcessOverride
// 0x0000 (0x003C - 0x003C)
class UIUpdatePostProcessOverride : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IUpdatePostProcessOverride");
		return ptr;
	}


	void EndLostShield();
	void BeginLostShield(const struct FName& HealthParamName, const struct FName& MaterialEffectName, float UpdateRate, class UPostProcessChain* InChain);
	void PopPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	void PushPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	void ClearPostProcessOverlayQueue(int IndexToSave);
	void SetupPostProcessOverlay(int Index, bool bReset);
	int GetPostProcessOverlayIndex(const struct FName& OverrideName);
	int AddPostProcessOverlay(const struct FPostProcessOverlay& NewPostProcessOverlay);
};


// Class WillowGame.AnemoneInfectionState
// 0x0058 (0x0188 - 0x01E0)
class AAnemoneInfectionState : public AActor
{
public:
	class UGFxMovieInteractiveObject*                  TimerMovie;                                               // 0x0188(0x0004) (Transient)
	class AWillowPlayerController*                     WPC;                                                      // 0x018C(0x0004) (Transient)
	float                                              InfectionRate;                                            // 0x0190(0x0004) (Transient)
	float                                              CurrentInfection;                                         // 0x0194(0x0004) (Transient)
	float                                              CurrentSkillFXValue;                                      // 0x0198(0x0004) (Transient)
	float                                              SkillFXSpeed;                                             // 0x019C(0x0004) (Transient)
	float                                              DamageTimer;                                              // 0x01A0(0x0004) (Transient)
	float                                              TemporarilyHiddenTimer;                                   // 0x01A4(0x0004) (Transient)
	unsigned long                                      bIsLocalPlayer : 1;                                       // 0x01A8(0x0004) (Transient)
	unsigned long                                      bIsImmune : 1;                                            // 0x01A8(0x0004) (Transient)
	TArray<class AActor*>                              SmallZones;                                               // 0x01AC(0x000C) (Transient, NeedCtorLink)
	TArray<class AActor*>                              LargeZones;                                               // 0x01B8(0x000C) (Transient, NeedCtorLink)
	class UAnemoneInfectionDefinition*                 InfectionDefinition;                                      // 0x01C4(0x0004) (Transient)
	class AHeightFog*                                  HeightFog;                                                // 0x01C8(0x0004) (Transient)
	float                                              HeightFogValue;                                           // 0x01CC(0x0004) (Transient)
	struct FFDisplayTimer                              DisplayTimer;                                             // 0x01D0(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AnemoneInfectionState");
		return ptr;
	}


	void DoInfectionDamage();
	void NotifyPawnDied();
	void UpdateZone();
	void Tick(float DeltaTime);
	void StateTick(float DeltaTime);
	void UpdateDisplay(float DeltaTime);
	void UpdateHeightFog(float DeltaTime);
	void ShowAmbientFX(bool bShow);
	void ShowParticleSystem(bool bShow, class UParticleSystem* FXSystemTemplate);
	void UpdateSkillFX();
	void UpdateSkillFXValue(float DeltaTime);
	void ShowSkillFX(bool bShow);
	void UpdateInfectionFX(float CurrentValue);
	void ShowInfectionFX(bool bShow);
	void DeactivateSkill();
	void ActivateSkill();
	void ExitInfectionVolume();
	void EnterInfectionVolume();
	void SetModalMenuOpen(bool bOpen);
	void HideBarTemporarily();
	bool IsInfected();
	void SetAnemoneInfectionState(class AWillowPlayerController* OwnerController, bool bIsInfected, bool bLargeZone, class AActor* Zone, class UAnemoneInfectionDefinition* NewInfectionDefinition, class AHeightFog* NewHeightFog);
	bool CheckZoneCollision();
	bool AddZone(bool bLargeZone, class AActor* Zone);
	float GetStatusEffectDamage();
	void ToggleInfectionEffects(bool bEnable, class AWillowPlayerController* OwnerController);
	bool CheckImmunity();
	void StopInfectionSound();
	void UpdateInfectionSound();
	void StartInfectionSound();
};


// Class WillowGame.AssetLibraryManager
// 0x00A8 (0x003C - 0x00E4)
class UAssetLibraryManager : public UObject
{
public:
	struct FAssetLibConfig                             LibraryConfigs[0x6];                                      // 0x003C(0x0018) (NeedCtorLink)
	TArray<struct FSKULibrarySet>                      EditorAssetLibraries;                                     // 0x00CC(0x000C) (NeedCtorLink)
	TArray<struct FSKURuntimeLibrarySet>               RuntimeAssetLibraries;                                    // 0x00D8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AssetLibraryManager");
		return ptr;
	}


	int DetermineObjLibraryType(class UObject* Obj);
	int DetermineLibraryType(class UClass* LibraryType);
	bool DecodeTyped(int EncodedObj, unsigned char ObjType, int Revision, int SKUID, class UObject** DecodedResult);
	bool Decode(int EncodedObj, int Revision, int SKUID, class UObject** DecodedResult);
	int EncodeSKUID(int SKUID);
	int EncodeTyped(class UObject* Obj, unsigned char ObjType, int SKUID);
	int Encode(class UObject* Obj, int SKUID);
};


// Class WillowGame.AttributePresentationDefinition
// 0x0098 (0x003C - 0x00D4)
class UAttributePresentationDefinition : public UGBXDefinition
{
public:
	float                                              BasePriority;                                             // 0x003C(0x0004) (Edit, Const)
	class UAttributeDefinition*                        Attribute;                                                // 0x0040(0x0004) (Edit, Const)
	struct FString                                     Description;                                              // 0x0044(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     NoConstraintText;                                         // 0x0050(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Suffix;                                                   // 0x005C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Prefix;                                                   // 0x0068(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bIncludeSuffixInTranslation : 1;                          // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bIncludePrefixInTranslation : 1;                          // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bBiggerIsBetter : 1;                                      // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bDisplayAsPercentage : 1;                                 // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bDisplayPercentAsFloat : 1;                               // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bDisplayAsInverse : 1;                                    // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bDontDisplayNumber : 1;                                   // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bDontDisplayPlusSign : 1;                                 // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bUseCustomNumberPlacement : 1;                            // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bEnableTextColor : 1;                                     // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bValueRemappingEnabled : 1;                               // 0x0074(0x0004) (Const)
	unsigned long                                      bUseOneAsBaseValueForPresentationIfContextFailsToResolve : 1;// 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bUseTwoAsBaseValueForPresentationIfContextFailsToResolve : 1;// 0x0074(0x0004) (Edit, Const)
	unsigned char                                      RoundingMode;                                             // 0x0078(0x0001) (Edit, Const)
	unsigned char                                      SignStyle;                                                // 0x0079(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007A(0x0002) MISSED OFFSET
	struct FColor                                      TextColor;                                                // 0x007C(0x0004) (Edit, Const)
	int                                                FloatPrecision;                                           // 0x0080(0x0004) (Edit, Const)
	struct FString                                     Icon;                                                     // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributePresentationValueRemappingData    RemappingData;                                            // 0x0090(0x0044) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttributePresentationDefinition");
		return ptr;
	}


	bool IncludePrefixInTranslation();
	bool IncludeSuffixInTranslation();
	bool IsTextColorEnabled();
	struct FColor GetTextColor();
	unsigned char GetSignStyle();
	unsigned char GetEffectiveRoundingMode(unsigned char Style);
	unsigned char GetRoundingMode();
	bool ShouldUseCustomNumberPlacement();
	bool ShouldDisplayPlusSign();
	bool ShouldDisplayNumberInTranslation();
	bool ShouldDisplayAsInverse();
	bool ShouldDisplayAsPercentage();
	bool IsBiggerBetter();
	struct FString GetIconFramename();
	struct FString GetPrefix();
	struct FString GetSuffix();
	struct FString GetNoConstraintText();
	struct FString GetDescription();
	float GetBasePriority();
	float RemapValue(float InputValue, class UObject* ContextSourceOverride);
	static float RoundValue(float InputValue, int PrecisionAferDecimalPoint, unsigned char EffectiveRoundingMode);
	float ApplyPresentationRulesToValue(float ModifierValue, unsigned char Style, bool bAllowZero, class UObject* ContextSourceOverride);
	struct FString ValueToString(float ModifierValue, unsigned char Style, class UObject* ContextSourceOverride);
	struct FString TranslateValue(float Value, unsigned char Style, class UAttributePresentationDefinition* ConstraintPresentation);
	static struct FString TranslateStatData(unsigned char Style, struct FModifierValuePresentationData* StatData);
};


// Class WillowGame.WeaponStatusEffectAttributePresentationDefinition
// 0x000C (0x00D4 - 0x00E0)
class UWeaponStatusEffectAttributePresentationDefinition : public UAttributePresentationDefinition
{
public:
	TArray<struct FAttributePresentationDamageTypeMapping> MappingData;                                              // 0x00D4(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponStatusEffectAttributePresentationDefinition");
		return ptr;
	}

};


// Class WillowGame.AttributePresentationListDefinition
// 0x000C (0x003C - 0x0048)
class UAttributePresentationListDefinition : public UGBXDefinition
{
public:
	TArray<class UAttributePresentationDefinition*>    Attributes;                                               // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttributePresentationListDefinition");
		return ptr;
	}


	class UAttributePresentationDefinition* FindAttributePresentation(class UAttributeDefinition* Attribute);
};


// Class WillowGame.AttributeSlotEffectAttributeValueResolver
// 0x000C (0x003C - 0x0048)
class UAttributeSlotEffectAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      SlotProperty;                                             // 0x003C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FName                                       SlotName;                                                 // 0x0040(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttributeSlotEffectAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.AvatarAwardUtility
// 0x0000 (0x003C - 0x003C)
class UAvatarAwardUtility : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AvatarAwardUtility");
		return ptr;
	}

};


// Class WillowGame.BadassAttributeValueResolver
// 0x0004 (0x003C - 0x0040)
class UBadassAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UBadassRewardDefinition*                     AssociatedBadassReward;                                   // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BadassAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.BadassRewardDefinition
// 0x0030 (0x003C - 0x006C)
class UBadassRewardDefinition : public UGBXDefinition
{
public:
	struct FString                                     RewardName;                                               // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     RewardString;                                             // 0x0054(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UAttributeInitializationDefinition*          AttrInitDef;                                              // 0x0060(0x0004) (Edit, Const)
	class UAttributePresentationDefinition*            Presentation;                                             // 0x0064(0x0004) (Edit, Const)
	int                                                CachedRewardIndex;                                        // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BadassRewardDefinition");
		return ptr;
	}


	void UpdateCachedRewardIndex();
};


// Class WillowGame.WillowExperiencePipeline
// 0x0000 (0x003C - 0x003C)
class UWillowExperiencePipeline : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowExperiencePipeline");
		return ptr;
	}


	static void AwardCombatExperienceToParty(float ExperiencePoints, class AWillowPlayerController* Killer, class AActor* KilledActor);
	static float CalculateExperiencePointsForKill(class AWillowPlayerController* Killer, class AActor* KilledActor, bool bFatalBlowWasCriticalHit, class UClass* FatalBlowDamageSource, class UDamageTypeDefinition* FatalBlowDamageTypeDefinition);
};


// Class WillowGame.GlobalsDefinition
// 0x0968 (0x0048 - 0x09B0)
class UGlobalsDefinition : public UGearboxGlobalsDefinition
{
public:
	int                                                BulletReflectionRadius;                                   // 0x0048(0x0004) (Edit, Const)
	float                                              BulletReflectionSpeedAdjustment;                          // 0x004C(0x0004) (Edit, Const)
	class UParticleSystem*                             BulletReflectionParticle;                                 // 0x0050(0x0004) (Edit, Const)
	struct FAttributeInitializationData                BulletReflectionInaccuracyFormula;                        // 0x0054(0x0010) (Edit, Const)
	class UParticleSystem*                             BulletPenetratedEnemyParticle;                            // 0x0064(0x0004) (Edit, Const)
	class UAkEvent*                                    BulletPenetratedEnemyAkEvent;                             // 0x0068(0x0004) (Edit, Const)
	struct FName                                       DualWieldSwitchName;                                      // 0x006C(0x0008) (Edit, Const)
	struct FName                                       DualWieldSprintSwitchName;                                // 0x0074(0x0008) (Edit, Const)
	struct FName                                       DualWieldLeftSideControl;                                 // 0x007C(0x0008) (Edit, Const)
	TArray<struct FKillSkillDuration>                  KillSkillDurationsPerPlayers;                             // 0x0084(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)
	struct FAttributeInitializationData                GeneralSkillPointsPerLevelUp;                             // 0x0090(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GeneralSkillPointsTotalForCurrentLevel;                   // 0x00A0(0x0010) (Edit, Const)
	struct FAttributeInitializationData                SpecialistSkillPointsPerLevelUp;                          // 0x00B0(0x0010) (Edit, Const)
	struct FAttributeInitializationData                CostToResetSkillPoints;                                   // 0x00C0(0x0010) (Edit, Const)
	TArray<class USkillDefinition*>                    WeaponProficiencySkills;                                  // 0x00D0(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                BaseEnemyExperienceFormula;                               // 0x00DC(0x0010) (Edit, Const)
	TArray<struct FDamageTypeExpModifier>              DamageTypeExpModifiers;                                   // 0x00EC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FLevelBasedExpScale>                 ExpScaleByLevelDifference;                                // 0x00F8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FExpAwardWeight>                     ExpAwardWeights;                                          // 0x0104(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)
	int                                                ExpMaxPlayerLevel;                                        // 0x0110(0x0004) (Edit)
	struct FAttributeInitializationData                ExpPointsRequiredForLevel;                                // 0x0114(0x0010) (Edit, Const)
	struct FAttributeInitializationData                VehicleVSCharacterExpModifier;                            // 0x0124(0x0010) (Edit, Const)
	struct FAttributeInitializationData                WorldDiscoveryExperienceFormula;                          // 0x0134(0x0010) (Edit, Const)
	class UMissionObjectiveDefinition*                 FastTravelObjective;                                      // 0x0144(0x0004) (Edit, Const)
	int                                                TravelDelay;                                              // 0x0148(0x0004) (Edit, Const)
	class UTravelStationDefinition*                    DlcPreviousStation;                                       // 0x014C(0x0004) (Edit, Const)
	struct FName                                       SanctuaryMapName;                                         // 0x0150(0x0008) (Edit, Const)
	struct FName                                       SanctuaryAirMapName;                                      // 0x0158(0x0008) (Edit, Const)
	struct FName                                       SanctuaryBackupMapName;                                   // 0x0160(0x0008) (Edit, Const)
	class UMissionObjectiveDefinition*                 SanctuaryInaccessibleObjective;                           // 0x0168(0x0004) (Edit, Const)
	class UMissionObjectiveDefinition*                 SanctuaryFlyingObjective;                                 // 0x016C(0x0004) (Edit, Const)
	float                                              MinTeleportTime;                                          // 0x0170(0x0004) (Edit, Const)
	class UAkEvent*                                    TeleporterStartAkEvent;                                   // 0x0174(0x0004) (Edit, Const)
	class UAkEvent*                                    TeleporterStopAkEvent;                                    // 0x0178(0x0004) (Edit, Const)
	class UParticleSystem*                             TeleporterHoldingCellPartSys;                             // 0x017C(0x0004) (Edit, Const)
	class UDesignerAttributeDefinition*                StartupTeleporterAttribute;                               // 0x0180(0x0004) (Edit, Const)
	struct FAttributeInitializationData                TeleportCost;                                             // 0x0184(0x0010) (Edit, Const)
	class UAkEvent*                                    PauseAkEvent;                                             // 0x0194(0x0004) (Edit, Const)
	class UAkEvent*                                    UnpauseAkEvent;                                           // 0x0198(0x0004) (Edit, Const)
	class UAkSwitch*                                   DefaultMaterialAkSwitch;                                  // 0x019C(0x0004) (Edit, Const)
	class UAkSwitch*                                   FirstPersonAkSwitch;                                      // 0x01A0(0x0004) (Edit, Const)
	class UAkSwitch*                                   ThirdPersonAkSwitch;                                      // 0x01A4(0x0004) (Edit, Const)
	class UAkEvent*                                    EchoStartedAkEvent;                                       // 0x01A8(0x0004) (Edit, Const)
	class UAkEvent*                                    EchoEndedAkEvent;                                         // 0x01AC(0x0004) (Edit, Const)
	class UAkRtpc*                                     MasterVolumeAkRtpc;                                       // 0x01B0(0x0004) (Edit, Const)
	class UAkRtpc*                                     UserVolumeMusicAkRtpc;                                    // 0x01B4(0x0004) (Edit, Const)
	class UAkRtpc*                                     UserVolumeSfxAkRtpc;                                      // 0x01B8(0x0004) (Edit, Const)
	class UAkRtpc*                                     UserVolumeVOAkRtpc;                                       // 0x01BC(0x0004) (Edit, Const)
	class UAkRtpc*                                     ListenerDistanceAkRtpc;                                   // 0x01C0(0x0004) (Edit, Const)
	class UAkRtpc*                                     ApproachSpeedAkRtpc;                                      // 0x01C4(0x0004) (Edit, Const)
	class UAkRtpc*                                     SpeedAkRtpc;                                              // 0x01C8(0x0004) (Edit, Const)
	class UAkEvent*                                    ResetStatesAkEvent;                                       // 0x01CC(0x0004) (Edit, Const)
	class UAkEvent*                                    StartSplitScreenAkEvent;                                  // 0x01D0(0x0004) (Edit, Const)
	class UAkState*                                    PlayerVoiceAkState;                                       // 0x01D4(0x0004) (Edit, Const)
	class UAkState*                                    JackVoiceAkState;                                         // 0x01D8(0x0004) (Edit, Const)
	class UAkState*                                    PlayerCalloutsDisabledAkState;                            // 0x01DC(0x0004) (Edit, Const)
	class UAkState*                                    PlayerCalloutsEnabledAkState;                             // 0x01E0(0x0004) (Edit, Const)
	class UAkEvent*                                    CinematicModePauseDialogAkEvent;                          // 0x01E4(0x0004) (Edit, Const)
	class UAkEvent*                                    CinematicModeResumeDialogAkEvent;                         // 0x01E8(0x0004) (Edit, Const)
	class UAkEvent*                                    ShieldLowWarningStartAkEvent;                             // 0x01EC(0x0004) (Edit, Const)
	class UAkEvent*                                    ShieldLowWarningStopAkEvent;                              // 0x01F0(0x0004) (Edit, Const)
	class UAkEvent*                                    ShieldRecoveringAkEvent;                                  // 0x01F4(0x0004) (Edit, Const)
	class UAkEvent*                                    ShieldRecoveredAkEvent;                                   // 0x01F8(0x0004) (Edit, Const)
	class UAkEvent*                                    ShieldDownAkEvent;                                        // 0x01FC(0x0004) (Edit, Const)
	float                                              TinnitusEffectDecayRate;                                  // 0x0200(0x0004) (Edit, Const)
	class UAkRtpc*                                     TinnitusEffectStrengthRTPC;                               // 0x0204(0x0004) (Edit, Const)
	class UAkRtpc*                                     TinnitusSourcePannerRTPC;                                 // 0x0208(0x0004) (Edit, Const)
	class UAkRtpc*                                     TinnitusSourceStrengthRTPC;                               // 0x020C(0x0004) (Edit, Const)
	class UAkEvent*                                    TinnitusAkEvent;                                          // 0x0210(0x0004) (Edit, Const)
	class UAkEvent*                                    LevelUpAkEvent;                                           // 0x0214(0x0004) (Edit, Const)
	class UAkEvent*                                    VOVolumeStartAkEvent;                                     // 0x0218(0x0004) (Edit, Const)
	class UAkEvent*                                    VOVolumeStopAkEvent;                                      // 0x021C(0x0004) (Edit, Const)
	class UAkEvent*                                    SFXVolumeStartAkEvent;                                    // 0x0220(0x0004) (Edit, Const)
	class UAkEvent*                                    SFXVolumeStopAkEvent;                                     // 0x0224(0x0004) (Edit, Const)
	class UAkEvent*                                    MusicVolumeStartAkEvent;                                  // 0x0228(0x0004) (Edit, Const)
	class UAkEvent*                                    MusicVolumeStopAkEvent;                                   // 0x022C(0x0004) (Edit, Const)
	class USoundMode*                                  LoadingSoundMode;                                         // 0x0230(0x0004) (Edit, Const)
	class USoundMode*                                  EchoSoundMode;                                            // 0x0234(0x0004) (Edit, Const)
	class USoundMode*                                  DefaultSoundMode;                                         // 0x0238(0x0004) (Edit, Const)
	TArray<class UAkEvent*>                            SoundsToAlwaysReference;                                  // 0x023C(0x000C) (Edit, Const, NeedCtorLink)
	float                                              PlayerInteractionDistance;                                // 0x0248(0x0004) (Edit, Const)
	class UResourceDefinition*                         GrenadeAmmoDefinition;                                    // 0x024C(0x0004) (Edit, Const)
	class UProjectileDefinition*                       StandardGrenadeDefinition;                                // 0x0250(0x0004) (Edit, Const)
	float                                              ShowEchoTalkerDistance;                                   // 0x0254(0x0004) (Edit, Const)
	float                                              HideEchoTalkerDistance;                                   // 0x0258(0x0004) (Edit, Const)
	class UAkRtpc*                                     EchoDistortionAkRtpc;                                     // 0x025C(0x0004) (Edit, Const)
	float                                              MissionAcceptEchoDelay;                                   // 0x0260(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoDefinition_RepeaterPistol;                            // 0x0264(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoDefinition_RevolverPistol;                            // 0x0268(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoDefinition_Shotgun;                                   // 0x026C(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoDefinition_SMG;                                       // 0x0270(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoDefinition_CombatRifle;                               // 0x0274(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoDefinition_SniperRifle;                               // 0x0278(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoDefinition_RocketLauncher;                            // 0x027C(0x0004) (Edit, Const)
	float                                              PlayerEventRetriggerDelaySeconds;                         // 0x0280(0x0004) (Edit, Const)
	TArray<struct FRarityLevelColor>                   RarityLevelColors;                                        // 0x0284(0x000C) (Edit, Const, NeedCtorLink)
	int                                                MissionItemRarityLevel;                                   // 0x0290(0x0004) (Edit, Const)
	TArray<struct FPlayThroughData>                    RegionBalanceData;                                        // 0x0294(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                GameStageIncreaseAbovePlayer;                             // 0x02A0(0x0010) (Edit, Const)
	float                                              OtherPlayerDiedCostMultiplier;                            // 0x02B0(0x0004) (Edit, Const)
	struct FAttributeInitializationData                GlobalAIDamageScale;                                      // 0x02B4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GlobalAIWeaponDamageScale;                                // 0x02C4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GlobalAIPistolWeaponDamageScale;                          // 0x02D4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GlobalAIShotgunWeaponDamageScale;                         // 0x02E4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GlobalAISmgWeaponDamageScale;                             // 0x02F4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GlobalAISniperWeaponDamageScale;                          // 0x0304(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GlobalAIAssaultWeaponDamageScale;                         // 0x0314(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GlobalAIRocketWeaponDamageScale;                          // 0x0324(0x0010) (Edit, Const)
	TArray<struct FLevelBasedDamageScale>              PlayerDamageScaleByLevelDifference;                       // 0x0334(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FLevelBasedDamageScale>              AIDamageScaleByLevelDifference;                           // 0x0340(0x000C) (Edit, Const, NeedCtorLink)
	float                                              SelfInflictedDamageMultiplier;                            // 0x034C(0x0004) (Edit, Const)
	struct FAttributeInitializationData                GlobalFallingDamageScale;                                 // 0x0350(0x0010) (Edit, Const)
	float                                              FriendlyDamageModifier;                                   // 0x0360(0x0004) (Edit, Const, Deprecated)
	TArray<struct FStatusEffectTypeCommonProperties>   StatusEffectCommonProperties;                             // 0x0364(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FLevelBasedStatusEffectChanceScale>  StatusEffectChanceScales;                                 // 0x0370(0x000C) (Edit, Const, NeedCtorLink)
	float                                              FriendlyStatusEffectChanceModifier;                       // 0x037C(0x0004) (Edit, Const)
	class UParticleSystem*                             DamageDisplayParticles;                                   // 0x0380(0x0004) (Edit)
	struct FName                                       DamageDisplayParticleColorParamName;                      // 0x0384(0x0008) (Edit)
	struct FName                                       DamageDisplayParticleDamageParamName;                     // 0x038C(0x0008) (Edit)
	struct FName                                       DamageDisplayParticleSizeParamName;                       // 0x0394(0x0008) (Edit)
	float                                              DamageDisplayParticleSizeMinDist;                         // 0x039C(0x0004) (Edit)
	float                                              DamageDisplayParticleSizeMaxDist;                         // 0x03A0(0x0004) (Edit)
	struct FName                                       DamageDisplayParticleCriticalHitParamName;                // 0x03A4(0x0008) (Edit)
	struct FName                                       DamageDisplayParticleCriticalHitParamNameEs;              // 0x03AC(0x0008) (Edit)
	struct FName                                       DamageDisplayParticleCriticalHitParamNameFr;              // 0x03B4(0x0008) (Edit)
	struct FName                                       DamageDisplayParticleCriticalHitParamNameIt;              // 0x03BC(0x0008) (Edit)
	struct FName                                       DamageDisplayParticleCriticalHitParamNameDe;              // 0x03C4(0x0008) (Edit)
	float                                              DamageDisplayParticleCriticalHitParamValue;               // 0x03CC(0x0004) (Edit)
	unsigned char                                      DamageDisplaySortPriority;                                // 0x03D0(0x0001) (Edit)
	unsigned char                                      AllSideMissionsCompleteAchievement;                       // 0x03D1(0x0001) (Edit, Const)
	unsigned char                                      ReviveAFriendAchievement;                                 // 0x03D2(0x0001) (Edit, Const)
	unsigned char                                      MatchedSetPurplesAchievement;                             // 0x03D3(0x0001) (Edit, Const)
	unsigned char                                      KilledFlyingEnemyWithTedioreAchievement;                  // 0x03D4(0x0001) (Edit, Const)
	unsigned char                                      CompletedAllChallengesLevelOneAchievement;                // 0x03D5(0x0001) (Edit, Const)
	unsigned char                                      CompletedASlaughterAchievement;                           // 0x03D6(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03D7(0x0001) MISSED OFFSET
	struct FName                                       DamageDisplayParticleResistParamName;                     // 0x03D8(0x0008) (Edit, Const, Localized)
	float                                              DamageDisplayParticleResistParamValue;                    // 0x03E0(0x0004) (Edit)
	struct FName                                       DamageDisplayParticleResistColorParamName;                // 0x03E4(0x0008) (Edit)
	struct FName                                       DamageDisplayParticleHealingParamName;                    // 0x03EC(0x0008) (Edit)
	float                                              DamageDisplayParticleHealingParamValue;                   // 0x03F4(0x0004) (Edit)
	struct FName                                       DamageDisplayParticleLanguageParamName;                   // 0x03F8(0x0008) (Edit)
	struct FName                                       DamageDisplayShortenParamName;                            // 0x0400(0x0008) (Edit)
	int                                                DamageDisplayShortenDamageThreshold;                      // 0x0408(0x0004) (Edit)
	float                                              DamageDisplayShortenDamageMultiplyBy;                     // 0x040C(0x0004) (Edit)
	class UWillowVehicleControlDefinition*             VehicleControlDefinition;                                 // 0x0410(0x0004) (Edit)
	class USoundCue*                                   DefaultWheelMaterialSoundEffect;                          // 0x0414(0x0004) (Edit)
	float                                              VehicleTireDamageRepeatDelay;                             // 0x0418(0x0004) (Edit, Const)
	TArray<class UVehicleFamilyDefinition*>            VehicleFamilyDefinitions;                                 // 0x041C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UVSSUIDefinition*>                    VSSVehicleUIDefinitions;                                  // 0x0428(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                DamageToApplyToVehiclesThatHitAIPawns;                    // 0x0434(0x0010) (Edit, Const)
	class UWillowVersusDuelGlobals*                    VersusDuelGlobalsDef;                                     // 0x0444(0x0004) (Edit)
	class UPlayerChallengeListDefinition*              ChallengeList;                                            // 0x0448(0x0004) (Edit, Const)
	TArray<float>                                      CompletionThresholdNotification;                          // 0x044C(0x000C) (Edit, Const, NeedCtorLink)
	int                                                MinimumGoalForNotification;                               // 0x0458(0x0004) (Edit, Const)
	float                                              PercentChallengeCompletionNeededForPrestige;              // 0x045C(0x0004) (Edit, Const)
	class UCombatMusicParameters*                      CombatMusicProperties;                                    // 0x0460(0x0004) (Edit)
	float                                              BigDamageThreshold;                                       // 0x0464(0x0004) (Edit, Const)
	float                                              MinBigDamageTime;                                         // 0x0468(0x0004) (Edit, Const)
	float                                              MinSmallDamageTime;                                       // 0x046C(0x0004) (Edit, Const)
	int                                                BigDamageShakeMagnitude;                                  // 0x0470(0x0004) (Edit, Const)
	int                                                SmallDamageShakeMagnitude;                                // 0x0474(0x0004) (Edit, Const)
	class UForceFeedbackWaveform*                      BigDamageShake;                                           // 0x0478(0x0004) (Edit, Const, EditInline)
	class UForceFeedbackWaveform*                      SmallDamageShake;                                         // 0x047C(0x0004) (Edit, Const, EditInline)
	class UDamageTypeDefinition*                       HealingDamageTypeDefinition;                              // 0x0480(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     HealingImpactDefinition;                                  // 0x0484(0x0004) (Edit, Const)
	int                                                AnnouncePickupRarityThreshold;                            // 0x0488(0x0004) (Edit, Const)
	float                                              PickupRadius;                                             // 0x048C(0x0004) (Edit, Const)
	float                                              CoopRange;                                                // 0x0490(0x0004) (Edit, Const)
	float                                              DropImpactEffectMax;                                      // 0x0494(0x0004) (Edit, Const)
	float                                              DropImpactEffectDelay;                                    // 0x0498(0x0004) (Edit, Const)
	float                                              DropImpactEffectThreshold;                                // 0x049C(0x0004) (Edit, Const)
	class UAkRtpc*                                     DropImpactEffectVelocityAkRtpc;                           // 0x04A0(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         LevelTransitionItemPool;                                  // 0x04A4(0x0004) (Edit)
	TArray<struct FAkEventResolver>                    InteractionDefaultSounds;                                 // 0x04A8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUsePC360Buttons : 1;                                     // 0x04B4(0x0004) (Edit)
	class UTextMarkupDictionary*                       TheTextMarkupDictionary;                                  // 0x04B8(0x0004) (Edit, Const)
	struct FName                                       ElementalFrameNames[0x8];                                 // 0x04BC(0x0008) (Edit, Const)
	class UAttributePresentationListDefinition*        DefaultAttributePresentation;                             // 0x04FC(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ItemAttributePresentationOverride;                        // 0x0500(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ArtifactAttributePresentationOverride;                    // 0x0504(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ClassModAttributePresentationOverride;                    // 0x0508(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        GrenadeModAttributePresentationOverride;                  // 0x050C(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ShieldAttributePresentationOverride;                      // 0x0510(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        WeaponAttributePresentationOverride;                      // 0x0514(0x0004) (Edit, Const)
	struct FString                                     AttributePresentationTranslation;                         // 0x0518(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UAttributePresentationDefinition*            EmptyConstraint;                                          // 0x0524(0x0004) (Const)
	class UAttributePresentationDefinition*            MissingPresentation;                                      // 0x0528(0x0004) (Const)
	class ULevelDependencyList*                        LevelDependencyList;                                      // 0x052C(0x0004) (Edit, Const)
	float                                              PlayerAirControl;                                         // 0x0530(0x0004) (Edit, Const)
	class UDeveloperPerksDefinition*                   DeveloperPerksDef;                                        // 0x0534(0x0004) (Edit, Const)
	TArray<class UKeyedItemPoolDefinition*>            CustomizationsToUnlockForLoyalCustomers;                  // 0x0538(0x000C) (Edit, Const, NeedCtorLink)
	int                                                MaxAllowedPlayThroughs;                                   // 0x0544(0x0004) (Edit, Const)
	TArray<struct FAchievementUnlockData>              AchievementData;                                          // 0x0548(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FSlaughterMissionChain>              MissionChainsEligibleForSlaughterAchievement;             // 0x0554(0x000C) (Edit, Const, NeedCtorLink)
	class UParticleSystem*                             PartItemHoverFade;                                        // 0x0560(0x0004) (Edit, Const)
	class UParticleSystem*                             PartItemHover;                                            // 0x0564(0x0004) (Edit, Const)
	class UParticleSystem*                             PartPickup;                                               // 0x0568(0x0004) (Edit, Const)
	class UParticleSystem*                             PartLootable;                                             // 0x056C(0x0004) (Edit, Const)
	struct FVector                                     PartLootableHoverOffset;                                  // 0x0570(0x000C) (Edit, Const)
	struct FVector                                     PartPickupHoverOffset;                                    // 0x057C(0x000C) (Edit, Const)
	float                                              HoverWidthPickup;                                         // 0x0588(0x0004) (Edit, Const)
	float                                              HoverWidthLootable;                                       // 0x058C(0x0004) (Edit, Const)
	float                                              ItemHoverProjectionHeight;                                // 0x0590(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         ItemPickupCardMovie;                                      // 0x0594(0x0004) (Edit, Const)
	class UMaterialInterface*                          HoverIconMaterial;                                        // 0x0598(0x0004) (Edit, Const)
	float                                              CardHeightPitchFactor;                                    // 0x059C(0x0004) (Edit, Const)
	int                                                CardHeightPitchDeadZone;                                  // 0x05A0(0x0004) (Edit, Const)
	float                                              CardHeightDistanceFactor;                                 // 0x05A4(0x0004) (Edit, Const)
	float                                              CardHeightCombatFactor;                                   // 0x05A8(0x0004) (Edit, Const)
	float                                              PickupSpinHMin;                                           // 0x05AC(0x0004) (Edit, Const)
	float                                              PickupSpinHMax;                                           // 0x05B0(0x0004) (Edit, Const)
	float                                              PickupSpinVMin;                                           // 0x05B4(0x0004) (Edit, Const)
	float                                              PickupSpinVMax;                                           // 0x05B8(0x0004) (Edit, Const)
	float                                              DayNightCycleRate;                                        // 0x05BC(0x0004) (Edit, Const)
	float                                              ProtectionTimerThreshold;                                 // 0x05C0(0x0004) (Edit, Const)
	float                                              ProtectionTimerDurationInSeconds;                         // 0x05C4(0x0004) (Edit, Const)
	float                                              ProtectionTimerMaintainedMaxHealthPct;                    // 0x05C8(0x0004) (Edit, Const)
	TArray<struct FInputContextData>                   InputContexts;                                            // 0x05CC(0x000C) (Edit, Const, NeedCtorLink)
	class UInputDeviceCollectionDefinition*            InputDeviceCollection;                                    // 0x05D8(0x0004) (Edit, Const)
	TArray<class UInputRemappingDefinition*>           ControllerPresetsPS3;                                     // 0x05DC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UInputRemappingDefinition*>           ControllerPresetsXbox360;                                 // 0x05E8(0x000C) (Edit, Const, NeedCtorLink)
	float                                              MinutesBetweenShopResets;                                 // 0x05F4(0x0004) (Edit, Const)
	struct FAttributeInitializationData                ShopResetCost;                                            // 0x05F8(0x0010) (Edit, Const)
	struct FColor                                      DefaultShieldColor;                                       // 0x0608(0x0004) (Edit, Const)
	float                                              ClassDropChance[0x4];                                     // 0x060C(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         CommonClassMods;                                          // 0x061C(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         UncommonClassMods;                                        // 0x0620(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         RareClassMods;                                            // 0x0624(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         VeryRareClassMods;                                        // 0x0628(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         LegendaryClassMods;                                       // 0x062C(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         SlayerOfTerramorphousClassMods;                           // 0x0630(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         MissionAcceptDefinition;                                  // 0x0634(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         VoGMovieDefinition;                                       // 0x0638(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         PauseMenuDefinition;                                      // 0x063C(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         TradingMovieDefinition;                                   // 0x0640(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         UBMGameOverMovieDefinition;                               // 0x0644(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         BuddyPlaneDefinition;                                     // 0x0648(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         OnlineMessageMovieDefinition;                             // 0x064C(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         TextChatMovieDefinition;                                  // 0x0650(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         HUDScaleGuideMovieDefinition;                             // 0x0654(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         LobbyMovieDefinition;                                     // 0x0658(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         LoadCharacterMovieDefinition;                             // 0x065C(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         ItemInspectionMovieDefinition;                            // 0x0660(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         WeaponScopeMovieDefinition;                               // 0x0664(0x0004) (Edit, Const)
	class USwfMovie*                                   DLCCharacterIconSwfMovie;                                 // 0x0668(0x0004) (Edit, Const)
	struct FPostProcessSettings                        PPOverride;                                               // 0x066C(0x00E8) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                MissionCreditRewardFormula;                               // 0x0754(0x0010) (Edit, Const)
	class UAkEvent*                                    MissionReadyToTurnInAkEvent;                              // 0x0764(0x0004) (Edit, Const)
	class UAkEvent*                                    ActiveMissionChangedAkEvent;                              // 0x0768(0x0004) (Edit, Const)
	class UAkEvent*                                    MissionObjectiveCompleteAkEvent;                          // 0x076C(0x0004) (Edit, Const)
	class UAkEvent*                                    MissionObjectiveIncrementedAkEvent;                       // 0x0770(0x0004) (Edit, Const)
	class UAkEvent*                                    MissionObjectiveClearedAkEvent;                           // 0x0774(0x0004) (Edit, Const)
	class UAkEvent*                                    MissionTurnedInAkEvent;                                   // 0x0778(0x0004) (Edit, Const)
	class UAkEvent*                                    NewMissionAcceptedAkEvent;                                // 0x077C(0x0004) (Edit, Const)
	int                                                MissionAvailabilityTimer;                                 // 0x0780(0x0004) (Edit, Const)
	int                                                LevelDifference_Impossible;                               // 0x0784(0x0004) (Edit, Const)
	int                                                LevelDifference_Hard;                                     // 0x0788(0x0004) (Edit, Const)
	int                                                LevelDifference_Tough;                                    // 0x078C(0x0004) (Edit, Const)
	int                                                LevelDifference_Normal;                                   // 0x0790(0x0004) (Edit, Const)
	struct FName                                       MissionGlowColorParameter;                                // 0x0794(0x0008) (Edit, Const)
	class UMissionDefinition*                          FirstWeaponMission;                                       // 0x079C(0x0004) (Edit, Const)
	class UWeaponBalanceDefinition*                    DefaultWeapon;                                            // 0x07A0(0x0004) (Edit, Const)
	class UParticleSystem*                             MissionDirectorParticleSystem;                            // 0x07A4(0x0004) (Edit, Const)
	struct FName                                       MissionDirectorParticleSocket;                            // 0x07A8(0x0008) (Edit, Const)
	struct FName                                       MissionDirectorIconSelectParameterName;                   // 0x07B0(0x0008) (Edit, Const)
	float                                              MissionDirectorEligibleMissionsParameter;                 // 0x07B8(0x0004) (Edit, Const)
	float                                              MissionDirectorRedeemableMissionsParameter;               // 0x07BC(0x0004) (Edit, Const)
	struct FName                                       MissionDirectorIconColorParameterName;                    // 0x07C0(0x0008) (Edit, Const)
	struct FVector                                     MissionDirectorIconColor;                                 // 0x07C8(0x000C) (Edit, Const)
	struct FName                                       MissionDirectorIconSizeParameterName;                     // 0x07D4(0x0008) (Edit, Const)
	struct FVector                                     MissionDirectorIconSize;                                  // 0x07DC(0x000C) (Edit, Const)
	float                                              PickupDirectorIconOffset;                                 // 0x07E8(0x0004) (Edit, Const)
	struct FName                                       FocusSocketName;                                          // 0x07EC(0x0008) (Edit, Const)
	float                                              MissionPickupFailsafeSeconds;                             // 0x07F4(0x0004) (Edit, Const)
	float                                              MissionPickupFailsafeZ;                                   // 0x07F8(0x0004) (Edit, Const)
	struct FName                                       WaypointSocketName;                                       // 0x07FC(0x0008) (Edit, Const)
	float                                              MaxTimeBetweenSpreeKills;                                 // 0x0804(0x0004) (Edit, Const)
	float                                              QuickshotTimer;                                           // 0x0808(0x0004) (Edit, Const)
	float                                              PointBlankDistance;                                       // 0x080C(0x0004) (Edit, Const)
	float                                              ShotgunLongshot;                                          // 0x0810(0x0004) (Edit, Const)
	float                                              LauncherLongshot;                                         // 0x0814(0x0004) (Edit, Const)
	float                                              PistolLongshot;                                           // 0x0818(0x0004) (Edit, Const)
	int                                                NumLevelUpKillStatThreshold;                              // 0x081C(0x0004) (Edit, Const)
	float                                              PctOfBleedoutToSecondWind;                                // 0x0820(0x0004) (Edit, Const)
	TArray<class UMarketingUnlockDefinition*>          MarketingUnlocks;                                         // 0x0824(0x000C) (Edit, Const, NeedCtorLink)
	class UHUDDefinition*                              HUDDefinition;                                            // 0x0830(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Use;                              // 0x0834(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Talk;                             // 0x0838(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Heal;                             // 0x083C(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Shop;                             // 0x0840(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Computer;                         // 0x0844(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Smash;                            // 0x0848(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_CannotUse;                        // 0x084C(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_Driver;                   // 0x0850(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_Gunner;                   // 0x0854(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_MiddleLeft;               // 0x0858(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_MiddleRight;              // 0x085C(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Vehicle_Flip;                     // 0x0860(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_Objective;                        // 0x0864(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_PickUp;                           // 0x0868(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_Default_CannotPickUp;                     // 0x086C(0x0004) (Edit)
	class UInteractionIconDefinition*                  InteractionIcon_AlreadyDiscoveredObject;                  // 0x0870(0x0004) (Edit)
	class UGenericReviveMessageDefinition*             KillReviveDefinition;                                     // 0x0874(0x0004) (Edit)
	float                                              AICloseThreatRadius;                                      // 0x0878(0x0004) (Edit, Const)
	float                                              AIMinAttackDistance;                                      // 0x087C(0x0004) (Edit, Const)
	float                                              AIMinVertAttackDistance;                                  // 0x0880(0x0004) (Edit, Const)
	float                                              MaxDistanceForTrade;                                      // 0x0884(0x0004) (Edit)
	float                                              DefaultFOV;                                               // 0x0888(0x0004) (Edit, Const)
	float                                              UnarmedFirstPersonFOV;                                    // 0x088C(0x0004) (Edit, Const)
	struct FVector                                     UnarmedPlayerViewOffset;                                  // 0x0890(0x000C) (Edit, Const)
	class UParticleSystem*                             OverchargedLightProjectileImpactTemplate;                 // 0x089C(0x0004) (Edit, Const)
	class UParticleSystem*                             OverchargedProjectileTrailTemplate;                       // 0x08A0(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                DigistructInWeaponEffect;                                 // 0x08A4(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                DigistructOutWeaponEffect;                                // 0x08A8(0x0004) (Edit, Const)
	class UFractalViewWanderingDefinition*             FractalWanderDef;                                         // 0x08AC(0x0004) (Edit, Const)
	float                                              RespawnCameraDistanceNozzleOneAndTwo;                     // 0x08B0(0x0004) (Edit, Const)
	float                                              RespawnCameraOffsetZNozzleOneAndTwo;                      // 0x08B4(0x0004) (Edit, Const)
	float                                              RespawnCameraDistanceNozzleThreeAndFour;                  // 0x08B8(0x0004) (Edit, Const)
	float                                              RespawnCameraOffsetZNozzleThreeAndFour;                   // 0x08BC(0x0004) (Edit, Const)
	float                                              RespawnCameraLerpTime;                                    // 0x08C0(0x0004) (Edit, Const)
	float                                              RespawnCameraLookAtOffsetZ;                               // 0x08C4(0x0004) (Edit, Const)
	float                                              RespawnDelayBeforeCoordinatedEffect;                      // 0x08C8(0x0004) (Edit, Const)
	class UAkEvent*                                    RespawnStartAkEvent;                                      // 0x08CC(0x0004) (Edit, Const)
	class UAkEvent*                                    RespawnStopAkEvent;                                       // 0x08D0(0x0004) (Edit, Const)
	class UAkEvent*                                    RespawnHeadZoomAkEvent;                                   // 0x08D4(0x0004) (Edit, Const)
	float                                              InjuredDeadCameraStartDistance;                           // 0x08D8(0x0004) (Edit, Const)
	float                                              InjuredDeadCameraEndDistance;                             // 0x08DC(0x0004) (Edit, Const)
	float                                              InjuredDeadCameraLerpTime;                                // 0x08E0(0x0004) (Edit, Const)
	struct FRotator                                    InjuredDeadCameraRotation;                                // 0x08E4(0x000C) (Edit, Const)
	float                                              InjuredDeadDelayBetweenDeathAnimAndDigistruct;            // 0x08F0(0x0004) (Edit, Const)
	float                                              InjuredDeadDelayBeforeDigistructKillVolume;               // 0x08F4(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                DigistructCoordinatedEffect;                              // 0x08F8(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                DigistructCoordinatedEffectKillVolume;                    // 0x08FC(0x0004) (Edit, Const)
	struct FName                                       InjuredDeadBoneName;                                      // 0x0900(0x0008) (Edit, Const)
	class UAkEvent*                                    InjuredDeadStartAkEvent;                                  // 0x0908(0x0004) (Edit, Const)
	class UAkEvent*                                    InjuredDeadStopAkEvent;                                   // 0x090C(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                EnemyFadeoutEffect;                                       // 0x0910(0x0004) (Edit, Const)
	class UAkEvent*                                    CrushedAkEvent;                                           // 0x0914(0x0004) (Edit, Const)
	int                                                BadassPointsPerRank;                                      // 0x0918(0x0004) (Edit, Const)
	struct FAttributeInitializationData                BadassRanksForToken;                                      // 0x091C(0x0010) (Edit, Const)
	TArray<class UBadassRewardDefinition*>             BadassRewards;                                            // 0x092C(0x000C) (Edit, Const, NeedCtorLink)
	class USkillDefinition*                            BadassSkill;                                              // 0x0938(0x0004) (Edit, Const)
	TArray<class UBlackMarketUpgradeDefinition*>       BlackMarketUpgrades;                                      // 0x093C(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                BlackMarketCostMultiplier;                                // 0x0948(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BlackMarketCostOffset;                                    // 0x0958(0x0010) (Edit, Const)
	class UAttributeDefinition*                        DefaultBankSlots;                                         // 0x0968(0x0004) (Edit, Const)
	float                                              DawnTime;                                                 // 0x096C(0x0004) (Edit, Const)
	float                                              DuskTime;                                                 // 0x0970(0x0004) (Edit, Const)
	int                                                MaxDollars;                                               // 0x0974(0x0004) (Edit, Const)
	int                                                MaxEridium;                                               // 0x0978(0x0004) (Edit, Const)
	class UCurrencyListDefinition*                     Currencies;                                               // 0x097C(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                StandInTeleportEffect;                                    // 0x0980(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                StandInHideEffect;                                        // 0x0984(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                CustomizationApplicationStartEffect;                      // 0x0988(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                CustomizationApplicationEffectSkin;                       // 0x098C(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                CustomizationApplicationEffectHead;                       // 0x0990(0x0004) (Edit, Const)
	class UPackageAssetLibrary*                        AssetLibraries[0x6];                                      // 0x0994(0x0004) (Edit)
	float                                              BinkMovieVolumeScaleFactor;                               // 0x09AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GlobalsDefinition");
		return ptr;
	}


	struct FString GetDLCCharacterIconSwfMoviePath();
	class UMarketingUnlockDefinition* FindUnlockDefinitionForUnlockCode(int UnlockCode);
	void ApplySpinToPickup(class UMeshComponent* Mesh);
	bool ShouldUsePC360Buttons();
	bool GetStatusEffectTypeProperties(unsigned char StatusEffectType, struct FStatusEffectTypeCommonProperties* out_Properties);
	float GetStatusEffectChanceBasedOnExpLevelDifferences(int ExpLevelOfInstigator, int ExpLevelOfTarget);
	class UAttributePresentationDefinition* GetAttributePresentationForAttribute(class UAttributeDefinition* Attribute, class UAttributePresentationListDefinition* OverrideList);
	unsigned char GetDropLifeSpanType(int DropRarityLevel);
	int GetRarityLevelColorsIndexforLevel(int Level);
	struct FColor GetRarityColorForRarityRating(unsigned char Rating);
	struct FColor GetRarityColorForLevel(int Level);
	unsigned char GetRarityForLevel(int Level);
};


// Class WillowGame.BalanceModifierDefinition
// 0x00B0 (0x003C - 0x00EC)
class UBalanceModifierDefinition : public UGBXDefinition
{
public:
	int                                                PlaythroughToBalance;                                     // 0x003C(0x0004) (Edit, Const)
	TArray<struct FBalanceModification>                BalanceModifiers;                                         // 0x0040(0x000C) (Edit, Const, NeedCtorLink)
	float                                              ModifierToXPGainedTowardsNewLevelsInEarlierPlaythroughs[0x2];// 0x004C(0x0004) (Edit, Const)
	TArray<struct FBlackMarketPostLaunchUpgradeData>   AdditionalAmmoSDUUpgrades;                                // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FBlackMarketPostLaunchUpgradeData>   AdditionalBankStorageUpgrades;                            // 0x0060(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FBlackMarketPostLaunchUpgradeData>   AdditionalBackpackSDUUpgrades;                            // 0x006C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FMapSpecificBalanceModificationList> MapSpecificBalanceModifiers;                              // 0x0078(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FMapSpecificBalanceModificationList> BalanceModifiersForPlayersWithOneLevelCapUpgrade;         // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FMapSpecificBalanceModificationList> BalanceModifiersForPlayersWithTwoLevelCapUpgrades;        // 0x0090(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FMapSpecificBalanceModificationList> BalanceModifiersForPlayersWithTwoLevelCapUpgradesAndOverpower;// 0x009C(0x000C) (Edit, Const, NeedCtorLink)
	class UDownloadableFixupAIPawnNamesDefinition*     NewAIPawnNamesForThisPlayThrough;                         // 0x00A8(0x0004) (Edit, Const)
	struct FAttributeInitializationData                GearDrops_CommonWeightModifier_PT1_BaseValueOverride;     // 0x00AC(0x0010) (Edit, Const)
	struct FAttributeInitializationData                GearDrops_CommonWeightModifier_PT2_BaseValueOverride;     // 0x00BC(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ChestItemPool_Weight_2_Uncommon_PT1_Multiplier;           // 0x00CC(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ChestItemPool_Weight_2_Uncommon_PT2_Multiplier;           // 0x00DC(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BalanceModifierDefinition");
		return ptr;
	}


	static float GetAIDamageScaleBasedOnExpLevelDifferences(int ExpLevelOfInstigator, int ExpLevelOfTarget, int GameStage, float DefaultReturnValue);
	static float GetStatusEffectChanceBasedOnExpLevelDifferences(int ExpLevelOfInstigator, int ExpLevelOfTarget, int GameStage, float DefaultReturnValue);
	static float GetUncommonChestItemPoolWeightMultiplier(int GameStage);
	static float GetCommonGearDropWeightBaseValue();
	static class UDownloadableFixupAIPawnNamesDefinition* GetNewAIPawnNamesForThisPlayThrough();
	static void UpdatePlayerVehicleDamage(class AWillowVehicle* PlayerVehicle);
	static float GetAmmoDropsPerPlayerMultiplier(class UObject* ContextSource, int GameStage);
	static float GetAmplifiedDamageMultiplier();
	static float GetAdditionalEnemyDamageMultiplier(int EnemyGameStage, bool bIsChampion);
	static void ApplyPlayThroughBasedPlayerAttributeEffects(class AWillowPlayerController* Player);
	static void UpdateSpawnedPlayerEnemyAIPawn(class AWillowAIPawn* SpawnedAIPawn, class AWillowMind* WMind);
	static float GetXPEarnedMultiplier(class AWillowPlayerController* PlayerGettingXP, unsigned char ExperienceType);
};


// Class WillowGame.Behavior_ActivateInstancedMissionBehaviorSequence
// 0x0010 (0x004C - 0x005C)
class UBehavior_ActivateInstancedMissionBehaviorSequence : public UBehaviorBase
{
public:
	class UMissionDefinition*                          Mission;                                                  // 0x004C(0x0004) (Edit)
	class UMissionObjectiveDefinition*                 MissionObjective;                                         // 0x0050(0x0004) (Edit)
	struct FName                                       SequenceName;                                             // 0x0054(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ActivateInstancedMissionBehaviorSequence");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ActivateMission
// 0x0000 (0x004C - 0x004C)
class UBehavior_ActivateMission : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ActivateMission");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.IMissionDirector
// 0x0000 (0x003C - 0x003C)
class UIMissionDirector : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMissionDirector");
		return ptr;
	}


	void OnPlayerClosedMissionUI(class AWillowPlayerController* ThePlayer);
	void OnPlayerOpenedMissionUI(class AWillowPlayerController* ThePlayer);
	bool HasAnyMissionsForPlayer();
	struct FVector GetMissionDirectorLocation();
	int GetAllDirectorData(TArray<struct FMissionDirectorData>* OutData);
	void DeactivateMissionDirectorParticle();
	void SetMissionDirectorParticle();
	void MissionStatusChanged();
	void OnPlayerTurnedInMission(class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn);
	void OnPlayerAcceptedMission(class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted);
	int GetInProgressMissions(TArray<class UMissionDefinition*>* InProgressMissions);
	int GetEligibleMissions(TArray<class UMissionDefinition*>* EligibleMissions);
	int GetRedeemableMissions(TArray<class UMissionDefinition*>* RedeemableMissions);
	void AddMissionDirective(bool bRegisterDirector, struct FMissionDirectorData* NewDirective);
};


// Class WillowGame.Behavior_AddMissionDirectives
// 0x000C (0x004C - 0x0058)
class UBehavior_AddMissionDirectives : public UBehaviorBase
{
public:
	TArray<struct FMissionDirectorData>                MissionDirectives;                                        // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AddMissionDirectives");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AddMissionTime
// 0x0004 (0x004C - 0x0050)
class UBehavior_AddMissionTime : public UBehaviorBase
{
public:
	float                                              SecondsToAdd;                                             // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AddMissionTime");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AdvanceObjectiveSet
// 0x0004 (0x004C - 0x0050)
class UBehavior_AdvanceObjectiveSet : public UBehaviorBase
{
public:
	class UMissionObjectiveSetDefinition*              ObjectiveSetToAdvanceTo;                                  // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AdvanceObjectiveSet");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AICloak
// 0x0008 (0x004C - 0x0054)
class UBehavior_AICloak : public UBehaviorBase
{
public:
	unsigned char                                      NewCloakBehavior;                                         // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	unsigned long                                      bImmediate : 1;                                           // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AICloak");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AIThrowProjectileAtTarget
// 0x005C (0x004C - 0x00A8)
class UBehavior_AIThrowProjectileAtTarget : public UBehaviorBase
{
public:
	int                                                NumProjectiles;                                           // 0x004C(0x0004) (Edit, Const)
	struct FTrajectoryData                             Options;                                                  // 0x0050(0x0020) (Edit, Const)
	struct FVector                                     StartOffset;                                              // 0x0070(0x000C) (Edit, Const)
	struct FName                                       StartSocket;                                              // 0x007C(0x0008) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             ChildProjectileBaseValues;                                // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	class UProjectileDefinition*                       ProjectileDef;                                            // 0x0090(0x0004) (Edit)
	unsigned long                                      bGrenade : 1;                                             // 0x0094(0x0004) (Edit, Const)
	class AWillowProjectile*                           ExistingProjectile;                                       // 0x0098(0x0004) (Edit)
	TArray<struct FAIThrowProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                               // 0x009C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AIThrowProjectileAtTarget");
		return ptr;
	}


	void PublishBehaviorOutput(class AWillowProjectile* SpawnedProjectile, struct FBehaviorKernelInfo* KernelInfo);
	void ThrowExisting(class UObject* ContextObject);
	void ThrowProjectile(class AWillowProjectile* NewProjectile, const FScriptInterface& AI, class UObject* ContextObject, int ExpLevel);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AttemptItemCallout
// 0x0010 (0x004C - 0x005C)
class UBehavior_AttemptItemCallout : public UBehaviorBase
{
public:
	class UGearboxDialogEventTag*                      DET_CallOut;                                              // 0x004C(0x0004) (Edit)
	struct FName                                       InstanceDataName;                                         // 0x0050(0x0008) (Edit)
	unsigned long                                      bMarkAsDiscovered : 1;                                    // 0x0058(0x0004) (Edit)
	unsigned long                                      bTestVisibility : 1;                                      // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AttemptItemCallout");
		return ptr;
	}


	bool TestTargetVisibility(class UObject* Target, class APawn* Viewer);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AttemptStatusEffect
// 0x0044 (0x004C - 0x0090)
class UBehavior_AttemptStatusEffect : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                                   // 0x004C(0x0004) (Const, Native, NoExport)
	class UStatusEffectDefinition*                     StatusEffect;                                             // 0x0050(0x0004) (Edit, Const)
	TArray<struct FBehaviorContextData>                TargetContext;                                            // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                InstigatorChanceModifier;                                 // 0x0060(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectDamage;                                       // 0x0070(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectChance;                                       // 0x0080(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AttemptStatusEffect");
		return ptr;
	}


	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	float GetStatusEffectBaseChanceModifier(class UObject* ObjContext);
	float GetStatusEffectChanceModifier(class UObject* ObjContext);
	float GetStatusEffectBaseDamage(class UObject* ObjContext);
	void AttempEffect(class AActor* InstigatorActor, const struct FBehaviorContextData& TargetC, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CauseDamage
// 0x00A8 (0x004C - 0x00F4)
class UBehavior_CauseDamage : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                                   // 0x004C(0x0004) (Const, Native, NoExport)
	struct FAttributeInitializationData                DamageFormula;                                            // 0x0050(0x0010) (Edit, Const)
	struct FAttributeInitializationData                RadiusFormula;                                            // 0x0060(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MomentumFormula;                                          // 0x0070(0x0010) (Edit, Const)
	struct FBehaviorContextData                        OverrideContext;                                          // 0x0080(0x0010) (Edit, Const)
	struct FName                                       OverrideName;                                             // 0x0090(0x0008) (Edit, Const)
	class UClass*                                      DamageSource;                                             // 0x0098(0x0004) (Edit, Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                                     // 0x009C(0x0004) (Edit, Const)
	class UImpactDefinition*                           ImpactDefinition;                                         // 0x00A0(0x0004) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectDamage;                                       // 0x00A4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectChance;                                       // 0x00B4(0x0010) (Edit, Const)
	unsigned char                                      DamageTarget;                                             // 0x00C4(0x0001) (Const, Deprecated)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	struct FName                                       CustomTargetName;                                         // 0x00C8(0x0008) (Const, Deprecated)
	struct FBehaviorContextData                        TargetContext;                                            // 0x00D0(0x0010) (Edit, Const)
	unsigned long                                      bInflictRadiusDamage : 1;                                 // 0x00E0(0x0004) (Edit, Const)
	unsigned long                                      bDisableRadiusDamageFalloff : 1;                          // 0x00E0(0x0004) (Edit, Const)
	unsigned long                                      bSkipTraceTest : 1;                                       // 0x00E0(0x0004) (Edit, Const)
	unsigned long                                      bCanDamageFriendlies : 1;                                 // 0x00E0(0x0004) (Edit, Const)
	unsigned long                                      bBarrelSource : 1;                                        // 0x00E0(0x0004) (Edit, Const)
	unsigned long                                      bPlantSource : 1;                                         // 0x00E0(0x0004) (Edit, Const)
	float                                              BarrelSourceTime;                                         // 0x00E4(0x0004) (Edit, Const)
	float                                              PlantSourceTime;                                          // 0x00E8(0x0004) (Edit, Const)
	float                                              InstigatorSelfDamageScale;                                // 0x00EC(0x0004) (Edit, Const)
	class AActor*                                      SelfActor;                                                // 0x00F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CauseDamage");
		return ptr;
	}


	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	float GetStatusEffectBaseChanceModifier(class UObject* ObjContext);
	float GetStatusEffectChanceModifier(class UObject* ObjContext);
	float GetStatusEffectBaseDamage(class UObject* ObjContext);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ClearObjective
// 0x0004 (0x004C - 0x0050)
class UBehavior_ClearObjective : public UBehaviorBase
{
public:
	class UMissionObjectiveDefinition*                 ObjectiveToClear;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ClearObjective");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CompleteMission
// 0x0000 (0x004C - 0x004C)
class UBehavior_CompleteMission : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CompleteMission");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_Conditional
// 0x000C (0x004C - 0x0058)
class UBehavior_Conditional : public UBehaviorBase
{
public:
	TArray<struct FBehaviorCondition>                  Conditions;                                               // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_Conditional");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ConvertInstanceDataIntoPhysicsActor
// 0x0024 (0x004C - 0x0070)
class UBehavior_ConvertInstanceDataIntoPhysicsActor : public UBehaviorBase
{
public:
	struct FVector                                     DetachImpulse;                                            // 0x004C(0x000C) (Edit, Const)
	struct FVector                                     ImpulseSourceLocation;                                    // 0x0058(0x000C) (Edit, Const)
	float                                              PhysicsActorLifeTime;                                     // 0x0064(0x0004) (Edit, Const)
	float                                              MinRelevantDistance;                                      // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bRemoveInstanceData : 1;                                  // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ConvertInstanceDataIntoPhysicsActor");
		return ptr;
	}


	void PublishBehaviorOutput(const struct FBehaviorKernelInfo& KernelInfo, class AKActor* SpawnedPhysicsActor);
	void RemoveInstanceDataComponent(class UObject* InstanceDataObject, class AActor* InstanceDataOwner);
	class AKActor* ConvertInstanceDataToPhysicsActor(class UActorComponent* InstanceDataComponent);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DecrementObjective
// 0x0004 (0x004C - 0x0050)
class UBehavior_DecrementObjective : public UBehaviorBase
{
public:
	class UMissionObjectiveDefinition*                 ObjectiveToDecrement;                                     // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DecrementObjective");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_Explode
// 0x00CC (0x004C - 0x0118)
class UBehavior_Explode : public UBehaviorBase
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                                   // 0x004C(0x0004) (Const, Native, NoExport)
	class UClass*                                      DamageSource;                                             // 0x0050(0x0004) (Edit, Const)
	struct FAttributeInitializationData                DamageRadiusFormula;                                      // 0x0054(0x0010) (Edit, Const)
	struct FAttributeInitializationData                DamageFormula;                                            // 0x0064(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MomentumFormula;                                          // 0x0074(0x0010) (Edit, Const)
	class UExplosionDefinition*                        Definition;                                               // 0x0084(0x0004) (Edit, Const)
	unsigned long                                      bReplicate : 1;                                           // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      bNoSound : 1;                                             // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      bDisableRadiusDamageFalloff : 1;                          // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      bSkipTraceTest : 1;                                       // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      bCanDamageFriendlies : 1;                                 // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      bBarrelSource : 1;                                        // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      bPlantSource : 1;                                         // 0x0088(0x0004) (Edit, Const)
	struct FVector                                     LocationOffset;                                           // 0x008C(0x000C) (Edit, Const)
	struct FName                                       SocketName;                                               // 0x0098(0x0008) (Edit, Const)
	struct FBehaviorContextData                        DamageContext;                                            // 0x00A0(0x0010) (Edit, Const)
	struct FVector                                     HitNormal;                                                // 0x00B0(0x000C) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectDamage;                                       // 0x00BC(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectChance;                                       // 0x00CC(0x0010) (Edit, Const)
	struct FBehaviorContextData                        OverrideContext;                                          // 0x00DC(0x0010) (Edit, Const)
	struct FName                                       OverrideName;                                             // 0x00EC(0x0008) (Edit, Const)
	struct FBehaviorContextData                        HitContext;                                               // 0x00F4(0x0010) (Edit, Const)
	float                                              BarrelSourceTime;                                         // 0x0104(0x0004) (Edit, Const)
	float                                              PlantSourceTime;                                          // 0x0108(0x0004) (Edit, Const)
	float                                              InstigatorSelfDamageScale;                                // 0x010C(0x0004) (Edit, Const)
	class AActor*                                      OverrideActor;                                            // 0x0110(0x0004) (Transient)
	class AActor*                                      SelfActor;                                                // 0x0114(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_Explode");
		return ptr;
	}


	void SetInstigatorOverride(class UObject* Override);
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	float GetStatusEffectBaseChanceModifier(class UObject* ObjContext);
	float GetStatusEffectChanceModifier(class UObject* ObjContext);
	float GetStatusEffectBaseDamage(class UObject* ObjContext);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_FailMission
// 0x0000 (0x004C - 0x004C)
class UBehavior_FailMission : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_FailMission");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GFxMovieRegister
// 0x0014 (0x004C - 0x0060)
class UBehavior_GFxMovieRegister : public UBehaviorBase
{
public:
	class UGFxMovieDefinition*                         MovieDefinition;                                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bUnregister : 1;                                          // 0x0050(0x0004) (Edit)
	struct FName                                       MeshComponentInstanceDataName;                            // 0x0054(0x0008) (Edit)
	class UGFxMovieDefinition*                         RegisteredDefinition;                                     // 0x005C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GFxMovieRegister");
		return ptr;
	}


	class AWillowPlayerController* ResolveController(class UObject* Obj);
	void RegisterMovie(class UObject* SelfObject);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
	void RemoveFromroot(class UObject* Obj);
	void AddToRoot(class UObject* Obj);
};


// Class WillowGame.Behavior_GiveChallengeToPlayer
// 0x0014 (0x004C - 0x0060)
class UBehavior_GiveChallengeToPlayer : public UBehaviorBase
{
public:
	class UChallengeDefinition*                        Challenge;                                                // 0x004C(0x0004) (Const)
	TArray<class UChallengeDefinition*>                Challenges;                                               // 0x0050(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bGiveToAllPlayers : 1;                                    // 0x005C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GiveChallengeToPlayer");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_IntMath
// 0x0009 (0x004C - 0x0055)
class UBehavior_IntMath : public UBehaviorBase
{
public:
	int                                                A;                                                        // 0x004C(0x0004) (Edit)
	int                                                B;                                                        // 0x0050(0x0004) (Edit)
	unsigned char                                      Operation;                                                // 0x0054(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_IntMath");
		return ptr;
	}


	void PublishBehaviorOutput(int Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_IntSwitchRange
// 0x000C (0x004C - 0x0058)
class UBehavior_IntSwitchRange : public UBehaviorBase
{
public:
	int                                                CheckValue;                                               // 0x004C(0x0004) (Edit)
	int                                                RangeMin;                                                 // 0x0050(0x0004) (Edit)
	int                                                RangeMax;                                                 // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_IntSwitchRange");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_MatchTransform
// 0x0018 (0x004C - 0x0064)
class UBehavior_MatchTransform : public UBehaviorBase
{
public:
	struct FName                                       AttachmentName;                                           // 0x004C(0x0008) (Edit, Const)
	struct FBehaviorContextData                        Source;                                                   // 0x0054(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_MatchTransform");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyOffsets(class AActor* DestOwner, class UPrimitiveComponent* DestComponent, const struct FVector& SourceWorldLoc, const struct FRotator& SourceWorldRot);
};


// Class WillowGame.Behavior_MeleeAttack
// 0x0004 (0x004C - 0x0050)
class UBehavior_MeleeAttack : public UBehaviorBase
{
public:
	class UMeleeDefinition*                            MeleeDefinition;                                          // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_MeleeAttack");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_MissionRemoteEvent
// 0x0008 (0x004C - 0x0054)
class UBehavior_MissionRemoteEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                                // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_MissionRemoteEvent");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RandomBranch
// 0x000C (0x004C - 0x0058)
class UBehavior_RandomBranch : public UBehaviorBase
{
public:
	TArray<float>                                      Conditions;                                               // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RandomBranch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_Switch
// 0x0004 (0x0058 - 0x005C)
class UBehavior_Switch : public UBehavior_RandomBranch
{
public:
	float                                              CheckValue;                                               // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_Switch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RandomlySelectBehaviors
// 0x0020 (0x004C - 0x006C)
class UBehavior_RandomlySelectBehaviors : public UBehaviorBase
{
public:
	TArray<struct FBehaviorsSelectionData>             Possibilities;                                            // 0x004C(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bUseWeightContext : 1;                                    // 0x0058(0x0004) (Edit, Const)
	struct FBehaviorContextData                        WeightContext;                                            // 0x005C(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RandomlySelectBehaviors");
		return ptr;
	}


	void ApplyBehavior(class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
	void SelectAndRunWeightedBehaviors(class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData);
};


// Class WillowGame.Behavior_RemoteCustomEvent
// 0x0040 (0x004C - 0x008C)
class UBehavior_RemoteCustomEvent : public UBehaviorBase
{
public:
	class UObject*                                     SequenceProvider;                                         // 0x004C(0x0004) (Edit, Const)
	struct FNameBasedObjectPath                        ProviderDefinitionPathName;                               // 0x0050(0x0034) (Const)
	struct FName                                       CustomEventName;                                          // 0x0084(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RemoteCustomEvent");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ScreenParticle
// 0x0074 (0x004C - 0x00C0)
class UBehavior_ScreenParticle : public UBehaviorBase
{
public:
	struct FScreenParticleInitParams                   Parameters;                                               // 0x004C(0x0054) (Edit, Const, NeedCtorLink)
	unsigned char                                      Action;                                                   // 0x00A0(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	TArray<struct FScreenParticleModifier>             ScreenParticleModifiers;                                  // 0x00A4(0x000C) (Const, NeedCtorLink, Deprecated)
	class UMaterialInterface*                          MaterialInterface;                                        // 0x00B0(0x0004) (Const, Deprecated)
	struct FName                                       MatParamName;                                             // 0x00B4(0x0008) (Const, Deprecated)
	class UParticleSystem*                             ParticleSystem;                                           // 0x00BC(0x0004) (Const, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ScreenParticle");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetShieldDamageResistanceType
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetShieldDamageResistanceType : public UBehaviorBase
{
public:
	class UWillowDamageTypeDefinition*                 DamageResistanceType;                                     // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetShieldDamageResistanceType");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetShieldTriggeredState
// 0x0000 (0x004C - 0x004C)
class UBehavior_SetShieldTriggeredState : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetShieldTriggeredState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SimpleMath
// 0x0009 (0x004C - 0x0055)
class UBehavior_SimpleMath : public UBehaviorBase
{
public:
	float                                              A;                                                        // 0x004C(0x0004) (Edit)
	float                                              B;                                                        // 0x0050(0x0004) (Edit)
	unsigned char                                      Operation;                                                // 0x0054(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SimpleMath");
		return ptr;
	}


	void PublishBehaviorOutput(float Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnFirstPersonParticleSystem
// 0x0044 (0x004C - 0x0090)
class UBehavior_SpawnFirstPersonParticleSystem : public UBehaviorBase
{
public:
	unsigned long                                      bSaveParticleReference : 1;                               // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bDeleteByOwner : 1;                                       // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0050(0x0010) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x0060(0x0008) (Edit, Const)
	class UParticleSystem*                             ParticleEffect;                                           // 0x0068(0x0004) (Edit, Const)
	struct FName                                       AttachmentPointName;                                      // 0x006C(0x0008) (Edit, Const)
	struct FVector                                     RelativeLocation;                                         // 0x0074(0x000C) (Edit, Const)
	struct FRotator                                    RelativeRotation;                                         // 0x0080(0x000C) (Edit, Const)
	float                                              DrawScale;                                                // 0x008C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnFirstPersonParticleSystem");
		return ptr;
	}


	void PublishBehaviorOutput(class UParticleSystemComponent* NewComponent, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnFromPopulationSystem
// 0x0060 (0x004C - 0x00AC)
class UBehavior_SpawnFromPopulationSystem : public UBehaviorBase
{
public:
	class UPopulationFactory*                          SpawnFactory;                                             // 0x004C(0x0004) (Edit, Const, EditInline)
	unsigned long                                      bZeroPitchAndRollOnSpawnedActor : 1;                      // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bRelativeSpawnOffset : 1;                                 // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bSpawnOnGround : 1;                                       // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bInheritAttachment : 1;                                   // 0x0050(0x0004) (Const)
	unsigned long                                      bInheritAttachmentBase : 1;                               // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bSaveActorReference : 1;                                  // 0x0050(0x0004) (Edit, Const)
	struct FBehaviorContextData                        GameStageContext;                                         // 0x0054(0x0010) (Edit, Const)
	struct FVector                                     SpawnLocOffset;                                           // 0x0064(0x000C) (Edit, Const)
	unsigned char                                      InheritLocationRotationFrom;                              // 0x0070(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FRotator                                    SpawnRotationOffset;                                      // 0x0074(0x000C) (Edit, Const)
	class AActor*                                      MyOwner;                                                  // 0x0080(0x0004) (Edit, Const)
	struct FVector                                     StartingVelocity;                                         // 0x0084(0x000C) (Edit, Const)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0090(0x0010) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x00A0(0x0008) (Edit, Const)
	int                                                FloorTestZDist;                                           // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnFromPopulationSystem");
		return ptr;
	}


	void PublishBehaviorOutput(class AActor* SpawnedActor, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnParticleSystem
// 0x0045 (0x004C - 0x0091)
class UBehavior_SpawnParticleSystem : public UBehaviorBase
{
public:
	unsigned long                                      bSaveParticleReference : 1;                               // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bUseClientPrediction : 1;                                 // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bDeleteByOwner : 1;                                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAttachToContext : 1;                                     // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bSetOwnerFromContext : 1;                                 // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bReplicateEmitter : 1;                                    // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bHideEffectFromOwner : 1;                                 // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bUseOwnerSeeFlags : 1;                                    // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0050(0x0010) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x0060(0x0008) (Edit, Const)
	class UParticleSystem*                             ParticleEffect;                                           // 0x0068(0x0004) (Edit, Const)
	struct FName                                       AttachmentPointName;                                      // 0x006C(0x0008) (Edit, Const)
	struct FVector                                     RelativeLocation;                                         // 0x0074(0x000C) (Edit, Const)
	struct FRotator                                    RelativeRotation;                                         // 0x0080(0x000C) (Edit, Const)
	float                                              DrawScale;                                                // 0x008C(0x0004) (Edit, Const)
	unsigned char                                      SpawnDirection;                                           // 0x0090(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnParticleSystem");
		return ptr;
	}


	void PublishBehaviorOutput(class AEmitter* SpawnedEmitter, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
	class UClass* GetEmitterClass();
};


// Class WillowGame.Behavior_SpawnProjectile
// 0x00C0 (0x004C - 0x010C)
class UBehavior_SpawnProjectile : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        OwnerContext;                                             // 0x004C(0x0010) (Edit, Const)
	unsigned long                                      bSetOwnerFromOwnerContext : 1;                            // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSaveProjectileReference : 1;                             // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bTransformRelativeLocationBySpawnDirection : 1;           // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      InheritParentVelocity : 1;                                // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bAttachToContext : 1;                                     // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bInflictRadiusDamageOnOwner : 1;                          // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSpawnEvenDistribution : 1;                               // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bUseSocketAsParentForSpawnOrientation : 1;                // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSpawnFromContextViewLocation : 1;                        // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSetLikenessFromContext : 1;                              // 0x005C(0x0004) (Edit, Const)
	struct FName                                       AttachmentPointName;                                      // 0x0060(0x0008) (Const, Deprecated)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0068(0x0010) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x0078(0x0008) (Edit, Const)
	struct FAttributeInitializationData                NumProjectilesFormula;                                    // 0x0080(0x0010) (Edit, Const)
	int                                                NumProjectiles;                                           // 0x0090(0x0004) (Const, Deprecated)
	unsigned char                                      SpawnDirection;                                           // 0x0094(0x0001) (Edit, Const)
	unsigned char                                      SelectionBehavior;                                        // 0x0095(0x0001) (Edit)
	unsigned char                                      SpawnDistributionType;                                    // 0x0096(0x0001) (Edit, Const)
	unsigned char                                      FireSocketSelection;                                      // 0x0097(0x0001) (Edit, Const)
	class UProjectileDefinition*                       ProjectileDefinition;                                     // 0x0098(0x0004) (Edit, Const)
	struct FVector                                     RelativeLocation;                                         // 0x009C(0x000C) (Edit, Const)
	float                                              DirectionConeMinSize;                                     // 0x00A8(0x0004) (Edit, Const)
	float                                              DirectionConeSize;                                        // 0x00AC(0x0004) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             ChildProjectileBaseValues;                                // 0x00B0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct UBehavior_SpawnProjectile_FProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                               // 0x00BC(0x000C) (Edit, Const, NeedCtorLink)
	struct FVector                                     SpawnDirectionOverride;                                   // 0x00C8(0x000C) (Edit, Const)
	class UObject*                                     SpawnMaterialOverride;                                    // 0x00D4(0x0004) (Edit)
	TArray<struct FName>                               FireLocationSocketNames;                                  // 0x00D8(0x000C) (Edit, Const, NeedCtorLink)
	float                                              TimeBetweenShots;                                         // 0x00E4(0x0004) (Edit, Const)
	float                                              DrawScaleOverride;                                        // 0x00E8(0x0004) (Edit, Const)
	struct FBehaviorContextData                        GearLikenessContext;                                      // 0x00EC(0x0010) (Edit, Const)
	TArray<struct FName>                               FireLocationSocketsRemaining;                             // 0x00FC(0x000C) (Transient, NeedCtorLink)
	int                                                NumShotsFired;                                            // 0x0108(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnProjectile");
		return ptr;
	}


	void PublishBehaviorOutput(class AWillowProjectile* SpawnedProjectile, struct FBehaviorKernelInfo* KernelInfo);
	static struct FVector StaticGetWorldBodyViewLocation(const FScriptInterface& WorldBodyInterface);
	static struct FVector StaticGetChildProjectilePosition(const FScriptInterface& WorldBodyInterface, const struct FName& InAttachmentPointName);
	static struct FVector StaticGetChildProjectileDirection(const struct FName& InAttachmentPointName, const FScriptInterface& WorldBodyInterface, class UProjectileDefinition* InProjectileDefinition, unsigned char InSpawnDirection, bool InbUseSocketAsParentForSpawnOrientation);
	void SpawnChildProjectiles(class UObject* ContextObject, const FScriptInterface& WorldBodyInterface, const FScriptInterface& SpawnActorInterface, class AWillowInventory* GearLikenessActor, const FScriptInterface& SaveReferenceContext, int EffectiveNumProjectiles, const struct FBehaviorKernelInfo& KernelInfo, int iStart, int iMax);
	struct FVector CalculateConeVector(float Fraction, const struct FVector& Origin, const struct FVector& Direction, float AngleWidth, float AngleHeight);
	void PerformMaterialOverride(class AWillowProjectile* Projectile);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_StartMissionTimer
// 0x0000 (0x004C - 0x004C)
class UBehavior_StartMissionTimer : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_StartMissionTimer");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_StopMissionTimer
// 0x0000 (0x004C - 0x004C)
class UBehavior_StopMissionTimer : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_StopMissionTimer");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UpdateCollision
// 0x0004 (0x004C - 0x0050)
class UBehavior_UpdateCollision : public UBehaviorBase
{
public:
	unsigned long                                      bResetTouching : 1;                                       // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UpdateCollision");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UpdateMissionObjective
// 0x0004 (0x004C - 0x0050)
class UBehavior_UpdateMissionObjective : public UBehaviorBase
{
public:
	class UMissionObjectiveDefinition*                 MissionObjective;                                         // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UpdateMissionObjective");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_VectorMath
// 0x0019 (0x004C - 0x0065)
class UBehavior_VectorMath : public UBehaviorBase
{
public:
	struct FVector                                     A;                                                        // 0x004C(0x000C) (Edit)
	struct FVector                                     B;                                                        // 0x0058(0x000C) (Edit)
	unsigned char                                      Operation;                                                // 0x0064(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_VectorMath");
		return ptr;
	}


	void PublishBehaviorOutput(float Length, const struct FVector& VectorResult, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_VectorToLocalSpace
// 0x0014 (0x004C - 0x0060)
class UBehavior_VectorToLocalSpace : public UBehaviorBase
{
public:
	struct FVector                                     WorldSpaceVector;                                         // 0x004C(0x000C) (Edit)
	struct FName                                       AttachmentPointName;                                      // 0x0058(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_VectorToLocalSpace");
		return ptr;
	}


	void PublishBehaviorOutput(const struct FVector& VectorResult, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.BehaviorSequenceEnableByMission
// 0x0027 (0x0041 - 0x0068)
class UBehaviorSequenceEnableByMission : public UBehaviorSequenceCustomEnableCondition
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FPointer                                    VfTable_IIMission;                                        // 0x0044(0x0004) (Const, Native, NoExport)
	class UMissionDefinition*                          LinkedMission;                                            // 0x0048(0x0004) (Edit)
	struct FMissionStateSelectionData                  MissionStatesToLinkTo;                                    // 0x004C(0x0004) (Edit)
	unsigned long                                      bIsObjectiveSpecific : 1;                                 // 0x0050(0x0004) (Edit)
	unsigned long                                      bInstanced : 1;                                           // 0x0050(0x0004) (Edit)
	unsigned long                                      bCreateWaypoint : 1;                                      // 0x0050(0x0004) (Edit)
	class UMissionObjectiveDefinition*                 LinkedObjective;                                          // 0x0054(0x0004) (Edit)
	struct FMissionObjectiveStateSelectionData         ObjectiveStatesToLinkTo;                                  // 0x0058(0x0004) (Edit)
	TArray<class UMissionObjectiveSetDefinition*>      ObjectiveSetRestrictions;                                 // 0x005C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BehaviorSequenceEnableByMission");
		return ptr;
	}


	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
};


// Class WillowGame.BehaviorVolume
// 0x007C (0x0204 - 0x0280)
class ABehaviorVolume : public APhysicsVolume
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x0204(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x0208(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x020C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;                      // 0x0210(0x0004) (Const, Native, NoExport)
	class UBehaviorVolumeDefinition*                   Definition;                                               // 0x0214(0x0004) (Edit, Const)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0218(0x0004)
	float                                              RadiusForSearch;                                          // 0x021C(0x0004) (Transient)
	TArray<class AActor*>                              TouchingActors;                                           // 0x0220(0x000C) (Transient, NeedCtorLink)
	float                                              TickRate;                                                 // 0x022C(0x0004) (Const)
	float                                              NextTickTime;                                             // 0x0230(0x0004) (Transient)
	int                                                VehicleCrewNdx;                                           // 0x0234(0x0004) (Transient)
	struct FInstanceDataSet                            InstanceDataState;                                        // 0x0238(0x000C) (Component, NeedCtorLink)
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                              // 0x0244(0x0010) (Net, Transient)
	unsigned long                                      bEnable : 1;                                              // 0x0254(0x0004) (Edit, Net, RepNotify)
	class URegionDefinition*                           BalanceToRegionDef;                                       // 0x0258(0x0004) (Edit, Const)
	int                                                ExpLevel;                                                 // 0x025C(0x0004) (Net)
	int                                                GameStage;                                                // 0x0260(0x0004) (Net)
	int                                                AwesomeLevel;                                             // 0x0264(0x0004) (Net)
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x0268(0x000C) (Edit, NeedCtorLink)
	TArray<class UInstancedDesignerAttribute*>         DesignerAttributes;                                       // 0x0274(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BehaviorVolume");
		return ptr;
	}


	class UInstancedDesignerAttribute* GetInstancedDesignerAttribute(class UAttributeDefinition* InDefinition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	class UInstancedDesignerAttribute* CreateDesignerAttribute(class UDesignerAttributeDefinition* InDefinition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	void InitializeAttributeStartingValues();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStage();
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	void ClearTouchList();
	void HandleDisabled();
	void OnToggle(class USeqAct_Toggle* Action);
	bool CanSplashNativeWrapper(class AActor* Other);
	bool IsWaterVolume();
	void BehaviorVolumeImpact(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal, unsigned char Action);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* inDamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	void TraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int TraceFlags, float TouchTime);
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool StopsProjectile(class AProjectile* P);
	void PostBeginPlay();
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.BehaviorVolumeDefinition
// 0x0020 (0x003C - 0x005C)
class UBehaviorVolumeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0040(0x0004) (Const, Native, NoExport)
	class UWillowImpactDefinition*                     DefaultTouchImpact;                                       // 0x0044(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     DefaultUntouchImpact;                                     // 0x0048(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     DefaultTraceImpact;                                       // 0x004C(0x0004) (Edit, Const)
	class UPhysicalMaterial*                           PhysicalMaterial;                                         // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bIsWater : 1;                                             // 0x0054(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreTracesThatStartInsideVolume : 1;                   // 0x0054(0x0004) (Edit, Const)
	unsigned long                                      bCanTakeRadiusDamage : 1;                                 // 0x0054(0x0004) (Edit, Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BehaviorVolumeDefinition");
		return ptr;
	}


	void OnShoot(const struct FBehaviorConsumerHandle& ConsumerHandle, class UObject* Instigator, class UObject* ContextForHitLocation, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnExit(const struct FBehaviorConsumerHandle& ConsumerHandle, class UObject* Instigator);
	void OnEntry(const struct FBehaviorConsumerHandle& ConsumerHandle, class UObject* Instigator);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.BlackMarketDefinition
// 0x002C (0x003C - 0x0068)
class UBlackMarketDefinition : public UGBXDefinition
{
public:
	struct FString                                     BlackMarketName;                                          // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UBlackMarketUpgradeDefinition*               ItemOfTheDay;                                             // 0x0048(0x0004) (Edit)
	TArray<class UBlackMarketUpgradeDefinition*>       GeneralStock;                                             // 0x004C(0x000C) (Edit, NeedCtorLink)
	int                                                MaxUpgradeLevel;                                          // 0x0058(0x0004) (Edit)
	TArray<struct FBlackMarketUpgradeLevelData>        MaxUpgradeLevelOverrides;                                 // 0x005C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BlackMarketDefinition");
		return ptr;
	}


	bool CurrentLevelIsBelowMaxForPlayer(int CurrentLevel, class UBlackMarketUpgradeDefinition* UpgradeDefinition, class AWillowPlayerController* WPC);
	bool CurrentLevelIsBelowMaxLevel(int CurrentLevel, class UBlackMarketUpgradeDefinition* UpgradeDefinition);
};


// Class WillowGame.BlackMarketUpgradeAttributeValueResolver
// 0x0004 (0x003C - 0x0040)
class UBlackMarketUpgradeAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UBlackMarketUpgradeDefinition*               AssociatedBlackMarketUpgrade;                             // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BlackMarketUpgradeAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.BlackMarketUpgradeDefinition
// 0x0024 (0x003C - 0x0060)
class UBlackMarketUpgradeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	struct FString                                     UpgradeName;                                              // 0x0040(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UInventoryBalanceDefinition*                 BalanceDefinition;                                        // 0x004C(0x0004) (Edit, Const)
	int                                                CachedUpgradeIndex;                                       // 0x0050(0x0004) (Transient)
	class UBehaviorProviderDefinition*                 BehaviorProvider;                                         // 0x0054(0x0004)
	struct FName                                       ZippyFrameOverride;                                       // 0x0058(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BlackMarketUpgradeDefinition");
		return ptr;
	}


	void UpdateCachedUpgradeIndex();
	void OnPurchased(class UObject* ForPlayer, int NewUpgradeLevel, struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.BlackMarketUpgradeManager
// 0x0008 (0x0188 - 0x0190)
class ABlackMarketUpgradeManager : public AActor
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x0188(0x0004) (Const, Native, NoExport)
	struct FBehaviorConsumerHandle                     BehaviorConsumerHandle;                                   // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BlackMarketUpgradeManager");
		return ptr;
	}


	void InitAllBlackMarketUpgrades();
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
};


// Class WillowGame.WillowPhysicalMaterialProperty
// 0x006C (0x003C - 0x00A8)
class UWillowPhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	class UAkSwitch*                                   MaterialAkSwitch;                                         // 0x003C(0x0004) (Edit, Const)
	unsigned char                                      DamageSurfaceType;                                        // 0x0040(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	TArray<struct FImpactResponseData>                 ImpactResponses;                                          // 0x0044(0x000C) (Edit, Const, NeedCtorLink)
	struct FImpactResponseParameters                   DefaultResponseParameters;                                // 0x0050(0x004C) (Const, Transient, EditConst, NeedCtorLink)
	struct FWheelSlipModifierData                      WheelSlipModifiers;                                       // 0x009C(0x0008) (Edit, Const)
	class UParticleSystem*                             ParticleSystemTemplate;                                   // 0x00A4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPhysicalMaterialProperty");
		return ptr;
	}


	static void ApplyParametersToMaterialInstance(class UMaterialInstance* Material, struct FImpactResponseParameters* ResponseParameters);
	static void AttachParticleSystemComponentToActor(class UParticleSystemComponent* PSC, class AActor* HitActor, const struct FName& AttachmentPointName);
	static void AttachEmitterToActor(class AEmitter* EmitterActor, class AActor* HitActor, const struct FName& AttachmentPointName);
	static void ApplyParametersToParticleSystemComponent(class UParticleSystemComponent* PSC, struct FImpactResponseParameters* ResponseParameters);
	static void ApplyParametersToEmitter(class AEmitter* EmitterActor, struct FImpactResponseParameters* ResponseParameters);
	void PlayImpactEffect(const struct FImpactResponseEffect& Effect, class AActor* Instigator, class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo, unsigned char Usage, bool bPlaySound, bool bReplicateEffect, bool bIsbEffectEligibleForCensoring, class UParticleSystem* DefaultParticleTemplate, class UParticleSystem* CensoredParticleTemplateAlternative, class UAkSwitch* MaterialSwitch, class UAkEvent* ImpactAkEvent, struct FImpactResponseParameters* ResponseParameters);
	class UAkSwitch* GetPhysicalMaterialSwitch(struct FTraceHitInfo* HitInfo);
	static void StaticPlayImpactEffect(const struct FImpactResponseEffect& Effect, class AActor* Instigator, class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo, unsigned char Usage, bool bPlaySound, bool bReplicateEffect, struct FImpactResponseParameters* ResponseParameters);
	static void PlayImpactEffectSound(class AActor* Instigator, class UAkSwitch* Switch, class UAkEvent* Event, const struct FVector& HitLocation, unsigned char Usage, bool bPlaySound, bool bReplicateEffect, struct FImpactResponseParameters* ResponseParameters);
	int FindResponseIndex(class UWillowImpactDefinition* ImpactType);
	static void StaticHitInfoImpact(class UWillowImpactDefinition* ImpactType, class UPhysicalMaterial* PhysicalMaterial, class AActor* Instigator, class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo, bool bPlaySound, bool bReplicateEffect, struct FImpactResponseParameters* ResponseParameters);
	static void StaticRigidBodyImpact(class UWillowImpactDefinition* ImpactType, class AActor* Instigator, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, bool bReplicateEffect, struct FCollisionImpactData* RigidCollisionData, struct FImpactResponseParameters* ResponseParameters);
	static void StaticTraceImpact(class UWillowImpactDefinition* ImpactType, class AActor* Instigator, const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bPlaySound, bool bReplicateEffect, bool bPlayOnNoHit, struct FImpactResponseParameters* ResponseParameters);
	static bool IsImpactDebugEnabled();
	static void ToggleImpactDebug();
};


// Class WillowGame.BodyHitRegionDefinition
// 0x01A4 (0x003C - 0x01E0)
class UBodyHitRegionDefinition : public UBaseHitRegionDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x0040(0x0004) (Const, Native, NoExport)
	struct FName                                       HitRegionName;                                            // 0x0044(0x0008) (Edit, Const)
	TArray<struct FName>                               RegionBoneNames;                                          // 0x004C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UBodyHitRegionDefinition*>            AdjacentHitRegions;                                       // 0x0058(0x000C) (Edit, Const, NeedCtorLink)
	struct FName                                       OverrideDOTSocket;                                        // 0x0064(0x0008) (Edit, Const)
	unsigned long                                      bCriticalHit : 1;                                         // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bAllowRadiusDamage : 1;                                   // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bUseIndependentHealth : 1;                                // 0x006C(0x0004) (Const)
	unsigned long                                      bShowDamageNumbers : 1;                                   // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bScaleHealthWithAttribute : 1;                            // 0x006C(0x0004) (Const)
	unsigned long                                      bAllowRejuvenationFromHeals : 1;                          // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bOnlyReflectToAttacker : 1;                               // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bReflectProjectiles : 1;                                  // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bRicochetIfReflectionChanceFails : 1;                     // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bTrackDamage : 1;                                         // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bMigratedUseOwnerHealth : 1;                              // 0x006C(0x0004)
	unsigned long                                      bWasUseOwnerHealthOne : 1;                                // 0x006C(0x0004)
	unsigned long                                      bPlayImpactWithNoDamage : 1;                              // 0x006C(0x0004) (Edit, Const)
	float                                              OwnerHealthPercent;                                       // 0x0070(0x0004) (Edit, Const)
	float                                              PercentOfMaxHealthLimit;                                  // 0x0074(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       RegionDeathBehaviors;                                     // 0x0078(0x000C) (Edit, Const, EditConst, NeedCtorLink, EditInline)
	TArray<struct FDamageReactionData>                 DamageTriggeredReactions;                                 // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FDamageReactionData>                 HealingTriggeredReactions;                                // 0x0090(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UDamageTypeDefinition*>               AllowedDamageTypes;                                       // 0x009C(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                BulletReflectionOffSelfChance;                            // 0x00A8(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BulletReflectedOffSelfDamageScale;                        // 0x00B8(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BulletReflectedOffSelfDamageTakenScale;                   // 0x00C8(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ReflectionAccuracyModifier;                               // 0x00D8(0x0010) (Edit, Const)
	struct FAttributeInitializationData                RicochetAccuracyModifier;                                 // 0x00E8(0x0010) (Edit, Const)
	class UPhysicalMaterial*                           PhysicalMaterial;                                         // 0x00F8(0x0004) (Edit, Const)
	struct FImpactResponseEffect                       DefaultImpactResponse;                                    // 0x00FC(0x0094) (Edit, Const, NeedCtorLink)
	unsigned char                                      DefaultDamageSurfaceType;                                 // 0x0190(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	class UWillowImpactDefinition*                     BloodImpact;                                              // 0x0194(0x0004) (Edit, Const)
	float                                              BloodSplatterMinDistance;                                 // 0x0198(0x0004) (Edit, Const)
	float                                              BloodSplatterMaxDistance;                                 // 0x019C(0x0004) (Edit, Const)
	float                                              BloodSplatterDirectionRandomness;                         // 0x01A0(0x0004) (Edit, Const)
	TArray<struct FName>                               StatusEffectSockets;                                      // 0x01A4(0x000C) (Edit, Const, NeedCtorLink)
	class UParticleSystem*                             ParticleSystemTemplate;                                   // 0x01B0(0x0004) (Edit, Const)
	class UStatusEffectDefinition*                     StatusEffectResistanceOverride;                           // 0x01B4(0x0004) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectBaseChanceOverride;                           // 0x01B8(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectDamageModifierOverride;                       // 0x01C8(0x0010) (Edit, Const)
	class UBodyClassDeathDefinition*                   OverrideDeathDef;                                         // 0x01D8(0x0004) (Edit, Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x01DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BodyHitRegionDefinition");
		return ptr;
	}


	void OnHealingReaction(const struct FName& SpecializedEventName, class AController* DamageInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnRegionRejuvenate(unsigned char EventOutput, class AController* KilledBy, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnReflectedProjectile(const struct FVector& ReflectedDirection, const struct FVector& HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnRegionGore(const struct FName& SpecializedEventName, class AController* GoreInstigator, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamageReaction(const struct FName& SpecializedEventName, class AController* DamageInstigator, const struct FVector& HitLocation, const struct FVector& HitMomentum, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnRegionDeath(unsigned char EventOutput, class AController* KilledBy, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
	unsigned char GetDamageSurfaceType();
	float GetDamageModifierPercentForImpact(class UWillowImpactDefinition* ImpactType);
	struct FImpactResponseEffect GetResponseForImpact(class UWillowImpactDefinition* ImpactType);
};


// Class WillowGame.BodyClassDeathDefinition
// 0x006C (0x003C - 0x00A8)
class UBodyClassDeathDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<struct FTechDeathData>                      TechDeaths;                                               // 0x0040(0x000C) (Edit, Const, NeedCtorLink)
	class USpecialMoveDefinition*                      NonRagdollDeathSpecialMove;                               // 0x004C(0x0004) (Edit, Const)
	class UExpressionEvaluator*                        CanPlayDeathAnimationIf;                                  // 0x0050(0x0004) (Edit, Const, EditInline)
	class UWillowAnimDefinition*                       InjuredSpecialMove;                                       // 0x0054(0x0004) (Edit, Const)
	float                                              DissolveBodyDelayBeforeDestroy;                           // 0x0058(0x0004) (Edit, Const)
	TArray<struct FGoreTriggerData>                    GibTriggers;                                              // 0x005C(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      KeepCorpseAfterDeath : 1;                                 // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bDestroyOnDeath : 1;                                      // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bTearOffAfterDeath : 1;                                   // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bCensorGibs : 1;                                          // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bUseCodeDrivenBodyDissolve : 1;                           // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bDeathAnimRagdoll : 1;                                    // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bMotorizeRagdollOnNormalDeath : 1;                        // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bMotorizeRagdollOnTechDeath : 1;                          // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bDefaultRagdollContactNotification : 1;                   // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bCreateSpringsForAllBones : 1;                            // 0x0068(0x0004) (Edit, Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x006C(0x0004) (Edit)
	float                                              DefaultBodyDissolveTime;                                  // 0x0070(0x0004) (Edit, Const)
	float                                              SkipRagdollDissolveAmount;                                // 0x0074(0x0004) (Edit, Const)
	float                                              BlendToRagdollTime;                                       // 0x0078(0x0004) (Edit, Const)
	float                                              RagdollLinearSpring;                                      // 0x007C(0x0004) (Edit, Const)
	float                                              RagdollAngularSpring;                                     // 0x0080(0x0004) (Edit, Const)
	float                                              RagdollMotorSpring;                                       // 0x0084(0x0004) (Edit, Const)
	float                                              RagdollMotorDamping;                                      // 0x0088(0x0004) (Edit, Const)
	TArray<struct FName>                               RagdollContactReportBones;                                // 0x008C(0x000C) (Edit, Const, NeedCtorLink)
	float                                              RagdollContactReportThreshold;                            // 0x0098(0x0004) (Edit, Const)
	TArray<struct FName>                               RagdollSpringBones;                                       // 0x009C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BodyClassDeathDefinition");
		return ptr;
	}


	void OnTechDeath(const struct FName& SpecializedEventName, class AController* Killer, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnBodyDissolve(class AController* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDeathNonGib(class AController* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDeathGib(class AController* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilledBy(class AController* Killer, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPlayDeathPizazz(struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.BodyClassDefinition
// 0x03E4 (0x003C - 0x0420)
class UBodyClassDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;                          // 0x003C(0x0004) (Const, Native, NoExport)
	struct FName                                       HeadLookAtName;                                           // 0x0040(0x0008) (Edit)
	unsigned long                                      bLeftHandIKDisabled : 1;                                  // 0x0048(0x0004) (Edit)
	unsigned long                                      bUseMeshForCollision : 1;                                 // 0x0048(0x0004) (Edit)
	unsigned long                                      IgnoreMomentumTransfer : 1;                               // 0x0048(0x0004) (Edit)
	unsigned long                                      UseRootMotion : 1;                                        // 0x0048(0x0004) (Edit)
	unsigned long                                      UseRootRotation : 1;                                      // 0x0048(0x0004) (Edit)
	unsigned long                                      bAllowProjectilesToCollideWithSkeletalMesh : 1;           // 0x0048(0x0004) (Edit)
	unsigned long                                      bUpdateMeshTranslationWhenCylinderChanges : 1;            // 0x0048(0x0004) (Edit)
	unsigned long                                      bCanUpdateMeshTranslation : 1;                            // 0x0048(0x0004) (Edit)
	unsigned long                                      bUseDamageLocationParent : 1;                             // 0x0048(0x0004) (Edit)
	unsigned long                                      bShowDamageLocations : 1;                                 // 0x0048(0x0004) (Edit)
	unsigned long                                      bStaggerWhenLandingOnUnwalkableTerrain : 1;               // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bUseTurns : 1;                                            // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bUseTurnParent : 1;                                       // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bPawnIsAlwaysRelevant : 1;                                // 0x0048(0x0004) (Edit)
	unsigned long                                      bVehicleBlockingActor : 1;                                // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bUseKnockbackParent : 1;                                  // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bUseCringe : 1;                                           // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bUseCringeParent : 1;                                     // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bUseDodges : 1;                                           // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bDodgeUseParent : 1;                                      // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCanAvoidGrenades : 1;                                    // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bProvocationUseParent : 1;                                // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bNPCDialog : 1;                                           // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCanBeInjured : 1;                                        // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bInjuredUseParent : 1;                                    // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bOnlyHardFlinchWhenInjured : 1;                           // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCloaks : 1;                                              // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCloakUseParentData : 1;                                  // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCloakUseParentOptions : 1;                               // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCloakingRequiresShields : 1;                             // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCanShootWhileCloaked : 1;                                // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCloakHideInfo : 1;                                       // 0x0048(0x0004) (Const)
	unsigned long                                      bHideBodyOnCloak : 1;                                     // 0x004C(0x0004) (Const)
	unsigned long                                      bHasCloakingCapability : 1;                               // 0x004C(0x0004) (Const)
	unsigned long                                      bUseCoverParent : 1;                                      // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bUseParentStances : 1;                                    // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bDamageParent : 1;                                        // 0x004C(0x0004) (Const)
	unsigned long                                      bDisplayParentInfo : 1;                                   // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bOnlyDisplayParentInfoWhileAttached : 1;                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bKillWhenParentDies : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      HideInfoOnHUD : 1;                                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bFullyArmored : 1;                                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bHideEmptyShieldBar : 1;                                  // 0x004C(0x0004) (Edit)
	unsigned long                                      bIsPossibleHomingTarget : 1;                              // 0x004C(0x0004) (Edit)
	unsigned long                                      bUseRotationModifierBySpeed : 1;                          // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bUseSimulatedRotation : 1;                                // 0x004C(0x0004) (Edit)
	unsigned long                                      bCrawlerFloorAdjust : 1;                                  // 0x004C(0x0004) (Edit)
	unsigned long                                      bUseParentPhaselockDef : 1;                               // 0x004C(0x0004) (Edit, Const)
	class UPopulationBodyTag*                          BodyTag;                                                  // 0x0050(0x0004) (Edit)
	class USpecialMove_PhysicsJump*                    PhysicsJumpSMD;                                           // 0x0054(0x0004) (Edit)
	TArray<class UStanceTypeDefinition*>               ScrapedStances;                                           // 0x0058(0x000C) (NeedCtorLink)
	float                                              Mass;                                                     // 0x0064(0x0004) (Edit)
	float                                              CrouchHeight;                                             // 0x0068(0x0004) (Edit)
	class UBodyHitRegionDefinition*                    DefaultHitRegion;                                         // 0x006C(0x0004) (Edit, Const)
	TArray<class UBodyHitRegionDefinition*>            HitRegionList;                                            // 0x0070(0x000C) (Edit, Const, NeedCtorLink)
	float                                              DamageLocationTime;                                       // 0x007C(0x0004) (Edit)
	float                                              DamageLocationFadeTime;                                   // 0x0080(0x0004) (Edit)
	float                                              DamageLocationSize;                                       // 0x0084(0x0004) (Edit)
	class UBodyClassDeathDefinition*                   DeathDef;                                                 // 0x0088(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       CustomDeathBehaviors;                                     // 0x008C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UGearboxAnimDefinition*                      InjuredDeathAnim;                                         // 0x0098(0x0004) (Edit, Const)
	float                                              RagDollGravity;                                           // 0x009C(0x0004) (Edit, Const)
	float                                              MinimumRecognizedImpact;                                  // 0x00A0(0x0004) (Edit, Const)
	float                                              DirectImpactEffectThreshold;                              // 0x00A4(0x0004) (Edit, Const)
	float                                              SlidingImpactEffectThreshold;                             // 0x00A8(0x0004) (Edit, Const)
	float                                              ImpactEffectProbability;                                  // 0x00AC(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     RagdollImpact;                                            // 0x00B0(0x0004) (Edit, Const)
	float                                              RD_EffectsThreshold;                                      // 0x00B4(0x0004) (Edit, Const)
	float                                              RD_SlideThreshold;                                        // 0x00B8(0x0004) (Edit, Const)
	float                                              RD_ImpactThreshold;                                       // 0x00BC(0x0004) (Edit, Const)
	float                                              RD_SlideMinRepeatTime;                                    // 0x00C0(0x0004) (Edit, Const)
	float                                              RD_ImpactMinRepeatTime;                                   // 0x00C4(0x0004) (Edit, Const)
	class UExplosionDefinition*                        RD_SlideExplosion;                                        // 0x00C8(0x0004) (Edit, Const)
	float                                              RD_SlideExplosionDamageRadius;                            // 0x00CC(0x0004) (Edit, Const)
	class UExplosionDefinition*                        RD_ImpactExplosion;                                       // 0x00D0(0x0004) (Edit, Const)
	float                                              RD_ImpactExplosionDamageRadius;                           // 0x00D4(0x0004) (Edit, Const)
	float                                              RD_ImpactAkEventThreshold;                                // 0x00D8(0x0004) (Edit, Const)
	float                                              RD_ImpactAkEventMinRepeatTime;                            // 0x00DC(0x0004) (Edit, Const)
	class UAkEvent*                                    RD_ImpactAkEvent;                                         // 0x00E0(0x0004) (Edit, Const)
	TArray<struct FName>                               FootstepBones;                                            // 0x00E4(0x000C) (Edit, Const, NeedCtorLink)
	class UWillowImpactDefinition*                     FootstepImpact;                                           // 0x00F0(0x0004) (Edit, Const)
	TArray<class UWillowImpactDefinition*>             LeadInFootstepImpacts;                                    // 0x00F4(0x000C) (Edit, Const, NeedCtorLink)
	class UWillowImpactDefinition*                     HeavyFootStepImpact;                                      // 0x0100(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     JumpedImpact;                                             // 0x0104(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     LandedImpact;                                             // 0x0108(0x0004) (Edit, Const)
	float                                              UnwalkableTerrainStaggerVelocityZ;                        // 0x010C(0x0004) (Edit, Const)
	float                                              LandedMinVel;                                             // 0x0110(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     SkidImpact;                                               // 0x0114(0x0004) (Edit, Const)
	float                                              SkidCameraLurchMagnitude;                                 // 0x0118(0x0004) (Edit, Const)
	float                                              SkidCameraLurchSpeed;                                     // 0x011C(0x0004) (Edit, Const)
	class UBehaviorAliasLookupDefinition*              BehaviorAliasLookup;                                      // 0x0120(0x0004) (Edit, Const)
	int                                                ArmsMaterialIndex;                                        // 0x0124(0x0004) (Edit, Const)
	struct FName                                       ShieldEnabledParameterName;                               // 0x0128(0x0008) (Edit, Const)
	struct FName                                       ShieldColorParameterName;                                 // 0x0130(0x0008) (Edit, Const)
	class UWillowImpactDefinition*                     TouchImpactDefinition;                                    // 0x0138(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     UntouchImpactDefinition;                                  // 0x013C(0x0004) (Edit, Const)
	int                                                NumFootstepsToStop;                                       // 0x0140(0x0004) (Edit, Const)
	class UAkEvent*                                    StoppedAkEvent;                                           // 0x0144(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     HitByVehicleImpactDefinition;                             // 0x0148(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     RunOverByVehicleImpactDefinition;                         // 0x014C(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                PlayerReRezCoordinatedEffect;                             // 0x0150(0x0004) (Edit, Const)
	class UGearboxAnimDefinition*                      PlayerReRezAnim;                                          // 0x0154(0x0004) (Edit, Const)
	class UPlayerEventProviderDefinition*              PlayerEventDef;                                           // 0x0158(0x0004) (Edit, Const)
	class UTurnDefinition*                             DefaultTurns;                                             // 0x015C(0x0004) (Edit, Const)
	class UTurnDefinition*                             DefaultCrouchTurns;                                       // 0x0160(0x0004) (Edit, Const)
	class UBodyClassDefinition*                        AnimationParentBody;                                      // 0x0164(0x0004) (Edit, Const)
	class UGearboxSkeletalMeshComponent*               FirstPersonHands;                                         // 0x0168(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     PrimaryStandInOffset;                                     // 0x016C(0x000C) (Edit, Const)
	class UBodyClassDefinition*                        WeaponActionParentClass;                                  // 0x0178(0x0004) (Edit, Const)
	struct FName                                       AimOffsetNodeName;                                        // 0x017C(0x0008) (Edit, Const)
	class UBodyWeaponHoldDefinition*                   DefaultWeaponHoldDef;                                     // 0x0184(0x0004) (Edit, Const)
	TArray<class UBodyWeaponHoldDefinition*>           WeaponHoldDefs;                                           // 0x0188(0x000C) (Edit, Const, NeedCtorLink)
	class UExpressionEvaluator*                        CanShootWeaponIf;                                         // 0x0194(0x0004) (Edit, Const, EditInline)
	class UBodyWeaponHoldDefinition*                   DefaultFirstPersonWeaponHoldDef;                          // 0x0198(0x0004) (Edit, Const)
	TArray<class UBodyWeaponHoldDefinition*>           FirstPersonWeaponHoldDefs;                                // 0x019C(0x000C) (Edit, Const, NeedCtorLink)
	class UAkEvent*                                    ThrowGrenadeAkEvent;                                      // 0x01A8(0x0004) (Edit, Const)
	class UAkEvent*                                    MeleeAkEvent;                                             // 0x01AC(0x0004) (Edit, Const)
	TArray<struct FExtraWeaponSlot>                    ExtraWeaponSlots;                                         // 0x01B0(0x000C) (Edit, Const, Component, NeedCtorLink)
	unsigned char                                      ExpectedInstanceDataSize;                                 // 0x01BC(0x0001) (Edit, Const)
	unsigned char                                      CloakStyle;                                               // 0x01BD(0x0001) (Edit, Const)
	unsigned char                                      DefaultStance;                                            // 0x01BE(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x01BF(0x0001) MISSED OFFSET
	TArray<struct FPainDialogLine>                     PainDialogLines;                                          // 0x01C0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FName>                               DefaultStatusEffectSockets;                               // 0x01CC(0x000C) (Edit, NeedCtorLink)
	class UParticleSystem*                             DefaultParticleSystemTemplate;                            // 0x01D8(0x0004) (Edit)
	class UStaticMesh*                                 MeleeWeaponMesh;                                          // 0x01DC(0x0004) (Edit, Const)
	struct FName                                       MeleeSocketName;                                          // 0x01E0(0x0008) (Edit, Const)
	class UCameraAnim*                                 MeleeCameraAnim;                                          // 0x01E8(0x0004) (Edit, Const)
	struct FName                                       PrimaryColorParameterName;                                // 0x01EC(0x0008) (Edit, Const)
	struct FName                                       SecondaryColorParameterName;                              // 0x01F4(0x0008) (Edit, Const)
	struct FName                                       TertiaryColorParameterName;                               // 0x01FC(0x0008) (Edit, Const)
	struct FVector                                     PhysVehicleExtentScalars;                                 // 0x0204(0x000C) (Edit, Const)
	class UStaggerDefinition*                          StaggerSettings;                                          // 0x0210(0x0004) (Edit, Const)
	float                                              MinKnockbackMomentum;                                     // 0x0214(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      KnockbackSMD;                                             // 0x0218(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      KnockbackLandSMD;                                         // 0x021C(0x0004) (Edit, Const)
	struct FBodyCompositionData                        BodyComposition;                                          // 0x0220(0x0014) (Const, Component, DuplicateTransient, NeedCtorLink)
	float                                              CringeMinRepeatTime;                                      // 0x0234(0x0004) (Edit, Const)
	float                                              CringeMaxRepeatTime;                                      // 0x0238(0x0004) (Edit, Const)
	TArray<class USpecialMove_Cringe*>                 Cringes;                                                  // 0x023C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<struct FCustomCringeData>                   CustomCringes;                                            // 0x0248(0x000C) (Edit, Const, NeedCtorLink)
	float                                              DodgeAngle;                                               // 0x0254(0x0004) (Edit, Const)
	float                                              DodgeChance;                                              // 0x0258(0x0004) (Edit, Const)
	float                                              DodgeTargetDistMin;                                       // 0x025C(0x0004) (Edit, Const)
	float                                              DodgeRepeatTimeMin;                                       // 0x0260(0x0004) (Edit, Const)
	float                                              DodgeRepeatTimeMax;                                       // 0x0264(0x0004) (Edit, Const)
	struct FAIRange                                    DodgeDelayTime;                                           // 0x0268(0x0008) (Edit, Const)
	class USpecialMove_Dodge*                          DodgeAnimLeft;                                            // 0x0270(0x0004) (Edit, Const, EditInline)
	class USpecialMove_Dodge*                          DodgeAnimRight;                                           // 0x0274(0x0004) (Edit, Const, EditInline)
	float                                              DodgeGrenadeChance;                                       // 0x0278(0x0004) (Edit, Const)
	TArray<class USpecialMove_Dodge*>                  MovementDodgeAnims;                                       // 0x027C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	struct FAIRange                                    MovementDodgeTime;                                        // 0x0288(0x0008) (Edit, Const)
	float                                              PlayProvokedAnimChance;                                   // 0x0290(0x0004) (Edit, Const)
	float                                              PlayUnprovokedAnimChance;                                 // 0x0294(0x0004) (Edit, Const)
	TArray<class USpecialMove_Motion*>                 ProvokedAnims;                                            // 0x0298(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class USpecialMove_Motion*>                 UnprovokedAnims;                                          // 0x02A4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UGearboxDialogGroup*                         DialogGroup;                                              // 0x02B0(0x0004) (Const)
	class UGearboxDialogNameTag*                       DialogName;                                               // 0x02B4(0x0004) (Edit, Const)
	TArray<class UGearboxDialogGroup*>                 DialogGroups;                                             // 0x02B8(0x000C) (Edit, Const, NeedCtorLink)
	struct FAIRange                                    InitialTauntWait;                                         // 0x02C4(0x0008) (Edit, Const)
	struct FAIRange                                    SubsequentTauntWait;                                      // 0x02CC(0x0008) (Edit, Const)
	struct FName                                       TauntCustomEvent;                                         // 0x02D4(0x0008) (Edit, Const)
	class UAkEvent*                                    StartHeavyBreathingAkEvent;                               // 0x02DC(0x0004) (Const)
	class UAkEvent*                                    StopHeavyBreathingAkEvent;                                // 0x02E0(0x0004) (Const)
	float                                              TimeBetweenHeavyBreathLoop;                               // 0x02E4(0x0004) (Edit, Const)
	TArray<struct FBreathingLoopInfo>                  BreathingLoops;                                           // 0x02E8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class USpecialMove_Motion*>                 InjuredAnims;                                             // 0x02F4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class USpecialMove_Motion*>                 InjuredAnimsLeft;                                         // 0x0300(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class USpecialMove_Motion*>                 InjuredAnimsRight;                                        // 0x030C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class USpecialMove_Motion*>                 InjuredAnimsCritical;                                     // 0x0318(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	float                                              InjuredHealthPct;                                         // 0x0324(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnInjured;                                                // 0x0328(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnUninjured;                                              // 0x0334(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class USpecialMoveDefinition*                      LostShieldAnim;                                           // 0x0340(0x0004) (Edit, Const)
	TArray<unsigned char>                              LostShieldDamageTriggers;                                 // 0x0344(0x000C) (Edit, Const, NeedCtorLink)
	class UAkEvent*                                    StartInjuredAkEvent;                                      // 0x0350(0x0004) (Const)
	class UAkEvent*                                    StopInjuredAkEvent;                                       // 0x0354(0x0004) (Const)
	TArray<struct FInjuredLoopOverride>                InjuredLoopOverrides;                                     // 0x0358(0x000C) (Const, NeedCtorLink)
	TArray<unsigned char>                              CloakExceptions;                                          // 0x0364(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class USpecialMove_Cloak*>                  CloakEnterAnims;                                          // 0x0370(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class USpecialMove_Cloak*>                  CloakExitAnims;                                           // 0x037C(0x000C) (Edit, Const, NeedCtorLink)
	class UCoordinatedEffectDefinition*                CloakEffect;                                              // 0x0388(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                UnCloakEffect;                                            // 0x038C(0x0004) (Edit, Const)
	class USpecialMove_Cloak*                          CloakEnter;                                               // 0x0390(0x0004) (Const)
	class USpecialMove_Cloak*                          CloakExit;                                                // 0x0394(0x0004) (Const)
	float                                              CoverOffset;                                              // 0x0398(0x0004) (Edit, Const)
	float                                              CoverMantleOffset;                                        // 0x039C(0x0004) (Edit, Const)
	struct FAIRange                                    CoverIdleTime;                                            // 0x03A0(0x0008) (Edit, Const)
	struct FAIRange                                    CoverFireTime;                                            // 0x03A8(0x0008) (Edit, Const)
	float                                              CoverMantleLerpStartTime;                                 // 0x03B0(0x0004) (Edit, Const)
	float                                              CoverMantleLerpStopTime;                                  // 0x03B4(0x0004) (Edit, Const)
	class USpecialMove_Motion*                         MantleAnim;                                               // 0x03B8(0x0004) (Edit, EditInline)
	class UWillowCoverStanceDefinition*                CoverStance_HighLeft;                                     // 0x03BC(0x0004) (Edit, Const)
	class UWillowCoverStanceDefinition*                CoverStance_HighRight;                                    // 0x03C0(0x0004) (Edit, Const)
	class UWillowCoverStanceDefinition*                CoverStance_LowCenter;                                    // 0x03C4(0x0004) (Edit, Const)
	class UStanceTypeDefinition*                       RunStance;                                                // 0x03C8(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UStanceTypeDefinition*                       PatrolStance;                                             // 0x03CC(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UStanceTypeDefinition*                       SprintStance;                                             // 0x03D0(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UStanceTypeDefinition*                       InjuredStance;                                            // 0x03D4(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UStanceTypeDefinition*                       CrouchStance;                                             // 0x03D8(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	float                                              ParentDamageLimit;                                        // 0x03DC(0x0004) (Edit, Const)
	float                                              DamageParentScale;                                        // 0x03E0(0x0004) (Edit, Const)
	class UAkRtpc*                                     AudioDistanceRTPC;                                        // 0x03E4(0x0004) (Edit)
	float                                              DeltaRotationModifierBySpeed;                             // 0x03E8(0x0004) (Edit, Const)
	float                                              SimulatedRotationLerpTime;                                // 0x03EC(0x0004) (Edit)
	TArray<struct FName>                               CrawlerFloorAdjustBones;                                  // 0x03F0(0x000C) (Edit, NeedCtorLink)
	float                                              CrawlerFloorAdjustRadius;                                 // 0x03FC(0x0004) (Edit)
	float                                              CrawlerFloorAdjustTraceUp;                                // 0x0400(0x0004) (Edit)
	float                                              CrawlerFloorAdjustTraceDown;                              // 0x0404(0x0004) (Edit)
	float                                              CrawlerFloorAdjustOffset;                                 // 0x0408(0x0004) (Edit)
	float                                              CrawlerFloorAdjustRate;                                   // 0x040C(0x0004) (Edit)
	class UPhaseLockDefinition*                        PhaseLockDef;                                             // 0x0410(0x0004) (Edit, Const)
	TArray<struct FVehicleCrewMappingStruct>           DLCVehicleAnimSetMappings;                                // 0x0414(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BodyClassDefinition");
		return ptr;
	}


	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
	bool ShouldUseUpperBodyMovementBlendForHoldName(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag);
	bool ShouldUseArmBoneBlendForHoldName(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag);
	struct FName GetAimOffsetProfileForHoldName(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag);
	void GetFirstPersonWeaponHoldAnimSets(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag, TArray<class UAnimSet*>* OutAnimSets);
	void GetWeaponHoldAnimSets(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag, TArray<class UAnimSet*>* OutAnimSets);
	class UBodyWeaponHoldDefinition* GetFirstPersonWeaponHoldDef(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag, bool bSearchParentClass, bool bFallbackToDefaultDef);
	class UBodyWeaponHoldDefinition* GetWeaponHoldDef(const struct FName& HoldName, class UEnvironmentTagDefinition* EnvironmentTag, bool bSearchParentClass, bool bFallbackToDefaultDef);
	class UBodyClassDefinition* GetCloakBody();
	bool ShouldCloak(class AWillowPawn* Context, unsigned char Type);
	class USpecialMove_Cringe* GetCringeAnim(unsigned char DamageType, bool bDOT);
	class UBodyClassDefinition* GetKnockbackBody();
};


// Class WillowGame.BodyRegionProtectionDefinition
// 0x00A8 (0x003C - 0x00E4)
class UBodyRegionProtectionDefinition : public UGBXDefinition
{
public:
	class UBodyHitRegionDefinition*                    BodyHitRegion;                                            // 0x003C(0x0004) (Edit)
	float                                              DamageModifierPercent;                                    // 0x0040(0x0004) (Edit)
	unsigned long                                      PlayImpactWithNoDamage : 1;                               // 0x0044(0x0004) (Edit)
	unsigned long                                      RunTookDamageRuleWithNoDamage : 1;                        // 0x0044(0x0004) (Edit)
	struct FImpactResponseEffect                       DamageImpactEffects;                                      // 0x0048(0x0094) (Edit, NeedCtorLink)
	float                                              PercentOfMaxHealthLimit;                                  // 0x00DC(0x0004) (Edit)
	class UPhysicalMaterial*                           PhysicalMaterial;                                         // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BodyRegionProtectionDefinition");
		return ptr;
	}

};


// Class WillowGame.BodyWeaponHoldDefinition
// 0x0088 (0x003C - 0x00C4)
class UBodyWeaponHoldDefinition : public UGBXDefinition
{
public:
	struct FName                                       HoldName;                                                 // 0x003C(0x0008) (Edit, Const)
	class UEnvironmentTagDefinition*                   EnvironmentTag;                                           // 0x0044(0x0004) (Edit, Const)
	struct FName                                       AimOffsetProfileName;                                     // 0x0048(0x0008) (Edit, Const)
	unsigned long                                      bUseArmBoneBlend : 1;                                     // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bUseUpperBodyMovementBlend : 1;                           // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bLeftHandIKEnabled : 1;                                   // 0x0050(0x0004) (Edit, Const)
	TArray<class UAnimSet*>                            AnimSetList;                                              // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FBodyWeaponActionPostureData>        WeaponActions;                                            // 0x0060(0x000C) (Edit, Const, NeedCtorLink)
	struct FBodyHandIKHoldData                         DefaultLeftHandIKHold;                                    // 0x006C(0x0024) (Edit, Const)
	TArray<struct FCustomBodyHandIKHoldData>           CustomLeftHandIKHolds;                                    // 0x0090(0x000C) (Edit, Const, NeedCtorLink)
	struct FVector                                     LeftHandIKJointLocation;                                  // 0x009C(0x000C) (Const, Deprecated)
	struct FVector                                     LeftHandIKHandLocation;                                   // 0x00A8(0x000C) (Const, Deprecated)
	struct FRotator                                    LeftHandIKHandRotation;                                   // 0x00B4(0x000C) (Const, Deprecated)
	class UBodyWeaponHoldDefinition*                   ParentDefinition;                                         // 0x00C0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BodyWeaponHoldDefinition");
		return ptr;
	}


	void GetAnimSets(TArray<class UAnimSet*>* OutAnimSets);
	class USpecialMoveDefinition* GetWeaponSMD(unsigned char BodyAction, unsigned char BodyPosture, class UObject* SearchContext);
};


// Class WillowGame.BoundaryTurretRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UBoundaryTurretRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BoundaryTurretRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.BulletListenerComponent
// 0x000C (0x021C - 0x0228)
class UBulletListenerComponent : public UCylinderComponent
{
public:
	TArray<class UBehaviorBase*>                       OnBulletTouch;                                            // 0x021C(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BulletListenerComponent");
		return ptr;
	}

};


// Class WillowGame.WillowDeclarations
// 0x0000 (0x003C - 0x003C)
class UWillowDeclarations : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDeclarations");
		return ptr;
	}

};


// Class WillowGame.CellsNavigator
// 0x0028 (0x003C - 0x0064)
class UCellsNavigator : public UObject
{
public:
	TArray<struct FCellInfo>                           Cells;                                                    // 0x003C(0x000C) (NeedCtorLink)
	TArray<int>                                        UnnavigableIndices;                                       // 0x0048(0x000C) (NeedCtorLink)
	int                                                CurrentSelectedCellIndex;                                 // 0x0054(0x0004) (Transient)
	TArray<struct FMoveToCellData>                     MoveCellInfo;                                             // 0x0058(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CellsNavigator");
		return ptr;
	}


	static class UMeshComponent* ConstructInvMesh(class AWillowInventory* TheItem);
	int CellIndex(const struct FString& CellName);
	struct FString CellName(int CellIndex);
	int SimpleMoveCell(int CurrentCellIndex, float MoveX, float MoveY);
	int MoveCell(int CurrentCellIndex, const struct FVector& Dir, float StrictTolerance, float LooseTolerance, float StrictGiveUpDistance, float LooseGiveUpDistance);
	void SetupCell(const struct FString& CellName, float X, float Y, float Width, float Height);
};


// Class WillowGame.ChallengeCategoryDefinition
// 0x0010 (0x003C - 0x004C)
class UChallengeCategoryDefinition : public UGBXDefinition
{
public:
	struct FString                                     CategoryName;                                             // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	int                                                SortWeight;                                               // 0x0048(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengeCategoryDefinition");
		return ptr;
	}

};


// Class WillowGame.ChallengeConditionDefinition
// 0x0018 (0x003C - 0x0054)
class UChallengeConditionDefinition : public UGBXDefinition
{
public:
	struct FString                                     Description;                                              // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FName                                       StatId;                                                   // 0x0048(0x0008) (Edit, Const)
	int                                                TargetValue;                                              // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengeConditionDefinition");
		return ptr;
	}

};


// Class WillowGame.ChallengeDefinition
// 0x0084 (0x003C - 0x00C0)
class UChallengeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDlcLicensableObject;                            // 0x0040(0x0004) (Const, Native, NoExport)
	struct FString                                     ChallengeName;                                            // 0x0044(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0050(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FName                                       AssociatedMap;                                            // 0x005C(0x0008) (Edit, Const)
	unsigned long                                      bSecret : 1;                                              // 0x0064(0x0004) (Edit, Const)
	unsigned char                                      ChallengeType;                                            // 0x0068(0x0001) (Edit, Const)
	unsigned char                                      LevelChallengeObjectGroupIdx;                             // 0x0069(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	int                                                GoalValue;                                                // 0x006C(0x0004) (Edit, Const)
	class UChallengeCategoryDefinition*                ChallengeCategoryDef;                                     // 0x0070(0x0004) (Edit, Const)
	TArray<struct FName>                               GiveChallengeWhenPlayerEntersMaps;                        // 0x0074(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                CompletedAttributeEffects;                                // 0x0080(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                BPReward;                                                 // 0x008C(0x0010) (Edit, Const)
	struct FName                                       RewardTextKey;                                            // 0x009C(0x0008) (Edit, Const)
	TArray<struct FConditionLevel>                     Levels;                                                   // 0x00A4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UDownloadableExpansionDefinition*            DlcExpansion;                                             // 0x00B0(0x0004) (Edit, Const)
	class UDownloadableBalanceModifierDefinition*      DlcBalanceMod;                                            // 0x00B4(0x0004) (Edit, Const)
	class UBehaviorProviderDefinition*                 BehaviorProvider;                                         // 0x00B8(0x0004)
	int                                                LevelChallengeOneOffIdx;                                  // 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengeDefinition");
		return ptr;
	}


	struct FString GetRewardText(class AWillowPlayerController* WPC, int Level);
	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
	void OnLevelCompleted(class UObject* ForPlayer, int LevelNum, struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.ChallengeFeedbackMessage
// 0x001B (0x0049 - 0x0064)
class UChallengeFeedbackMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     ChallengeCompleted;                                       // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ChallengeReceived;                                        // 0x0058(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengeFeedbackMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.ChallengeManager
// 0x0050 (0x0188 - 0x01D8)
class AChallengeManager : public AActor
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x0188(0x0004) (Const, Native, NoExport)
	struct FMultiMap_Mirror                            StatIdChallengeMap;                                       // 0x018C(0x003C) (Const, Native)
	struct FString                                     BPRewardText;                                             // 0x01C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FBehaviorConsumerHandle                     BehaviorConsumerHandle;                                   // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengeManager");
		return ptr;
	}


	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void OnStatIncrement(class AWillowPlayerStats* StatContext, const struct FName& StatId, int Amount);
	void UnregisterChallenges(class AWillowPlayerController* PCOwner);
	void UnregisterChallenge(struct FChallengeData* TheChallenge);
	void RegisterChallenge(struct FChallengeData* TheChallenge);
};


// Class WillowGame.ChassisDefinition
// 0x0074 (0x003C - 0x00B0)
class UChassisDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;                          // 0x003C(0x0004) (Const, Native, NoExport)
	struct FBodyCompositionData                        BodyComposition;                                          // 0x0040(0x0014) (Const, Component, DuplicateTransient, NeedCtorLink)
	class UBodyHitRegionDefinition*                    DefaultHitRegion;                                         // 0x0054(0x0004) (Edit, Const)
	TArray<class UBodyHitRegionDefinition*>            HitRegionList;                                            // 0x0058(0x000C) (Edit, Const, NeedCtorLink)
	class UPhysicalMaterial*                           DrivingPhysicalMaterial;                                  // 0x0064(0x0004) (Edit)
	class UPhysicalMaterial*                           DefaultPhysicalMaterial;                                  // 0x0068(0x0004) (Edit)
	struct FName                                       ReverseSwitchName;                                        // 0x006C(0x0008) (Edit)
	struct FName                                       BrakeSwitchName;                                          // 0x0074(0x0008) (Edit)
	struct FName                                       HeadlightSwitchName;                                      // 0x007C(0x0008) (Edit)
	struct FName                                       ThrottleSwitchName;                                       // 0x0084(0x0008) (Edit)
	class UWillowImpactDefinition*                     TouchImpactDefinition;                                    // 0x008C(0x0004) (Edit)
	class UWillowImpactDefinition*                     UntouchImpactDefinition;                                  // 0x0090(0x0004) (Edit)
	class UCoordinatedEffectDefinition*                SpawnCoordinatedEffect;                                   // 0x0094(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                DeSpawnCoordinatedEffect;                                 // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      AllowPawnsToStandOnTopOfVehicle : 1;                      // 0x009C(0x0004) (Edit, Const)
	TArray<struct FName>                               StatusEffectSockets;                                      // 0x00A0(0x000C) (Edit, Const, NeedCtorLink)
	class UParticleSystem*                             StatusEffectParticleSystemTemplate;                       // 0x00AC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChassisDefinition");
		return ptr;
	}


	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
};


// Class WillowGame.ClassDropWeightValueResolver
// 0x0004 (0x003C - 0x0040)
class UClassDropWeightValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                            // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ClassDropWeightValueResolver");
		return ptr;
	}

};


// Class WillowGame.CombatMusicManager
// 0x0040 (0x003C - 0x007C)
class UCombatMusicManager : public UObject
{
public:
	TArray<struct FTargetedPlayerState>                TargetedPlayerStates;                                     // 0x003C(0x000C) (NeedCtorLink)
	float                                              TimeSinceLastUpdate;                                      // 0x0048(0x0004)
	float                                              TimeOfNewCombatAction;                                    // 0x004C(0x0004)
	float                                              TimeCombatMusicStarted;                                   // 0x0050(0x0004)
	float                                              TimeOfLastStateChange;                                    // 0x0054(0x0004)
	float                                              MaxDurationOfThisCombatMusic;                             // 0x0058(0x0004)
	float                                              LastTimeAddedShieldDownThreat;                            // 0x005C(0x0004)
	float                                              LastTimeMusicTimedOut;                                    // 0x0060(0x0004)
	float                                              MaxDurationOfThisMoratorium;                              // 0x0064(0x0004)
	unsigned long                                      bChangingState : 1;                                       // 0x0068(0x0004)
	unsigned long                                      bCombatMusicManagerEnabled : 1;                           // 0x0068(0x0004)
	unsigned long                                      bInDebugMode : 1;                                         // 0x0068(0x0004)
	unsigned long                                      bBossFightActive : 1;                                     // 0x0068(0x0004)
	unsigned long                                      bHaveAddedEnemyWithCustomCombatMusic : 1;                 // 0x0068(0x0004)
	unsigned char                                      CombatMusicManagerState;                                  // 0x006C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              CurrentThreatValue;                                       // 0x0070(0x0004)
	class UCombatMusicParameters*                      CombatMusicParams;                                        // 0x0074(0x0004)
	float                                              UpdateThreatDelta;                                        // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CombatMusicManager");
		return ptr;
	}


	float GetDebugTime();
	void ForceSetThreatLevel(float ThreatLevel);
	void ForceFadeOutCombatMusic(bool bTurnBackOnAmbientMusic);
	void SetEnabled(bool bEnabled);
	void Update();
	void PlayerShieldDown(class AActor* Player);
	void PlayerDamagedByEnemy(class AActor* Player, class AWillowMind* Enemy, float Damage, class UClass* DamageType);
	void EnemyTargetChanged(class AWillowMind* Enemy, bool bForceRemove);
	void PlayerPetTargetedByEnemy(class AActor* Pet, class AActor* Player, class AWillowMind* Enemy);
	void PlayerTargetedByEnemy(class AActor* Player, class AWillowMind* Enemy);
};


// Class WillowGame.CombatMusicParameters
// 0x007C (0x003C - 0x00B8)
class UCombatMusicParameters : public UGBXDefinition
{
public:
	float                                              FullThreatThreshholdValue;                                // 0x003C(0x0004) (Edit)
	float                                              MediumThreatThreshholdValue;                              // 0x0040(0x0004) (Edit)
	float                                              NoThreatThressholdValue;                                  // 0x0044(0x0004) (Edit)
	float                                              ThreatLevelSubtractedPerSecond;                           // 0x0048(0x0004) (Edit)
	float                                              HighestThreatAllowed;                                     // 0x004C(0x0004) (Edit)
	float                                              RequiredThreatValueIfTargeted;                            // 0x0050(0x0004) (Edit)
	float                                              ThreatSurgeThreshold;                                     // 0x0054(0x0004) (Edit)
	float                                              MediumThreatVolumeFadeTime;                               // 0x0058(0x0004) (Edit)
	class UAkRtpc*                                     MediumThreatRtpc;                                         // 0x005C(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsPlus1;                    // 0x0060(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsPlus2;                    // 0x0064(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsPlus3;                    // 0x0068(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsPlus4;                    // 0x006C(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsPlus5;                    // 0x0070(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsMinus1;                   // 0x0074(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsMinus2;                   // 0x0078(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsMinus3;                   // 0x007C(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsMinus4;                   // 0x0080(0x0004) (Edit)
	float                                              EnemyThreatMultiplierWhenLevelIsMinus5;                   // 0x0084(0x0004) (Edit)
	float                                              EnemyDamagesPlayerWeight;                                 // 0x0088(0x0004) (Edit)
	float                                              ThreatFromShieldDown;                                     // 0x008C(0x0004) (Edit)
	float                                              MinLongestTimeCombatMusicPlays;                           // 0x0090(0x0004) (Edit)
	float                                              MaxLongestTimeCombatMusicPlays;                           // 0x0094(0x0004) (Edit)
	float                                              MinTimeBeforeCombatMusicStartsAgain;                      // 0x0098(0x0004) (Edit)
	float                                              MaxTimeBeforeCombatMusicStartsAgain;                      // 0x009C(0x0004) (Edit)
	float                                              CombatMusicManagerUpdateFrequency;                        // 0x00A0(0x0004) (Edit)
	float                                              TimeAllowedToReachFullThreat;                             // 0x00A4(0x0004) (Edit)
	float                                              FadeBackToFullVolumeTime;                                 // 0x00A8(0x0004) (Edit)
	float                                              TimeBetweenShieldDownThreats;                             // 0x00AC(0x0004) (Edit)
	float                                              StateChangeDelay;                                         // 0x00B0(0x0004) (Edit)
	float                                              EnemyNotTargetingPlayerTimeout;                           // 0x00B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CombatMusicParameters");
		return ptr;
	}

};


// Class WillowGame.CoordinatedEffectDefinition
// 0x0050 (0x003C - 0x008C)
class UCoordinatedEffectDefinition : public UGBXDefinition
{
public:
	class UMaterialInterface*                          OverrideMaterial;                                         // 0x003C(0x0004) (Edit)
	class UParticleSystem*                             CriticialHitParticle;                                     // 0x0040(0x0004) (Edit)
	TArray<struct FCoordinatedParticleSystemDefinition> ParticleEffects;                                          // 0x0044(0x000C) (Edit, NeedCtorLink)
	TArray<struct FCoordinatedScalarParameter>         MaterialScalarParameters;                                 // 0x0050(0x000C) (Edit, NeedCtorLink)
	TArray<struct FCoordinatedVectorParameter>         MaterialVectorParameters;                                 // 0x005C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FCoordinatedAudioDefinition>         AudioEffects;                                             // 0x0068(0x000C) (Edit, NeedCtorLink)
	float                                              EffectDuration;                                           // 0x0074(0x0004) (Edit)
	float                                              ParticleSpeedMultiplier;                                  // 0x0078(0x0004) (Edit)
	class UCoordinatedEffectDefinition*                NextEffect;                                               // 0x007C(0x0004) (Edit)
	struct FName                                       MutexName;                                                // 0x0080(0x0008) (Edit)
	unsigned long                                      bInfiniteDuration : 1;                                    // 0x0088(0x0004) (Edit)
	unsigned long                                      bCensored : 1;                                            // 0x0088(0x0004) (Edit)
	unsigned long                                      bReplicated : 1;                                          // 0x0088(0x0004) (Edit)
	unsigned long                                      bRemoveShadows : 1;                                       // 0x0088(0x0004) (Edit)
	unsigned long                                      bHideInstanceDataParticles : 1;                           // 0x0088(0x0004) (Edit)
	unsigned long                                      bHidePawnWeaponParticleAttachments : 1;                   // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CoordinatedEffectDefinition");
		return ptr;
	}

};


// Class WillowGame.CurrencyAttributeValueResolver
// 0x0001 (0x003C - 0x003D)
class UCurrencyAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      FormOfCurrency;                                           // 0x003C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CurrencyAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.CurrencyListDefinition
// 0x000C (0x003C - 0x0048)
class UCurrencyListDefinition : public UGBXDefinition
{
public:
	TArray<struct FCurrencyPresentation>               Currencies;                                               // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CurrencyListDefinition");
		return ptr;
	}

};


// Class WillowGame.CurrentProficiencySkillAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UCurrentProficiencySkillAttributeContextResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CurrentProficiencySkillAttributeContextResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.CustomizationData
// 0x0010 (0x003C - 0x004C)
class UCustomizationData : public UGBXDefinition
{
public:
	class UCustomizationDefinition*                    MyDefinition;                                             // 0x003C(0x0004) (Edit)
	class UStaticMesh*                                 PickupMesh;                                               // 0x0040(0x0004)
	class UTexture2D*                                  PickupFlagIcon;                                           // 0x0044(0x0004)
	int                                                NumReferencers;                                           // 0x0048(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationData");
		return ptr;
	}


	void ApplyCustomizationToInstanceDataSet(const struct FPointer& TheDataSet, class UObject* InstanceDataOwner);
	void ApplyCustomization(const FScriptInterface& Target);
	void ApplyCustomizationToDataSets(TArray<struct FPointer> DataSets, class UObject* InstanceDataOwner);
};


// Class WillowGame.CustomizationData_Head
// 0x000C (0x004C - 0x0058)
class UCustomizationData_Head : public UCustomizationData
{
public:
	class USkeletalMesh*                               HeadMesh;                                                 // 0x004C(0x0004) (Edit)
	struct FName                                       InstanceDataName;                                         // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationData_Head");
		return ptr;
	}


	void ApplyCustomizationToInstanceDataSet(const struct FPointer& TheDataSet, class UObject* InstanceDataOwner);
};


// Class WillowGame.CustomizationData_Skin
// 0x0008 (0x004C - 0x0054)
class UCustomizationData_Skin : public UCustomizationData
{
public:
	class UMaterialInstanceConstant*                   BodyMaterial;                                             // 0x004C(0x0004) (Edit)
	class UMaterialInstanceConstant*                   HeadMaterial;                                             // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationData_Skin");
		return ptr;
	}


	void ApplySkinToMaterial(class UMaterialInstance* TargetMaterial);
	void ApplyCustomizationToInstanceDataSet(const struct FPointer& TheDataSet, class UObject* InstanceDataOwner);
};


// Class WillowGame.CustomizationDefinition
// 0x0054 (0x003C - 0x0090)
class UCustomizationDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                            // 0x003C(0x0004) (Const, Native, NoExport)
	struct FString                                     CustomizationName;                                        // 0x0040(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UClass*                                      CustomizationType;                                        // 0x004C(0x0004) (Edit)
	TArray<class UClass*>                              UsageFlags;                                               // 0x0050(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              OtherUsageFlags;                                          // 0x005C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PackageName;                                              // 0x0068(0x000C) (Edit, NeedCtorLink)
	struct FString                                     CustomizationDataName;                                    // 0x0074(0x000C) (Edit, NeedCtorLink)
	int                                                ProfileEntryID;                                           // 0x0080(0x0004) (Edit)
	int                                                ProfileEntryIndex;                                        // 0x0084(0x0004) (Edit)
	unsigned char                                      PrimarySort;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      SecondarySort;                                            // 0x0089(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x008A(0x0002) MISSED OFFSET
	class UDownloadableCustomizationSetDefinition*     DlcCustomizationSetDef;                                   // 0x008C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationDefinition");
		return ptr;
	}


	bool PassesDLCUsageRestrictionsForUser(class APlayerController* CustomizationUser);
	bool IsVehicleSkinCustomization();
	bool IsCharacterSkinCustomization();
	bool IsCharacterHeadCustomization();
	static bool MatchRequiredUsageFlags(TArray<class UClass*> RequiredUsageClasses, TArray<class UClass*> SuppliedUsageClasses);
	static void SortCustomizationList(TArray<class UCustomizationDefinition*>* ListItems);
	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
	static void GetAvailableAndUnauthorizedCustomizationsForVehicle(class AWillowPlayerController* PC, class UVSSUIDefinition* VehicleUIDef, class UClass* RequiredType, bool bDebugAllowLocked, TArray<class UCustomizationDefinition*>* AvailableCustomizations, TArray<int>* AvailableCustomizationsBeenSeen, TArray<class UCustomizationDefinition*>* UnauthorizedCustomizations, int* LockedCustomizationCount);
	static void GetAvailableAndUnauthorizedCustomizationsForPlayer(class AWillowPlayerController* PC, class UClass* RequiredType, bool bDebugAllowLocked, class UWillowCharacterClassDefinition* CharacterClassOverride, TArray<class UCustomizationDefinition*>* AvailableCustomizations, TArray<int>* AvailableCustomizationsBeenSeen, TArray<class UCustomizationDefinition*>* UnauthorizedCustomizations, int* LockedCustomizationCount);
	static void GetAvailableCustomizationsForVehicle(class AWillowPlayerController* PC, class UVSSUIDefinition* VehicleUIDef, class UClass* RequiredType, bool bDebugAllowLocked, TArray<class UCustomizationDefinition*>* AvailableCustomizations, TArray<int>* AvailableCustomizationsBeenSeen, int* LockedCustomizationCount);
	static void GetAvailableCustomizationsForPlayer(class AWillowPlayerController* PC, class UClass* RequiredType, bool bDebugAllowLocked, class UWillowCharacterClassDefinition* CharacterClassOverride, TArray<class UCustomizationDefinition*>* AvailableCustomizations, TArray<int>* AvailableCustomizationsBeenSeen, int* LockedCustomizationCount);
};


// Class WillowGame.CustomizationType
// 0x0014 (0x003C - 0x0050)
class UCustomizationType : public UGBXDefinition
{
public:
	struct FString                                     CustomizationTypeName;                                    // 0x003C(0x000C) (Const, Localized, NeedCtorLink)
	int                                                PRICustomizationIndex;                                    // 0x0048(0x0004)
	class UClass*                                      AssociatedCustomizationDataClass;                         // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationType");
		return ptr;
	}

};


// Class WillowGame.CustomizationType_Head
// 0x0000 (0x0050 - 0x0050)
class UCustomizationType_Head : public UCustomizationType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationType_Head");
		return ptr;
	}

};


// Class WillowGame.CustomizationType_Skin
// 0x0000 (0x0050 - 0x0050)
class UCustomizationType_Skin : public UCustomizationType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationType_Skin");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage
// 0x000C (0x003C - 0x0048)
class UCustomizationUsage : public UGBXDefinition
{
public:
	struct FString                                     CustomizationUsageName;                                   // 0x003C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage");
		return ptr;
	}

};


// Class WillowGame.CustomSkeletalMeshComponent
// 0x0004 (0x06AC - 0x06B0)
class UCustomSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	class USkeletalMesh*                               DefaultSkeletalMesh;                                      // 0x06AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomSkeletalMeshComponent");
		return ptr;
	}

};


// Class WillowGame.DamageOverTimeManager
// 0x001C (0x003C - 0x0058)
class UDamageOverTimeManager : public UObject
{
public:
	TArray<struct FSourceObjectData>                   SourceObjects;                                            // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FDamageOnlyOnceData>                 DamageOnlyOnceActors;                                     // 0x0048(0x000C) (NeedCtorLink)
	int                                                UniqueId;                                                 // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DamageOverTimeManager");
		return ptr;
	}


	void DoTakeRadiusDamage(class AActor* HurtActor, class UDamageTypeDefinition* DamageTypeDef, bool bCanDamageFriendlies, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, class AController* InstigatedByController, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, const FScriptInterface& DamageCauser);
	void AddSourceObject(class UObject* SourceObject, const struct FVector& SourceLocation, class AController* InstigatedByController, class UExplosionDefinition* ExplosionDef, int ExplosionScaleIndex, const FScriptInterface& DamageContext, float InitialDamageRadius, float Damage, bool bFullDamage, float Momentum, class UClass* DamageSource, class UDamageTypeDefinition* DamageTypeDef, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, const FScriptInterface& DamageCauser, bool bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray<class AActor*> ActorsHurt);
};


// Class WillowGame.DamageTypeAttributeValueResolver
// 0x001C (0x003C - 0x0058)
class UDamageTypeAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                        // 0x003C(0x0010) (Edit, Const)
	TArray<struct FDamageTypeSelectorData>             DamageTypes;                                              // 0x004C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DamageTypeAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.DefinitionGlobalsDefinition
// 0x0014 (0x003C - 0x0050)
class UDefinitionGlobalsDefinition : public UGBXDefinition
{
public:
	struct FColor                                      DefaultColor;                                             // 0x003C(0x0004) (Edit)
	class UTexture2D*                                  DefaultIcon;                                              // 0x0040(0x0004) (Edit)
	TArray<struct FDefinitionIconDatum>                DefinitionIconData;                                       // 0x0044(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DefinitionGlobalsDefinition");
		return ptr;
	}


	class UTexture2D* GetIcon(class UClass* DefClass);
	struct FColor GetColor(class UClass* DefClass);
};


// Class WillowGame.DesignerAttributeDefinition
// 0x002C (0x005C - 0x0088)
class UDesignerAttributeDefinition : public UAttributeDefinition
{
public:
	struct FName                                       ValueName;                                                // 0x005C(0x0008) (Edit, Const)
	struct FAttributeInitializationData                BaseValue;                                                // 0x0064(0x0010) (Edit, Const)
	unsigned char                                      Scope;                                                    // 0x0074(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	unsigned long                                      bSearchAttributeByName : 1;                               // 0x0078(0x0004) (Edit)
	class UClass*                                      GlobalScopeResolverClass;                                 // 0x007C(0x0004)
	class UClass*                                      DesignerAttributeResolverClass;                           // 0x0080(0x0004)
	class UClass*                                      DesignerAttributeResolverByNameClass;                     // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DesignerAttributeDefinition");
		return ptr;
	}

};


// Class WillowGame.DevelopmentDownloadableContentEnumerator
// 0x0000 (0x0098 - 0x0098)
class UDevelopmentDownloadableContentEnumerator : public UDownloadableContentEnumerator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DevelopmentDownloadableContentEnumerator");
		return ptr;
	}


	void InstallAllDLC();
};


// Class WillowGame.DialogNameTagExpressionEvaluator
// 0x0008 (0x003C - 0x0044)
class UDialogNameTagExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bWantExactMatch : 1;                                      // 0x003C(0x0004) (Edit, Const)
	class UWillowDialogNameTag*                        NameTag;                                                  // 0x0040(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DialogNameTagExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.DLCLegacyPlayerClassIdentifierDefinition
// 0x0020 (0x003C - 0x005C)
class UDLCLegacyPlayerClassIdentifierDefinition : public UGBXDefinition
{
public:
	TArray<struct FLegacyCustomizationItemData>        CharacterCustomizations;                                  // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     AssociatedPlayerClassIdentifierPath;                      // 0x0048(0x000C) (Edit, NeedCtorLink)
	class UItemPoolDefinition*                         AsterClassMods;                                           // 0x0054(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         LobeliaClassMods;                                         // 0x0058(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DLCLegacyPlayerClassIdentifierDefinition");
		return ptr;
	}

};


// Class WillowGame.DlcTmsHolder
// 0x0018 (0x003C - 0x0054)
class UDlcTmsHolder : public UObject
{
public:
	TArray<struct FPremiumCustomizationInfo>           PremiumCustomizationList;                                 // 0x003C(0x000C) (Config, NeedCtorLink)
	TArray<struct FPremiumCustomizationInfo>           PremiumClassList;                                         // 0x0048(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DlcTmsHolder");
		return ptr;
	}

};


// Class WillowGame.DownloadableAssetLibraryDefinition
// 0x0020 (0x003C - 0x005C)
class UDownloadableAssetLibraryDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                               // 0x003C(0x0004) (Const, Native, NoExport)
	class UDownloadablePackageDefinition*              PackageDef;                                               // 0x0040(0x0004) (Edit, Const)
	class UPackageAssetLibrary*                        Libraries[0x6];                                           // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableAssetLibraryDefinition");
		return ptr;
	}

};


// Class WillowGame.DownloadableContentDefinition
// 0x001C (0x003C - 0x0058)
class UDownloadableContentDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                               // 0x003C(0x0004) (Const, Native, NoExport)
	class UDownloadablePackageDefinition*              PackageDef;                                               // 0x0040(0x0004) (Edit, Const)
	int                                                ContentId;                                                // 0x0044(0x0004) (Edit, Const)
	int                                                LicenseMask;                                              // 0x0048(0x0004) (Edit, Const)
	struct FString                                     ContentDisplayName;                                       // 0x004C(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableContentDefinition");
		return ptr;
	}


	struct FDlcContentId GetFullContentId();
	bool CanConsume(class APlayerController* Controller);
	bool IsInstalled();
	bool IsLicensed(class APlayerController* Controller);
};


// Class WillowGame.DownloadableBalanceModifierDefinition
// 0x0010 (0x0058 - 0x0068)
class UDownloadableBalanceModifierDefinition : public UDownloadableContentDefinition
{
public:
	class UBalanceModifierDefinition*                  BalanceModifier;                                          // 0x0058(0x0004) (Edit, Const)
	int                                                LevelCapIncrease;                                         // 0x005C(0x0004) (Edit, Const)
	int                                                OverpowerLevelCapIncrease;                                // 0x0060(0x0004) (Edit, Const)
	class UPlayerChallengeListDefinition*              ChallengeList;                                            // 0x0064(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableBalanceModifierDefinition");
		return ptr;
	}

};


// Class WillowGame.DownloadableCharacterDefinition
// 0x0000 (0x0058 - 0x0058)
class UDownloadableCharacterDefinition : public UDownloadableContentDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableCharacterDefinition");
		return ptr;
	}


	bool CanPlayAs(class APlayerController* Controller);
};


// Class WillowGame.DownloadableCustomizationSetDefinition
// 0x0008 (0x0058 - 0x0060)
class UDownloadableCustomizationSetDefinition : public UDownloadableContentDefinition
{
public:
	int                                                ProductID;                                                // 0x0058(0x0004) (Edit)
	int                                                NumCustomizations;                                        // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableCustomizationSetDefinition");
		return ptr;
	}


	bool CanUse(class APlayerController* Controller);
};


// Class WillowGame.DownloadableExpansionDefinition
// 0x0064 (0x0058 - 0x00BC)
class UDownloadableExpansionDefinition : public UDownloadableContentDefinition
{
public:
	TArray<struct FDlcLevelTravelPair>                 LevelTravelPairs;                                         // 0x0058(0x000C) (Edit, Const, NeedCtorLink)
	class ULevelDependencyList*                        LevelDependencyList;                                      // 0x0064(0x0004) (Edit, Const)
	class UPlayerChallengeListDefinition*              ChallengeList;                                            // 0x0068(0x0004) (Edit, Const)
	TArray<class UGearboxDialogGroup*>                 NPCDialogGroups;                                          // 0x006C(0x000C) (Edit, Const, NeedCtorLink)
	class USwfMovie*                                   FastTravelMapMovie;                                       // 0x0078(0x0004) (Edit, Const)
	unsigned char                                      AllSideMissionsCompleteAchievement;                       // 0x007C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	class UFastTravelStationDefinition*                GatewayStationDefinition;                                 // 0x0080(0x0004) (Edit, Const)
	TArray<struct FPlayThroughData>                    RegionBalanceData;                                        // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	class UCurrencyListDefinition*                     Currencies;                                               // 0x0090(0x0004) (Edit, Const)
	int                                                MissionNumberBase;                                        // 0x0094(0x0004) (Edit, Const)
	TArray<class UMissionDefinition*>                  SeasonalMissionList;                                      // 0x0098(0x000C) (Edit, Const, NeedCtorLink)
	class UPlayerTrainingMessageListDefinition*        TrainingMessageListDef;                                   // 0x00A4(0x0004) (Edit, Const)
	struct FString                                     AlwaysLoadedMapSoundBankName;                             // 0x00A8(0x000C) (Edit, Const, NeedCtorLink)
	class UAkBank*                                     AlwaysLoadedSFXBank;                                      // 0x00B4(0x0004) (Transient)
	class UAkBank*                                     AlwaysLoadedVoiceBank;                                    // 0x00B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableExpansionDefinition");
		return ptr;
	}


	bool IsLevelTravelAccessible();
	bool CanTravelTo(class APlayerController* Controller);
};


// Class WillowGame.DownloadableItemSetDefinition
// 0x0020 (0x0058 - 0x0078)
class UDownloadableItemSetDefinition : public UDownloadableContentDefinition
{
public:
	class UAttributePresentationListDefinition*        DefaultAttributePresentation;                             // 0x0058(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ItemAttributePresentationOverride;                        // 0x005C(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ArtifactAttributePresentationOverride;                    // 0x0060(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ClassModAttributePresentationOverride;                    // 0x0064(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        GrenadeModAttributePresentationOverride;                  // 0x0068(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        ShieldAttributePresentationOverride;                      // 0x006C(0x0004) (Edit, Const)
	class UAttributePresentationListDefinition*        WeaponAttributePresentationOverride;                      // 0x0070(0x0004) (Edit, Const)
	class UParticleSystem*                             RainbowRarityLocatorStickOverride;                        // 0x0074(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableItemSetDefinition");
		return ptr;
	}


	struct FString GetDLCRestrictedMessage(bool bShort);
	bool CanUse(class APlayerController* Controller);
};


// Class WillowGame.DownloadableVehicleDefinition
// 0x0000 (0x0058 - 0x0058)
class UDownloadableVehicleDefinition : public UDownloadableContentDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableVehicleDefinition");
		return ptr;
	}


	bool CanDrive(class APlayerController* Controller);
};


// Class WillowGame.DownloadablePackageDefinition
// 0x003C (0x003C - 0x0078)
class UDownloadablePackageDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicenseObject;                               // 0x003C(0x0004) (Const, Native, NoExport)
	int                                                PackageId;                                                // 0x0040(0x0004) (Edit, Const)
	int                                                PackageMask;                                              // 0x0044(0x0004) (Edit, Const)
	struct FString                                     PackageDisplayName;                                       // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     DLCName;                                                  // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	int                                                SeasonPassId;                                             // 0x0060(0x0004) (Edit, Const)
	TArray<class UDownloadablePackageLicenseItem*>     LicenseItems;                                             // 0x0064(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	int                                                bUsesExtendedLicensing;                                   // 0x0070(0x0004) (Edit, Const)
	class UDownloadablePackageLicense*                 AppliedLicense;                                           // 0x0074(0x0004) (Edit, Const, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadablePackageDefinition");
		return ptr;
	}


	bool IsFullyInstalled();
	bool IsFullyLicensed();
	class UDownloadableContentDefinition* GetContentDefinitionById(int ContentId);
};


// Class WillowGame.DownloadablePackageLicense
// 0x0004 (0x003C - 0x0040)
class UDownloadablePackageLicense : public UObject
{
public:
	int                                                LicenseMask;                                              // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadablePackageLicense");
		return ptr;
	}

};


// Class WillowGame.DownloadablePackageLicenseItem
// 0x0004 (0x003C - 0x0040)
class UDownloadablePackageLicenseItem : public UObject
{
public:
	int                                                LicenseMask;                                              // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadablePackageLicenseItem");
		return ptr;
	}

};


// Class WillowGame.GoldenKeyLicenseItem
// 0x0008 (0x0040 - 0x0048)
class UGoldenKeyLicenseItem : public UDownloadablePackageLicenseItem
{
public:
	int                                                SourceId;                                                 // 0x0040(0x0004) (Edit, Const)
	int                                                NumKeys;                                                  // 0x0044(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GoldenKeyLicenseItem");
		return ptr;
	}

};


// Class WillowGame.MarketingUnlockLicenseItem
// 0x0004 (0x0040 - 0x0044)
class UMarketingUnlockLicenseItem : public UDownloadablePackageLicenseItem
{
public:
	int                                                UnlockId;                                                 // 0x0040(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MarketingUnlockLicenseItem");
		return ptr;
	}

};


// Class WillowGame.EffectCollectionDefinition
// 0x000C (0x003C - 0x0048)
class UEffectCollectionDefinition : public UGBXDefinition
{
public:
	TArray<struct FConditionalParticleEffectData>      ParticleEffects;                                          // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EffectCollectionDefinition");
		return ptr;
	}


	class UParticleSystem* GetParticleEffect(class UObject* ContextObject);
};


// Class WillowGame.EnvironmentTagDefinition
// 0x0000 (0x003C - 0x003C)
class UEnvironmentTagDefinition : public UGBXDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EnvironmentTagDefinition");
		return ptr;
	}

};


// Class WillowGame.EquippedInventoryAttributeContextResolver
// 0x0001 (0x003C - 0x003D)
class UEquippedInventoryAttributeContextResolver : public UAttributeContextResolver
{
public:
	unsigned char                                      EquipmentLocation;                                        // 0x003C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EquippedInventoryAttributeContextResolver");
		return ptr;
	}

};


// Class WillowGame.EventFilter_OnTouch
// 0x0004 (0x0040 - 0x0044)
class UEventFilter_OnTouch : public UBehaviorEventFilterBase
{
public:
	unsigned long                                      WillowPawnsAllowed : 1;                                   // 0x0040(0x0004) (Edit)
	unsigned long                                      VehiclesAllowed : 1;                                      // 0x0040(0x0004) (Edit)
	unsigned long                                      ProjectilesAllowed : 1;                                   // 0x0040(0x0004) (Edit)
	unsigned long                                      ItemsAllowed : 1;                                         // 0x0040(0x0004) (Edit)
	unsigned long                                      AnyAllegiance : 1;                                        // 0x0040(0x0004) (Edit)
	unsigned long                                      EnemiesOnly : 1;                                          // 0x0040(0x0004) (Edit)
	unsigned long                                      FriendliesOrNeutralsOnly : 1;                             // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EventFilter_OnTouch");
		return ptr;
	}


	bool AllowedToRunThisEvent(class UObject* ContextObject, class UObject* Instigator);
	bool PassesAllegianceTests(class UObject* ContextObject, class UObject* Instigator, bool IsPawn, bool IsVehicle, bool IsProjectile);
};


// Class WillowGame.ExperienceResourcePool
// 0x003C (0x0118 - 0x0154)
class UExperienceResourcePool : public UResourcePool
{
public:
	float                                              ExpCombatPointsScale;                                     // 0x0118(0x0004) (Transient)
	float                                              ExpCombatPointsScaleBaseValue;                            // 0x011C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExpCombatPointsScaleModifierStack;                        // 0x0120(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ExpMissionPointsScale;                                    // 0x012C(0x0004) (Transient)
	float                                              ExpMissionPointsScaleBaseValue;                           // 0x0130(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExpMissionPointsScaleModifierStack;                       // 0x0134(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ExpAllPointsScale;                                        // 0x0140(0x0004) (Transient)
	float                                              ExpAllPointsScaleBaseValue;                               // 0x0144(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExpAllPointsScaleModifierStack;                           // 0x0148(0x000C) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ExperienceResourcePool");
		return ptr;
	}


	void ApplyExpPointsToExpLevel(bool bCheated);
};


// Class WillowGame.ExplosionCollectionDefinition
// 0x000C (0x003C - 0x0048)
class UExplosionCollectionDefinition : public UGBXDefinition
{
public:
	TArray<struct FConditionalExplosionData>           Explosions;                                               // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ExplosionCollectionDefinition");
		return ptr;
	}


	class UExplosionDefinition* GetExplosion(class UObject* ContextObject);
};


// Class WillowGame.ExplosionDefinition
// 0x0050 (0x003C - 0x008C)
class UExplosionDefinition : public UGBXDefinition
{
public:
	class UAkEvent*                                    ExplosionAkEvent;                                         // 0x003C(0x0004) (Const, Deprecated)
	class UAkEvent*                                    MultipleExplosionsAkEvent;                                // 0x0040(0x0004) (Const)
	class UParticleSystem*                             ExplosionPSTemplate;                                      // 0x0044(0x0004) (Const, Deprecated)
	float                                              DrawScale;                                                // 0x0048(0x0004) (Const, Deprecated)
	TArray<struct FExplosionScaleData>                 ExplosionScale;                                           // 0x004C(0x000C) (Edit, Const, NeedCtorLink)
	class UCameraAnim*                                 CameraAnim;                                               // 0x0058(0x0004) (Const, Deprecated)
	float                                              MinCameraEffectDistance;                                  // 0x005C(0x0004) (Const, Deprecated)
	float                                              MaxCameraEffectDistance;                                  // 0x0060(0x0004) (Const, Deprecated)
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x0064(0x0004) (Const, EditInline, Deprecated)
	class UDamageTypeDefinition*                       DamageTypeDef;                                            // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bSkipTraceTest : 1;                                       // 0x006C(0x0004) (Edit, Const)
	class UWillowExplosionImpactDefinition*            ImpactEffect;                                             // 0x0070(0x0004) (Const, Deprecated)
	float                                              ImpactTraceLength;                                        // 0x0074(0x0004) (Edit, Const)
	TArray<struct FRecentExplosion>                    RecentExplosionTracker;                                   // 0x0078(0x000C) (Transient, NeedCtorLink)
	float                                              ExplosionSoundStackingPreventionDelay;                    // 0x0084(0x0004)
	float                                              ExplosionSoundStackingMaxDistanceSquared;                 // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ExplosionDefinition");
		return ptr;
	}


	bool DidAnExplosionForThisInstigatorJustGoOff(class UObject* Context, struct FVector* Location);
	void MakeExplodyShakes(int ExplosionScaleIndex, class AWillowPlayerController* WPC, const struct FVector& PawnLocation, const struct FVector& ExplosionLocation, float MinEffectDistance, float MaxEffectDistance, float EffectRange);
	void PlayExplosionCameraAnim(int ExplosionScaleIndex, const struct FVector& ExplosionLocation, bool bShouldReplicate);
	void PlayImpactEffects(int ExplosionScaleIndex, class AActor* SourceActor, const struct FVector& ExplosionLocation, const struct FVector& ExplosionNormal);
	void PlayMultipleExplosionsSound(class UObject* SourceObject, bool bReplicate);
	void PlayExplosion(class UObject* SourceObject, float DamageRadius, float Damage, bool bFullDamage, float Momentum, class UClass* DamageSource, const struct FVector& Location, const struct FVector& Normal, bool bReplicate, bool bNoSound, const struct FVector& Offset, const FScriptInterface& DamageCauser, bool bCanDamageFriendlies, bool bOverrideSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime);
	static bool IsExplosionDebugEnabled();
	static void ToggleExplosionDebug();
};


// Class WillowGame.FastTravelStationsListOrder
// 0x0010 (0x003C - 0x004C)
class UFastTravelStationsListOrder : public UGBXDefinition
{
public:
	TArray<class UFastTravelStationDefinition*>        FastTravelStationOrderList;                               // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	class UDownloadableExpansionDefinition*            DlcExpansion;                                             // 0x0048(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelStationsListOrder");
		return ptr;
	}

};


// Class WillowGame.FastTravelStationsLookup
// 0x0018 (0x003C - 0x0054)
class UFastTravelStationsLookup : public UObject
{
public:
	TArray<class UFastTravelStationDefinition*>        FastTravelStationLookupList;                              // 0x003C(0x000C) (Transient, NeedCtorLink)
	TArray<class ULevelTravelStationDefinition*>       LevelTravelStationLookupList;                             // 0x0048(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelStationsLookup");
		return ptr;
	}


	static bool AddStationToNameListInOrder(class UTravelStationDefinition* ActivatedStationDefinition, TArray<struct FName>* StationNameList);
	bool TravelStationIsSafe(const struct FName& StationDefinitionName);
	class UTravelStationDefinition* GetStartingTravelStation(const struct FName& StationDefinitionName);
	void GetStationsForLevel(const struct FName& LevelName, TArray<struct FName>* StationDefinitionNames);
	struct FVector GetLocation(const struct FName& StationDefinitionName);
	class UFastTravelStationDefinition* GetDefaultStationForLevel(const struct FName& LevelDefinitionName);
	struct FName GetLevelName(const struct FName& StationDefinitionName);
	class UTexture* GetDisplayImage(const struct FName& StationDefinitionName);
	struct FString GetDescription(const struct FName& StationDefinitionName);
	struct FString GetDisplayName(const struct FName& StationDefinitionName);
	class UTravelStationDefinition* FindTravelStationLookupObject(const struct FName& StationDefinitionName);
	class UFastTravelStationDefinition* FindFastTravelStationLookupObject(const struct FName& StationDefinitionName);
};


// Class WillowGame.FiringModeDefinition
// 0x014C (0x003C - 0x0188)
class UFiringModeDefinition : public UGBXDefinition
{
public:
	unsigned char                                      FireType;                                                 // 0x003C(0x0001) (Edit, Const)
	unsigned char                                      BeamLockBehavior;                                         // 0x003D(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	class UWillowDamageTypeDefinition*                 DamageTypeDefinition;                                     // 0x0040(0x0004) (Edit, Const)
	class UProjectileDefinition*                       ProjectileDefinition;                                     // 0x0044(0x0004) (Edit, Const)
	class UExplosionCollectionDefinition*              ExplosionOverrideDefinition;                              // 0x0048(0x0004) (Edit, Const)
	struct FName                                       ExplosionOverideInstanceDataName;                         // 0x004C(0x0008) (Edit, Const)
	class UParticleSystem*                             PartSysTemplate;                                          // 0x0054(0x0004) (Edit, Const)
	class UEffectCollectionDefinition*                 ConditionalPartSysTemplate;                               // 0x0058(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnAnyImpact;                                              // 0x005C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<struct FBulletImpactEventData>              ImpactResponses;                                          // 0x0068(0x000C) (Edit, Const, NeedCtorLink)
	float                                              Lifetime;                                                 // 0x0074(0x0004) (Edit, Const)
	float                                              TraceInterval;                                            // 0x0078(0x0004) (Edit, Const)
	unsigned long                                      bSuppressImpactEffects : 1;                               // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bPenetratePawn : 1;                                       // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bParameterizedSourceLocation : 1;                         // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bBeamChooseRandomBone : 1;                                // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bFireRandomlyFromPattern : 1;                             // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bResetPatternAfterEachShot : 1;                           // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bSuppressWeaponSpread : 1;                                // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bScalePatternByWeaponSpread : 1;                          // 0x007C(0x0004) (Edit, Const)
	class UParticleSystem*                             OverchargedImpactTemplate;                                // 0x0080(0x0004) (Const, Deprecated)
	int                                                NumRicochets;                                             // 0x0084(0x0004) (Edit, Const)
	float                                              Speed;                                                    // 0x0088(0x0004) (Edit, Const)
	struct FVector                                     Acceleration;                                             // 0x008C(0x000C) (Edit, Const)
	struct FVector                                     WaveFreq;                                                 // 0x0098(0x000C) (Edit, Const)
	struct FVector                                     WaveAmp;                                                  // 0x00A4(0x000C) (Edit, Const)
	struct FVector                                     WavePhase;                                                // 0x00B0(0x000C) (Edit, Const)
	float                                              RicochetFriction;                                         // 0x00BC(0x0004) (Edit, Const)
	float                                              AirFriction;                                              // 0x00C0(0x0004) (Edit, Const)
	TArray<struct FBulletTimerEvent>                   TimerEvents;                                              // 0x00C4(0x000C) (Edit, NeedCtorLink)
	struct FBulletEventResponse                        RicochetResponse;                                         // 0x00D0(0x0028) (Edit, NeedCtorLink)
	struct FVector                                     TraceExtent;                                              // 0x00F8(0x000C) (Edit, Const)
	struct FName                                       LightProjectileSourceLocationName;                        // 0x0104(0x0008) (Edit, Const)
	float                                              BeamMaxLockOnDistance;                                    // 0x010C(0x0004) (Edit, Const)
	float                                              BeamMaxLength;                                            // 0x0110(0x0004) (Edit, Const)
	float                                              BeamSourceTangentStrengthOverDistance;                    // 0x0114(0x0004) (Edit, Const)
	float                                              BeamTargetTangentStrengthOverDistance;                    // 0x0118(0x0004) (Edit, Const)
	float                                              BeamApproxRepUpdateTime;                                  // 0x011C(0x0004) (Edit, Const)
	int                                                BeamTraceNumSteps;                                        // 0x0120(0x0004) (Edit, Const)
	struct FName                                       BeamSourceLocationName;                                   // 0x0124(0x0008) (Edit, Const)
	struct FName                                       BeamSourceTangentName;                                    // 0x012C(0x0008) (Edit, Const)
	struct FName                                       BeamSourceStrengthName;                                   // 0x0134(0x0008) (Edit, Const)
	struct FName                                       BeamTargetLocationName;                                   // 0x013C(0x0008) (Edit, Const)
	struct FName                                       BeamTargetTangentName;                                    // 0x0144(0x0008) (Edit, Const)
	struct FName                                       BeamTargetStrengthName;                                   // 0x014C(0x0008) (Edit, Const)
	struct FName                                       BeamDirectionName;                                        // 0x0154(0x0008) (Edit, Const)
	float                                              BeamChainDelay;                                           // 0x015C(0x0004) (Edit, Const)
	int                                                BeamChainNum;                                             // 0x0160(0x0004) (Edit, Const)
	float                                              BeamChainMaxDistance;                                     // 0x0164(0x0004) (Edit, Const)
	float                                              BeamRandomBoneTimeMin;                                    // 0x0168(0x0004) (Edit, Const)
	float                                              BeamRandomBoneTimeMax;                                    // 0x016C(0x0004) (Edit, Const)
	class UFiringModeSoundDefinition*                  SoundDefinition;                                          // 0x0170(0x0004) (Edit, Const)
	TArray<struct FFiringPatternLine>                  FiringPatternLines;                                       // 0x0174(0x000C) (Edit, Const, NeedCtorLink)
	float                                              BasePatternSpread;                                        // 0x0180(0x0004) (Edit, Const)
	float                                              MinPatternScale;                                          // 0x0184(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FiringModeDefinition");
		return ptr;
	}


	class UParticleSystem* GetParticleSystemTemplate(class UObject* ContextObject);
	void NotifyFiringPatternWhenShotComplete(int* NextFiringPatternIndex);
	int GetFiringPatternAdjustments(float WeaponSpread, struct FRotator* InputAimAdjustment, struct FRotator* OutputAimAdjustment, struct FWaveMotionData* CustomWaveMotion, int* NextFiringPatternIndex);
	void RunBehaviorsForImpact(int ResponseIndex, const struct FImpactInfo& ImpactData, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, class UObject* OtherInstigatorObject);
	int GetImpactResponseIndex(unsigned char DamageSurfaceType);
};


// Class WillowGame.FiringModeSoundDefinition
// 0x0040 (0x003C - 0x007C)
class UFiringModeSoundDefinition : public UGBXDefinition
{
public:
	TArray<struct FConditionalSoundData>               FireSounds;                                               // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               FireTailSounds;                                           // 0x0048(0x000C) (Edit, Const, NeedCtorLink)
	class UWillowImpactDefinition*                     ShellCasingImpact;                                        // 0x0054(0x0004) (Edit, Const)
	float                                              ShellCasingDelay;                                         // 0x0058(0x0004) (Edit, Const)
	class UAkEvent*                                    TravelingSoundEvent;                                      // 0x005C(0x0004) (Edit, Const)
	TArray<struct FConditionalSoundData>               BulletWhipSounds;                                         // 0x0060(0x000C) (Edit, Const, NeedCtorLink)
	float                                              BulletWhipRadius;                                         // 0x006C(0x0004) (Edit, Const)
	class UAkEvent*                                    BeamSoundEvent;                                           // 0x0070(0x0004) (Edit, Const)
	class UAkEvent*                                    BeamStopSoundEvent;                                       // 0x0074(0x0004) (Edit, Const)
	class UAkEvent*                                    BeamImpactSoundEvent;                                     // 0x0078(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FiringModeSoundDefinition");
		return ptr;
	}

};


// Class WillowGame.FlyerBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class AFlyerBlockingVolume : public ABlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FlyerBlockingVolume");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
};


// Class WillowGame.FocusCameraDefinition
// 0x0010 (0x003C - 0x004C)
class UFocusCameraDefinition : public UGBXDefinition
{
public:
	float                                              CamReturnTime;                                            // 0x003C(0x0004) (Edit, Const)
	float                                              CamMovementThreshold;                                     // 0x0040(0x0004) (Edit, Const)
	float                                              CamMovementSpeed_Fast;                                    // 0x0044(0x0004) (Edit, Const)
	float                                              CamMovementSpeed_Slow;                                    // 0x0048(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FocusCameraDefinition");
		return ptr;
	}

};


// Class WillowGame.FractalViewWanderingDefinition
// 0x0010 (0x003C - 0x004C)
class UFractalViewWanderingDefinition : public UGBXDefinition
{
public:
	TArray<struct FVector2D>                           PseudoRandomPoints;                                       // 0x003C(0x000C) (Edit, NeedCtorLink)
	int                                                NumberOfOctaves;                                          // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FractalViewWanderingDefinition");
		return ptr;
	}


	void GenerateNewRandomPoints();
};


// Class WillowGame.GameBalanceDefinition
// 0x000C (0x003C - 0x0048)
class UGameBalanceDefinition : public UGBXDefinition
{
public:
	TArray<struct FRegionBalanceData>                  BalanceByRegion;                                          // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GameBalanceDefinition");
		return ptr;
	}

};


// Class WillowGame.GameReleaseDefinition
// 0x000C (0x003C - 0x0048)
class UGameReleaseDefinition : public UGBXDefinition
{
public:
	struct FName                                       WorldDiscoveryStatID;                                     // 0x003C(0x0008) (Edit, Const)
	int                                                NumWorldDiscoveryAreas;                                   // 0x0044(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GameReleaseDefinition");
		return ptr;
	}

};


// Class WillowGame.GearLikenessMeshComponent
// 0x000C (0x06AC - 0x06B8)
class UGearLikenessMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      LikenessOf;                                               // 0x06AC(0x0001) (Edit)
	unsigned char                                      GroupIndex;                                               // 0x06AD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x06AE(0x0002) MISSED OFFSET
	struct FQWord                                      CachedLikenessID;                                         // 0x06B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GearLikenessMeshComponent");
		return ptr;
	}


	static void RefreshGearLikenessComponents(class AActor* ComponentUser, unsigned char Mode, struct FInstanceDataSet* InstanceDataState, struct FReplicatedInstanceDataState* ReplicatedInstanceDataState);
};


// Class WillowGame.GenericReviveMessageDefinition
// 0x0018 (0x003C - 0x0054)
class UGenericReviveMessageDefinition : public UGBXDefinition
{
public:
	struct FString                                     Message_Self;                                             // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Message_Other;                                            // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GenericReviveMessageDefinition");
		return ptr;
	}

};


// Class WillowGame.GlobalAttributeValueResolver
// 0x0001 (0x003C - 0x003D)
class UGlobalAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      GlobalAttribute;                                          // 0x003C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GlobalAttributeValueResolver");
		return ptr;
	}


	static float GetGlobalAttributeValue(unsigned char Attribute);
	static void SetGlobalAttributeValue(unsigned char Attribute, float Value);
};


// Class WillowGame.HitRegionHelper
// 0x000C (0x003C - 0x0048)
class UHitRegionHelper : public UObject
{
public:
	TArray<struct FHitRegionDamage>                    HitRegionDamageList;                                      // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HitRegionHelper");
		return ptr;
	}


	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, class UDamagePipeline* Pipeline, struct FTraceHitInfo* HitInfo);
	void ResetHitRegionHealth(class AActor* Owner, class UBodyHitRegionDefinition* HitRegion);
	void HealDamageOnHitRegion(class AActor* Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary);
	struct FName GetBoneNameFromHitComponent(class UPrimitiveComponent* HitComponent, class USkeletalMeshComponent* Mesh);
	class UBodyHitRegionDefinition* GetHitRegionFromInstanceData(class UPrimitiveComponent* HitComponent, struct FInstanceDataSet* InstanceState);
	class UBodyHitRegionDefinition* GetHitRegionFromBoneName(const struct FName& BoneName, class UBodyHitRegionDefinition* DefaultRegion, TArray<class UBodyHitRegionDefinition*>* HitRegionList);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, class USkeletalMeshComponent* Mesh, class UBodyHitRegionDefinition* DefaultHitRegion, struct FTraceHitInfo* HitInfo, struct FInstanceDataSet* InstanceDataState, TArray<class UBodyHitRegionDefinition*>* HitRegionList);
	void GetHealthValuesForOwner(class AActor* Owner, float* Health, float* MaxHealth);
	void AddDamageToHitRegion(class AActor* Owner, class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, float HitRegionHealthScale, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FBehaviorConsumerHandle* ConsumerHandle, struct FDamageEventSummary* DamageSummary);
	void RecordRecentDamageToHitRegion(class UBodyHitRegionDefinition* HitRegion, float Damage);
	void PlayHealing(const FScriptInterface& Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int HealIndex, class AController* InstigatedBy);
	void PlayDamage(const FScriptInterface& Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int DamageIndex, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitMomentum, bool bDead);
	void PlayReplicatedDamage(const FScriptInterface& Owner, const struct FBehaviorConsumerHandle& ConsumerHandle, class UBodyHitRegionDefinition* HitRegion, int DamageIndices, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitMomentum);
	void GetHitRegionHealthValues(class AActor* Owner, class UBodyHitRegionDefinition* HitRegion, float HitRegionHealthMultiplier, float* Health, float* MaxHealth);
};


// Class WillowGame.IAnimProvider
// 0x0000 (0x003C - 0x003C)
class UIAnimProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IAnimProvider");
		return ptr;
	}


	void GetAnims(TArray<class UGearboxAnimDefinition*>* OutAnims);
};


// Class WillowGame.IAttachableActor
// 0x0000 (0x003C - 0x003C)
class UIAttachableActor : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IAttachableActor");
		return ptr;
	}


	class AActor* GetAttachedToActor();
	struct FVector GetAttachmentNormal();
	void AttachToActor(class AActor* ActorToAttachTo, const struct FVector& HitNormal, const struct FVector& HitLocation, const struct FName& BoneName);
	bool IsAttached();
};


// Class WillowGame.IBodyPawn
// 0x0000 (0x003C - 0x003C)
class UIBodyPawn : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IBodyPawn");
		return ptr;
	}


	class AWillowAIPawn* GetAWillowAIPawn();
	class AWillowPlayerPawn* GetAWillowPlayerPawn();
	class AWillowPawn* GetAWillowPawn();
};


// Class WillowGame.IControllerLocator
// 0x0000 (0x003C - 0x003C)
class UIControllerLocator : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IControllerLocator");
		return ptr;
	}


	class AWillowMind* GetAWillowMind();
	class AWillowPlayerController* GetAWillowPlayerController();
	class AController* GetABaseController();
};


// Class WillowGame.ICustomizable
// 0x0000 (0x003C - 0x003C)
class UICustomizable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ICustomizable");
		return ptr;
	}


	bool AllowFallbackToDefaultCustomizations();
	void RefreshCustomizationsOnInstanceData();
	struct FName GetCustomizableName();
	class UCustomizationDefinition* GetDesiredCustomizationOfType(class UClass* Type);
	void CustomizationApplied(class UCustomizationData* Data);
	void GetCustomizableInstanceDataSets(TArray<struct FPointer>* OutData);
};


// Class WillowGame.IDamageable
// 0x0000 (0x003C - 0x003C)
class UIDamageable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IDamageable");
		return ptr;
	}


	unsigned char GetDamageSurfaceTypeFromHit(struct FTraceHitInfo* HitInfo);
	float GetIntrinsicArmor();
	bool ShieldAbsorbedAmmo(class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb);
	void OnShieldDepleted(class AController* DamageInstigator, unsigned char DamageType);
	void SetShieldStrength(float ShieldValue);
	float GetMaxShieldStrength();
	float GetShieldStrength();
	void NotifyDamageTaken(struct FDamageEventSummary* DamageSummary);
};


// Class WillowGame.IDamageSurface
// 0x0000 (0x003C - 0x003C)
class UIDamageSurface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IDamageSurface");
		return ptr;
	}


	bool IsFullyArmored();
	unsigned char GetDamageSurfaceTypeFromHit(struct FTraceHitInfo* HitInfo);
	unsigned char GetDefaultDamageSurfaceType();
};


// Class WillowGame.IDesignerAttributeProvider
// 0x0000 (0x003C - 0x003C)
class UIDesignerAttributeProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IDesignerAttributeProvider");
		return ptr;
	}


	class UInstancedDesignerAttribute* GetInstancedDesignerAttribute(class UAttributeDefinition* Definition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
};


// Class WillowGame.IDlcLicensableObject
// 0x0000 (0x003C - 0x003C)
class UIDlcLicensableObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IDlcLicensableObject");
		return ptr;
	}


	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
};


// Class WillowGame.IDlcLicenseObject
// 0x0000 (0x003C - 0x003C)
class UIDlcLicenseObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IDlcLicenseObject");
		return ptr;
	}

};


// Class WillowGame.IDrunkenProjectile
// 0x0000 (0x003C - 0x003C)
class UIDrunkenProjectile : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IDrunkenProjectile");
		return ptr;
	}


	void SetDrunkenRandomNumberSeed(int RandomNumberSeed);
};


// Class WillowGame.IDynamicObstacle
// 0x0000 (0x003C - 0x003C)
class UIDynamicObstacle : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IDynamicObstacle");
		return ptr;
	}


	void GetObstacleInfo(struct FObstacleData* Data);
	class AActor* GetObstacleActor();
	bool GetMagnetData(struct FVector* MagnetLoc, struct FVector* MagnetVel);
	void SetObstacleVelocity(struct FVector* NewVelocity);
	bool CanAvoidObstacle(struct FObstacleData* Obstacle);
	bool CanAvoidObstacles();
	void SetObstacleActive(bool bActive);
	bool IsObstacleActive();
};


// Class WillowGame.IExtraImpactEffects
// 0x0000 (0x003C - 0x003C)
class UIExtraImpactEffects : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IExtraImpactEffects");
		return ptr;
	}


	void PlayExtraImpactEffects(unsigned char BulletFromClip, struct FImpactInfo* InImpactInfo);
	void SetExtraImpactEffect(unsigned char BulletFromClip, class UWillowImpactDefinition* Definition);
};


// Class WillowGame.IFocusable
// 0x0000 (0x003C - 0x003C)
class UIFocusable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IFocusable");
		return ptr;
	}


	struct FVector GetFocusScreenOffset();
	float GetFocusRadius();
	struct FVector GetFocusLocation();
	void EndFocus(class APawn* User);
	void BeginFocus(class APawn* User);
};


// Class WillowGame.IGearLikenessConsumer
// 0x0000 (0x003C - 0x003C)
class UIGearLikenessConsumer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IGearLikenessConsumer");
		return ptr;
	}


	bool ShouldRefreshLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
	void AssumeLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
};


// Class WillowGame.IHealable
// 0x0000 (0x003C - 0x003C)
class UIHealable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IHealable");
		return ptr;
	}


	void RemoveAllStatusEffects();
	void FullyReplenishShields();
	void FullyReplenishLife();
};


// Class WillowGame.IHitRegionConsumer
// 0x0000 (0x003C - 0x003C)
class UIHitRegionConsumer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IHitRegionConsumer");
		return ptr;
	}


	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void ResetHitRegionHealth(class UBodyHitRegionDefinition* HitRegion);
	void HealDamageOnHitRegion(class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary);
	void PlayHealingReaction(struct FDamageReactionData* Data);
	void PlayDamageReaction(const struct FName& HitBone, bool bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum);
	void ReplicateDamageEffect(class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bWasHeal);
	void AddDamageToHitRegion(class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FDamageEventSummary* DamageSummary);
	void GetHitRegionHealthValues(class UBodyHitRegionDefinition* HitRegion, float* Health, float* MaxHealth);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, const struct FTraceHitInfo& HitInfo);
};


// Class WillowGame.IHitRegionInfoProvider
// 0x0000 (0x003C - 0x003C)
class UIHitRegionInfoProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IHitRegionInfoProvider");
		return ptr;
	}


	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
};


// Class WillowGame.IStatusEffectTarget
// 0x0000 (0x003C - 0x003C)
class UIStatusEffectTarget : public UIHitRegionInfoProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IStatusEffectTarget");
		return ptr;
	}


	bool CanReceiveStatusEffects();
	void ReactToPrimaryStatusEffect(class UStatusEffectDefinition* StatusEffect);
	void Behavior_ClearStatusEffects(bool bKillImmediately);
	class UObject* GetAttributeContextSource();
	unsigned char GetDefaultDamageSurfaceType();
	float GetBoundingSphereRadius();
	void AttachEmitter(class AEmitter* E, const struct FName& SocketName);
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate();
	TArray<struct FName> GetDefaultStatusEffectSockets();
	class UStatusEffectsComponent* GetStatusEffectsComponent();
};


// Class WillowGame.InventoryCardGFx
// 0x0000 (0x003C - 0x003C)
class UInventoryCardGFx : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryCardGFx");
		return ptr;
	}


	static void UpdateCardPanel(class UWillowGFxMovie* Movie, int CardIndex, class AWillowInventory* MainThing, class AWillowInventory* OtherThing, class UGearboxRenderTextureManager* RTM, const struct FString& Path, struct FCellContentData* LeftCardInfo, struct FCellContentData* RightCardInfo);
	static void SetMissionItemCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowMissionItem* Item);
	static void SetItemCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowUsableItem* Item);
	static void SetArtifactCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowArtifact* Artifact, class AWillowInventory* CompareAgainstArtifact);
	static void SetClassModCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowClassMod* ClassMod, class AWillowInventory* CompareAgainstMod);
	static void SetGrenadeModCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowGrenadeMod* GrenadeMod, class AWillowInventory* CompareAgainstMod);
	static void SetShieldCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowShield* Shield, class AWillowInventory* CompareAgainstShield);
	static void SetWeaponCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowWeapon* Weapon, class AWillowInventory* CompareAgainstWeapon);
	static void SetInventoryCard(class UWillowGFxMovie* Movie, int CardIndex, class AWillowInventory* Thing1, class AWillowInventory* Thing2);
	static void SetCardUIStats(class UWillowGFxMovie* Movie, int CardIndex, TArray<struct FTopStatData>* TopStats);
};


// Class WillowGame.IItemCardable
// 0x0000 (0x003C - 0x003C)
class UIItemCardable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IItemCardable");
		return ptr;
	}


	bool IsUsefulToThisPlayer(class APlayerController* C);
	bool IsReadied();
	struct FString GetDLCRestrictedMessage(class APlayerController* Other, bool bShort);
	bool IsDLCRequirementMet(class APlayerController* Other);
	bool IsLevelRequirementMet(class AController* C, int* RequiredLevel);
	int GetMonetaryValue();
	unsigned char GetCurrencyTypeInventoryIsValuedIn();
	struct FString GetElementalFrame();
	struct FString GetZippyFrame();
	int GetRarityLevel();
	struct FString GetShortHumanReadableName();
	class UManufacturerDefinition* GetManufacturer();
	struct FString GenerateFunStatsText();
	void GetInventoryStatTextData(TArray<struct FModifierValuePresentationData>* Stats);
	void GetInventoryStatNumberData(class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray<struct FTopStatData>* Stats);
};


// Class WillowGame.ILevelChallengeObject
// 0x0000 (0x003C - 0x003C)
class UILevelChallengeObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ILevelChallengeObject");
		return ptr;
	}


	void SetOverrideProgressNumber(unsigned char ProgressNum);
	void SetOverrideAssociatedChallenge(class UChallengeDefinition* ChalDef);
	unsigned char GetProgressNumber();
	class UChallengeDefinition* GetAssociatedChallenge();
};


// Class WillowGame.ILootable
// 0x0000 (0x003C - 0x003C)
class UILootable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ILootable");
		return ptr;
	}


	bool WillLootableBeResetOnLevelLoad();
	bool GetDroppedLoot(TArray<struct FSpawnedDroppedLootData>* SpawnedLoot);
	bool GetAttachedLoot(TArray<struct FSpawnedAttachedLootData>* SpawnedLoot);
};


// Class WillowGame.IMapDisplayInfo
// 0x0000 (0x003C - 0x003C)
class UIMapDisplayInfo : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMapDisplayInfo");
		return ptr;
	}


	struct FString GetMapDisplayName();
	struct FString GetMapDisplayHeader();
};


// Class WillowGame.IMaterialFadeBehavior
// 0x0000 (0x003C - 0x003C)
class UIMaterialFadeBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMaterialFadeBehavior");
		return ptr;
	}


	void Behavior_UseMaterialScalarFadeForGoreDeath(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime, bool bDestroyActorAfterGoreEffect);
	void Behavior_MaterialScalarFade(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime);
};


// Class WillowGame.IMeleeAttacker
// 0x0000 (0x003C - 0x003C)
class UIMeleeAttacker : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMeleeAttacker");
		return ptr;
	}


	bool ShouldIgnoreInstigatorVelocity();
	void GetMeleeState(float* StartTime, float* LastTime, struct FVector* StartLoc, struct FRotator* StartRot);
	bool HasActorAlreadyBeenHitByMelee(class AActor* HitActor);
	void AddActorToListOfHitActors(class AActor* HitActor);
	void EndMeleeOverTime();
	void BeginMeleeOverTime(class UMeleeDefinition* MeleeDefinition);
	float GetMeleeAttackerMass();
	void GetMeleeTraceSourceLocationAndRotation(struct FVector* OutTraceStart, struct FRotator* OutTraceStartRotation);
	class APawn* GetMeleeInstigator();
	class AActor* GetMeleeTraceSourceActor();
};


// Class WillowGame.IMission
// 0x0000 (0x003C - 0x003C)
class UIMission : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMission");
		return ptr;
	}


	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
};


// Class WillowGame.IMissionInventory
// 0x0000 (0x003C - 0x003C)
class UIMissionInventory : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMissionInventory");
		return ptr;
	}

};


// Class WillowGame.IMissionObjective
// 0x0000 (0x003C - 0x003C)
class UIMissionObjective : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMissionObjective");
		return ptr;
	}


	int GetObjectiveBit();
};


// Class WillowGame.InjuredDefinition
// 0x0140 (0x003C - 0x017C)
class UInjuredDefinition : public UGBXDefinition
{
public:
	class UPawnInteractionDefinition*                  InjuredInteractionDefinition;                             // 0x003C(0x0004) (Edit, Const)
	TArray<struct FAttributeEffectData>                InjuredAttributeModifiers;                                // 0x0040(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      InjuredBonusEnabled : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bDoBleedout : 1;                                          // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      SwitchToSidearmWhenInjured : 1;                           // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bForceCrouch : 1;                                         // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAllowSprinting : 1;                                      // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bOverrideInjuredDeadCamera : 1;                           // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      InjuredPreDeathRecoverRotation : 1;                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      InjuredPreDeathRecoverOrbit : 1;                          // 0x004C(0x0004) (Edit, Const)
	float                                              InjuredBonusDamageScale;                                  // 0x0050(0x0004) (Edit, Const)
	int                                                InjuredBonusTimePercent;                                  // 0x0054(0x0004) (Edit, Const)
	float                                              BaseRejuvenateDelay;                                      // 0x0058(0x0004) (Edit, Const)
	float                                              BaseMultiplePlayersRejuvenateDelay;                       // 0x005C(0x0004) (Edit, Const)
	float                                              NoEnemiesDelayMultiplier;                                 // 0x0060(0x0004) (Const, Deprecated)
	float                                              ReviveDuration;                                           // 0x0064(0x0004) (Edit, Const)
	float                                              AutoReviveCheckDelay;                                     // 0x0068(0x0004) (Edit, Const)
	float                                              InjuredViewDropCycleTime;                                 // 0x006C(0x0004) (Edit, Const)
	float                                              InjuredViewDropStrength;                                  // 0x0070(0x0004) (Edit, Const)
	float                                              InjuredMouseSensitivityMultiplier;                        // 0x0074(0x0004) (Edit, Const)
	class UParticleSystem*                             InjuredScreenFadePartSys;                                 // 0x0078(0x0004) (Edit)
	class UCameraAnim*                                 InjuredCameraAnim;                                        // 0x007C(0x0004) (Edit, Const)
	class UAkEvent*                                    InjuredStartAkEvent;                                      // 0x0080(0x0004) (Edit, Const)
	class UAkEvent*                                    InjuredStopAkEvent;                                       // 0x0084(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       InjuredBehaviors;                                         // 0x0088(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       TargetedBehaviors;                                        // 0x0094(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       AboutToDieBehaviors;                                      // 0x00A0(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       NoEnemyBehaviors;                                         // 0x00AC(0x000C) (Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       DamageEnemyBehaviors;                                     // 0x00B8(0x000C) (Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       DamageSelfBehaviors;                                      // 0x00C4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       KilledEnemyBehaviors;                                     // 0x00D0(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       RecoveredBehaviors;                                       // 0x00DC(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       ResurrectedBehaviors;                                     // 0x00E8(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       RevivedBehaviors;                                         // 0x00F4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       PermadeathBehaviors;                                      // 0x0100(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	float                                              RejuvenatedHealthPctOfMax;                                // 0x010C(0x0004) (Edit, Const)
	float                                              RejuvenatedShieldPctOfMax;                                // 0x0110(0x0004) (Edit, Const)
	float                                              ResurrectedHealthPctOfMax;                                // 0x0114(0x0004) (Edit, Const)
	float                                              ResurrectedShieldPctOfMax;                                // 0x0118(0x0004) (Edit, Const)
	float                                              RevivedHealthPctOfMax;                                    // 0x011C(0x0004) (Edit, Const)
	float                                              RevivedShieldPctOfMax;                                    // 0x0120(0x0004) (Edit, Const)
	float                                              MaxTimeBetweenInjuries;                                   // 0x0124(0x0004) (Edit, Const)
	int                                                MaxDesiredSuccessiveInjuries;                             // 0x0128(0x0004) (Edit, Const)
	float                                              InjuredMovementSpeed;                                     // 0x012C(0x0004) (Edit, Const)
	struct FName                                       InjuredMovementAnimNodeName;                              // 0x0130(0x0008) (Edit, Const)
	float                                              InjuredWeaponPutDownTime;                                 // 0x0138(0x0004) (Edit, Const)
	float                                              InjuredWeaponEquipTime;                                   // 0x013C(0x0004) (Edit, Const)
	class UWillowAnimDefinition*                       InjuredSpecialMoveOverride;                               // 0x0140(0x0004) (Edit, Const)
	class UWillowAnimDefinition*                       InjuredPreDeathAnim;                                      // 0x0144(0x0004) (Edit, Const)
	float                                              InjuredDeadCameraStartDistance;                           // 0x0148(0x0004) (Edit, Const)
	float                                              InjuredDeadCameraEndDistance;                             // 0x014C(0x0004) (Edit, Const)
	float                                              InjuredDeadCameraLerpTime;                                // 0x0150(0x0004) (Edit, Const)
	struct FRotator                                    InjuredDeadCameraRotation;                                // 0x0154(0x000C) (Edit, Const)
	float                                              InjuredDeadDelayBetweenDeathAnimAndDigistruct;            // 0x0160(0x0004) (Edit, Const)
	float                                              InjuredDeadDelayBeforeDigistructKillVolume;               // 0x0164(0x0004) (Edit, Const)
	struct FName                                       InjuredDeadBoneName;                                      // 0x0168(0x0008) (Edit, Const)
	float                                              InjuredPreDeathRecoveryTime;                              // 0x0170(0x0004) (Edit, Const)
	float                                              InjuredPreDeathRecoveryExponent;                          // 0x0174(0x0004) (Edit, Const)
	class UWillowAnimDefinition*                       InjuredPreDeathRecoveryAnim;                              // 0x0178(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InjuredDefinition");
		return ptr;
	}

};


// Class WillowGame.InputActionDefinition
// 0x0024 (0x003C - 0x0060)
class UInputActionDefinition : public UGBXDefinition
{
public:
	TArray<class UBehaviorBase*>                       OnBegin;                                                  // 0x003C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnEnd;                                                    // 0x0048(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	unsigned long                                      bAlwaysAvailable : 1;                                     // 0x0054(0x0004) (Edit, Const)
	struct FName                                       ActionName;                                               // 0x0058(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputActionDefinition");
		return ptr;
	}

};


// Class WillowGame.InputContextDefinition
// 0x0018 (0x003C - 0x0054)
class UInputContextDefinition : public UGBXDefinition
{
public:
	TArray<class UInputActionDefinition*>              InputActions;                                             // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UInputSetDefinition*>                 InputSets;                                                // 0x0048(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputContextDefinition");
		return ptr;
	}


	bool ContainsInputAction(class UInputActionDefinition* Action);
};


// Class WillowGame.InputDeviceCollectionDefinition
// 0x0030 (0x003C - 0x006C)
class UInputDeviceCollectionDefinition : public UGBXDefinition
{
public:
	TArray<class UInputDeviceDefinition*>              XboxInputDevices;                                         // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UInputDeviceDefinition*>              PS3InputDevices;                                          // 0x0048(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UInputDeviceDefinition*>              PCInputDevices;                                           // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FName>                               PCKeyBindGroups;                                          // 0x0060(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputDeviceCollectionDefinition");
		return ptr;
	}

};


// Class WillowGame.InputDeviceDefinition
// 0x0020 (0x003C - 0x005C)
class UInputDeviceDefinition : public UGBXDefinition
{
public:
	TArray<struct FInputDeviceAxisData>                Axes;                                                     // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	struct FLookAxisDefinitionData                     LookAxisDefinitions;                                      // 0x0048(0x0008) (Edit, Const)
	TArray<struct FInputDeviceButtonData>              Buttons;                                                  // 0x0050(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputDeviceDefinition");
		return ptr;
	}

};


// Class WillowGame.InputRemappingDefinition
// 0x0030 (0x003C - 0x006C)
class UInputRemappingDefinition : public UGBXDefinition
{
public:
	struct FName                                       PresetTag;                                                // 0x003C(0x0008) (Edit, Const)
	struct FString                                     PresetCaption;                                            // 0x0044(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bShowInPresetMenu : 1;                                    // 0x0050(0x0004) (Edit, Const)
	TArray<struct FInputRemappingAxisData>             RemappedAxes;                                             // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FInputRemappingButtonData>           RemappedButtons;                                          // 0x0060(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputRemappingDefinition");
		return ptr;
	}

};


// Class WillowGame.InputSetDefinition
// 0x000C (0x003C - 0x0048)
class UInputSetDefinition : public UGBXDefinition
{
public:
	TArray<class UInputActionDefinition*>              InputActions;                                             // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputSetDefinition");
		return ptr;
	}

};


// Class WillowGame.InRangeOfInjuredPlayerExpressionEvaluator
// 0x0000 (0x003C - 0x003C)
class UInRangeOfInjuredPlayerExpressionEvaluator : public UExpressionEvaluator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InRangeOfInjuredPlayerExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.InstancedDesignerAttribute
// 0x0058 (0x003C - 0x0094)
class UInstancedDesignerAttribute : public UObject
{
public:
	class UDesignerAttributeDefinition*                Definition;                                               // 0x003C(0x0004)
	struct FName                                       AttributeName;                                            // 0x0040(0x0008)
	unsigned char                                      AttributeDataType;                                        // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x004C(0x0004) (Transient)
	float                                              ValueBaseValue;                                           // 0x0050(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ValueModifierStack;                                       // 0x0054(0x000C) (Const, Transient, NeedCtorLink)
	int                                                IntValue;                                                 // 0x0060(0x0004) (Transient)
	int                                                IntValueBaseValue;                                        // 0x0064(0x0004) (Const)
	TArray<class UAttributeModifier*>                  IntValueModifierStack;                                    // 0x0068(0x000C) (Const, Transient, NeedCtorLink)
	int                                                BoolValue;                                                // 0x0074(0x0004) (Transient)
	int                                                BoolValueBaseValue;                                       // 0x0078(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BoolValueModifierStack;                                   // 0x007C(0x000C) (Const, Transient, NeedCtorLink)
	struct FString                                     DesignerAttributeDefinitionPathName;                      // 0x0088(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InstancedDesignerAttribute");
		return ptr;
	}


	void SetBaseValue(const struct FAttributeInitializationData& InitializationData, class AActor* ContextSource);
	void InitializeByName(const struct FName& InName, class AActor* ContextSource, unsigned char InAttributeDataType);
	void Initialize(class UDesignerAttributeDefinition* InDefinition, class AActor* ContextSource);
};


// Class WillowGame.InteractionIconDefinition
// 0x001C (0x003C - 0x0058)
class UInteractionIconDefinition : public UEngineInteractionIconDefinition
{
public:
	unsigned char                                      Icon;                                                     // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FString                                     Action;                                                   // 0x0040(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Text;                                                     // 0x004C(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InteractionIconDefinition");
		return ptr;
	}

};


// Class WillowGame.InteractionProxy
// 0x0018 (0x0194 - 0x01AC)
class AInteractionProxy : public ATrigger
{
public:
	struct FPointer                                    VfTable_IIUsable;                                         // 0x0194(0x0004) (Const, Native, NoExport)
	class UWillowPawnInteractionDefinition*            Definition;                                               // 0x0198(0x0004)
	unsigned long                                      bPassEventsToKismet : 1;                                  // 0x019C(0x0004)
	unsigned long                                      bCostsToUse : 1;                                          // 0x019C(0x0004) (Edit)
	unsigned long                                      bCostsToSecondaryUse : 1;                                 // 0x019C(0x0004) (Edit)
	unsigned long                                      bSecondaryUsable : 1;                                     // 0x019C(0x0004) (Edit)
	unsigned char                                      CostsToUseType;                                           // 0x01A0(0x0001) (Edit)
	unsigned char                                      CostsToSecondaryUseType;                                  // 0x01A1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01A2(0x0002) MISSED OFFSET
	int                                                CostsToUseAmount;                                         // 0x01A4(0x0004) (Edit)
	int                                                CostsToSecondaryUseAmount;                                // 0x01A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InteractionProxy");
		return ptr;
	}


	void NotifyUserCouldNotAffordAttemptedUse(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	bool AllowTouchEvent(class AActor* Other);
	bool UsedBy(class APawn* User);
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void BaseChange();
	void Destroyed();
	void Initialize(class UPawnInteractionDefinition* InDefinition, class AActor* InInstigator);
	bool AllowUseEvent(unsigned char UsabilityType);
	static bool IsInteractionDebugEnabled();
	static void ToggleInteractionDebug();
};


// Class WillowGame.PawnInteractionProxy
// 0x0004 (0x01AC - 0x01B0)
class APawnInteractionProxy : public AInteractionProxy
{
public:
	unsigned long                                      bDisableDuringTrade : 1;                                  // 0x01AC(0x0004) (Transient)
	unsigned long                                      bDisableDuringVehicleUse : 1;                             // 0x01AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PawnInteractionProxy");
		return ptr;
	}


	bool OutsideWorldBounds();
	bool AllowUseEvent(unsigned char UsabilityType);
	bool AllowTouchEvent(class AActor* Other);
	void Initialize(class UPawnInteractionDefinition* InDefinition, class AActor* InInstigator);
};


// Class WillowGame.InteractiveObjectBalanceDefinition
// 0x0058 (0x003C - 0x0094)
class UInteractiveObjectBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	class UInteractiveObjectDefinition*                DefaultInteractiveObject;                                 // 0x0040(0x0004) (Edit, Const)
	struct FAttributeInitializationData                DefaultExpLevel;                                          // 0x0044(0x0010) (Edit, Const)
	struct FString                                     DefaultDisplayName;                                       // 0x0054(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<class UPopulationSpawnedActorTagDefinition*> ActorTags;                                                // 0x0060(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UInteractiveObjectLootListDefinition*> DefaultIncludedLootLists;                                 // 0x006C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FLootConfigurationData>              DefaultLoot;                                              // 0x0078(0x000C) (Edit, Const, NeedCtorLink)
	class UAttributeInitializationDefinition*          DefaultLootGameStageVarianceFormula;                      // 0x0084(0x0004) (Edit, Const)
	TArray<struct FInteractiveObjectGameStageGradeWeightData> Grades;                                                   // 0x0088(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InteractiveObjectBalanceDefinition");
		return ptr;
	}


	bool SetupInteractiveObjectLoot(class AWillowInteractiveObject* SpawnedInteractiveObject, int GradeIndex);
	class UInteractiveObjectDefinition* GetInteractiveObjectDefinitionForGrade(int GradeIndex);
	class UInteractiveObjectDefinition* GetInteractiveObjectDefinitionForGameStage(int GameStage, int AwesomeLevel);
};


// Class WillowGame.InteractiveObjectDefinition
// 0x0140 (0x003C - 0x017C)
class UInteractiveObjectDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyInfoProvider;                               // 0x0040(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0044(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIHitRegionInfoProvider;                          // 0x0048(0x0004) (Const, Native, NoExport)
	struct FBodyCompositionData                        BodyComposition;                                          // 0x004C(0x0014) (Const, Component, DuplicateTransient, NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x0060(0x0004) (Edit)
	unsigned long                                      bCreditDamageCausedByThisObjectToWhateverDamagedIt : 1;   // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCanBeKilled : 1;                                         // 0x0064(0x0004) (Const, Deprecated)
	unsigned long                                      bIsKilledWhenHealthEqualsZero : 1;                        // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bDestroyWhenKilled : 1;                                   // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCanTakeDirectDamage : 1;                                 // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCanTakeRadiusDamage : 1;                                 // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCollideAsEncroacher : 1;                                 // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bUsePlayerInteractionDistanceForTriggerRadius : 1;        // 0x0064(0x0004) (Edit)
	unsigned long                                      bProjTarget : 1;                                          // 0x0064(0x0004) (Edit)
	unsigned long                                      bUsableFromVehicle : 1;                                   // 0x0064(0x0004) (Edit)
	unsigned long                                      bSecondaryUsableFromVehicle : 1;                          // 0x0064(0x0004) (Edit)
	unsigned long                                      bAllowUsabilityPassThrough : 1;                           // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bIsSoldierTurretShield : 1;                               // 0x0064(0x0004) (Edit)
	unsigned long                                      bAlwaysRelevant : 1;                                      // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bIsPossibleHomingTarget : 1;                              // 0x0064(0x0004) (Edit)
	unsigned long                                      bTargetableByAI : 1;                                      // 0x0064(0x0004) (Edit)
	unsigned long                                      DoNotBlockWeaponFireFromFriendlies : 1;                   // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bUseOwnerAllegiance : 1;                                  // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bDoNotBlockPawns : 1;                                     // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bDynamicLightEnvironment : 1;                             // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCastShadows : 1;                                         // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;                      // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bDynamic : 1;                                             // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bSynthesizeSHLight : 1;                                   // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bShadowFromEnvironment : 1;                               // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                        // 0x0064(0x0004) (Edit, Const)
	struct FAttributeInitializationData                MaxHealth;                                                // 0x0068(0x0010) (Edit, Const)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0078(0x0004) (ExportObject, Component, EditInline)
	unsigned char                                      CollisionType;                                            // 0x007C(0x0001) (Edit, Const)
	unsigned char                                      HUDIcon;                                                  // 0x007D(0x0001) (Deprecated)
	unsigned char                                      CompassIcon;                                              // 0x007E(0x0001) (Edit)
	unsigned char                                      TickGroup;                                                // 0x007F(0x0001) (Edit, Const)
	unsigned char                                      RelevanceDistance;                                        // 0x0080(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	struct FInstanceDataSet                            InstanceData;                                             // 0x0090(0x000C) (Edit, Const, Component, NeedCtorLink)
	class UInteractionIconDefinition*                  HUDIconDef;                                               // 0x009C(0x0004) (Edit)
	class UInteractionIconDefinition*                  HUDIconDefSecondary;                                      // 0x00A0(0x0004) (Edit)
	float                                              TriggerRadius;                                            // 0x00A4(0x0004) (Edit)
	float                                              TriggerHeight;                                            // 0x00A8(0x0004) (Edit)
	struct FString                                     StatusMenuMapInfoBoxHeader;                               // 0x00AC(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     StatusMenuMapInfoBoxDescription;                          // 0x00B8(0x000C) (Edit, Const, Localized, NeedCtorLink)
	float                                              VehicleTriggerRadius;                                     // 0x00C4(0x0004) (Edit)
	TArray<struct FName>                               StatusEffectSockets;                                      // 0x00C8(0x000C) (Edit, Const, NeedCtorLink)
	class UParticleSystem*                             StatusEffectsParticleSystem;                              // 0x00D4(0x0004) (Edit, Const)
	class UGearboxDialogNameTag*                       NameTag;                                                  // 0x00D8(0x0004) (Edit, Const)
	TArray<class UGearboxDialogGroup*>                 DialogGroups;                                             // 0x00DC(0x000C) (Edit, Const, NeedCtorLink)
	class UClass*                                      InteractiveObjectClass;                                   // 0x00E8(0x0004) (Edit)
	float                                              TargetPriority;                                           // 0x00EC(0x0004) (Edit)
	float                                              HealthDisplayHack;                                        // 0x00F0(0x0004) (Edit)
	class UPawnAllegiance*                             Allegiance;                                               // 0x00F4(0x0004) (Edit)
	struct FName                                       TargetableSocket;                                         // 0x00F8(0x0008) (Edit)
	struct FVector                                     TargetableOffset;                                         // 0x0100(0x000C) (Edit)
	float                                              AIAvoidRadius;                                            // 0x010C(0x0004) (Edit)
	int                                                bBlockOnTakeDamageWhenDamageEqualZero;                    // 0x0110(0x0004) (Edit)
	float                                              FocusRadius;                                              // 0x0114(0x0004) (Edit, Const)
	struct FVector                                     FocusOffset;                                              // 0x0118(0x000C) (Edit, Const)
	class UBodyHitRegionDefinition*                    DefaultHitRegionDefinition;                               // 0x0124(0x0004) (Edit, Const)
	TArray<class UBodyHitRegionDefinition*>            HitRegionDefinitions;                                     // 0x0128(0x000C) (Edit, Const, NeedCtorLink)
	float                                              LightingBoundsScale;                                      // 0x0134(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutExponent;                                 // 0x0138(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutTime;                                     // 0x013C(0x0004) (Edit, Const)
	struct FLinearColor                                AmbientGlow;                                              // 0x0140(0x0010) (Edit, Const)
	struct FVector                                     AmbientShadowSourceDirection;                             // 0x0150(0x000C) (Edit, Const)
	struct FLinearColor                                AmbientShadowColor;                                       // 0x015C(0x0010) (Edit, Const)
	float                                              DominantShadowTransitionStartDistance;                    // 0x016C(0x0004) (Edit, Const)
	float                                              DominantShadowTransitionEndDistance;                      // 0x0170(0x0004) (Edit, Const)
	float                                              SkelUpdate_ThrottleDistance;                              // 0x0174(0x0004) (Edit, Const)
	float                                              Skelupdate_ThrottleTime;                                  // 0x0178(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InteractiveObjectDefinition");
		return ptr;
	}


	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
	void OnAllPickupsDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPickupDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDispense(class UObject* Recipient, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnClosing(class UObject* PlayerClosing, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnMissionTurnedIn(class UObject* PlayerTurningInMission, class UObject* MissionTurnedIn, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTimerEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilled(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHealthDepleted(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTakeDamage(class UObject* Instigator, float Damage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUserCouldNotAffordSecondary(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUserCouldNotAfford(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnSecondaryUsedBy(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUsedBy(class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUnTouch(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTouch(unsigned char EventOutput, class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnSpawn(struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.VehicleSpawnStationPlatformDefinition
// 0x0010 (0x017C - 0x018C)
class UVehicleSpawnStationPlatformDefinition : public UInteractiveObjectDefinition
{
public:
	struct FName                                       VehicleRefSocket;                                         // 0x017C(0x0008) (Edit, Const)
	struct FName                                       SpawnVehicleSocket;                                       // 0x0184(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSpawnStationPlatformDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowVendingMachineDefinition
// 0x0000 (0x017C - 0x017C)
class UWillowVendingMachineDefinition : public UInteractiveObjectDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVendingMachineDefinition");
		return ptr;
	}


	void OnFeaturedItemSet(class UObject* FeaturedItemPickup, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.InteractiveObjectLootListDefinition
// 0x000C (0x003C - 0x0048)
class UInteractiveObjectLootListDefinition : public UGBXDefinition
{
public:
	TArray<struct FLootConfigurationData>              LootData;                                                 // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InteractiveObjectLootListDefinition");
		return ptr;
	}

};


// Class WillowGame.InterpTrackBehaviors
// 0x0020 (0x0068 - 0x0088)
class UInterpTrackBehaviors : public UInterpTrack
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x0068(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x006C(0x0004) (Const, Native, NoExport)
	struct FName                                       LastAddedKeyFrameName;                                    // 0x0070(0x0008)
	TArray<struct FBehaviorKeyFrameEventData>          BehaviorEvents;                                           // 0x0078(0x000C) (Edit, Const, NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x0084(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InterpTrackBehaviors");
		return ptr;
	}


	void BehaviorKeyFrameEvent(const struct FName& SpecializedEventName, class AActor* GroupActor, struct FBehaviorConsumerHandle* InConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.InterpTrackInstBehaviors
// 0x000C (0x003C - 0x0048)
class UInterpTrackInstBehaviors : public UInterpTrackInst
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x003C(0x0004) (Const, Native, NoExport)
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InterpTrackInstBehaviors");
		return ptr;
	}


	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
};


// Class WillowGame.InventoryAttributeContextResolver
// 0x0008 (0x003C - 0x0044)
class UInventoryAttributeContextResolver : public UAttributeContextResolver
{
public:
	class UWillowInventoryDefinition*                  InventoryDefinition;                                      // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      bOnlyConsiderEquippedItems : 1;                           // 0x0040(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryAttributeContextResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.InventoryBalanceDefinition
// 0x0028 (0x003C - 0x0064)
class UInventoryBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                            // 0x003C(0x0004) (Const, Native, NoExport)
	unsigned long                                      bInterpolateExpLevel : 1;                                 // 0x0040(0x0004) (Edit, Const)
	class UWillowInventoryDefinition*                  InventoryDefinition;                                      // 0x0044(0x0004) (Edit, Const)
	class UInventoryBalanceDefinition*                 BaseDefinition;                                           // 0x0048(0x0004) (Edit, Const)
	TArray<struct FInventoryManufacturerBalanceData>   Manufacturers;                                            // 0x004C(0x000C) (Edit, Const, NeedCtorLink)
	class UDownloadableItemSetDefinition*              DlcItemSet;                                               // 0x0058(0x0004) (Edit)
	class UInventoryPartListCollectionDefinition*      PartListCollection;                                       // 0x005C(0x0004) (Edit, Const)
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                            // 0x0060(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryBalanceDefinition");
		return ptr;
	}


	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
	class UInventoryPartListCollectionDefinition* GetInventoryPartListCollection(class UClass* PartListCollectionClass, class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex);
	class UWillowInventoryDefinition* GetInventoryDefinitionForManufacturerGrade(class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex);
	class UWillowInventoryDefinition* HACKGetVehicleInventoryDefinition();
	int GetExpLevelFromManufacturerData(class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex);
	class UPlayerClassIdentifierDefinition* GetRequiredPlayerClassId();
	class UWillowInventoryDefinition* GetInventoryDefinition();
};


// Class WillowGame.ItemBalanceDefinition
// 0x0008 (0x0064 - 0x006C)
class UItemBalanceDefinition : public UInventoryBalanceDefinition
{
public:
	class UItemPartListCollectionDefinition*           ItemPartListCollection;                                   // 0x0064(0x0004) (Edit, Const, ExportObject, EditConst, NeedCtorLink, EditInline)
	class UItemPartListCollectionDefinition*           RuntimePartListCollection;                                // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemBalanceDefinition");
		return ptr;
	}

};


// Class WillowGame.ClassModBalanceDefinition
// 0x000C (0x006C - 0x0078)
class UClassModBalanceDefinition : public UItemBalanceDefinition
{
public:
	TArray<class UClassModDefinition*>                 ClassModDefinitions;                                      // 0x006C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ClassModBalanceDefinition");
		return ptr;
	}


	void GetClassModDefSpawnedByBalanceDef(TArray<class UClassModDefinition*>* OutClassModDefinitions);
	class UWillowInventoryDefinition* GetInventoryDefinitionForManufacturerGrade(class UManufacturerDefinition* Manufacturer, int ManufacturerGradeIndex);
};


// Class WillowGame.WeaponBalanceDefinition
// 0x0008 (0x0064 - 0x006C)
class UWeaponBalanceDefinition : public UInventoryBalanceDefinition
{
public:
	class UWeaponPartListCollectionDefinition*         WeaponPartListCollection;                                 // 0x0064(0x0004) (Edit, Const, ExportObject, EditConst, NeedCtorLink, EditInline)
	class UWeaponPartListCollectionDefinition*         RuntimePartListCollection;                                // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponBalanceDefinition");
		return ptr;
	}

};


// Class WillowGame.MissionWeaponBalanceDefinition
// 0x0004 (0x006C - 0x0070)
class UMissionWeaponBalanceDefinition : public UWeaponBalanceDefinition
{
public:
	class UMissionObjectiveDefinition*                 MissionObjective;                                         // 0x006C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionWeaponBalanceDefinition");
		return ptr;
	}

};


// Class WillowGame.InventoryPartListCollectionDefinition
// 0x0010 (0x003C - 0x004C)
class UInventoryPartListCollectionDefinition : public UGBXDefinition
{
public:
	unsigned char                                      PartReplacementMode;                                      // 0x003C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	TArray<struct FAttributeInitializationData>        ConsolidatedAttributeInitData;                            // 0x0040(0x000C) (Const, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryPartListCollectionDefinition");
		return ptr;
	}

};


// Class WillowGame.ItemPartListDefinition
// 0x001C (0x003C - 0x0058)
class UItemPartListDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<struct FItemPartGradeWeightData>            WeightedParts;                                            // 0x0040(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeInitializationData>        ConsolidatedAttributeInitData;                            // 0x004C(0x000C) (Const, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPartListDefinition");
		return ptr;
	}

};


// Class WillowGame.ItemPartListCollectionDefinition
// 0x0094 (0x004C - 0x00E0)
class UItemPartListCollectionDefinition : public UInventoryPartListCollectionDefinition
{
public:
	class UItemDefinition*                             AssociatedItem;                                           // 0x004C(0x0004) (Edit, Const)
	struct FItemCustomPartTypeData                     AlphaPartData;                                            // 0x0050(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     BetaPartData;                                             // 0x0060(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     GammaPartData;                                            // 0x0070(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     DeltaPartData;                                            // 0x0080(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     EpsilonPartData;                                          // 0x0090(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     ZetaPartData;                                             // 0x00A0(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     EtaPartData;                                              // 0x00B0(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     ThetaPartData;                                            // 0x00C0(0x0010) (Edit, Const, NeedCtorLink)
	struct FItemCustomPartTypeData                     MaterialPartData;                                         // 0x00D0(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPartListCollectionDefinition");
		return ptr;
	}

};


// Class WillowGame.WeaponPartListDefinition
// 0x001C (0x003C - 0x0058)
class UWeaponPartListDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<struct FPartGradeWeightData>                WeightedParts;                                            // 0x0040(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeInitializationData>        ConsolidatedAttributeInitData;                            // 0x004C(0x000C) (Const, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponPartListDefinition");
		return ptr;
	}

};


// Class WillowGame.WeaponPartListCollectionDefinition
// 0x0094 (0x004C - 0x00E0)
class UWeaponPartListCollectionDefinition : public UInventoryPartListCollectionDefinition
{
public:
	class UWeaponTypeDefinition*                       AssociatedWeaponType;                                     // 0x004C(0x0004) (Edit, Const)
	struct FWeaponCustomPartTypeData                   BodyPartData;                                             // 0x0050(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   GripPartData;                                             // 0x0060(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   BarrelPartData;                                           // 0x0070(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   SightPartData;                                            // 0x0080(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   StockPartData;                                            // 0x0090(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   ElementalPartData;                                        // 0x00A0(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   Accessory1PartData;                                       // 0x00B0(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   Accessory2PartData;                                       // 0x00C0(0x0010) (Edit, Const, NeedCtorLink)
	struct FWeaponCustomPartTypeData                   MaterialPartData;                                         // 0x00D0(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponPartListCollectionDefinition");
		return ptr;
	}

};


// Class WillowGame.IPlayerBehavior
// 0x0000 (0x003C - 0x003C)
class UIPlayerBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IPlayerBehavior");
		return ptr;
	}


	void Behavior_StopRevive();
	void Behavior_StartRevive();
	bool GetPlayerLoot(int CustomGameStage, int CustomAwesomeLevel, const struct FName& CustomConfiguration, TArray<struct FSpawnedDroppedLootData>* SpawnedLoot);
	void Behavior_UnlockAchievementForAllPlayers(int AchievementId, int MinimumPlayersRequired);
	void Behavior_DetachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_AttachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_UnlockAchievement(int AchievementId);
	void Behavior_RegisterStation(class ATravelStation* ActivatedStation, bool bFromSave);
	void Behavior_SendMessageToPlayers(bool bShouldSendToInstigator, class UClass* SendMsgClass);
	void Behavior_CameraAnim(class UCameraAnim* Anim);
	void Behavior_ViewShake(const struct FGearboxViewShakeInfo& ShakeInfo);
	void Behavior_SpawnTeleporter(class UPersonalTeleporterDefinition* Definition);
	void Behavior_ForceFeedback(class UForceFeedbackWaveform* FFWaveform, bool ForWeaponFiring);
	class AWillowProjectile* Behavior_SpawnCurrentProjectile(class UProjectileDefinition* CurrentProjectile, bool bLeftHand, bool bConsumeResource, bool bNoVelocity, bool bSetProjectileToGrenadeMod);
	void Behavior_SetCurrentProjectile(class UProjectileDefinition* CurrentProjectile);
	void Behavior_ThrowGrenade();
	void Behavior_Melee();
	void Behavior_Reload();
};


// Class WillowGame.IPlayerMaster
// 0x0000 (0x003C - 0x003C)
class UIPlayerMaster : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IPlayerMaster");
		return ptr;
	}


	class AWillowPlayerController* GetPlayerMasterPlayerController();
};


// Class WillowGame.IProjectileBehavior
// 0x0000 (0x003C - 0x003C)
class UIProjectileBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IProjectileBehavior");
		return ptr;
	}


	void Behavior_TagPayloadType(unsigned char PayloadType);
	void Behavior_LevelOffTrajectory(float ZHeight, float TurnSpeed);
	void Behavior_SetExplosionDefinition(class UExplosionDefinition* MyExplosionDef);
	void Behavior_SetDamageTypeDefinition(class UWillowDamageTypeDefinition* DamageTypeDef);
	void Behavior_SetStickyGrenade();
	void SetSpeed(float NewSpeed);
	void SetProximity(float ProximityRadius, float ProximityHeight);
	bool IsLevelingNow();
	void SetHomingRotationOffset(const struct FRotator& RotationOffset);
	struct FVector GetHomingTargetLocation();
	unsigned char GetHomingTargetByType();
	void SetHomingTarget(class AActor* NewTarget, int NewTargetComponentIndex);
	void FindHomingTarget(unsigned char TargetType, float TargetSearchRange, float TargetSearchFOVAngle, bool bNotInstigator, bool bIgnoreFOVZTest, bool bBestForwardTarget, bool bRetryIfTargetNotFound, bool bUniqueTarget);
	void Detonate();
	bool SetVelocity(const struct FVector& ProjectileVelocity);
	bool GetVelocity(struct FVector* ProjectileVelocity);
};


// Class WillowGame.IProjectileReflector
// 0x0000 (0x003C - 0x003C)
class UIProjectileReflector : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IProjectileReflector");
		return ptr;
	}


	float GetBulletReflectedOffSelfDamageScale();
	float GetBulletReflectedOffEnemyDamageScale();
	float GetBulletReflectedOffSelfDamageTakenScale();
	float GetEnemyReflectionChance();
	float GetSelfReflectionChance();
};


// Class WillowGame.IProtectionTimer
// 0x0000 (0x003C - 0x003C)
class UIProtectionTimer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IProtectionTimer");
		return ptr;
	}


	float GetMinimumHealthMaintainedByProtectionTimer();
	void EnableProtectionTimer();
	bool IsProtectionTimerActive();
};


// Class WillowGame.IResourcePoolOwner
// 0x0000 (0x003C - 0x003C)
class UIResourcePoolOwner : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IResourcePoolOwner");
		return ptr;
	}


	bool CanSetResourcePoolValues(class UClass* ResourcePoolClass);
};


// Class WillowGame.ISeeTargetable
// 0x0000 (0x003C - 0x003C)
class UISeeTargetable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ISeeTargetable");
		return ptr;
	}


	struct FVector GetViewLocation();
	class AActor* GetWorldBody();
	bool AddTargetable(class AActor* NewTarget, bool bSeeTarget, bool bHearThreat, bool bSmellTarget);
};


// Class WillowGame.IShop
// 0x0000 (0x003C - 0x003C)
class UIShop : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IShop");
		return ptr;
	}


	int GetSellingPriceForInventory(class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity);
	unsigned char GetCurrencyTypeInventoryIsSoldIn(class AWillowInventory* InventoryForSale);
	bool PlayerBuyBackItem(class AWillowInventory* Item, class AWillowPlayerController* WPC);
	void PlayerBuyItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, bool bWasItemOfTheDay);
	void PlayerSellItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity);
	struct FShopItemData GetFeaturedItem(class AWillowPlayerController* WPC);
	void GetBuyBackList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* BuyBackItems);
	void GetInventoryList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* InventoryList);
	unsigned char GetShopType();
	void GetWeaponList(class AWillowPlayerController* WPC, TArray<class AWillowWeapon*>* WeaponList);
	void GetItemList(class AWillowPlayerController* WPC, TArray<class AWillowItem*>* ItemList);
	void RemoveSoldInventory(class AWillowInventory* SoldItem);
	int GetResetCost();
	void ResetInventory();
};


// Class WillowGame.ISimpleAnimPlayer
// 0x0000 (0x003C - 0x003C)
class UISimpleAnimPlayer : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ISimpleAnimPlayer");
		return ptr;
	}

};


// Class WillowGame.ISkillTreeListener
// 0x0000 (0x003C - 0x003C)
class UISkillTreeListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ISkillTreeListener");
		return ptr;
	}


	void HandleSkillTreeReset(int SkillPointsReturned);
};


// Class WillowGame.ItemDefinition
// 0x00BC (0x0180 - 0x023C)
class UItemDefinition : public UWillowInventoryDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0180(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x0184(0x0004) (Const, Native, NoExport)
	class UWillowImpactDefinition*                     DroppedImpact;                                            // 0x0188(0x0004) (Edit, Const)
	struct FString                                     UseFailureCharacterMessage;                               // 0x018C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ItemName;                                                 // 0x0198(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bItemNameIsFullName : 1;                                  // 0x01A4(0x0004) (Edit, Const)
	unsigned long                                      bUseMeshCompositing : 1;                                  // 0x01A4(0x0004) (Edit, Const)
	TArray<class UItemNamePartDefinition*>             TitleList;                                                // 0x01A8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UItemNamePartDefinition*>             PrefixList;                                               // 0x01B4(0x000C) (Edit, Const, NeedCtorLink)
	class UStaticMesh*                                 NonCompositeStaticMesh;                                   // 0x01C0(0x0004) (Edit, Const)
	class USkeletalMesh*                               NonCompositeSkeletalMesh;                                 // 0x01C4(0x0004) (Edit, Const)
	class UMaterialInterface*                          OverrideMaterial;                                         // 0x01C8(0x0004) (Edit, Const)
	class UGestaltSkeletalMeshDefinition*              GestaltMesh;                                              // 0x01CC(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     AlphaParts;                                               // 0x01D0(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     BetaParts;                                                // 0x01D4(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     GammaParts;                                               // 0x01D8(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     DeltaParts;                                               // 0x01DC(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     EpsilonParts;                                             // 0x01E0(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     ZetaParts;                                                // 0x01E4(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     EtaParts;                                                 // 0x01E8(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     ThetaParts;                                               // 0x01EC(0x0004) (Edit, Const)
	class UItemPartListDefinition*                     MaterialParts;                                            // 0x01F0(0x0004) (Edit, Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x01F4(0x0004)
	struct FItemBehaviorSet                            Behaviors;                                                // 0x01F8(0x000C) (EditConst, NeedCtorLink, Deprecated)
	TArray<struct FAttributeEffectData>                ExternalAttributeEffects;                                 // 0x0204(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                ItemAttributeEffects;                                     // 0x0210(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributePriorityData>              ItemCardAttributes;                                       // 0x021C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UAttributePresentationDefinition*>    CustomPresentations;                                      // 0x0228(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UPlayerClassIdentifierDefinition*            RequiredPlayerClass;                                      // 0x0234(0x0004) (Edit, Const)
	class UInteractionIconDefinition*                  PickupIconOverride;                                       // 0x0238(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemDefinition");
		return ptr;
	}


	bool DisplayTitleAtEnd();
	class UManufacturerDefinition* GetManufacturerOverrideOrDefault(class UManufacturerDefinition* DefaultManufacturer);
	unsigned char GetEquipmentLocation();
	bool PlayerClassRequirementMet(class AWillowPlayerController* WillowPC);
	class UPlayerClassIdentifierDefinition* GetRequiredPlayerClass();
	void OnPickupDisassociated(class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPickupAssociated(class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnCreate(struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.EquipableItemDefinition
// 0x001C (0x023C - 0x0258)
class UEquipableItemDefinition : public UItemDefinition
{
public:
	unsigned char                                      DamageTypeIcon;                                           // 0x023C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	TArray<struct FConditionalSoundData>               EquipSounds;                                              // 0x0240(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               UnequipSounds;                                            // 0x024C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EquipableItemDefinition");
		return ptr;
	}


	void OnUnequipped(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnEquipped(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.ArtifactDefinition
// 0x0000 (0x0258 - 0x0258)
class UArtifactDefinition : public UEquipableItemDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ArtifactDefinition");
		return ptr;
	}


	unsigned char GetEquipmentLocation();
};


// Class WillowGame.ClassModDefinition
// 0x0008 (0x0258 - 0x0260)
class UClassModDefinition : public UEquipableItemDefinition
{
public:
	class UManufacturerDefinition*                     ManufacturerOverride;                                     // 0x0258(0x0004) (Edit, Const)
	int                                                DisplayClassModAtBeginningOfName;                         // 0x025C(0x0004) (Const, Localized)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ClassModDefinition");
		return ptr;
	}


	bool DisplayTitleAtEnd();
	class UManufacturerDefinition* GetManufacturerOverrideOrDefault(class UManufacturerDefinition* DefaultManufacturer);
	unsigned char GetEquipmentLocation();
	bool PlayerClassRequirementMet(class AWillowPlayerController* WillowPC);
};


// Class WillowGame.CrossDLCClassModDefinition
// 0x0034 (0x0260 - 0x0294)
class UCrossDLCClassModDefinition : public UClassModDefinition
{
public:
	struct FNameBasedObjectPath                        RequiredPlayerClassPathName;                              // 0x0260(0x0034) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CrossDLCClassModDefinition");
		return ptr;
	}

};


// Class WillowGame.GrenadeModDefinition
// 0x001C (0x0258 - 0x0274)
class UGrenadeModDefinition : public UEquipableItemDefinition
{
public:
	class UProjectileDefinition*                       DefaultProjectileDefinition;                              // 0x0258(0x0004) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             ProjectileBaseValues;                                     // 0x025C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FGrenadeModBehaviorSequenceStateData> SetProjectileSequenceState;                               // 0x0268(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GrenadeModDefinition");
		return ptr;
	}


	unsigned char GetEquipmentLocation();
	void OnGrenadeKilledEnemy(class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeKilledNeutral(class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeDamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeDamagedFriendly(class UObject* DamageTaker, float DamageAmount, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeDamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeExploded(class UObject* Grenade, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeSpawned(class UObject* SpawnedProjectile, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.ShieldDefinition
// 0x0020 (0x0258 - 0x0278)
class UShieldDefinition : public UEquipableItemDefinition
{
public:
	unsigned char                                      ShieldType;                                               // 0x0258(0x0001) (Edit, Const)
	unsigned char                                      ShieldPrimeMechanism;                                     // 0x0259(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x025A(0x0002) MISSED OFFSET
	struct FString                                     ShieldTypeFlashFrameName;                                 // 0x025C(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     PrimedFlashFrameName;                                     // 0x0268(0x000C) (Edit, Const, NeedCtorLink)
	class UPhysicalMaterial*                           ShieldPhysicalMaterial;                                   // 0x0274(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ShieldDefinition");
		return ptr;
	}


	unsigned char GetEquipmentLocation();
	void OnDamageResistanceTypeChanged(class UObject* ShieldOwner, class UWillowDamageTypeDefinition* NewDamageResistanceType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnEffectTriggered(class UObject* ShieldOwner, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldNowRegenerating(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldNowDepletedAfterBeingFull(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldNowDepleted(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldNowFull(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldPrimed(class UObject* ShieldOwner, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnAmmoAbsorbed(class UObject* ShieldOwner, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.UsableItemDefinition
// 0x000C (0x023C - 0x0248)
class UUsableItemDefinition : public UItemDefinition
{
public:
	unsigned long                                      bPlayerUseItemOnPickup : 1;                               // 0x023C(0x0004) (Edit, Const)
	unsigned long                                      bAIUseItemOnPickup : 1;                                   // 0x023C(0x0004) (Edit, Const)
	unsigned long                                      bUseCoopRange : 1;                                        // 0x023C(0x0004) (Edit, Const)
	struct FName                                       UsedStatId;                                               // 0x0240(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("UsableItemDefinition");
		return ptr;
	}


	void OnUsed(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.MissionItemDefinition
// 0x0010 (0x0248 - 0x0258)
class UMissionItemDefinition : public UUsableItemDefinition
{
public:
	unsigned long                                      bAlwaysDropMissionPickup : 1;                             // 0x0248(0x0004) (Edit, Const)
	unsigned long                                      bUpdateMissionObjectiveWhenUsed : 1;                      // 0x0248(0x0004) (Edit, Const)
	unsigned long                                      bMissionWaypoint : 1;                                     // 0x0248(0x0004) (Edit, Const)
	unsigned long                                      bUniqueMissionDirector : 1;                               // 0x0248(0x0004) (Edit, Const)
	class UMissionObjectiveDefinition*                 AssociatedMissionObjective;                               // 0x024C(0x0004) (Edit, Const)
	class UMissionDefinition*                          MissionDirective;                                         // 0x0250(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         DirectiveMovieDefinition;                                 // 0x0254(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionItemDefinition");
		return ptr;
	}


	bool CanPickupInBulk();
	bool ShouldPlayerAutomaticallyPickup(class APlayerController* PC);
};


// Class WillowGame.UsableCustomizationItemDefinition
// 0x0044 (0x0248 - 0x028C)
class UUsableCustomizationItemDefinition : public UUsableItemDefinition
{
public:
	class UKeyedItemPoolDefinition*                    OverridePool;                                             // 0x0248(0x0004) (Edit)
	class UCustomizationDefinition*                    CustomizationDef;                                         // 0x024C(0x0004) (Edit, EditConst)
	struct FLinearColor                                PrimaryColor;                                             // 0x0250(0x0010) (Edit, EditConst)
	struct FLinearColor                                SecondaryColor;                                           // 0x0260(0x0010) (Edit, EditConst)
	struct FLinearColor                                TertiaryColor;                                            // 0x0270(0x0010) (Edit, EditConst)
	struct FString                                     ItemCardTopStatString;                                    // 0x0280(0x000C) (Edit, Const, Localized, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("UsableCustomizationItemDefinition");
		return ptr;
	}


	class UCustomizationDefinition* GetCustomizationDefinitionToUnlock(class AWillowPlayerController* WPC);
};


// Class WillowGame.ItemPartDefinition
// 0x0054 (0x0098 - 0x00EC)
class UItemPartDefinition : public UWillowInventoryPartDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0098(0x0004) (Const, Native, NoExport)
	unsigned char                                      PartType;                                                 // 0x009C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TArray<class UItemNamePartDefinition*>             TitleList;                                                // 0x00A0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UItemNamePartDefinition*>             PrefixList;                                               // 0x00AC(0x000C) (Edit, Const, NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x00B8(0x0004)
	TArray<struct FAttributeEffectData>                ExternalAttributeEffects;                                 // 0x00BC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                ItemAttributeEffects;                                     // 0x00C8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributePriorityData>              ItemCardAttributes;                                       // 0x00D4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UAttributePresentationDefinition*>    CustomPresentations;                                      // 0x00E0(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPartDefinition");
		return ptr;
	}


	void OnPickupDisassociated(class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPickupAssociated(class UObject* Pickup, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnCreate(struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.EquipableItemPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UEquipableItemPartDefinition : public UItemPartDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EquipableItemPartDefinition");
		return ptr;
	}


	void OnUnequipped(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnEquipped(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.ArtifactPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UArtifactPartDefinition : public UEquipableItemPartDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ArtifactPartDefinition");
		return ptr;
	}

};


// Class WillowGame.ClassModPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UClassModPartDefinition : public UEquipableItemPartDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ClassModPartDefinition");
		return ptr;
	}

};


// Class WillowGame.GrenadeModPartDefinition
// 0x0030 (0x00EC - 0x011C)
class UGrenadeModPartDefinition : public UEquipableItemPartDefinition
{
public:
	class UProjectileDefinition*                       CustomProjectileDefinition;                               // 0x00EC(0x0004) (Edit, Const)
	TArray<struct FGrenadeModPartBehaviorSequenceStateData> SetProjectileSequenceState;                               // 0x00F0(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     FlashIconPartName;                                        // 0x00FC(0x000C) (Edit, Const, NeedCtorLink)
	struct FLinearColor                                FlashIconPartTint;                                        // 0x0108(0x0010) (Edit, Const)
	unsigned long                                      bAICanUse : 1;                                            // 0x0118(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GrenadeModPartDefinition");
		return ptr;
	}


	void OnGrenadeKilledEnemy(class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeKilledNeutral(class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeDamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeDamagedFriendly(class UObject* DamageTaker, float DamageAmount, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeDamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeExploded(class UObject* Grenade, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnGrenadeSpawned(class UObject* SpawnedProjectile, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.ShieldPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UShieldPartDefinition : public UEquipableItemPartDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ShieldPartDefinition");
		return ptr;
	}

};


// Class WillowGame.ItemNamePartDefinition
// 0x0028 (0x00EC - 0x0114)
class UItemNamePartDefinition : public UItemPartDefinition
{
public:
	unsigned long                                      bNameIsUnique : 1;                                        // 0x00EC(0x0004) (Edit, Const)
	struct FString                                     PartName;                                                 // 0x00F0(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<struct FAttributeExpressionData>            Expressions;                                              // 0x00FC(0x000C) (Edit, Const, NeedCtorLink)
	int                                                MinExpLevelRequirement;                                   // 0x0108(0x0004) (Edit, Const)
	int                                                MaxExpLevelRequirement;                                   // 0x010C(0x0004) (Edit, Const)
	float                                              Priority;                                                 // 0x0110(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemNamePartDefinition");
		return ptr;
	}

};


// Class WillowGame.UsableItemPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UUsableItemPartDefinition : public UItemPartDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("UsableItemPartDefinition");
		return ptr;
	}


	void OnUsed(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.MissionItemPartDefinition
// 0x0000 (0x00EC - 0x00EC)
class UMissionItemPartDefinition : public UUsableItemPartDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionItemPartDefinition");
		return ptr;
	}

};


// Class WillowGame.ItemPool
// 0x0000 (0x003C - 0x003C)
class UItemPool : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPool");
		return ptr;
	}


	static bool IsAllItemTypesDebugEnabled();
	static void ToggleAllItemTypesDebug();
	static bool SpawnBalancedInventoryFromInventoryBalanceDefinition(class UInventoryBalanceDefinition* InvBalanceDefinition, int Quantity, int GameStage, int AwesomeLevel, class UObject* ContextSource, TArray<class AWillowInventory*>* SpawnedInventory);
	static bool SpawnBalancedInventoryFromPool(class UItemPoolDefinition* Definition, int GameStage, int AwesomeLevel, class UObject* ContextSource, class UAttributeInitializationDefinition* GameStageVarianceFormula, float OuterPoolChance, bool bInventoryMayDropOnDeath, TArray<class AWillowInventory*>* SpawnedInventory);
};


// Class WillowGame.ItemPoolDefinition
// 0x0038 (0x003C - 0x0074)
class UItemPoolDefinition : public UGBXDefinition
{
public:
	struct FAttributeInitializationData                CheatSpawnLevel;                                          // 0x003C(0x0010) (Edit, Const)
	unsigned long                                      bDisablePhysicsDrop : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAutoReadyItems : 1;                                      // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bSupportsGameStageVariance : 1;                           // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bShopsHaveInfiniteQuantity : 1;                           // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bEligibleForUncommonWeightMultiplier : 1;                 // 0x004C(0x0004) (Edit, Transient)
	TArray<struct FBalancedInventoryData>              BalancedItems;                                            // 0x0050(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                Quantity;                                                 // 0x005C(0x0010) (Edit, Const)
	class UAttributeDefinition*                        MinGameStageRequirement;                                  // 0x006C(0x0004) (Edit, Const)
	class UAttributeDefinition*                        MaxGameStageRequirement;                                  // 0x0070(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPoolDefinition");
		return ptr;
	}

};


// Class WillowGame.CrossDLCItemPoolDefinition
// 0x000C (0x0074 - 0x0080)
class UCrossDLCItemPoolDefinition : public UItemPoolDefinition
{
public:
	TArray<struct FBalancedInventoryDataMirror>        BalancedItemsMirror;                                      // 0x0074(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CrossDLCItemPoolDefinition");
		return ptr;
	}

};


// Class WillowGame.KeyedItemPoolDefinition
// 0x0004 (0x0074 - 0x0078)
class UKeyedItemPoolDefinition : public UItemPoolDefinition
{
public:
	int                                                Key;                                                      // 0x0074(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("KeyedItemPoolDefinition");
		return ptr;
	}

};


// Class WillowGame.ItemPoolListDefinition
// 0x0018 (0x003C - 0x0054)
class UItemPoolListDefinition : public UGBXDefinition
{
public:
	TArray<class UItemPoolListDefinition*>             ItemPoolIncludedLists;                                    // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FItemPoolInfo>                       ItemPools;                                                // 0x0048(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPoolListDefinition");
		return ptr;
	}


	void AddToItemPoolList(TArray<struct FItemPoolInfo>* Out_ItemPoolList);
};


// Class WillowGame.IUsable
// 0x0000 (0x003C - 0x003C)
class UIUsable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IUsable");
		return ptr;
	}


	void NotifyUserCouldNotAffordAttemptedUse(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
};


// Class WillowGame.IWeaponThrow
// 0x0000 (0x003C - 0x003C)
class UIWeaponThrow : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IWeaponThrow");
		return ptr;
	}


	void Behavior_WeaponThrow();
};


// Class WillowGame.IWeatherBehavior
// 0x0000 (0x003C - 0x003C)
class UIWeatherBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IWeatherBehavior");
		return ptr;
	}


	void DestroyWeatherSystem();
	void CreateWeatherSystem(class UParticleSystem* WeatherSystemTemplate, class UParticleSystem* NewScreenEffectsTemplate);
};


// Class WillowGame.LcdHelper
// 0x0004 (0x003C - 0x0040)
class ULcdHelper : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x003C(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LcdHelper");
		return ptr;
	}


	bool IsLcdScreenConnected();
	void UpdateAvailableTokens(int Amount);
	void UpdateCurrency(unsigned char Type, int Amount);
	struct FString GetPendingInvite();
	void UpdateFriendData(const struct FString& FriendData);
	void UpdateChallengeData(const struct FString& ChallengeData);
	void UpdateMissionData(const struct FString& MissionData);
	void SetLevel(int Level);
	void SetLevelProgress(float Percent, int Curr, int Needed);
	void NotifyLoading(bool bLoading);
};


// Class WillowGame.LevelDependencyList
// 0x0021 (0x003C - 0x005D)
class ULevelDependencyList : public UGBXDefinition
{
public:
	struct FName                                       LoaderMap;                                                // 0x003C(0x0008) (Edit)
	TArray<struct FPersistentMapDependencies>          LevelList;                                                // 0x0044(0x000C) (Edit, NeedCtorLink)
	struct FName                                       LevelWorldDiscoveryStatID;                                // 0x0050(0x0008) (Edit, Const)
	int                                                TotalNumWorldDiscoveryAreas;                              // 0x0058(0x0004) (Edit, Const)
	unsigned char                                      AllAreasDiscoveredAchievement;                            // 0x005C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelDependencyList");
		return ptr;
	}


	struct FString GetFriendlyLevelNameFromMapName(const struct FName& PersistentMapName);
};


// Class WillowGame.LevelLandmarkAnchor
// 0x0020 (0x01A0 - 0x01C0)
class ALevelLandmarkAnchor : public ALevelLandmark
{
public:
	class UTexture2D*                                  Texture;                                                  // 0x01A0(0x0004) (Edit, Const)
	float                                              Opacity;                                                  // 0x01A4(0x0004) (Edit, Interp)
	int                                                TextureSizeX;                                             // 0x01A8(0x0004) (Edit, Const)
	int                                                TextureSizeY;                                             // 0x01AC(0x0004) (Edit, Const)
	struct FString                                     MapFrame;                                                 // 0x01B0(0x000C) (Edit, Const, NeedCtorLink)
	class UGFxMovieInfo*                               DLCMap;                                                   // 0x01BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelLandmarkAnchor");
		return ptr;
	}

};


// Class WillowGame.LevelLandmarkAnchorRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class ULevelLandmarkAnchorRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelLandmarkAnchorRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.LevelNameAttributeValueResolver
// 0x0028 (0x003C - 0x0064)
class ULevelNameAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                        // 0x003C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ValueIfMatched;                                           // 0x004C(0x0010) (Edit, Const)
	struct FName                                       LevelName;                                                // 0x005C(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelNameAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.LocalizedStringDefinition
// 0x000C (0x003C - 0x0048)
class ULocalizedStringDefinition : public UGBXDefinition
{
public:
	struct FString                                     Text;                                                     // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LocalizedStringDefinition");
		return ptr;
	}

};


// Class WillowGame.LockoutDefinition
// 0x0014 (0x003C - 0x0050)
class ULockoutDefinition : public UGBXDefinition
{
public:
	unsigned char                                      Style;                                                    // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                Days;                                                     // 0x0040(0x0004) (Edit)
	int                                                Hours;                                                    // 0x0044(0x0004) (Edit)
	int                                                Minutes;                                                  // 0x0048(0x0004) (Edit)
	class UDownloadableExpansionDefinition*            DlcExpansion;                                             // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LockoutDefinition");
		return ptr;
	}


	static int ComputePackedSystemTime();
};


// Class WillowGame.LookAxisDefinition
// 0x0018 (0x003C - 0x0054)
class ULookAxisDefinition : public UGBXDefinition
{
public:
	float                                              Speed;                                                    // 0x003C(0x0004) (Edit, Const)
	float                                              ZoomSpeed;                                                // 0x0040(0x0004) (Edit, Const)
	float                                              AccelThreshold;                                           // 0x0044(0x0004) (Edit, Const)
	float                                              AccelRate;                                                // 0x0048(0x0004) (Edit, Const)
	float                                              AccelSpeed;                                               // 0x004C(0x0004) (Edit, Const)
	float                                              AccelWarmup;                                              // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LookAxisDefinition");
		return ptr;
	}

};


// Class WillowGame.LookingAtInjuredPlayerExpressionEvaluator
// 0x0000 (0x003C - 0x003C)
class ULookingAtInjuredPlayerExpressionEvaluator : public UExpressionEvaluator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LookingAtInjuredPlayerExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.LootConfigurationDefinition
// 0x001C (0x003C - 0x0058)
class ULootConfigurationDefinition : public UGBXDefinition
{
public:
	TArray<struct FLootData>                           Loot;                                                     // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FAttributeInitializationData                Probability;                                              // 0x0048(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LootConfigurationDefinition");
		return ptr;
	}

};


// Class WillowGame.ManufacturerAttributeValueResolver
// 0x001C (0x003C - 0x0058)
class UManufacturerAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                        // 0x003C(0x0010) (Edit, Const)
	TArray<struct FManufacturerSelectorData>           Manufacturers;                                            // 0x004C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ManufacturerAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.MarketingUnlockDefinition
// 0x001C (0x003C - 0x0058)
class UMarketingUnlockDefinition : public UGBXDefinition
{
public:
	int                                                UnlockCode;                                               // 0x003C(0x0004) (Edit)
	struct FString                                     DialogLocFile;                                            // 0x0040(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DialogLocSection;                                         // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MarketingUnlockDefinition");
		return ptr;
	}

};


// Class WillowGame.MeleeDefinition
// 0x00D8 (0x003C - 0x0114)
class UMeleeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDamageCauser;                                   // 0x003C(0x0004) (Const, Native, NoExport)
	struct FAttributeInitializationData                Damage;                                                   // 0x0040(0x0010) (Edit)
	class UClass*                                      DamageSource;                                             // 0x0050(0x0004) (Edit)
	struct FName                                       DamageTypeDefinitionOverride;                             // 0x0054(0x0008) (Edit)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                                     // 0x005C(0x0004) (Edit)
	class UImpactDefinition*                           ImpactDefinition;                                         // 0x0060(0x0004) (Edit)
	struct FAttributeInitializationData                Knockback;                                                // 0x0064(0x0010) (Edit)
	struct FAttributeInitializationData                StatusEffectDamage;                                       // 0x0074(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectChance;                                       // 0x0084(0x0010) (Edit, Const)
	struct FName                                       HitStartSocketOrBone;                                     // 0x0094(0x0008) (Edit)
	struct FVector                                     HitStartOffset;                                           // 0x009C(0x000C) (Edit)
	unsigned long                                      bMeleeOverPeriodOfTime : 1;                               // 0x00A8(0x0004) (Edit)
	unsigned long                                      bHitEachTargetOnlyOnce : 1;                               // 0x00A8(0x0004) (Edit)
	unsigned long                                      bStopMeleeOnLanded : 1;                                   // 0x00A8(0x0004) (Edit)
	unsigned long                                      bAffectEnemy : 1;                                         // 0x00A8(0x0004) (Edit)
	unsigned long                                      bAffectFriendly : 1;                                      // 0x00A8(0x0004) (Edit)
	unsigned long                                      bAffectNeutral : 1;                                       // 0x00A8(0x0004) (Edit)
	unsigned long                                      bUseDamageRadius : 1;                                     // 0x00A8(0x0004) (Edit)
	unsigned long                                      bExpandRadiusOverTime : 1;                                // 0x00A8(0x0004) (Edit)
	unsigned long                                      bUseTargetCone : 1;                                       // 0x00A8(0x0004) (Edit)
	unsigned long                                      bIgnoreWorldGeometry : 1;                                 // 0x00A8(0x0004) (Edit)
	float                                              MaxMeleeDuration;                                         // 0x00AC(0x0004) (Edit)
	float                                              AttackInterval;                                           // 0x00B0(0x0004) (Edit)
	float                                              DamageRadius;                                             // 0x00B4(0x0004) (Edit)
	float                                              DamageHeight;                                             // 0x00B8(0x0004) (Edit)
	float                                              DamageConeAngle;                                          // 0x00BC(0x0004) (Edit)
	float                                              DamageHeightOffset;                                       // 0x00C0(0x0004) (Edit)
	float                                              ConeAngle;                                                // 0x00C4(0x0004) (Edit)
	float                                              TraceDistance;                                            // 0x00C8(0x0004) (Edit)
	TArray<class UBehaviorBase*>                       OnHitEnemy;                                               // 0x00CC(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnHitEnemyHealth;                                         // 0x00D8(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnHitEnemyShield;                                         // 0x00E4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnHitFriendly;                                            // 0x00F0(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnHitEnemyOrFriendly;                                     // 0x00FC(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnKilledEnemy;                                            // 0x0108(0x000C) (Edit, Const, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MeleeDefinition");
		return ptr;
	}


	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	float GetStatusEffectBaseChanceModifier(class UObject* Context);
	float GetStatusEffectChanceModifier(class UObject* Context);
	float GetStatusEffectBaseDamage(class UObject* Context);
	static bool IsMeleeDebugEnabled();
	static void ToggleMeleeDebug();
	void MeleeAttack(class UObject* ContextObject);
};


// Class WillowGame.WillowWeaponTypes
// 0x0000 (0x003C - 0x003C)
class UWillowWeaponTypes : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowWeaponTypes");
		return ptr;
	}

};


// Class WillowGame.WillowItemTypes
// 0x0000 (0x003C - 0x003C)
class UWillowItemTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowItemTypes");
		return ptr;
	}

};


// Class WillowGame.MissionDefinition
// 0x018C (0x003C - 0x01C8)
class UMissionDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0040(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDlcLicensableObject;                            // 0x0044(0x0004) (Const, Native, NoExport)
	struct FString                                     MissionName;                                              // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MissionDescription;                                       // 0x0054(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     TurnInDescription;                                        // 0x0060(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MissionSummary;                                           // 0x006C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MissionGiver;                                             // 0x0078(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MissionTurnInLocation;                                    // 0x0084(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     TeaserText;                                               // 0x0090(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UTravelStationDefinition*                    TravelStation;                                            // 0x009C(0x0004) (Edit, Const)
	class UTravelStationDefinition*                    TurnInStation;                                            // 0x00A0(0x0004) (Edit, Const)
	unsigned long                                      bPlotCritical : 1;                                        // 0x00A4(0x0004) (Edit)
	unsigned long                                      bActivateInitialObjectiveSet : 1;                         // 0x00A4(0x0004) (Edit)
	unsigned long                                      bGlobalMissionBlocker : 1;                                // 0x00A4(0x0004) (Edit, Const)
	unsigned long                                      bEnableAltReward : 1;                                     // 0x00A4(0x0004) (Edit, Const)
	unsigned long                                      bCanBeFailed : 1;                                         // 0x00A4(0x0004) (Edit)
	unsigned long                                      bGameStageLocked : 1;                                     // 0x00A4(0x0004) (Transient)
	unsigned long                                      bRepeatable : 1;                                          // 0x00A4(0x0004) (Edit)
	class UMissionWeaponBalanceDefinition*             MissionWeapon;                                            // 0x00A8(0x0004) (Edit)
	struct FObjectiveDependencyData                    ObjectiveDependency;                                      // 0x00AC(0x0008) (Edit, Const)
	TArray<class UMissionDefinition*>                  Dependencies;                                             // 0x00B4(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	class UMissionDefinition*                          NextMissionInChain;                                       // 0x00C0(0x0004) (Edit, Const, EditConst)
	class UMissionObjectiveSetDefinition*              InitialObjectiveSet;                                      // 0x00C4(0x0004) (Edit, Const, EditConst)
	class UMarketingUnlockDefinition*                  MarketingUnlock;                                          // 0x00C8(0x0004) (Edit, Const)
	TArray<class UMissionDefinition*>                  BlockedMissions;                                          // 0x00CC(0x000C) (Edit, Const, NeedCtorLink)
	class UMissionObjectiveSetDefinition*              StartBlockingSet;                                         // 0x00D8(0x0004) (Edit, Const)
	class UMissionObjectiveSetDefinition*              StopBlockingSet;                                          // 0x00DC(0x0004) (Edit, Const)
	TArray<class UMissionObjectiveDefinition*>         ObjectiveDefs;                                            // 0x00E0(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	TArray<class UMissionObjectiveSetDefinition*>      ObjectiveSetDefs;                                         // 0x00EC(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	class URegionDefinition*                           GameStageRegion;                                          // 0x00F8(0x0004) (Edit, Const)
	struct FRewardData                                 Reward;                                                   // 0x00FC(0x004C) (Edit, Const, NeedCtorLink)
	struct FRewardData                                 AlternativeReward;                                        // 0x0148(0x004C) (Edit, Const, NeedCtorLink)
	class UMissionObjectiveSetDefinition*              FailOnLoadObjectiveSet;                                   // 0x0194(0x0004) (Edit)
	int                                                SecondsToComplete;                                        // 0x0198(0x0004) (Edit)
	unsigned char                                      DefendMissionSetting;                                     // 0x019C(0x0001) (Edit)
	unsigned char                                      SeasonalAvailabilityTime;                                 // 0x019D(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x019E(0x0002) MISSED OFFSET
	class UGearboxDialogGroup*                         MissionDialogGroup;                                       // 0x01A0(0x0004) (Edit, Const)
	class UWillowDialogEventTag*                       DialogEvent;                                              // 0x01A4(0x0004) (Edit, Const)
	class UWillowDialogNameTag*                        DialogTalker;                                             // 0x01A8(0x0004) (Edit, Const)
	class UWillowDialogEventTag*                       TurnInDialogEvent;                                        // 0x01AC(0x0004) (Edit, Const)
	class UDownloadableExpansionDefinition*            DlcExpansion;                                             // 0x01B0(0x0004) (Edit, Const)
	int                                                MissionNumber;                                            // 0x01B4(0x0004) (Transient)
	int                                                GameStage;                                                // 0x01B8(0x0004) (Transient)
	int                                                AwesomeLevel;                                             // 0x01BC(0x0004) (Transient)
	int                                                ExpLevel;                                                 // 0x01C0(0x0004) (Transient)
	class UBehaviorProviderDefinition*                 BehaviorProvider;                                         // 0x01C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionDefinition");
		return ptr;
	}


	void GetItemRewardPools(bool bAltReward, TArray<class UItemPoolDefinition*>* ItemPools);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
	bool CanBeFailed();
	void GetMissionRewardPresentation(bool bAltReward, TArray<struct FMissionRewardPresentationData>* RewardPresentations);
	bool ShouldGrantAlternateReward(TArray<int>* ObjectivesProgress);
	void GetItemRewardsForPlayer(class AWillowPlayerController* WillowPC, struct FPendingMissionRewardData* MissionReward);
	int GetExperienceReward(class AWillowPlayerController* InWPC, bool bGetAltReward);
	int GetOptionalCreditReward(class AWillowPlayerController* InWPC);
	int GetCurrencyReward(class AWillowPlayerController* InWPC, bool bGetAltReward);
	unsigned char GetCurrencyRewardType(bool bGetAltReward);
	struct FString GetXPRewardPercentageString(bool bGetAltReward);
	struct FString GetCurrencyRewardString(bool bGetAltReward);
	int GetObjectiveIndex(class UMissionObjectiveDefinition* MissionObjective);
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetExpectedGameStage();
	int GetGameStage();
};


// Class WillowGame.MissionDirectivesDefinition
// 0x000C (0x003C - 0x0048)
class UMissionDirectivesDefinition : public UGBXDefinition
{
public:
	TArray<struct FMissionDirectorData>                MissionDirectives;                                        // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionDirectivesDefinition");
		return ptr;
	}


	void AddDirective(class AActor* WaypointOwner, class AMissionTracker* MissionTracker, struct FMissionDirectorData* NewDirective);
	void AddWaypointsForDirective(class AActor* WaypointOwner, class AMissionTracker* MissionTracker, struct FMissionDirectorData* DirectorData);
	void CreateWaypoints(class AActor* WaypointOwner, class AMissionTracker* MissionTracker);
};


// Class WillowGame.MissionObjectiveDefinition
// 0x0060 (0x003C - 0x009C)
class UMissionObjectiveDefinition : public UGBXDefinition
{
public:
	struct FName                                       StatId;                                                   // 0x003C(0x0008) (Const)
	unsigned char                                      ObjectiveCount;                                           // 0x0044(0x0001) (Const)
	unsigned char                                      OptionalCurrencyRewardType;                               // 0x0045(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0046(0x0002) MISSED OFFSET
	struct FString                                     ProgressMessage;                                          // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bRememberItemsWithinObjective : 1;                        // 0x0054(0x0004) (Edit, Const)
	unsigned long                                      bAllOrNothing : 1;                                        // 0x0054(0x0004) (Edit, Const)
	unsigned long                                      bObjectiveIsOptional : 1;                                 // 0x0054(0x0004) (Edit, Const)
	class UFastTravelStationDefinition*                StationOverride;                                          // 0x0058(0x0004) (Edit)
	struct FAttributeInitializationData                OptionalCreditRewardMultiplier;                           // 0x005C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                OptionalOtherCurrencyReward;                              // 0x006C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                OptionalExperienceRewardPercentage;                       // 0x007C(0x0010) (Edit, Const)
	struct FKillMissionData                            KillRestrictions;                                         // 0x008C(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionObjectiveDefinition");
		return ptr;
	}


	bool IsMissionTurnIn();
	struct FString GetMissionName();
	struct FString GetObjectiveName();
	int TranslateObjectiveCount(int Count);
};


// Class WillowGame.MissionObjectiveSetDefinition
// 0x0030 (0x003C - 0x006C)
class UMissionObjectiveSetDefinition : public UGBXDefinition
{
public:
	TArray<class UMissionObjectiveDefinition*>         ObjectiveDefinitions;                                     // 0x003C(0x000C) (Edit, EditConst, NeedCtorLink)
	class UMissionObjectiveSetDefinition*              NextSet;                                                  // 0x0048(0x0004) (Edit, EditConst)
	unsigned long                                      bCanCompleteMission : 1;                                  // 0x004C(0x0004) (Edit)
	unsigned long                                      bAutoEnableNextSet : 1;                                   // 0x004C(0x0004) (Edit)
	class UTravelStationDefinition*                    StationOverride;                                          // 0x0050(0x0004) (Edit)
	struct FString                                     MissionSummaryOverride;                                   // 0x0054(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MissionDescriptionOverride;                               // 0x0060(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionObjectiveSetDefinition");
		return ptr;
	}


	bool ContainsOptionalObjective();
	bool ContainsObjective(class UMissionObjectiveDefinition* Objective);
};


// Class WillowGame.MissionObjectiveSetBranchingDefinition
// 0x000C (0x006C - 0x0078)
class UMissionObjectiveSetBranchingDefinition : public UMissionObjectiveSetDefinition
{
public:
	TArray<class UMissionObjectiveDefinition*>         BranchedObjectiveDefinitions;                             // 0x006C(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionObjectiveSetBranchingDefinition");
		return ptr;
	}


	bool ContainsObjective(class UMissionObjectiveDefinition* Objective);
};


// Class WillowGame.MissionObjectiveSetCollectionDefinition
// 0x000C (0x006C - 0x0078)
class UMissionObjectiveSetCollectionDefinition : public UMissionObjectiveSetDefinition
{
public:
	TArray<class UMissionObjectiveSetDefinition*>      ObjectiveSetDefinitions;                                  // 0x006C(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionObjectiveSetCollectionDefinition");
		return ptr;
	}


	bool ContainsObjective(class UMissionObjectiveDefinition* Objective);
};


// Class WillowGame.MissionPopulationAspect
// 0x0034 (0x003C - 0x0070)
class UMissionPopulationAspect : public UPopulationAspect
{
public:
	struct FPointer                                    VfTable_IIMission;                                        // 0x003C(0x0004) (Const, Native, NoExport)
	class UMissionObjectiveDefinition*                 MissionObjective;                                         // 0x0040(0x0004) (Edit)
	unsigned char                                      Activation;                                               // 0x0044(0x0001) (Edit)
	unsigned char                                      ObjectiveUpdateSetting;                                   // 0x0045(0x0001) (Edit)
	unsigned char                                      WaypointSetting;                                          // 0x0046(0x0001) (Edit)
	unsigned char                                      WaypointActorSetting;                                     // 0x0047(0x0001) (Edit)
	class UMissionObjectiveDefinition*                 OverrideObjective;                                        // 0x0048(0x0004) (Edit)
	unsigned long                                      bDefendTarget : 1;                                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bApplyObjectiveSetRestrictionToActivation : 1;            // 0x004C(0x0004) (Edit)
	unsigned long                                      bActiveWaypoint : 1;                                      // 0x004C(0x0004)
	unsigned long                                      bInitialized : 1;                                         // 0x004C(0x0004)
	TArray<class UMissionObjectiveSetDefinition*>      WaypointObjectiveSetRestrictions;                         // 0x0050(0x000C) (Edit, NeedCtorLink)
	int                                                AreaRadius;                                               // 0x005C(0x0004) (Edit, Const)
	TArray<class UItemPoolDefinition*>                 ItemPools;                                                // 0x0060(0x000C) (Edit, NeedCtorLink)
	class AWillowMissionPickupFailsafe*                PickupFailsafe;                                           // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionPopulationAspect");
		return ptr;
	}


	void DenStatRemoved(class APawn* DenPawn);
	void DenStatAdded(class APawn* DenPawn);
	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
	void SetActivationFromMission(class AMissionTracker* Tracker, class UMissionDefinition* Mission, bool bRespawnIfAlreadyActive);
	void RemoveWaypointsFromOpportunity();
	void CreateWaypoint(class AActor* WaypointActor, class UMissionObjectiveDefinition* Objective);
	void EnabledStatusChanged(bool bIsEnabled, bool bHasActiveActors);
	void AllActorsRemoved(bool bFinishedSpawning);
	void OnActorDeath(class AActor* DeadActor);
	void OnSpawnActor(class AActor* SpawnedActor);
	void CreateWaypointFromWaypointSetting(class AActor* WaypointActor);
	void GrantItemsToActor(class AActor* SpawnedActor);
	void Initialize();
};


// Class WillowGame.MissionTracker
// 0x03B0 (0x0188 - 0x0538)
class AMissionTracker : public AActor
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x0188(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIPlayerBehavior;                                 // 0x018C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIScreenParticle;                                 // 0x0190(0x0004) (Const, Native, NoExport)
	TArray<struct FMissionData>                        MissionList;                                              // 0x0194(0x000C) (NeedCtorLink)
	struct FMultiMap_Mirror                            StatListenersMap;                                         // 0x01A0(0x003C) (Const, Native)
	class UMissionDefinition*                          ActiveMission;                                            // 0x01DC(0x0004) (Net, RepNotify)
	TArray<struct FMissionObserversData>               MissionObservers;                                         // 0x01E0(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<FScriptInterface>                           MissionDirectors;                                         // 0x01EC(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<struct FMissionStatusPlayerData>            DependentMissions;                                        // 0x01F8(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<class UMissionDefinition*>                  MissionsWithCompletedDependencies;                        // 0x0204(0x000C) (AlwaysInit, NeedCtorLink)
	struct FReplicatedMissionDirectiveData             DynamicMissionDirectives[0xA];                            // 0x0210(0x0014) (Net, RepNotify, RepRetry)
	TArray<struct FMissionWaypointsData>               MissionWaypoints;                                         // 0x02D8(0x000C) (Component, AlwaysInit, NeedCtorLink)
	TArray<struct FLevelTransitionData>                LevelTransitions;                                         // 0x02E4(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<struct FTimedMissionData>                   ActiveTimedMissions;                                      // 0x02F0(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<struct FDefendMissionData>                  DefendMissions;                                           // 0x02FC(0x000C) (AlwaysInit, NeedCtorLink)
	struct FDefendTargetData                           DefendTarget;                                             // 0x0308(0x0008) (Net)
	TArray<class UMissionWeaponBalanceDefinition*>     ActiveMissionWeapons;                                     // 0x0310(0x000C) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bDataValidated : 1;                                       // 0x031C(0x0004)
	unsigned long                                      bCinematicMode : 1;                                       // 0x031C(0x0004)
	unsigned long                                      bNeedToIssueLevelLoadEvents : 1;                          // 0x031C(0x0004)
	TArray<struct FBlockedMissionData>                 BlockedMissions;                                          // 0x0320(0x000C) (AlwaysInit, NeedCtorLink)
	class UMissionDefinition*                          GlobalMissionBlocker;                                     // 0x032C(0x0004)
	TArray<struct FObjectiveUpdateData>                ObjectiveUpdates;                                         // 0x0330(0x000C) (AlwaysInit, NeedCtorLink)
	struct FBehaviorConsumerHandle                     BehaviorConsumerHandle;                                   // 0x033C(0x0004)
	struct FMinimapIconHelper_Director                 IconHelper_Directors[0xE];                                // 0x0340(0x001C) (Net, RepRetry)
	struct FMissionKickoffData                         PendingMissionKickoff;                                    // 0x04C8(0x000C)
	TArray<struct FScriptDelegate>                     ActiveMissionChangedDelegates;                            // 0x04D4(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     MissionStatusChangedDelegates;                            // 0x04E0(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     MissionObjectivesChangedDelegates;                        // 0x04EC(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     MissionFilteredChangedDelegates;                          // 0x04F8(0x000C) (NeedCtorLink)
	class UMissionDefinition*                          FastForwardTriggerMission;                                // 0x0504(0x0004)
	struct FScriptDelegate                             __OnActiveMissionChanged__Delegate;                       // 0x0508(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMissionStatusChanged__Delegate;                       // 0x0514(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMissionObjectivesChanged__Delegate;                   // 0x0520(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMissionFilteredChanged__Delegate;                     // 0x052C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionTracker");
		return ptr;
	}


	void PlayTurnIn(class UMissionDefinition* InMission);
	void PlayKickoffDialogOnly(class UMissionDefinition* InMission);
	void PlayKickoff(class UMissionDefinition* InMission);
	void ReceiveChallenge(class UChallengeDefinition* ChalDef, bool bIsCharacterLoad, bool bGiveToAllPlayers);
	void UpdateVisibilityOfAllActiveScreenParticles();
	bool ScreenParticlesShouldBeVisible();
	void SetUpVoGScreenParticle(class UParticleSystem* Template, const struct FName& TextureMovieParamName);
	void HideScreenParticle(class UParticleSystem* Template, const struct FName& ParticleTag, bool bAllowParticleToFinish);
	void ShowScreenParticle(const struct FScreenParticleInitParams& InitParams);
	void Behavior_RegisterStation(class ATravelStation* ActivatedStation, bool bFromSave);
	void Behavior_StopRevive();
	void Behavior_StartRevive();
	bool GetPlayerLoot(int CustomGameStage, int CustomAwesomeLevel, const struct FName& CustomConfiguration, TArray<struct FSpawnedDroppedLootData>* SpawnedLoot);
	void Behavior_SpawnTeleporter(class UPersonalTeleporterDefinition* Definition);
	void Behavior_SetCurrentProjectile(class UProjectileDefinition* CurrentProjectile);
	void Behavior_ForceFeedback(class UForceFeedbackWaveform* FFWaveform, bool ForWeaponFiring);
	class AWillowProjectile* Behavior_SpawnCurrentProjectile(class UProjectileDefinition* CurrentProjectile, bool bLeftHand, bool bConsumeResource, bool bNoVelocity, bool bSetProjectileToGrenadeMod);
	void Behavior_UnlockAchievementForAllPlayers(int AchievementId, int MinimumPlayersRequired);
	void Behavior_DetachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_AttachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_UnlockAchievement(int AchievementId);
	void Behavior_SendMessageToPlayers(bool bShouldSendToInstigator, class UClass* SendMsgClass);
	void Behavior_CameraAnim(class UCameraAnim* Anim);
	void Behavior_ViewShake(const struct FGearboxViewShakeInfo& ShakeInfo);
	void Behavior_ThrowGrenade();
	void Behavior_Melee();
	void Behavior_Reload();
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void RunMissionCustomEvent(class UMissionDefinition* Mission, const struct FName& EventName);
	void DebugRefreshHUD();
	unsigned char DebugAdvanceTrackedMission(bool bDoNotAdvanceObjectiveSet);
	void DebugIncrementObjective(const struct FString& InMission, const struct FString& InObjective);
	void DebugCompleteObjective(const struct FString& InMission, const struct FString& InObjective);
	class UMissionObjectiveDefinition* DebugGetObjectiveFromString(class UMissionDefinition* InMission, const struct FString& InObjective);
	void DebugMakeEligibileAndComplete(class UMissionDefinition* InMission);
	void DebugMakeEligibleForAndAccept(const struct FString& InMission);
	void DebugAcceptMission(const struct FString& InMission);
	void DebugUndoMission(class UMissionDefinition* InMission);
	void DebugAdvanceObjectiveSet(const struct FString& InMission, const struct FString& ShouldCompleteObjectives);
	void DebugUndoCompleteMission(const struct FString& InMission);
	void DebugCompleteMission(const struct FString& InMission);
	class UMissionDefinition* DebugGetMissionFromString(const struct FString& InMission);
	static void StaticSetMissionDirectorParticle(class AActor* MissionDirectorActor, class UParticleSystemComponent** MissionParticle);
	void TriggerMissionFilteredChangedDelegates();
	void ClearMissionFilteredChangedDelegate(const struct FScriptDelegate& MissionFilteredChangedDelegate);
	void AddMissionFilteredChangedDelegate(const struct FScriptDelegate& MissionFilteredChangedDelegate);
	void OnMissionFilteredChanged();
	void TriggerMissionObjectivesChangedDelegates(class UMissionDefinition* MissionThatChanged);
	void ClearMissionObjectivesChangedDelegate(const struct FScriptDelegate& MissionObjectivesChangedDelegate);
	void AddMissionObjectivesChangedDelegate(const struct FScriptDelegate& MissionObjectivesChangedDelegate);
	void OnMissionObjectivesChanged(class UMissionDefinition* MissionThatChanged);
	void TriggerMissionStatusChangedDelegates();
	void ClearMissionStatusChangedDelegate(const struct FScriptDelegate& MissionStatusChangedDelegate);
	void AddMissionStatusChangedDelegate(const struct FScriptDelegate& MissionStatusChangedDelegate);
	void OnMissionStatusChanged();
	void TriggerActiveMissionChangedDelegates();
	void ClearActiveMissionChangedDelegate(const struct FScriptDelegate& ActiveMissionChangedDelegate);
	void AddActiveMissionChangedDelegate(const struct FScriptDelegate& ActiveMissionChangedDelegate);
	void OnActiveMissionChanged();
	void NotifyLocalPlayerOfActiveMission();
	void ReplicatedEvent(const struct FName& VarName);
	void ProcessDynamicMissionDirectives();
	bool AllExpansionSideMissionsComplete(class AWillowPlayerController* Player, class UDownloadableExpansionDefinition* Expansion);
	void InitializeMissionsWithCompletedDependencies();
	int GetMissionCount(bool bIncludeRepeatableMissions, bool bIncludeDLC, bool bIncludeAll);
	bool IsDataValid();
	void ValidateData();
	void StopMissionTimer(class UMissionDefinition* TimedMission);
	void StartMissionTimer(class UMissionDefinition* TimedMission);
	void AddTimeToMission(class UMissionDefinition* TimedMission, float SecondsToAdd);
	void NotifyActorDied(class AActor* DeadActor);
	bool IsValidMissionWeapon(class UMissionWeaponBalanceDefinition* MissionWeaponBalanceDef);
	void AddDefendTarget(class AActor* Target, class UMissionObjectiveDefinition* Objective);
	bool IsObjectiveBitSet(class UMissionObjectiveDefinition* MissionObjective, int ObjectiveBit);
	void RemoteUpdateMissionFiltered(struct FReplicatedMissionFilterData* MissionFilterData);
	void RemoteDecrementMissionObjective(class UMissionObjectiveDefinition* Objective);
	void RemoteClearMissionObjective(class UMissionObjectiveDefinition* Objective);
	void RemoteUpdateMissionObjective(struct FReplicatedMissionObjectiveData* ObjectiveData);
	void RemoteSubObjectiveSetAdvanced(class UMissionObjectiveSetDefinition* SubObjectiveSetAdvanced);
	void RemoteUpdateActiveObjectiveSet(class UMissionObjectiveSetDefinition* ActiveObjectiveSet);
	void RemoteUpdateMissionStatus(int GameStage, struct FReplicatedMissionStatusData* MissionStatusData);
	void RemoteUpdateMissionData(struct FReplicatedMissionData* ReplicatedMissionData);
	void GetAllMissions(TArray<class UMissionDefinition*>* AllMissions);
	class UMissionDefinition* GetMissionForNumber(int MissionNumber);
	void GetActiveSubObjectiveSets(class UMissionObjectiveSetCollectionDefinition* SetCollection, TArray<class UMissionObjectiveSetDefinition*>* ActiveSubObjectiveSets);
	bool CanEndMission(class UMissionDefinition* InMission);
	bool CanStartMission(class UMissionDefinition* InMission);
	void SetKickoffHeard(class UMissionDefinition* InMission);
	void NotifyPawnDied(class AWillowPawn* KilledPawn, class AController* InstigatedBy, class UClass* DamageTypeClass, class UDamageTypeDefinition* DamageTypeDefinition, const FScriptInterface& DamageCauser, bool bKilledByCritical, const struct FTraceHitInfo& HitInfo);
	void GetCurrentObjectives(class UMissionDefinition* InMission, TArray<class UMissionObjectiveDefinition*>* CurrentObjectives, TArray<class UMissionObjectiveDefinition*>* BranchObjectives);
	bool IsObjectiveSetActive(class UMissionObjectiveSetDefinition* ObjectiveSet);
	class UMissionObjectiveSetDefinition* GetActivePrimaryObjectiveSet(class UMissionDefinition* InMission);
	int GetObjectiveCount(class UMissionObjectiveDefinition* MissionObjective);
	bool IsMissionObjectiveActive(class UMissionObjectiveDefinition* MissionObjective);
	bool IsMissionObjectiveComplete(class UMissionObjectiveDefinition* MissionObjective);
	bool IsMissionBlocked(class UMissionDefinition* InMission);
	unsigned char GetCompletedBranch(class UMissionDefinition* Mission);
	void GetObjectivesProgress(class UMissionDefinition* InMission, bool bClearCurrentIncompleteAllOrNothingObjectives, TArray<int>* ObjectivesProgress);
	void GetActiveMissionData(struct FMissionData* ActiveMissionData);
	class UMissionDefinition* GetActiveMission();
	void SetActiveMission(class UMissionDefinition* InMission, bool bFromActivation, class AWillowPlayerController* WillowPC);
	void EvaluateStat(const struct FName& StatId);
	void DecrementObjective(class UMissionObjectiveDefinition* Objective);
	void UpdateObjective(class UMissionObjectiveDefinition* MissionObjective, int ObjectiveBit);
	void FastTravelStationRegistered();
	void RegisterLevelTransition(class ALevelTravelStation* LevelTransition, const struct FName& TargetLevel);
	void UnregisterWaypoint(class UWaypointComponent* Waypoint, class UMissionDefinition* InMission);
	void RegisterWaypoint(class UWaypointComponent* Waypoint, class UMissionDefinition* InMission);
	void UnregisterMissionDirector(const FScriptInterface& MissionDirector);
	void RegisterMissionDirector(const FScriptInterface& MissionDirector);
	void UnregisterMissionObserver(const FScriptInterface& MissionObserver);
	void RegisterMissionObserver(const FScriptInterface& MissionObserver, class UMissionDefinition* InMission);
	void OnCinematicModeChanged(bool bInCinematicMode);
	bool MissionDependenciesMet(class UMissionDefinition* InMission);
	unsigned char GetMissionStatus(class UMissionDefinition* InMission);
	void CompleteMission(class UMissionDefinition* InMission, class AWillowPlayerController* WillowPC);
	void ActivateMission(class UMissionDefinition* InMission, class AWillowPlayerController* WillowPC);
	void GrantMissionWeaponsToClientPlayer(class AWillowPlayerController* WillowPC);
	void SendMissionData(class AWillowPlayerController* WillowPC);
	bool InitializeWorldMissionState(TArray<struct FMissionStatusPlayerData> InMissionList, TArray<class UMissionDefinition*> InFilteredMissions, class AWillowPlayerController* WillowPC);
	void InitializePIEWorldMissionState();
	void GetMissionDescription(class UMissionDefinition* InMission, bool bShowTurnInDescription, struct FString* Summary, struct FString* Description);
	bool IsMissionFiltered(class UMissionDefinition* InMission);
	void ToggleMissionFiltered(class UMissionDefinition* InMission);
	void SetMissionStatus(class UMissionDefinition* InMission, unsigned char MissionStatus, class AWillowPlayerController* WillowPC);
};


// Class WillowGame.MovementComponent
// 0x0003 (0x0059 - 0x005C)
class UMovementComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MovementComponent");
		return ptr;
	}


	void Init();
};


// Class WillowGame.DrunkenBaseComponent
// 0x0044 (0x005C - 0x00A0)
class UDrunkenBaseComponent : public UMovementComponent
{
public:
	float                                              StartApproachDistance;                                    // 0x005C(0x0004) (Edit, Const)
	float                                              StartDelayTime;                                           // 0x0060(0x0004) (Edit, Const)
	float                                              EaseInTime;                                               // 0x0064(0x0004) (Edit, Const)
	float                                              StartTime;                                                // 0x0068(0x0004) (Transient)
	unsigned long                                      bInitialized : 1;                                         // 0x006C(0x0004) (Transient)
	int                                                RandomNumberSeed;                                         // 0x0070(0x0004) (Transient)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0074(0x000C) MISSED OFFSET
	struct FQuat                                       LastVelocityRotOffset;                                    // 0x0080(0x0010) (Transient)
	struct FQuat                                       LastAccelRotOffset;                                       // 0x0090(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DrunkenBaseComponent");
		return ptr;
	}


	void GenerateRandomNumberSeed();
	void SetRandomNumberSeed(int InRandomNumberSeed);
	void Init();
};


// Class WillowGame.DrunkenRandomComponent
// 0x0034 (0x00A0 - 0x00D4)
class UDrunkenRandomComponent : public UDrunkenBaseComponent
{
public:
	float                                              PathCorrectionInterval;                                   // 0x00A0(0x0004) (Edit, Const)
	float                                              TurnSpeed;                                                // 0x00A4(0x0004) (Edit, Const)
	float                                              ApproachTurnSpeed;                                        // 0x00A8(0x0004) (Edit, Const)
	float                                              MaxSpreadAngle;                                           // 0x00AC(0x0004) (Edit, Const)
	float                                              MaxDepartureAngle;                                        // 0x00B0(0x0004) (Edit, Const)
	float                                              LastUpdateTime;                                           // 0x00B4(0x0004) (Transient)
	float                                              LastDepartureAngle;                                       // 0x00B8(0x0004) (Transient)
	struct FRotator                                    LastRotationOffset;                                       // 0x00BC(0x000C) (Transient)
	struct FRotator                                    TargetRotationOffset;                                     // 0x00C8(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DrunkenRandomComponent");
		return ptr;
	}

};


// Class WillowGame.DrunkenWaveComponent
// 0x0018 (0x00A0 - 0x00B8)
class UDrunkenWaveComponent : public UDrunkenBaseComponent
{
public:
	float                                              MaxRandomWaveOffsetTime;                                  // 0x00A0(0x0004) (Edit, Const)
	TArray<struct FDrunkenWaveFormData>                Waves;                                                    // 0x00A4(0x000C) (Edit, Const, NeedCtorLink)
	float                                              GlobalWaveScale;                                          // 0x00B0(0x0004) (Edit, Const)
	float                                              WaveOffsetTime;                                           // 0x00B4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DrunkenWaveComponent");
		return ptr;
	}

};


// Class WillowGame.NameListDefinition
// 0x000C (0x003C - 0x0048)
class UNameListDefinition : public UGBXDefinition
{
public:
	TArray<struct FString>                             Names;                                                    // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("NameListDefinition");
		return ptr;
	}

};


// Class WillowGame.NPCLoadBalancer
// 0x0024 (0x003C - 0x0060)
class UNPCLoadBalancer : public UObject
{
public:
	TArray<struct FNPCList>                            TheList;                                                  // 0x003C(0x000C) (NeedCtorLink)
	float                                              LastPathTime;                                             // 0x0048(0x0004)
	int                                                NumberNPCsMoving;                                         // 0x004C(0x0004)
	float                                              LastUpdateTime;                                           // 0x0050(0x0004)
	int                                                MaxNumberPathing;                                         // 0x0054(0x0004)
	float                                              TimeBetweenUpdates;                                       // 0x0058(0x0004)
	unsigned long                                      NumberPathingReducedByPlayerCount : 1;                    // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("NPCLoadBalancer");
		return ptr;
	}


	bool CheckPathing(class AWillowMind* InMind);
	bool WantsToPath(class AWillowMind* InMind);
	void PathFailed(class AWillowMind* InMind);
	void ClearList();
	void OnPerch(class AWillowMind* InMind, bool bOnPerch);
	void IsPathing(class AWillowMind* InMind, bool bPathing);
	bool CanContinuePath(class AWillowMind* InMind);
	bool CanStartPath(class AWillowMind* InMind);
};


// Class WillowGame.PackageAssetLibrary
// 0x001C (0x003C - 0x0058)
class UPackageAssetLibrary : public UGBXDefinition
{
public:
	class UClass*                                      LibraryType;                                              // 0x003C(0x0004) (Edit)
	TArray<struct FString>                             Sublibraries;                                             // 0x0040(0x000C) (Edit, EditConst, NeedCtorLink)
	TArray<class UPackageAssetSublibrary*>             SublibraryLinks;                                          // 0x004C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PackageAssetLibrary");
		return ptr;
	}

};


// Class WillowGame.PackageAssetSublibrary
// 0x0024 (0x003C - 0x0060)
class UPackageAssetSublibrary : public UGBXDefinition
{
public:
	class UClass*                                      LibraryType;                                              // 0x003C(0x0004) (Edit, EditConst)
	TArray<struct FString>                             Assets;                                                   // 0x0040(0x000C) (Edit, EditConst, NeedCtorLink, Deprecated)
	TArray<struct FNameBasedObjectPath>                AssetPaths;                                               // 0x004C(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FName                                       CachedPackageName;                                        // 0x0058(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PackageAssetSublibrary");
		return ptr;
	}

};


// Class WillowGame.PassengerCameraDefinition
// 0x005C (0x003C - 0x0098)
class UPassengerCameraDefinition : public UGBXDefinition
{
public:
	float                                              AfterburnerHandlingCamera;                                // 0x003C(0x0004) (Edit)
	unsigned long                                      DoNotLerpToThisSeat : 1;                                  // 0x0040(0x0004) (Edit, Const)
	unsigned long                                      bRotateCameraUnderVehicle : 1;                            // 0x0040(0x0004) (Edit)
	unsigned long                                      bSnapCameraYaw : 1;                                       // 0x0040(0x0004) (Edit, Const)
	unsigned long                                      bSnapCameraPitch : 1;                                     // 0x0040(0x0004) (Edit, Const)
	unsigned long                                      bScaleDistanceWithSpeed : 1;                              // 0x0040(0x0004) (Edit, Const)
	float                                              CameraModifierSpeed;                                      // 0x0044(0x0004) (Edit, Const)
	float                                              CameraRollSmoothingSpeed;                                 // 0x0048(0x0004) (Edit, Const)
	unsigned char                                      LerpStyle;                                                // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      CameraTarget;                                             // 0x004D(0x0001) (Edit, Const)
	unsigned char                                      CameraBehaviorOnEntry;                                    // 0x004E(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	struct FVector                                     BaseCameraPosition;                                       // 0x0050(0x000C) (Edit, Const)
	float                                              CameraOffset;                                             // 0x005C(0x0004) (Edit, Const)
	struct FRotator                                    ForcedCameraRotation;                                     // 0x0060(0x000C) (Edit, Const)
	float                                              CameraPitchUpOffset;                                      // 0x006C(0x0004) (Edit, Const)
	float                                              CameraPitchDownOffset;                                    // 0x0070(0x0004) (Edit, Const)
	float                                              ViewPitchMin;                                             // 0x0074(0x0004) (Edit, Const)
	float                                              ViewPitchMax;                                             // 0x0078(0x0004) (Edit, Const)
	float                                              ViewYawLimitFromTurretFacing;                             // 0x007C(0x0004) (Edit, Const)
	float                                              CameraSnapDelay;                                          // 0x0080(0x0004) (Edit, Const)
	float                                              CameraSnapSpeed;                                          // 0x0084(0x0004) (Edit, Const)
	float                                              CameraFastScale;                                          // 0x0088(0x0004) (Edit, Const)
	float                                              RotationRateYaw;                                          // 0x008C(0x0004) (Edit, Const)
	float                                              RotationRatePitch;                                        // 0x0090(0x0004) (Edit, Const)
	float                                              LookForwardDist;                                          // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PassengerCameraDefinition");
		return ptr;
	}

};


// Class WillowGame.PawnRelevanceUtility
// 0x0000 (0x003C - 0x003C)
class UPawnRelevanceUtility : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PawnRelevanceUtility");
		return ptr;
	}

};


// Class WillowGame.PawnRelevanceUtilityCaching
// 0x0040 (0x003C - 0x007C)
class UPawnRelevanceUtilityCaching : public UPawnRelevanceUtility
{
public:
	unsigned long                                      CachingEnabled : 1;                                       // 0x003C(0x0004) (Const)
	float                                              MaxCacheTime;                                             // 0x0040(0x0004) (Const)
	float                                              DistanceClose;                                            // 0x0044(0x0004) (Const)
	float                                              DistanceMed;                                              // 0x0048(0x0004) (Const)
	float                                              CacheFreshnessTimeClose;                                  // 0x004C(0x0004) (Const)
	float                                              CacheFreshnessTimeMed;                                    // 0x0050(0x0004) (Const)
	float                                              CacheFreshnessTimeFar;                                    // 0x0054(0x0004) (Const)
	float                                              CacheFreshnessTimePlayer;                                 // 0x0058(0x0004) (Const)
	float                                              CacheTimeFudgeFactorClose;                                // 0x005C(0x0004) (Const)
	float                                              CacheTimeFudgeFactorMed;                                  // 0x0060(0x0004) (Const)
	float                                              CacheTimeFudgeFactorFar;                                  // 0x0064(0x0004) (Const)
	float                                              HasMovedDistThreshold;                                    // 0x0068(0x0004) (Const)
	float                                              HasMovedDistThresholdRelevant;                            // 0x006C(0x0004) (Const)
	TArray<struct FRelevanceCacheStruct>               CachedRelevance;                                          // 0x0070(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PawnRelevanceUtilityCaching");
		return ptr;
	}

};


// Class WillowGame.PawnRelevanceUtilityFixedCost
// 0x0024 (0x007C - 0x00A0)
class UPawnRelevanceUtilityFixedCost : public UPawnRelevanceUtilityCaching
{
public:
	float                                              CloseDistanceSquared;                                     // 0x007C(0x0004) (Const)
	float                                              MedDistanceSquared;                                       // 0x0080(0x0004) (Const)
	int                                                MaxLineChecksPerFrame;                                    // 0x0084(0x0004) (Const)
	TArray<struct FRelevanceBucketStruct>              Buckets;                                                  // 0x0088(0x000C) (Transient, NeedCtorLink)
	float                                              MedAccumulatedTime;                                       // 0x0094(0x0004)
	float                                              FarAccumulatedTime;                                       // 0x0098(0x0004)
	float                                              SkipUpdateForTime;                                        // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PawnRelevanceUtilityFixedCost");
		return ptr;
	}


	void SetMaxLineChecks(int CheckCount);
	void SetBucket(int BucketNum, float BucketDistance, int MaxLineChecks, int MaxIterations);
	void ShowBucketSettings();
	void PrintBuckets();
};


// Class WillowGame.PerchDefinition
// 0x00A4 (0x003C - 0x00E0)
class UPerchDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBodyInfoProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0040(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIAnimProvider;                                   // 0x0044(0x0004) (Const, Native, NoExport)
	struct FAIRange                                    LoopTime;                                                 // 0x0048(0x0008) (Edit, Const)
	struct FAIRange                                    CooldownTime;                                             // 0x0050(0x0008) (Edit, Const)
	TArray<struct FPerchAnimData>                      AnimMap;                                                  // 0x0058(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bUseCollision : 1;                                        // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bRotateYawOnly : 1;                                       // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bOptimizeMemory : 1;                                      // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCheckForPlayerInRange : 1;                               // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCombatPerch : 1;                                         // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bDynamicLightEnvironment : 1;                             // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bCastShadows : 1;                                         // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;                      // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bDynamic : 1;                                             // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bSynthesizeSHLight : 1;                                   // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bShadowFromEnvironment : 1;                               // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                        // 0x0064(0x0004) (Edit, Const)
	class UExpressionEvaluator*                        CanUseExpression;                                         // 0x0068(0x0004) (Edit, Const, EditInline)
	float                                              LerpTime;                                                 // 0x006C(0x0004) (Edit, Const)
	float                                              AdditionalOffsetScale;                                    // 0x0070(0x0004) (Edit, Const)
	float                                              PlayerInRangeCheckFrequency;                              // 0x0074(0x0004) (Edit, Const)
	float                                              PlayerInRangeRadius;                                      // 0x0078(0x0004) (Edit, Const)
	float                                              PlayerInRangeCooldown;                                    // 0x007C(0x0004) (Edit, Const)
	class UProjectileDefinition*                       CombatProjectile;                                         // 0x0080(0x0004) (Edit, Const)
	struct FBodyCompositionData                        BodyComposition;                                          // 0x0084(0x0014) (Const, Component, DuplicateTransient, NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x0098(0x0004) (Const)
	float                                              LightingBoundsScale;                                      // 0x009C(0x0004) (Edit, Const)
	int                                                NumVolumeVisibilitySamples;                               // 0x00A0(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutExponent;                                 // 0x00A4(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutTime;                                     // 0x00A8(0x0004) (Edit, Const)
	struct FLinearColor                                AmbientGlow;                                              // 0x00AC(0x0010) (Edit, Const)
	struct FVector                                     AmbientShadowSourceDirection;                             // 0x00BC(0x000C) (Edit, Const)
	struct FLinearColor                                AmbientShadowColor;                                       // 0x00C8(0x0010) (Edit, Const)
	float                                              DominantShadowTransitionStartDistance;                    // 0x00D8(0x0004) (Edit, Const)
	float                                              DominantShadowTransitionEndDistance;                      // 0x00DC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PerchDefinition");
		return ptr;
	}


	void OnPlayerInRange(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnFinished(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnStopAnim(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnIdleAnim(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnStartAnim(struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
	void GetAnims(TArray<class UGearboxAnimDefinition*>* OutAnims);
	bool CanUse(class UObject* ContextSource);
	bool GetPerchData(class UPopulationBodyTag* Key, struct FPerchAnimData* Data);
	bool Supports(class UPopulationBodyTag* Key);
};


// Class WillowGame.PerchEditorComponent
// 0x0000 (0x0210 - 0x0210)
class UPerchEditorComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PerchEditorComponent");
		return ptr;
	}

};


// Class WillowGame.PhysicsJumpConnection
// 0x001C (0x003C - 0x0058)
class UPhysicsJumpConnection : public UObject
{
public:
	class APhysicsJumpNode*                            Source;                                                   // 0x003C(0x0004) (Edit, Const, EditConst)
	class APhysicsJumpNode*                            Destination;                                              // 0x0040(0x0004) (Edit, Const)
	float                                              Speed;                                                    // 0x0044(0x0004) (Edit, Const)
	float                                              Angle;                                                    // 0x0048(0x0004) (Edit, Const)
	struct FVector                                     Velocity;                                                 // 0x004C(0x000C) (Edit, Const, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PhysicsJumpConnection");
		return ptr;
	}

};


// Class WillowGame.PhysicsJumpNode
// 0x0034 (0x0244 - 0x0278)
class APhysicsJumpNode : public APathNode
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshSpecialMove;                          // 0x0244(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIGBXNavMeshSeed;                                 // 0x0248(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIGBXNavMeshBuildEvents;                          // 0x024C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0250(0x0004) (Const, Native, NoExport)
	TArray<class UPhysicsJumpConnection*>              Connections;                                              // 0x0254(0x000C) (Edit, NeedCtorLink, EditInline)
	class USpecialMove_PhysicsJump*                    OverrideJumpSMD;                                          // 0x0260(0x0004) (Edit, Const)
	float                                              JumpRadius;                                               // 0x0264(0x0004) (Edit, Const)
	unsigned long                                      bLimitUsage : 1;                                          // 0x0268(0x0004) (Edit, Const)
	unsigned long                                      bEnabled : 1;                                             // 0x0268(0x0004) (Edit)
	TArray<class UPopulationBodyTag*>                  AllowedTags;                                              // 0x026C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PhysicsJumpNode");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	struct FRotator GetRotation(const struct FVector& Up, class APhysicsJumpNode* Destination);
	struct FRotator GetStartRotation(int JumpIndex);
	struct FRotator GetEndRotation(int JumpIndex);
	struct FVector GetEndLocation(class AWillowPawn* Pawn, int JumpIndex);
	struct FVector GetStartLocation(class AWillowPawn* Pawn);
	struct FVector GetLocation(float PawnHeight);
	class UCylinderComponent* GetPrimaryCollision(class AWillowPawn* Pawn);
	class USpecialMove_PhysicsJump* GetJumpDefFromBody(class UBodyClassDefinition* BodyClass);
	void RemoveJumpDestination(class APhysicsJumpNode* JumpNode);
	void AddJumpDestination(class APhysicsJumpNode* JumpNode);
	int GetJumpIndex(class APhysicsJumpNode* JumpNode);
};


// Class WillowGame.PhysicsJumpNodeEditorComponent
// 0x0000 (0x0210 - 0x0210)
class UPhysicsJumpNodeEditorComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PhysicsJumpNodeEditorComponent");
		return ptr;
	}

};


// Class WillowGame.PlayerBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class APlayerBlockingVolume : public ABlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBlockingVolume");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
};


// Class WillowGame.ExecuteBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class AExecuteBlockingVolume : public APlayerBlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ExecuteBlockingVolume");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
};


// Class WillowGame.PlayerChallengeListDefinition
// 0x000C (0x003C - 0x0048)
class UPlayerChallengeListDefinition : public UGBXDefinition
{
public:
	TArray<class UChallengeDefinition*>                PlayerChallenges;                                         // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerChallengeListDefinition");
		return ptr;
	}

};


// Class WillowGame.PlayerClassAttributeValueResolver
// 0x0004 (0x003C - 0x0040)
class UPlayerClassAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                            // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerClassAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.PlayerClassCountAttributeValueResolver
// 0x0004 (0x003C - 0x0040)
class UPlayerClassCountAttributeValueResolver : public UAttributeValueResolver
{
public:
	class UPlayerClassIdentifierDefinition*            PlayerClassId;                                            // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerClassCountAttributeValueResolver");
		return ptr;
	}


	static void ResetPlayerClassCountOverride();
	static void SetPlayerClassCountOverride(class UPlayerClassIdentifierDefinition* PlayerClassIdToOverride, int Override);
};


// Class WillowGame.PlayerClassIdentifierDefinition
// 0x0064 (0x003C - 0x00A0)
class UPlayerClassIdentifierDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                            // 0x003C(0x0004) (Const, Native, NoExport)
	struct FString                                     ClassName;                                                // 0x0040(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     LocalizedClassName;                                       // 0x004C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     LocalizedClassNameNonCaps;                                // 0x0058(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FName                                       StatPlayerFirstSkillPoint;                                // 0x0064(0x0008) (Edit, Const)
	class UDownloadableCharacterDefinition*            DlcCharacterDef;                                          // 0x006C(0x0004) (Edit, Const)
	class UAttributeInitializationDefinition*          ClassDropInitializationDefinition;                        // 0x0070(0x0004) (Transient)
	class UItemPoolDefinition*                         CommonClassMods;                                          // 0x0074(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         UncommonClassMods;                                        // 0x0078(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         RareClassMods;                                            // 0x007C(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         VeryRareClassMods;                                        // 0x0080(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         LegendaryClassMods;                                       // 0x0084(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         SlayerOfTerramorphousClassMods;                           // 0x0088(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         AsterClassMods;                                           // 0x008C(0x0004) (Edit, Const)
	class UItemPoolDefinition*                         LobeliaClassMods;                                         // 0x0090(0x0004) (Edit, Const)
	TArray<struct FCustomizationItemData>              CharacterCustomizations;                                  // 0x0094(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerClassIdentifierDefinition");
		return ptr;
	}


	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
};


// Class WillowGame.PlayerControllerAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UPlayerControllerAttributeContextResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerControllerAttributeContextResolver");
		return ptr;
	}

};


// Class WillowGame.PlayerEventProviderDefinition
// 0x000C (0x003C - 0x0048)
class UPlayerEventProviderDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x0040(0x0004) (Const, Native, NoExport)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerEventProviderDefinition");
		return ptr;
	}


	void OnPlayerEvent(unsigned char EventOutput, class AActor* Instigator, class AActor* Other, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.WillowGameInfo
// 0x02E4 (0x0330 - 0x0614)
class AWillowGameInfo : public AGearboxGameInfo
{
public:
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;                      // 0x0330(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIAIInterface;                                    // 0x0334(0x0004) (Const, Native, NoExport)
	unsigned long                                      bWeaponStay : 1;                                          // 0x0338(0x0004)
	unsigned long                                      bDemoMode : 1;                                            // 0x0338(0x0004)
	unsigned long                                      bPIESpawnInVehicle : 1;                                   // 0x0338(0x0004)
	unsigned long                                      bConsoleServer : 1;                                       // 0x0338(0x0004)
	unsigned long                                      bResurrectAllPlayersWhenOneDies : 1;                      // 0x0338(0x0004)
	unsigned long                                      bBossesRegenHealthOnReset : 1;                            // 0x0338(0x0004)
	unsigned long                                      bEnemiesForgetDownedPlayers : 1;                          // 0x0338(0x0004)
	unsigned long                                      bEnemiesCannotDoCloseAttacksOnDownedPlayers : 1;          // 0x0338(0x0004)
	unsigned long                                      bDlcTravelFailureReceived : 1;                            // 0x0338(0x0004)
	unsigned long                                      HardcoreMode : 1;                                         // 0x0338(0x0004)
	unsigned long                                      bIgnoreFriendlyFire : 1;                                  // 0x0338(0x0004)
	unsigned long                                      bIgnoreNPCFriendlyFire : 1;                               // 0x0338(0x0004)
	unsigned long                                      bFromSeamlessTravel : 1;                                  // 0x0338(0x0004) (Transient)
	float                                              AdjustedDifficulty;                                       // 0x033C(0x0004)
	struct FString                                     PIESpawnInVehicleName;                                    // 0x0340(0x000C) (NeedCtorLink)
	class AActor*                                      LastPlayerStartSpot;                                      // 0x034C(0x0004)
	class AActor*                                      LastStartSpot;                                            // 0x0350(0x0004)
	class AWillowVehicle*                              VehicleList;                                              // 0x0354(0x0004)
	class UGlobalsDefinition*                          MyGlobals;                                                // 0x0358(0x0004)
	class ASkillEffectManager*                         GlobalSkillManager;                                       // 0x035C(0x0004)
	class UPlayerInteractionManager*                   GlobalPlayerInteractionManager;                           // 0x0360(0x0004)
	class AChallengeManager*                           GlobalChallengeManager;                                   // 0x0364(0x0004)
	class UCombatMusicManager*                         GlobalCombatMusicManager;                                 // 0x0368(0x0004)
	class UPlayerStatsNotifier*                        GlobalPlayerStatsNotifier;                                // 0x036C(0x0004)
	class ABlackMarketUpgradeManager*                  GlobalBlackMarketUpgradeManager;                          // 0x0370(0x0004)
	TArray<class UInstancedDesignerAttribute*>         DesignerAttributes;                                       // 0x0374(0x000C) (NeedCtorLink)
	class AWillowPersonalTeleporter*                   ReturnTeleporter;                                         // 0x0380(0x0004)
	class AWillowPersonalTeleporter*                   PersonalTeleporter;                                       // 0x0384(0x0004)
	struct FName                                       TeleporterDestinationName;                                // 0x0388(0x0008)
	TArray<FScriptInterface>                           PlayerObservers;                                          // 0x0390(0x000C) (NeedCtorLink)
	struct FString                                     MapChangeInitiated;                                       // 0x039C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangePlayerDown;                                      // 0x03A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangePlayerInMenu;                                    // 0x03B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeYouAreInMenu;                                    // 0x03C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeMissingDLC;                                      // 0x03CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeNeedInstallMissingDLC;                           // 0x03D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeUpsellMissingDLC;                                // 0x03E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCountdown;                                       // 0x03F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCanceledPlayerDown;                              // 0x03FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCanceledPlayerMenu;                              // 0x0408(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangePlayerIsSaving;                                  // 0x0414(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCanceledPlayerIsSaving;                          // 0x0420(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangePlayerJoining;                                   // 0x042C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeUnknownPlayerJoining;                            // 0x0438(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCanceledPlayerJoining;                           // 0x0444(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCanceledUnknownPlayerJoining;                    // 0x0450(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangePlayerDueling;                                   // 0x045C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCanceledPlayerDueling;                           // 0x0468(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangePlayerRespawn;                                   // 0x0474(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapChangeCanceledPlayerRespawn;                           // 0x0480(0x000C) (Const, Localized, NeedCtorLink)
	int                                                TravelCountdownTime;                                      // 0x048C(0x0004)
	int                                                TravelPostCountdownTime;                                  // 0x0490(0x0004)
	class UBehavior_CheckMapChangeConditions*          TravelBehavior;                                           // 0x0494(0x0004)
	FScriptInterface                                   TravelEventInterface;                                     // 0x0498(0x0008)
	class UTravelStationDefinition*                    TravelStationDef;                                         // 0x04A0(0x0004)
	class AWillowPlayerController*                     TravelInstigator;                                         // 0x04A4(0x0004)
	struct FString                                     NewShopInventory;                                         // 0x04A8(0x000C) (Const, Localized, NeedCtorLink)
	float                                              SecondsUntilShopsReset;                                   // 0x04B4(0x0004)
	float                                              ShopTimerRate;                                            // 0x04B8(0x0004) (Transient)
	float                                              ShopTimerRateBaseValue;                                   // 0x04BC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShopTimerRateModifierStack;                               // 0x04C0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastShopResetTime;                                        // 0x04CC(0x0004)
	float                                              SecondsUntilShopTimerResend;                              // 0x04D0(0x0004)
	float                                              NewShopInventoryDisplayTime;                              // 0x04D4(0x0004)
	struct FColor                                      NewShopInventoryDisplayColor;                             // 0x04D8(0x0004)
	struct FWaypointActorData                          WaypointActors[0x6];                                      // 0x04DC(0x0014) (Component, NeedCtorLink)
	struct FAreaWaypointData                           AreaWaypoints[0x4];                                       // 0x0554(0x000C)
	TArray<struct FString>                             RecordedDialogEvents;                                     // 0x0584(0x000C) (NeedCtorLink)
	struct FColiseumPlayerInfo                         CachedColiseumStats[0x4];                                 // 0x0590(0x0010) (NeedCtorLink)
	TArray<class UWillowAIBlackboardComponent*>        AIBlackboards;                                            // 0x05D0(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	int                                                StartGameTimer;                                           // 0x05DC(0x0004)
	unsigned char                                      StartGameState;                                           // 0x05E0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05E1(0x0003) MISSED OFFSET
	TArray<class APlayerReplicationInfo*>              PlayersThatHaveSeenTheCharacterSelect;                    // 0x05E4(0x000C) (NeedCtorLink)
	TArray<class APlayerReplicationInfo*>              PlayersThatHaveSelectedACharacter;                        // 0x05F0(0x000C) (NeedCtorLink)
	TArray<class APlayerReplicationInfo*>              PlayersThatHaveReceivedAPawn;                             // 0x05FC(0x000C) (NeedCtorLink)
	int                                                CharacterSelectTimeInSeconds;                             // 0x0608(0x0004)
	int                                                CharacterSelectQuickStartTimeInSeconds;                   // 0x060C(0x0004)
	int                                                NextNameListIndex;                                        // 0x0610(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGameInfo");
		return ptr;
	}


	int GetNameListIndex();
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	bool ClientsShouldSeeLobby();
	void UpdateBestNextHosts();
	void UpdateTookDamageFromEnemyStats(class APawn* DamagedPawn, class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, class UClass* DamageType, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline, bool bWasLastDamageACriticalHit);
	void UpdateWaypoints();
	void CheckAllClientsLoaded();
	void PostSeamlessTravel();
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void GenericPlayerInitialization(class AController* C);
	void TellClientsToSetSessionInviteFlags(const struct FName& SessionName, bool bAllowInvites, bool bAllowJoinViaPresence, bool bAllowJoinViaPresenceFriendsOnly);
	void PlayerRemoved(class APlayerReplicationInfo* RemovedPlayer);
	void PlayerAdded(class APlayerReplicationInfo* AddedPlayer);
	void PlayerReceivedPawn(class APlayerReplicationInfo* PRI);
	void PlayerSelectedCharacter(class APlayerReplicationInfo* PRI);
	void PlayerOpenedCharacterSelect(class APlayerReplicationInfo* PRI);
	void HandlePublicGame();
	void TestStartGame();
	void EndStartGame();
	void BeginStartGame();
	void ClearStartGameTimer();
	void UpdateStartGameTimer();
	void SetStartGameTimer(int Value);
	void UpdateStartGameState();
	void StartNewGame();
	void RegisterServer();
	bool IsHardcoreMode();
	void SetHardcoreMode(bool NewHardcoreMode);
	void CleanAIBlackBoards();
	class UWillowAIBlackboardComponent* GetAIBlackboard(class UPawnAllegiance* Allegiance);
	void InitSequence(class UActionSequence* NewSequence);
	class UPawnAllegiance* GetAllegiance();
	class UAIDefinition* GetAIDefinition();
	class UAIComponent* GetAIComponent();
	FScriptInterface GetAIParent();
	struct FVector GetAILocation();
	class AActor* GetAIActor();
	bool CanTickAI();
	void CatchupInitialColiseumStat(class AWillowPlayerController* InWPC, int InitialKillCount);
	void ConditionallyConfigureColiseum(class AWillowPlayerController* NewPlayer);
	void PublishColiseumStatDeltaForPlayer(class AWillowPlayerController* InWPC, unsigned char StatType, int StatDelta);
	void PublishColiseumStatDeltas();
	void RemoveColiseumStatCacheForPlayer(class AWillowPlayerController* InWPC);
	void InitColiseumStatArray(class AWillowPlayerController* WPC, TArray<struct FColiseumStat>* Stats);
	void FinishInitializingColiseumStatCache();
	void InitColiseumStatCacheForPlayer(class AWillowPlayerController* InWPC);
	void ClearColiseumStatCache();
	static bool ShouldRestartPlayerAfterLogin(int PlayerIndex);
	static void SetRestartPlayerAfterLogin(int PlayerIndex, bool bEnabled);
	static bool ShouldInitializeStartupTeleporterAttribute();
	static void SetStartupTeleporterAttributeInitialization(bool bShouldInitialize);
	bool PlayerResetShop(class AWillowPlayerController* Player, const FScriptInterface& Shop);
	void RemoveWaypointComponent(class AActor* WaypointActor, class UWaypointComponent* Waypoint);
	void AddWaypointComponent(class AActor* WaypointActor, class UWaypointComponent* Waypoint);
	void ClearRemainingProjectiles();
	bool TravelPostCountdownInProcess();
	bool TravelCountdownInProcess();
	void ClearTravelData();
	void TravelPostCountdown();
	void TravelCountdown();
	void InitiateTravel(class APlayerController* InstigatingPlayer, const struct FName& StationDefinitionName, class UBehavior_CheckMapChangeConditions* Behavior, const FScriptInterface& EventInterface, class UTravelStationDefinition* StationDefinition);
	bool CanAllPlayersTravelToDlcDestination(class UDownloadableExpansionDefinition* ExpansionDef);
	TArray<class AWillowPlayerController*> GetDlcCannotTravelPlayerList(class UDownloadableExpansionDefinition* ExpansionDef);
	void TravelToFastTravelStation(const struct FName& StationDefinitionName);
	void TeleportToFinalDestinationAfterLoad();
	void TravelToRealDestinationLevel();
	void CommitTravelToNewLevel();
	void TravelToStation(class UTravelStationDefinition* DestTravelStation, bool bForceLevelLoad);
	bool CheckMapChangeConditions(class APlayerController* InstigatingPlayer);
	void TryFireInstigatorImpatientVO(class AWillowPlayerController* Blocker);
	bool FireInstigatorImpatientVO(class AWillowPawn* Speaker, class AWillowPawn* Blocker);
	bool ShouldSpawnAtStartSpot(class AController* Player);
	void EndGameHack(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void DelayedEndGame();
	void InitGameReplicationInfo();
	void PostCommitMapChange();
	void PlayerLeftGameNotification(class APlayerController* PC);
	void PlayerEnteredGameNotification(class APlayerController* PC);
	void UpdatePlayerObservers();
	void RemovePlayerObserver(const FScriptInterface& Observer);
	void AddPlayerObserver(const FScriptInterface& Observer);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	void InitiatePlayerPawnDataLoad(class AController* NewPlayer);
	void ResurrectAllPlayers(class APawn* DeadPlayer);
	void HandlePlayerDeathResurrection(class APawn* DeadPlayer, unsigned char ResurrectReason);
	bool AllowCheats(class APlayerController* P);
	void ResetAI();
	static bool ShouldCensorContent();
	static bool IsShippingBuild();
	bool IsEditor();
	class ABlackMarketUpgradeManager* GetBlackMarketUpgradeManager();
	class UPlayerStatsNotifier* GetPlayerStatsNotifier();
	class UCombatMusicManager* GetCombatMusicManager();
	class AChallengeManager* GetChallengeManager();
	class UPlayerInteractionManager* GetPlayerInteractionManager();
	class ASkillEffectManager* GetSkillManager();
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void ActivateVehicleFactory(class AWillowVehicleFactory* VF);
	void RegisterVehicle(class AWillowVehicle* V);
	bool ShouldRespawn(class APickupFactory* Other);
	void AwardCombatExperience(class AWillowPlayerController* KillerWPC, class AActor* KilledActor, float TotalExpPoints);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType, class UDamagePipeline* Pipeline);
	void InitializeStartupTeleporterAttribute();
	void SetInitialTeleportDestination(const struct FName& InitialTeleporter);
	class AActor* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	struct FString DecodeEvent(const struct FName& EventType, int TeamNo, const struct FString& InstigatorName, const struct FString& AdditionalName, class UClass* AdditionalObj);
	void RestartPlayer(class AController* NewPlayer);
	void SyncKismetSetProperties(class AWillowPlayerController* PC);
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void StartMatch();
	void Logout(class AController* Exiting);
	void PostLogin(class APlayerController* NewPlayer);
	void DiscardInventory(class APawn* Other, class AController* Killer);
	bool ShouldPawnDropWeaponOnDeath(class APawn* P);
	void ApplyGlobalPlayerMovementSettings(class APawn* PlayerPawn);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	class UInstancedDesignerAttribute* GetInstancedDesignerAttribute(class UAttributeDefinition* Definition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	class UInstancedDesignerAttribute* CreateDesignerAttribute(class UDesignerAttributeDefinition* Definition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	void PostBeginPlay();
	void PreBeginPlay();
};


// Class WillowGame.PlayerInteractionManager
// 0x0014 (0x003C - 0x0050)
class UPlayerInteractionManager : public UObject
{
public:
	TArray<struct FActiveInteraction>                  Interactions;                                             // 0x003C(0x000C) (NeedCtorLink)
	float                                              TickDelay;                                                // 0x0048(0x0004)
	float                                              TimeToTick;                                               // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerInteractionManager");
		return ptr;
	}


	void GetInteractionPlayers(class UPlayerInteractionServer* ForServer, TArray<class AWillowPlayerController*>* Players);
	bool IsInInteraction(class AWillowPlayerController* Player);
	class UPlayerInteractionServer* GetServerForPlayer(class AWillowPlayerController* Player);
	class AWillowPlayerController* GetInstigator(class UPlayerInteractionServer* Server);
	void RelayMessage(class AWillowPlayerController* FromPlayer, class UClass* ClientType, int MessageValue, class UObject* Data);
	bool StartInteraction(class UPlayerInteractionServer* NewServer, TArray<class AWillowPlayerController*> Players, class AWillowPlayerController* InteractionInstigator);
};


// Class WillowGame.PlayerInteractionServer
// 0x0008 (0x003C - 0x0044)
class UPlayerInteractionServer : public UObject
{
public:
	unsigned long                                      bIsDone : 1;                                              // 0x003C(0x0004)
	float                                              TimeoutTime;                                              // 0x0040(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerInteractionServer");
		return ptr;
	}


	bool IsValid();
	bool CanReceiveMessages();
	void MarkDone();
	void HandleInteractionEnded();
	void BroadcastMessage(int MessageData, class UObject* Data);
	void SendMessage(class AWillowPlayerController* Player, int MessageData, class UObject* Data);
	bool UsesClientType(class UClass* ClientType);
	void HandleMessage(class AWillowPlayerController* FromPlayer, int MessageData, class UObject* Data);
	class UClass* GetClientType();
	int GetInitialMessageForPlayer(class AWillowPlayerController* WPC);
	void Initialize();
};


// Class WillowGame.VehicleSeatSwap_PlayerInteractionServer
// 0x0008 (0x0044 - 0x004C)
class UVehicleSeatSwap_PlayerInteractionServer : public UPlayerInteractionServer
{
public:
	class AWillowVehicle*                              PlayerVehicle;                                            // 0x0044(0x0004)
	int                                                RequestedSeat;                                            // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSeatSwap_PlayerInteractionServer");
		return ptr;
	}


	bool IsValid();
	void Initialize();
	class UClass* GetClientType();
	int GetInitialMessageForPlayer(class AWillowPlayerController* WPC);
	void HandleMessage(class AWillowPlayerController* FromPlayer, int MessageData, class UObject* Data);
};


// Class WillowGame.PlayerKillVolume
// 0x0004 (0x01BC - 0x01C0)
class APlayerKillVolume : public AVolume
{
public:
	unsigned long                                      bKillPlayers : 1;                                         // 0x01BC(0x0004) (Edit)
	unsigned long                                      bKillAIPawns : 1;                                         // 0x01BC(0x0004) (Edit)
	unsigned long                                      bInstaKill : 1;                                           // 0x01BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerKillVolume");
		return ptr;
	}


	void KillAIPawn(class AWillowAIPawn* WAP);
	class AController* GetBestKillerFor(class APawn* P);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class WillowGame.PlayerNameIdentifierDefinition
// 0x0170 (0x003C - 0x01AC)
class UPlayerNameIdentifierDefinition : public UGBXDefinition
{
public:
	struct FString                                     CharacterName;                                            // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     LocalizedCharacterName;                                   // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     LocalizedCharacterDescription;                            // 0x0054(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     LocalizedActionSkillDescription;                          // 0x0060(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     LocalizedPreferredWeaponDescription;                      // 0x006C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	int                                                XlastCharacterIdOffset;                                   // 0x0078(0x0004) (Edit, Const)
	class UPlayerClassIdentifierDefinition*            CharacterClassId;                                         // 0x007C(0x0004) (Edit, Const)
	class UPlayerSaveGame*                             DefaultSaveGame;                                          // 0x0080(0x0004) (Edit, Const)
	int                                                UISortOrder;                                              // 0x0084(0x0004) (Edit, Const)
	unsigned long                                      IsDefaultNewCharacter : 1;                                // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      GFxActionSkillHasBar : 1;                                 // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      GFxActionSkillHasFade : 1;                                // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      GFxActionSkillDeferTimeToSkill : 1;                       // 0x0088(0x0004) (Edit, Const)
	unsigned long                                      GFxActionSkillGuideCanBeHidden : 1;                       // 0x0088(0x0004) (Edit, Const)
	class USwfMovie*                                   StatusMenuGFxPortrait;                                    // 0x008C(0x0004) (Edit, Const)
	struct FString                                     PlayerRegistrationPortraitName;                           // 0x0090(0x000C) (Edit, Const, NeedCtorLink)
	int                                                CharacterSelectionGFxMovieId;                             // 0x009C(0x0004) (Edit, Const, Deprecated)
	struct FString                                     CharacterSelectionGFxMovieVarString;                      // 0x00A0(0x000C) (Edit, Const, NeedCtorLink)
	class USwfMovie*                                   CharacterIconSwfMovie;                                    // 0x00AC(0x0004) (Edit, Const)
	class USwfMovie*                                   CoopCharacterIconSwfMovie;                                // 0x00B0(0x0004) (Edit, Const)
	struct FString                                     ScaleformSkillLeftBranchName;                             // 0x00B4(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     ScaleformSkillMiddleBranchName;                           // 0x00C0(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     ScaleformSkillRightBranchName;                            // 0x00CC(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillBarPath;                                    // 0x00D8(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillStartPath;                                  // 0x00E4(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillStartString;                                // 0x00F0(0x000C) (Edit, Const, NeedCtorLink)
	class USwfMovie*                                   GFxActionSkillStartExternalClip;                          // 0x00FC(0x0004) (Edit, Const)
	struct FString                                     GFxActionSkillFadeGotoAndPlayString;                      // 0x0100(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillFadeString;                                 // 0x010C(0x000C) (Edit, Const, NeedCtorLink)
	class USwfMovie*                                   GFxActionSkillPortrait;                                   // 0x0118(0x0004) (Edit, Const)
	struct FString                                     GFxActionSkillTooltipPath;                                // 0x011C(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillActivateTooltipValue;                       // 0x0128(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillDisableTooltipValue;                        // 0x0134(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillTooltipStringPath;                          // 0x0140(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillTooltipString;                              // 0x014C(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillEnablePath;                                 // 0x0158(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillEnableValue;                                // 0x0164(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillDisablePath;                                // 0x0170(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillDisableValue;                               // 0x017C(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillGuideHideGotoAndPlayString;                 // 0x0188(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillGuideHideStart;                             // 0x0194(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     GFxActionSkillGuideHideResume;                            // 0x01A0(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerNameIdentifierDefinition");
		return ptr;
	}


	struct FString GetCoopCharacterIconSwfMoviePath();
	struct FString GetCharacterIconSwfMoviePath();
	struct FString GetPortraitSwfMoviePath();
};


// Class WillowGame.PlayerReplicationInfoAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UPlayerReplicationInfoAttributeContextResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerReplicationInfoAttributeContextResolver");
		return ptr;
	}

};


// Class WillowGame.PlayerSaveGame
// 0x0218 (0x003C - 0x0254)
class UPlayerSaveGame : public UObject
{
public:
	struct FPlayerUIPreferences                        UIPreferences;                                            // 0x003C(0x0018) (Edit, NeedCtorLink)
	class UPlayerClassDefinition*                      PlayerClassDefinition;                                    // 0x0054(0x0004) (Edit)
	int                                                ExpLevel;                                                 // 0x0058(0x0004) (Edit)
	int                                                ExpPoints;                                                // 0x005C(0x0004) (Edit)
	int                                                GeneralSkillPoints;                                       // 0x0060(0x0004) (Edit)
	int                                                SpecialistSkillPoints;                                    // 0x0064(0x0004) (Edit)
	int                                                CurrencyOnHand[0xD];                                      // 0x0068(0x0004) (Edit)
	int                                                PlaythroughsCompleted;                                    // 0x009C(0x0004) (Edit)
	TArray<struct FSkillSaveGameData>                  SkillData;                                                // 0x00A0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FResourceSaveGameData>               ResourceData;                                             // 0x00AC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FInventorySaveGameData>              ItemData;                                                 // 0x00B8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FUnloadableDlcItemSaveGameData>      UnloadableDlcItemData;                                    // 0x00C4(0x000C) (Edit, NeedCtorLink)
	struct FInventorySlotSaveGameData                  InventorySlotData;                                        // 0x00D0(0x000C) (Edit)
	TArray<struct FWeaponSaveGameData>                 WeaponData;                                               // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FUnloadableDlcWeaponSaveGameData>    UnloadableDlcWeaponData;                                  // 0x00E8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FMissionPlaythroughSaveGameData>     MissionPlaythroughs;                                      // 0x00F4(0x000C) (Edit, NeedCtorLink)
	class UCustomizationDefinition*                    AppliedCustomizations[0x5];                               // 0x0100(0x0004) (Edit)
	TArray<unsigned char>                              StatsData;                                                // 0x0114(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               VisitedTeleporters;                                       // 0x0120(0x000C) (Edit, NeedCtorLink)
	struct FName                                       LastVisitedTeleporter;                                    // 0x012C(0x0008) (Transient)
	int                                                SaveGameId;                                               // 0x0134(0x0004) (Transient)
	int                                                SaveVersion;                                              // 0x0138(0x0004) (Transient)
	int                                                PlotMissionNumber;                                        // 0x013C(0x0004) (Edit)
	int                                                ActiveMissionNumber;                                      // 0x0140(0x0004) (Edit)
	unsigned long                                      bReceivedDefaultWeapon : 1;                               // 0x0144(0x0004) (Edit)
	unsigned long                                      bIsBadassModeSaveGame : 1;                                // 0x0144(0x0004) (Transient)
	unsigned long                                      bIsDlcPlayerClass : 1;                                    // 0x0144(0x0004) (Edit)
	unsigned long                                      bShowNewPlaythroughNotification : 1;                      // 0x0144(0x0004) (Transient)
	unsigned long                                      bAwesomeSkillDisabled : 1;                                // 0x0144(0x0004) (Transient)
	TArray<int>                                        UsedMarketingCodes;                                       // 0x0148(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        MarketingCodesNeedingNotification;                        // 0x0154(0x000C) (Transient, NeedCtorLink)
	int                                                TotalPlayTime;                                            // 0x0160(0x0004) (Transient)
	struct FString                                     LastSavedDate;                                            // 0x0164(0x000C) (Transient, NeedCtorLink)
	TArray<struct FExpansionData>                      DLCExpansionData;                                         // 0x0170(0x000C) (NeedCtorLink)
	TArray<class UChallengeDefinition*>                ChallengeList;                                            // 0x017C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FUnloadableDlcChallengeData>         UnloadableDlcChallengeList;                               // 0x0188(0x000C) (Edit, NeedCtorLink)
	TArray<struct FRegionGameStageData>                RegionGameStages;                                         // 0x0194(0x000C) (Edit, NeedCtorLink)
	TArray<struct FUnloadableDlcRegionGameStageData>   UnloadableDlcRegionGameStages;                            // 0x01A0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FWorldDiscoveryData>                 WorldDiscoveryList;                                       // 0x01AC(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        BlackMarketUpgrades;                                      // 0x01B8(0x000C) (Edit, NeedCtorLink)
	struct FGuid                                       SaveGuid;                                                 // 0x01C4(0x0010) (Edit)
	TArray<int>                                        LevelChallengeUnlocks;                                    // 0x01D4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FOneOffLevelChallengeData>           OneOffLevelChallengeCompletion;                           // 0x01E0(0x000C) (Transient, NeedCtorLink)
	int                                                MaxBankSlots;                                             // 0x01EC(0x0004) (Transient)
	TArray<struct FBankSlot>                           BankSlots;                                                // 0x01F0(0x000C) (Transient, NeedCtorLink)
	int                                                NumChallengePrestiges;                                    // 0x01FC(0x0004) (Transient)
	TArray<struct FLockoutData>                        LockoutList;                                              // 0x0200(0x000C) (Transient, NeedCtorLink)
	TArray<struct FUnloadableDlcLockoutData>           UnloadableDlcLockoutList;                                 // 0x020C(0x000C) (Transient, NeedCtorLink)
	int                                                DLCPlayerClassPackageId;                                  // 0x0218(0x0004) (Edit)
	TArray<struct FName>                               FullyExploredAreas;                                       // 0x021C(0x000C) (Edit, NeedCtorLink)
	int                                                NumGoldenKeysNotified;                                    // 0x0228(0x0004) (Transient)
	int                                                LastPlaythroughNumber;                                    // 0x022C(0x0004) (Transient)
	TArray<class UTrainingMessageDefinition*>          QueuedTrainingMessages;                                   // 0x0230(0x000C) (NeedCtorLink)
	int                                                NumOverpowerLevelsUnlocked;                               // 0x023C(0x0004) (Transient)
	int                                                LastOverpowerChoice;                                      // 0x0240(0x0004) (Transient)
	TArray<struct FChosenVehicleCustomization>         ChosenVehicleCustomizations;                              // 0x0244(0x000C) (Transient, NeedCtorLink)
	int                                                VehicleSteeringMode;                                      // 0x0250(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerSaveGame");
		return ptr;
	}

};


// Class WillowGame.PlayerSkillAttributeValueResolver
// 0x0004 (0x003C - 0x0040)
class UPlayerSkillAttributeValueResolver : public UAttributeValueResolver
{
public:
	class USkillDefinition*                            AssociatedSkill;                                          // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerSkillAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.WillowDownloadableContentManager
// 0x01A8 (0x0158 - 0x0300)
class UWillowDownloadableContentManager : public UDownloadableContentManager
{
public:
	TArray<class UDownloadablePackageDefinition*>      ContentPackages;                                          // 0x0158(0x000C) (NeedCtorLink)
	TArray<class UDownloadableContentDefinition*>      AllContent;                                               // 0x0164(0x000C) (NeedCtorLink)
	TArray<class UDownloadableExpansionDefinition*>    Expansions;                                               // 0x0170(0x000C) (NeedCtorLink)
	TArray<class UDownloadableCharacterDefinition*>    Characters;                                               // 0x017C(0x000C) (NeedCtorLink)
	TArray<class UDownloadableVehicleDefinition*>      Vehicles;                                                 // 0x0188(0x000C) (NeedCtorLink)
	TArray<class UDownloadableItemSetDefinition*>      Items;                                                    // 0x0194(0x000C) (NeedCtorLink)
	TArray<class UDownloadableCustomizationSetDefinition*> Customizations;                                           // 0x01A0(0x000C) (NeedCtorLink)
	TArray<class UDownloadableAssetLibraryDefinition*> AssetLibraries;                                           // 0x01AC(0x000C) (NeedCtorLink)
	int                                                AsyncPackageLoadsPending;                                 // 0x01B8(0x0004)
	TArray<class UObjectReferencer*>                   DlcFullyLoadedPackageReferencers;                         // 0x01BC(0x000C) (NeedCtorLink)
	unsigned char                                      CurrentInstallState;                                      // 0x01C8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C9(0x0003) MISSED OFFSET
	TArray<struct FString>                             LoadedPackages;                                           // 0x01CC(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x01D8(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowDownloadableContentManager.LoadedAudioPackageToId
	unsigned char                                      UnknownData02[0x3C];                                      // 0x0214(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowDownloadableContentManager.PackageDefToContentState
	struct FDlcCompatibilityData                       CachedCompatibilityInfo;                                  // 0x0250(0x0010)
	struct FDlcCompatibilityData                       CachedSimplePackageLicenseInfo;                           // 0x0260(0x0010)
	TArray<struct FSeasonPassOfferUnion>               SeasonPassOfferIds;                                       // 0x0270(0x000C) (Config, NeedCtorLink)
	TArray<struct FSeasonPassPackageCount>             SeasonPassPackageCounts;                                  // 0x027C(0x000C) (Config, NeedCtorLink)
	int                                                NewOfferVersion;                                          // 0x0288(0x0004) (Config)
	TArray<int>                                        NewOfferIds;                                              // 0x028C(0x000C) (Config, NeedCtorLink)
	TArray<struct FDLCMissionData>                     DLCMissions;                                              // 0x0298(0x000C) (Config, NeedCtorLink)
	struct FCompatibilityVersionInfo                   OnlineCompatibilityInfo;                                  // 0x02A4(0x0014) (Config)
	float                                              CompatibilityContentInstallInterval;                      // 0x02B8(0x0004) (Config)
	float                                              NextDlcContentInstallNotificationTimeRemaining;           // 0x02BC(0x0004)
	TArray<struct FGoldenKeySource>                    GoldenKeyCollection;                                      // 0x02C0(0x000C) (NeedCtorLink)
	TArray<class UDownloadableBalanceModifierDefinition*> DownloadableBalanceModifiers;                             // 0x02CC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FTaggedMarketplaceContent>           TaggedDLC;                                                // 0x02D8(0x000C) (Config, NeedCtorLink)
	TArray<unsigned char>                              FastTravelAccessibilityTimes;                             // 0x02E4(0x000C) (Config, NeedCtorLink)
	struct FDlcCompatibilityDataEx                     CachedExtendedLicenseInfo;                                // 0x02F0(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDownloadableContentManager");
		return ptr;
	}


	int GetSeasonPassPackageCount(int SeasonPassId);
	bool HasSeasonPassContentToInstall(bool bPreOrder);
	bool HasFutureSeasonPassContentToInstall(bool bPreOrder);
	static int GetNumberOfLicensedLevelCapUpgrades();
	TArray<struct FGoldenKeySource> GetGoldenKeys();
	void AddGoldenKey(unsigned char InSourceId, unsigned char InNumKeys);
	static bool StaticIsMarketplaceOfferType(unsigned char InOfferType, int InOfferCategory);
	int GetCompatibilityPackOfferId();
	struct FMarketplaceOfferDownloadState GetCompatibilityPackInstalledState();
	bool NeedsCompatibilityPack();
	bool HasCompatibilityData();
	void ResetDlcCompatInstallRemindTimer();
	void RemasterRefresh();
	void TriggerRefreshCompleteDelegates();
	void TriggerRefreshComplete();
	bool IsNewOffer(int OfferId);
	int GetFreeOfferAssociatedWithPaidOffer(int PaidOfferId);
	bool OfferBelongsToSeasonPass(int OfferId, int* SeasonPassOfferId);
	static struct FDlcContentId StaticGetDlcContentIdForCurrentMap(bool bForClientConnectInfo);
	static struct FDlcContentId StaticGetDlcContentIdForMap(const struct FName& MapName);
	bool ValidateInstalledContentReachability();
	class UDownloadableContentDefinition* GetDownloadableContentDefinitionFromDlcContentId(const struct FDlcContentId& FullContentId);
	class UDownloadableContentDefinition* GetDownloadableContentDefinitionFromId(int PackageId, int ContentId);
	class UDownloadablePackageDefinition* GetDownloadablePackageDefinitionFromId(int PackageId);
	class UDownloadablePackageDefinition* GetDownloadablePackageDefinitionFromDLCName(const struct FString& DLCName);
	struct FString GetDlcIniPath();
	bool IsContentInstalled(class UDownloadableContentDefinition* DownloadableContentDef);
	bool IsContentLicensed(class UDownloadableContentDefinition* DownloadableContentDef, class APlayerController* Controller);
	bool IsPackageFullyInstalled(class UDownloadablePackageDefinition* DownloadablePackageDef);
	bool IsPackageFullyLicensed(class UDownloadablePackageDefinition* DownloadablePackageDef);
	class UDownloadableExpansionDefinition* FindExpansionForMap(const struct FName& MapName);
	class ULevelTravelStationDefinition* FindMatchingDlcLevelTravelDestination(class ULevelTravelStationDefinition* Source);
};


// Class WillowGame.PlayerSkillTree
// 0x0088 (0x003C - 0x00C4)
class UPlayerSkillTree : public UObject
{
public:
	int                                                SkillTreeRootIndex;                                       // 0x003C(0x0004)
	TArray<struct FPlayerSkillTreeBranchData>          Branches;                                                 // 0x0040(0x000C) (NeedCtorLink)
	TArray<struct FPlayerSkillTreeTierData>            Tiers;                                                    // 0x004C(0x000C) (NeedCtorLink)
	TArray<struct FPlayerSkillTreeSkillData>           Skills;                                                   // 0x0058(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0064(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.PlayerSkillTree.SkillDefinitionToIndex
	int                                                FirstSkillTypeIndex[0x5];                                 // 0x00A0(0x0004)
	unsigned long                                      bSuppressNotifications : 1;                               // 0x00B4(0x0004)
	unsigned long                                      bInitialized : 1;                                         // 0x00B4(0x0004)
	TArray<FScriptInterface>                           SkillTreeListeners;                                       // 0x00B8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerSkillTree");
		return ptr;
	}


	int GetSkillPointsSpentInTree();
	void UnRegisterListener(const FScriptInterface& Listener);
	void RegisterListener(const FScriptInterface& Listener);
	void Initialize(class USkillTreeDefinition* SkillTreeDef);
	void UpdateBranchProgression(class USkillTreeGFxObject* GFxHelper);
	void InitializeGFxHelper(class USkillTreeGFxObject* GFxHelper, int DesiredBranchNumber);
	void InitializeGFxHelper_ActionAbility(class USkillTreeGFxObject* GFxHelper);
	void AllSkills(class USkillDefinition** SkillDef);
	void AllSkillsOfType(unsigned char SkillType, class USkillDefinition** SkillDef);
	bool HasTrainedASkillOfType(unsigned char SkillType);
	class USkillDefinition* GetActionSkill();
	void ApplySkillSaveGameData(class UPlayerSaveGame* SaveGame);
	void SaveSkillSaveGameData(class UPlayerSaveGame* SaveGame);
	bool GetTierLayout(class USkillTreeBranchDefinition* BranchDef, int TierNumber, struct FSkillTreeTierLayoutData* OutTierLayout);
	bool GetTierState(class USkillTreeBranchDefinition* BranchDef, int TierNumber, struct FSkillTreeTierStateData* OutTierState);
	bool GetBranchState(class USkillTreeBranchDefinition* BranchDef, struct FSkillTreeBranchStateData* OutBranchState);
	bool GetSkillState(class USkillDefinition* SkillDef, struct FSkillTreeSkillStateData* OutSkillState);
	void DumpTree();
	bool SetSkillGrade(class USkillDefinition* Skill, int SkillGrade);
	bool UpgradeSkill(class USkillDefinition* Skill);
};


// Class WillowGame.WillowSaveGameManager
// 0x02FC (0x003C - 0x0338)
class UWillowSaveGameManager : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x003C(0x0004) (Const, Native, NoExport)
	int                                                AsyncResult[0x4];                                         // 0x0040(0x0004)
	unsigned char                                      CurrentState[0x4];                                        // 0x0050(0x0001)
	struct FLoadInfo                                   PendingLoadInfo;                                          // 0x0054(0x00C8) (NeedCtorLink)
	struct FLoadInfo                                   CrossTitleLoadInfo;                                       // 0x011C(0x00C8) (NeedCtorLink)
	TArray<unsigned char>                              LastLoadedSaveGameData;                                   // 0x01E4(0x000C) (NeedCtorLink)
	struct FDouble                                     LastLoadedFileTimeStamp;                                  // 0x01F0(0x0008)
	struct FString                                     LastLoadedFilePath;                                       // 0x01F8(0x000C) (NeedCtorLink)
	TArray<struct FPlayerSaveData>                     SaveDataLoadedFromList;                                   // 0x0204(0x000C) (NeedCtorLink)
	struct FString                                     SaveGameTitle;                                            // 0x0210(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GraveyardTitle;                                           // 0x021C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GraveyardSubTitle;                                        // 0x0228(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LevelStr;                                                 // 0x0234(0x000C) (Const, Localized, NeedCtorLink)
	float                                              SaveStartTime;                                            // 0x0240(0x0004)
	struct FString                                     CorruptSaveDataString;                                    // 0x0244(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UnloadableDlcSaveDataString;                              // 0x0250(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DateFormat;                                               // 0x025C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TimeFormat;                                               // 0x0268(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SingularSecond;                                           // 0x0274(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PluralSeconds;                                            // 0x0280(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SingularMinute;                                           // 0x028C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PluralMinutes;                                            // 0x0298(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SingularHour;                                             // 0x02A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PluralHours;                                              // 0x02B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SingularDay;                                              // 0x02BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PluralDays;                                               // 0x02C8(0x000C) (Const, Localized, NeedCtorLink)
	int                                                bNeedsProfileWrite[0x4];                                  // 0x02D4(0x0004)
	struct FScriptDelegate                             __OnDeleteComplete__Delegate;                             // 0x02E4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnValidationComplete__Delegate;                         // 0x02F0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSaveComplete__Delegate;                               // 0x02FC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLoadComplete__Delegate;                               // 0x0308(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnListLoadComplete__Delegate;                           // 0x0314(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnWillowOneLoadComplete__Delegate;                      // 0x0320(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCountNumCrossTitleSaveGamesComplete__Delegate;        // 0x032C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSaveGameManager");
		return ptr;
	}


	void DestroyAllRegisteredDelegates();
	bool AttemptProfileWriteIfNecessary(unsigned char ControllerId);
	void NotifyProfileWriteComplete(unsigned char ControllerId, bool bWasSuccessful);
	void SetNeedsProfileWrite(unsigned char ControllerId, bool inNeedsProfileWrite);
	bool GetNeedsProfileWrite(unsigned char ControllerId);
	void PopulatePlayerSaveDataDefinitionContent(struct FPlayerSaveData* SaveData);
	struct FString GetHumanReadableStringFromTimePlayed(int TimePlayed, bool bVerbose);
	struct FString GetHumanReadableStringFromSaveDateString(const struct FString& SaveDate);
	struct FString GetCurrentSaveDateString();
	void BeginCountNumCrossTitleSaveGames(unsigned char ControllerId, int PS3UserNum);
	static void SetNumCrossTitleSaveGames(unsigned char ControllerId, int inNumSaves);
	static int GetNumCrossTitleSaveGames(unsigned char ControllerId);
	static void SetNumSaveGames(unsigned char ControllerId, int inNumSaves);
	static int GetNumSaveGames(unsigned char ControllerId);
	void NotifySaveComplete(unsigned char ControllerId, bool bSkipHudUpdate);
	void NotifySaveStarted(unsigned char ControllerId, bool bSkipHudUpdate);
	int GetXboxDevice(int ControllerId);
	void SetXboxDevice(int ControllerId, int DeviceID);
	void SaveGame(unsigned char ControllerId, class UPlayerSaveGame* SaveGame, const struct FString& Filename, int PS3UserNum);
	bool ValidateSaveData(unsigned char ControllerId, const struct FString& LoadPath);
	bool DeleteSaveGame(unsigned char ControllerId, const struct FString& Filename, int PS3UserNum);
	int GetHighestSaveIdFromFileList(unsigned char ControllerId, TArray<struct FString> RawList);
	static int GetLastSaveGameId(unsigned char ControllerId);
	int GetLastSaveGame(unsigned char ControllerId, int PS3UserNum, const struct FString& SaveFilePrefix);
	TArray<struct FPlayerSaveData> EndGetSaveGameDataFromList(unsigned char ControllerId);
	void BeginGetSaveGameDataFromList(unsigned char ControllerId, TArray<struct FString> SaveGameList, int PS3UserNum, bool bCrossTitle);
	TArray<struct FString> GetCrossTitleSaveGameList(unsigned char ControllerId, int PS3UserNum);
	TArray<struct FString> GetSaveGameList(unsigned char ControllerId, int PS3UserNum, const struct FString& SaveFilePrefix);
	TArray<unsigned char> LoadRawData(unsigned char ControllerId, const struct FString& Filename, int PS3UserNum);
	class UUBMGraveyardSaveData* LoadGraveyard(unsigned char ControllerId, const struct FString& Filename, int PS3UserNum);
	void EndLoadWillowOneGame(unsigned char ControllerId);
	void BeginLoadWillowOneGame(unsigned char ControllerId, const struct FString& Filename, int PS3UserNum);
	class UPlayerSaveGame* EndLoadGame(unsigned char ControllerId, unsigned char LoadPlayerBehavior, struct FLoadInfo* Info);
	bool BeginLoadGame(unsigned char ControllerId, const struct FString& Filename, int PS3UserNum);
	void SetCachedPlayerSaveGame(unsigned char ControllerId, class UPlayerSaveGame* SaveGame);
	bool HasCachedPlayerSaveGame(unsigned char ControllerId);
	class UPlayerSaveGame* GetCachedPlayerSaveGame(unsigned char ControllerId);
	void SaveRawData(unsigned char ControllerId, TArray<unsigned char> Contents, const struct FString& Filename, int PS3UserNum, const struct FString& FileTitle, const struct FString& FileSubTitle);
	void SaveGraveyard(unsigned char ControllerId, class UUBMGraveyardSaveData* Graveyard, const struct FString& Filename, int PS3UserNum);
	void Save(class AWillowPlayerController* WPC, const struct FString& Filename, int PS3UserNum);
	bool ClearCache(unsigned char ControllerId);
	void OnCountNumCrossTitleSaveGamesComplete(bool bWasSuccessful);
	void OnWillowOneLoadComplete(bool bWasSuccessful);
	void OnListLoadComplete(bool bWasSuccessful);
	void OnLoadComplete(bool bWasSuccessful);
	void OnSaveComplete(float SaveDuration);
	void OnValidationComplete(bool bWasSuccessful);
	void OnDeleteComplete(bool bWasSuccessful);
	unsigned char GetResult(unsigned char ControllerId);
};


// Class WillowGame.UBMGraveyardSaveData
// 0x000C (0x003C - 0x0048)
class UUBMGraveyardSaveData : public UObject
{
public:
	TArray<struct FTombstoneData>                      TombstoneList;                                            // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("UBMGraveyardSaveData");
		return ptr;
	}


	static struct FString GetFormattedChallengesComplete(struct FTombstoneData* TheTombstoneData);
	static struct FString GetFormattedMissionsComplete(struct FTombstoneData* TheTombstoneData);
	static struct FString GetFormattedCharacterLevel(struct FTombstoneData* TheTombstoneData);
	static struct FString GetFormattedTotalTimePlayed(struct FTombstoneData* TheTombstoneData);
	bool GetLatestTombstoneData(struct FTombstoneData* LatestTombstoneData);
	void AddTombstone(const struct FTombstoneData& NewTombstoneData);
};


// Class WillowGame.WillowDamageTypeDefinition
// 0x00C0 (0x003C - 0x00FC)
class UWillowDamageTypeDefinition : public UDamageTypeDefinition
{
public:
	struct FAttributeInitializationData                FleshDamageModifier;                                      // 0x003C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ArmorDamageModifier;                                      // 0x004C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ShieldDamageModifier;                                     // 0x005C(0x0010) (Edit, Const)
	class UAttributeDefinition*                        CharacterDamageTypeModifierAttribute;                     // 0x006C(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnProjectileSpawn;                                        // 0x0070(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	unsigned long                                      bNoBlood : 1;                                             // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bNoPlayerFeedback : 1;                                    // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bNoAlliedPlayerFeedback : 1;                              // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bUseStatusEffectInstigatorModifiersForDamage : 1;         // 0x007C(0x0004) (Edit, Const)
	unsigned long                                      bApplyUpwardMomentum : 1;                                 // 0x007C(0x0004) (Edit)
	unsigned long                                      bCauseHardFlinch : 1;                                     // 0x007C(0x0004) (Edit, Const)
	class UStatusEffectDefinition*                     StatusEffect;                                             // 0x0080(0x0004) (Edit, Const)
	struct FLinearColor                                DamageColor;                                              // 0x0084(0x0010) (Edit)
	struct FColor                                      HUDDamageColor;                                           // 0x0094(0x0004) (Edit)
	unsigned char                                      DamageType;                                               // 0x0098(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              UpwardMomentumScale;                                      // 0x009C(0x0004) (Edit)
	float                                              RigidBodyMomentumScale;                                   // 0x00A0(0x0004) (Edit)
	struct FAttributeInitializationData                FleshMomentumModifier;                                    // 0x00A4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ArmorMomentumModifier;                                    // 0x00B4(0x0010) (Edit, Const)
	struct FAttributeInitializationData                ShieldMomentumModifier;                                   // 0x00C4(0x0010) (Edit, Const)
	TArray<class UAttributePresentationDefinition*>    WeaponCardPresentations;                                  // 0x00D4(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	float                                              MaxDamageRadius;                                          // 0x00E0(0x0004) (Edit, Const)
	float                                              MinDamageRadius;                                          // 0x00E4(0x0004) (Edit, Const)
	float                                              MinDamagePercent;                                         // 0x00E8(0x0004) (Edit, Const)
	float                                              HardFlinchPercent;                                        // 0x00EC(0x0004) (Edit, Const)
	struct FName                                       DamageDealtStatId;                                        // 0x00F0(0x0008) (Edit, Const)
	float                                              DamageLanguageId;                                         // 0x00F8(0x0004) (Const, Localized)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDamageTypeDefinition");
		return ptr;
	}


	static void GetDamageTypeModifiers(class UWillowDamageTypeDefinition* DamageTypeDefinition, class AController* DamageInstigator, float* DamageInstigatorModifier);
	static void DisplayRecentDamageForPlayer(class AWillowPlayerController* PC, struct FPlayerRecentDamageEventData* DamageEventData);
	static bool HasPlayerRecentDamageFlags(unsigned char FlagsToCheck, struct FPlayerRecentDamageEventData* DamageEventData);
	float CalcRadiusDamageScale(float Dist, float DamageRadius, const struct FVector& HurtOrigin);
	float GetMinDamagePercent();
	float GetMinDamageRadius();
	float GetMaxDamageRadius();
	float GetPawnDamageTypeModifier(class APawn* PawnTakingDamage);
	float GetSurfaceDamageTypeModifier(unsigned char DamageSurfaceType, class AController* DamageInstigator);
	float GetSurfaceMomentumTypeModifier(unsigned char DamageSurfaceType, class AController* DamageInstigator);
	float GetRigidBodyMomentumScale();
	float GetUpwardMomentumScale();
	bool ApplyUpwardMomentum();
};


// Class WillowGame.WillowPlayerController
// 0x0F94 (0x09F4 - 0x1988)
class AWillowPlayerController : public AGearboxPlayerController
{
public:
	struct FPointer                                    VfTable_IIUpdatePostProcessOverride;                      // 0x09F4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIControllerLocator;                              // 0x09F8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIPlayerBehavior;                                 // 0x09FC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIPlayerMaster;                                   // 0x0A00(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIScreenParticle;                                 // 0x0A04(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIResourcePoolOwner;                              // 0x0A08(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IISkillTreeListener;                              // 0x0A0C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIFlagProvider;                                   // 0x0A10(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIStreamingDataEvent;                             // 0x0A14(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0A18(0x0004) (Const, Native, NoExport)
	struct FString                                     QuickSaveFileName;                                        // 0x0A1C(0x000C) (NeedCtorLink)
	struct FString                                     SaveGameFilePrefix;                                       // 0x0A28(0x000C) (NeedCtorLink)
	struct FString                                     GraveyardFileName;                                        // 0x0A34(0x000C) (NeedCtorLink)
	float                                              SparkStatFlushIntervalSeconds;                            // 0x0A40(0x0004)
	float                                              PlayerLocationSparkPulseIntervalSeconds;                  // 0x0A44(0x0004)
	unsigned char                                      WeaponHandPreference;                                     // 0x0A48(0x0001) (Config, GlobalConfig)
	unsigned char                                      WeaponHand;                                               // 0x0A49(0x0001)
	unsigned char                                      PendingTransactionStatus;                                 // 0x0A4A(0x0001)
	unsigned char                                      bCachedCanBeUsed[0x2];                                    // 0x0A4B(0x0001) (Transient)
	unsigned char                                      bCachedHasPrompt[0x2];                                    // 0x0A4D(0x0001) (Transient)
	unsigned char                                      NextResistedAttackEventIndex;                             // 0x0A4F(0x0001)
	unsigned char                                      OldestResistedAttackEventIndex;                           // 0x0A50(0x0001)
	unsigned char                                      ActiveWeaponSlot;                                         // 0x0A51(0x0001)
	unsigned char                                      OffHandWeaponSlot;                                        // 0x0A52(0x0001)
	unsigned char                                      LastActiveStatusMenuScreen;                               // 0x0A53(0x0001)
	unsigned char                                      QuickAccessScreen;                                        // 0x0A54(0x0001)
	unsigned char                                      ContextualPromptScreen;                                   // 0x0A55(0x0001)
	unsigned char                                      RetryPromptScreen;                                        // 0x0A56(0x0001)
	unsigned char                                      LastMissionSortType;                                      // 0x0A57(0x0001)
	unsigned char                                      TravelToPlatformSpecificInfo[0x50];                       // 0x0A58(0x0001) (Transient)
	unsigned char                                      CurrentOnlineMessageType;                                 // 0x0AA8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0AA9(0x0003) MISSED OFFSET
	unsigned long                                      bCenteredWeaponFire : 1;                                  // 0x0AAC(0x0004) (Config)
	unsigned long                                      bIsTyping : 1;                                            // 0x0AAC(0x0004)
	unsigned long                                      bBehindView : 1;                                          // 0x0AAC(0x0004)
	unsigned long                                      bAlwaysLookDownCamera : 1;                                // 0x0AAC(0x0004)
	unsigned long                                      bViewingThirdPersonMenu : 1;                              // 0x0AAC(0x0004)
	unsigned long                                      bSuppressingThirdPersonMenu : 1;                          // 0x0AAC(0x0004)
	unsigned long                                      bMayUpdateHealthGainStat : 1;                             // 0x0AAC(0x0004)
	unsigned long                                      bDemiGodMode : 1;                                         // 0x0AAC(0x0004)
	unsigned long                                      bHLQNoClipMode : 1;                                       // 0x0AAC(0x0004)
	unsigned long                                      HLQPlayerMoving : 1;                                      // 0x0AAC(0x0004)
	unsigned long                                      bLandingShake : 1;                                        // 0x0AAC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bHideAmmoOnHUD : 1;                                       // 0x0AAC(0x0004) (Net)
	unsigned long                                      bHideCompassOnHUD : 1;                                    // 0x0AAC(0x0004) (Net)
	unsigned long                                      bHideSkillsOnHUD : 1;                                     // 0x0AAC(0x0004) (Net)
	unsigned long                                      bHideXPOnHUD : 1;                                         // 0x0AAC(0x0004) (Net)
	unsigned long                                      HasStartedVehicleCameraAction : 1;                        // 0x0AAC(0x0004) (Transient)
	unsigned long                                      bSuspendHUDReInitOnPossession : 1;                        // 0x0AAC(0x0004) (Transient)
	unsigned long                                      bInitialSpawn : 1;                                        // 0x0AAC(0x0004)
	unsigned long                                      bRespawnFromClassChange : 1;                              // 0x0AAC(0x0004)
	unsigned long                                      bLoadingCharacterPackageForClassSwitch : 1;               // 0x0AAC(0x0004) (Transient)
	unsigned long                                      bPerformingMeleeAttack : 1;                               // 0x0AAC(0x0004)
	unsigned long                                      bThrowingGrenade : 1;                                     // 0x0AAC(0x0004)
	unsigned long                                      bPerformingSharedWeaponAction : 1;                        // 0x0AAC(0x0004)
	unsigned long                                      bConsoleController : 1;                                   // 0x0AAC(0x0004) (Net)
	unsigned long                                      bDebugMeleeSkill : 1;                                     // 0x0AAC(0x0004) (Transient)
	unsigned long                                      bDisableEchoVideos : 1;                                   // 0x0AAC(0x0004) (Config)
	unsigned long                                      ShouldDisplaySkillTooltip : 1;                            // 0x0AAC(0x0004)
	unsigned long                                      bIsShopping : 1;                                          // 0x0AAC(0x0004)
	unsigned long                                      SummedDamageOnlyAffectedShield : 1;                       // 0x0AAC(0x0004)
	unsigned long                                      bHUDDamageIndicatorAdded : 1;                             // 0x0AAC(0x0004) (Transient)
	unsigned long                                      bShowBasicPlayerDebugInfo : 1;                            // 0x0AAC(0x0004)
	unsigned long                                      bDebugDisplayActorInfo : 1;                               // 0x0AAC(0x0004) (Transient)
	unsigned long                                      bDebugDisplayLocked : 1;                                  // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bShowDenInfo : 1;                                         // 0x0AB0(0x0004)
	unsigned long                                      bMainMenu_HostGame : 1;                                   // 0x0AB0(0x0004)
	unsigned long                                      bMainMenu_SplitScreen : 1;                                // 0x0AB0(0x0004)
	unsigned long                                      bWasActionSkillRunning : 1;                               // 0x0AB0(0x0004)
	unsigned long                                      bWasHealthy : 1;                                          // 0x0AB0(0x0004)
	unsigned long                                      bWasCinematic : 1;                                        // 0x0AB0(0x0004)
	unsigned long                                      bReadyForCommit : 1;                                      // 0x0AB0(0x0004)
	unsigned long                                      bReadyForPlay : 1;                                        // 0x0AB0(0x0004)
	unsigned long                                      bTeleporterRestricted : 1;                                // 0x0AB0(0x0004)
	unsigned long                                      bWeaponsRestricted : 1;                                   // 0x0AB0(0x0004) (Net, RepNotify)
	unsigned long                                      bPendingZoom : 1;                                         // 0x0AB0(0x0004)
	unsigned long                                      bDoDOFOnReload : 1;                                       // 0x0AB0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bViewPointDirty : 1;                                      // 0x0AB0(0x0004)
	unsigned long                                      bFireDelay : 1;                                           // 0x0AB0(0x0004)
	unsigned long                                      bEnableGamepadWalkRunMovement : 1;                        // 0x0AB0(0x0004)
	unsigned long                                      bKickSplitPlayerForInvite : 1;                            // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bSwappedControllerIdsForInvite : 1;                       // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bIsTargetingSomething : 1;                                // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bWaitingForSaveGameId : 1;                                // 0x0AB0(0x0004)
	unsigned long                                      bWantsToShowPauseMenu : 1;                                // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bWantsToSprint : 1;                                       // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bClientIsSprinting : 1;                                   // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bInSprintState : 1;                                       // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bPressedSprint : 1;                                       // 0x0AB0(0x0004)
	unsigned long                                      bSaveGameLoaded : 1;                                      // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bAllowWeaponsRestriction : 1;                             // 0x0AB0(0x0004)
	unsigned long                                      bSaveBeforeInviteJoin : 1;                                // 0x0AB0(0x0004)
	unsigned long                                      bRemoveSplitPlayerAfterSave : 1;                          // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bCurrentEchoPSCDesiredVisibility : 1;                     // 0x0AB0(0x0004) (Transient)
	unsigned long                                      bCanPlaySkidImpact : 1;                                   // 0x0AB0(0x0004)
	unsigned long                                      bAwaitingPS3LoadGame : 1;                                 // 0x0AB0(0x0004)
	unsigned long                                      bAwaitingPS3ImportGame : 1;                               // 0x0AB4(0x0004)
	unsigned long                                      bHasBeenTeleportedOnce : 1;                               // 0x0AB4(0x0004)
	unsigned long                                      bAwaitingRespawnDontSetCinematicMode : 1;                 // 0x0AB4(0x0004)
	unsigned long                                      bHideTeleportTunnel : 1;                                  // 0x0AB4(0x0004) (Config)
	unsigned long                                      bReceivedDefaultWeapon : 1;                               // 0x0AB4(0x0004)
	unsigned long                                      bDisplayTradeIcon : 1;                                    // 0x0AB4(0x0004) (Net, Transient)
	unsigned long                                      bDisplayTradeDisabledIcon : 1;                            // 0x0AB4(0x0004) (Net, Transient)
	unsigned long                                      bShowCoopRangeDebug : 1;                                  // 0x0AB4(0x0004)
	unsigned long                                      bAutoAimEnabled : 1;                                      // 0x0AB4(0x0004)
	unsigned long                                      bMouseAutoAimEnabled : 1;                                 // 0x0AB4(0x0004)
	unsigned long                                      bShowingQuickSelectMenu : 1;                              // 0x0AB4(0x0004)
	unsigned long                                      bCrouchToggle : 1;                                        // 0x0AB4(0x0004)
	unsigned long                                      bZoomToggle : 1;                                          // 0x0AB4(0x0004)
	unsigned long                                      bUseDriftCameraLock : 1;                                  // 0x0AB4(0x0004)
	unsigned long                                      bUseInvertedReverseSteering : 1;                          // 0x0AB4(0x0004)
	unsigned long                                      bTradingDisabled : 1;                                     // 0x0AB4(0x0004)
	unsigned long                                      bItemRotationNew : 1;                                     // 0x0AB4(0x0004)
	unsigned long                                      bGunzerkingAutoSwitch : 1;                                // 0x0AB4(0x0004)
	unsigned long                                      bStartFireZeroWasGunzerking : 1;                          // 0x0AB4(0x0004)
	unsigned long                                      bStartFireOneWasGunzerking : 1;                           // 0x0AB4(0x0004)
	unsigned long                                      bStartFireZeroBeforeGunzerking : 1;                       // 0x0AB4(0x0004)
	unsigned long                                      bAbsoluteMinimap : 1;                                     // 0x0AB4(0x0004)
	unsigned long                                      bPreferVerticalSplit : 1;                                 // 0x0AB4(0x0004)
	unsigned long                                      bDisableUISway : 1;                                       // 0x0AB4(0x0004)
	unsigned long                                      bMissionWeaponHelpContextualPromptEnabled : 1;            // 0x0AB4(0x0004) (Transient)
	unsigned long                                      bShowUndiscoveredMissions : 1;                            // 0x0AB4(0x0004) (Transient)
	unsigned long                                      bResurrectAll : 1;                                        // 0x0AB4(0x0004) (Net)
	unsigned long                                      bDisplayedCancel : 1;                                     // 0x0AB4(0x0004) (Transient)
	unsigned long                                      bResultsScreenOpen : 1;                                   // 0x0AB4(0x0004)
	unsigned long                                      bShowDelayedRewardForAllMissions : 1;                     // 0x0AB4(0x0004) (Config)
	unsigned long                                      bSuppressCoopLevelUpDing : 1;                             // 0x0AB4(0x0004)
	unsigned long                                      bUseRealTimeForWeaponZoom : 1;                            // 0x0AB4(0x0004) (Transient)
	unsigned long                                      bAllowPerShotForceFeedback : 1;                           // 0x0AB8(0x0004) (Config)
	unsigned long                                      bHardcoreCharacter : 1;                                   // 0x0AB8(0x0004)
	unsigned long                                      bAwaitingFastForwardPrompt : 1;                           // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bWantsToDisableLoadingMovie : 1;                          // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bPlayingTeleporterSound : 1;                              // 0x0AB8(0x0004) (Net, Transient)
	unsigned long                                      bLastLoadPlayer : 1;                                      // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bLastUpdatePRI : 1;                                       // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bWaitingForAsyncCharacterLoad : 1;                        // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bReturningToMenu : 1;                                     // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bCustomizationUnlocksInitialized : 1;                     // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bAsyncInProgress : 1;                                     // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bHostLanGame : 1;                                         // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bUserNetworkOperation : 1;                                // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bRestoringNetwork : 1;                                    // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bNonBlockingRestore : 1;                                  // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bEnteredEasterEggCode : 1;                                // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bEnabledEasterEggOption : 1;                              // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bConsumeSparkGoldenKeyAfterProfileWrite : 1;              // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bHasSeenGoldenKeyMessageThisSession : 1;                  // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bShowNewPlaythroughNotification : 1;                      // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bShowAlmostNewPlaythroughNotification : 1;                // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bAwesomeSkillDisabled : 1;                                // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bWriteProfileNextTick : 1;                                // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bUpdateOnlineGameSettingsNextTick : 1;                    // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bUpdatingOnlineGameSettings : 1;                          // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bSetOnlineStatusNextTick : 1;                             // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bDownloadingPatcherFiles : 1;                             // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bBoundaryWarningEnabled : 1;                              // 0x0AB8(0x0004) (Net, Transient)
	unsigned long                                      bCloseHUDNextTick : 1;                                    // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bTextureMovieIsPaused : 1;                                // 0x0AB8(0x0004) (Transient)
	unsigned long                                      bStopgapBlockForDeferredMovies : 1;                       // 0x0AB8(0x0004)
	unsigned long                                      OverpowerChoiceValuePendingSave : 1;                      // 0x0AB8(0x0004) (Transient)
	float                                              HealthStatAccumulator;                                    // 0x0ABC(0x0004)
	float                                              HLQPlayerMoveTime;                                        // 0x0AC0(0x0004)
	class UAkSwitch*                                   FirstPersonAkSwitch;                                      // 0x0AC4(0x0004) (Transient)
	class UAkSwitch*                                   ThirdPersonAkSwitch;                                      // 0x0AC8(0x0004) (Transient)
	class UWillowAutoAimStrategy*                      AutoAimStrategy;                                          // 0x0ACC(0x0004)
	float                                              LastCameraTimeStamp;                                      // 0x0AD0(0x0004)
	class UClass*                                      MatineeCameraClass;                                       // 0x0AD4(0x0004)
	class AActor*                                      CalcViewActor;                                            // 0x0AD8(0x0004)
	class APawn*                                       CalcViewPawn;                                             // 0x0ADC(0x0004)
	struct FVector                                     CalcViewActorLocation;                                    // 0x0AE0(0x000C)
	float                                              CalcViewPawnEyeHeight;                                    // 0x0AEC(0x0004)
	struct FVector                                     CalcViewLocation;                                         // 0x0AF0(0x000C)
	struct FRotator                                    CalcViewRotation;                                         // 0x0AFC(0x000C)
	struct FRotator                                    CameraRotFixedView;                                       // 0x0B08(0x000C) (Transient)
	int                                                LastVehicleSeatIndex;                                     // 0x0B14(0x0004) (Transient)
	float                                              LastVehicleFOV;                                           // 0x0B18(0x0004) (Transient)
	class UCameraAnimInst*                             CameraAnimPlayer;                                         // 0x0B1C(0x0004)
	class UCameraAnimInst*                             CameraAnimSeqPlayer;                                      // 0x0B20(0x0004)
	struct FVector                                     CameraAnimOffset;                                         // 0x0B24(0x000C)
	struct FRotator                                    CameraAnimRot;                                            // 0x0B30(0x000C)
	class AWillowPawn*                                 MyWillowPawn;                                             // 0x0B3C(0x0004)
	struct FString                                     DefaultPlayerCharacterClassName;                          // 0x0B40(0x000C) (Config, NeedCtorLink)
	class UPlayerClassDefinition*                      PlayerClass;                                              // 0x0B4C(0x0004) (Net, RepNotify)
	struct FResourcePoolReference                      ExpPool;                                                  // 0x0B50(0x000C) (Net, RepRetry)
	struct FResourcePoolReference                      SkillCooldownPool;                                        // 0x0B5C(0x000C) (Net, RepRetry)
	struct FResourcePoolReference                      MeleeSkillCooldownPool;                                   // 0x0B68(0x000C) (Net, RepRetry)
	class UPlayerSkillTree*                            PlayerSkillTree;                                          // 0x0B74(0x0004)
	class UPlayerInteractionClient*                    InteractionClient;                                        // 0x0B78(0x0004)
	float                                              CurrentInstantHitCriticalHitBonus;                        // 0x0B7C(0x0004) (Transient)
	float                                              CurrentInstantHitCriticalHitBonusBaseValue;               // 0x0B80(0x0004) (Const)
	TArray<class UAttributeModifier*>                  CurrentInstantHitCriticalHitBonusModifierStack;           // 0x0B84(0x000C) (Const, Transient, NeedCtorLink)
	float                                              CurrentMeleeCriticalHitBonus;                             // 0x0B90(0x0004) (Transient)
	float                                              CurrentMeleeCriticalHitBonusBaseValue;                    // 0x0B94(0x0004) (Const)
	TArray<class UAttributeModifier*>                  CurrentMeleeCriticalHitBonusModifierStack;                // 0x0B98(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ExpScaleForCriticalHitKills;                              // 0x0BA4(0x0004) (Transient)
	float                                              ExpScaleForCriticalHitKillsBaseValue;                     // 0x0BA8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExpScaleForCriticalHitKillsModifierStack;                 // 0x0BAC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              AttackUnsuspectingTargetDamageModifier;                   // 0x0BB8(0x0004) (Transient)
	float                                              AttackUnsuspectingTargetDamageModifierBaseValue;          // 0x0BBC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  AttackUnsuspectingTargetDamageModifierModifierStack;      // 0x0BC0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              MeleeAttackTargetFromBehindDamageModifier;                // 0x0BCC(0x0004) (Transient)
	float                                              MeleeAttackTargetFromBehindDamageModifierBaseValue;       // 0x0BD0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MeleeAttackTargetFromBehindDamageModifierModifierStack;   // 0x0BD4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              AttackInjuredMeleeDamageModifier;                         // 0x0BE0(0x0004) (Transient)
	float                                              AttackInjuredMeleeDamageModifierBaseValue;                // 0x0BE4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  AttackInjuredMeleeDamageModifierModifierStack;            // 0x0BE8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ConvertDamageToHealingPercent;                            // 0x0BF4(0x0004) (Transient)
	float                                              ConvertDamageToHealingPercentBaseValue;                   // 0x0BF8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ConvertDamageToHealingPercentModifierStack;               // 0x0BFC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              PendingHealAmount;                                        // 0x0C08(0x0004) (Transient)
	float                                              TargetMinHealthDamageBoostPercent;                        // 0x0C0C(0x0004) (Transient)
	float                                              TargetMinHealthDamageBoostPercentBaseValue;               // 0x0C10(0x0004) (Const)
	TArray<class UAttributeModifier*>                  TargetMinHealthDamageBoostPercentModifierStack;           // 0x0C14(0x000C) (Const, Transient, NeedCtorLink)
	float                                              TargetOverMinHealthGunDamageMultiplier;                   // 0x0C20(0x0004) (Transient)
	float                                              TargetOverMinHealthGunDamageMultiplierBaseValue;          // 0x0C24(0x0004) (Const)
	TArray<class UAttributeModifier*>                  TargetOverMinHealthGunDamageMultiplierModifierStack;      // 0x0C28(0x000C) (Const, Transient, NeedCtorLink)
	float                                              DamageReturnPercent;                                      // 0x0C34(0x0004) (Transient)
	float                                              DamageReturnPercentBaseValue;                             // 0x0C38(0x0004) (Const)
	TArray<class UAttributeModifier*>                  DamageReturnPercentModifierStack;                         // 0x0C3C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              FirstShotInClipBonusModifier;                             // 0x0C48(0x0004) (Transient)
	float                                              FirstShotInClipBonusModifierBaseValue;                    // 0x0C4C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  FirstShotInClipBonusModifierModifierStack;                // 0x0C50(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastShotInClipBonusModifier;                              // 0x0C5C(0x0004) (Transient)
	float                                              LastShotInClipBonusModifierBaseValue;                     // 0x0C60(0x0004) (Const)
	TArray<class UAttributeModifier*>                  LastShotInClipBonusModifierModifierStack;                 // 0x0C64(0x000C) (Const, Transient, NeedCtorLink)
	int                                                AmmoResourceUpgrades[0x8];                                // 0x0C70(0x0004) (Net)
	FScriptInterface                                   CurrentTouchedPickupable;                                 // 0x0C90(0x0008) (Net)
	FScriptInterface                                   CurrentSeenPickupable;                                    // 0x0C98(0x0008)
	FScriptInterface                                   CurrentUsableObject;                                      // 0x0CA0(0x0008) (Net)
	struct FInteractionIconWithOverrides               CurrentInteractionIcon[0x2];                              // 0x0CA8(0x0014) (Net, RepNotify)
	FScriptInterface                                   ActiveShop;                                               // 0x0CD0(0x0008)
	FScriptInterface                                   FocusObject;                                              // 0x0CD8(0x0008)
	float                                              FocusFOVAngle;                                            // 0x0CE0(0x0004)
	float                                              FocusCamReturnTime;                                       // 0x0CE4(0x0004)
	struct FRotator                                    FocusCamRot;                                              // 0x0CE8(0x000C)
	struct FVector                                     FocusCamLoc;                                              // 0x0CF4(0x000C)
	float                                              FocusCamTimestamp;                                        // 0x0D00(0x0004)
	float                                              LastTauntAnimTime;                                        // 0x0D04(0x0004)
	struct FVector                                     SummedDamageDirection;                                    // 0x0D08(0x000C)
	struct FName                                       DebugTraceHitActor;                                       // 0x0D14(0x0008)
	struct FName                                       DebugTraceHitActorSubLevel;                               // 0x0D1C(0x0008)
	int                                                DebugTraceDistanceUnits;                                  // 0x0D24(0x0004)
	struct FName                                       MainMenu_MapName;                                         // 0x0D28(0x0008)
	struct FString                                     MainMenu_CharacterClass[0x2];                             // 0x0D30(0x000C) (NeedCtorLink)
	int                                                MainMenu_NumPlayers;                                      // 0x0D48(0x0004)
	int                                                MainMenu_CurrentPlayer;                                   // 0x0D4C(0x0004)
	TArray<struct FScriptDelegate>                     SplitscreenJoinCompleteDelegates;                         // 0x0D50(0x000C) (NeedCtorLink)
	TArray<class UTrainingMessageDefinition*>          QueuedTrainingMessages;                                   // 0x0D5C(0x000C) (Transient, NeedCtorLink)
	TArray<class UTrainingMessageDefinition*>          PendingQueuedTrainingMessages;                            // 0x0D68(0x000C) (Transient, NeedCtorLink)
	float                                              LastTrainingMessagePostponeTime;                          // 0x0D74(0x0004) (Transient)
	float                                              FOVModifierSpeed;                                         // 0x0D78(0x0004) (Net, Transient)
	float                                              FOVModifierSpeedBaseValue;                                // 0x0D7C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  FOVModifierSpeedModifierStack;                            // 0x0D80(0x000C) (Const, Transient, NeedCtorLink)
	float                                              CachedFOVAngle;                                           // 0x0D8C(0x0004)
	float                                              LastFOVAngleUpdateTime;                                   // 0x0D90(0x0004)
	float                                              FOVAspectRatioScalar_View;                                // 0x0D94(0x0004) (Const)
	float                                              FOVAspectRatioScalar_Fore;                                // 0x0D98(0x0004) (Const)
	float                                              FOVScalar_VertSplit_View;                                 // 0x0D9C(0x0004) (Config)
	float                                              FOVScalar_VertSplit_Fore;                                 // 0x0DA0(0x0004) (Config)
	float                                              FOVScalar_HorzSplit_View;                                 // 0x0DA4(0x0004) (Config)
	float                                              FOVScalar_HorzSplit_Fore;                                 // 0x0DA8(0x0004) (Config)
	class UWillowAIDebugCamera*                        WillowAIDebugCam;                                         // 0x0DAC(0x0004) (Transient)
	struct FRotator                                    PainRot;                                                  // 0x0DB0(0x000C)
	struct FRotator                                    DesiredPainRot;                                           // 0x0DBC(0x000C)
	struct FVector                                     PainOffset;                                               // 0x0DC8(0x000C)
	struct FVector                                     DesiredPainOffset;                                        // 0x0DD4(0x000C)
	float                                              PainFOV;                                                  // 0x0DE0(0x0004)
	float                                              DesiredPainFOV;                                           // 0x0DE4(0x0004)
	float                                              PainEndTime;                                              // 0x0DE8(0x0004)
	class APawn*                                       LastPawn;                                                 // 0x0DEC(0x0004)
	TArray<struct FPostProcessOverlayInfo>             PostProcessOverlayList;                                   // 0x0DF0(0x000C) (NeedCtorLink)
	float                                              PostProcessDurationMultiplier;                            // 0x0DFC(0x0004) (Net, RepNotify)
	float                                              LastLevelUpTime;                                          // 0x0E00(0x0004)
	float                                              LastLevelUpSoundTime;                                     // 0x0E04(0x0004)
	class UProjectileDefinition*                       LastProjectileDefinition;                                 // 0x0E08(0x0004)
	float                                              TargetVerticalKickAmt;                                    // 0x0E0C(0x0004)
	float                                              CurrentVerticalKickAmt;                                   // 0x0E10(0x0004)
	float                                              TargetHorizontalKickAmt;                                  // 0x0E14(0x0004)
	float                                              CurrentHorizontalKickAmt;                                 // 0x0E18(0x0004)
	float                                              LastWeaponKickTime;                                       // 0x0E1C(0x0004)
	float                                              CurrentWanderAccuracy;                                    // 0x0E20(0x0004)
	float                                              WanderingPatternOscillatorPosition;                       // 0x0E24(0x0004)
	float                                              WanderingSmoothInDuration;                                // 0x0E28(0x0004)
	float                                              WanderingSmoothInTimeRemaining;                           // 0x0E2C(0x0004)
	float                                              LastWanderingTime;                                        // 0x0E30(0x0004)
	class UUberPostProcessEffect*                      UberDOFEffect;                                            // 0x0E34(0x0004) (Transient)
	float                                              InitialDOFFocusDistance;                                  // 0x0E38(0x0004) (Transient)
	TArray<struct FPostProcessChainRecord>             PostProcessChainRecords;                                  // 0x0E3C(0x000C) (NeedCtorLink)
	struct FName                                       LostShieldHealthParamName;                                // 0x0E48(0x0008)
	class UMaterialInstanceConstant*                   LostShieldMaterialInstanceConstant;                       // 0x0E50(0x0004)
	float                                              RcpWeaponSpread;                                          // 0x0E54(0x0004)
	float                                              CurrentWeaponAmmoRegenerationMultiplier;                  // 0x0E58(0x0004) (Transient)
	float                                              CurrentWeaponAmmoRegenerationMultiplierBaseValue;         // 0x0E5C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  CurrentWeaponAmmoRegenerationMultiplierModifierStack;     // 0x0E60(0x000C) (Const, Transient, NeedCtorLink)
	int                                                PlayerMovementType;                                       // 0x0E6C(0x0004) (Config)
	class AWillowPlayerStats*                          PlayerStats;                                              // 0x0E70(0x0004)
	struct FInstanceDataSet                            InstanceState;                                            // 0x0E74(0x000C) (Transient, Component, NeedCtorLink)
	int                                                SavedInviteControllerId;                                  // 0x0E80(0x0004) (Transient)
	struct FOnlineGameSearchResult                     SavedInviteSearchResult;                                  // 0x0E84(0x0008) (Transient)
	class AWillowPawn*                                 CurrentActionSkillTarget;                                 // 0x0E8C(0x0004) (Transient)
	class UInputContextSelectorBase*                   InputContextSelector;                                     // 0x0E90(0x0004) (Transient)
	float                                              ScorpioDamageTypeSelector;                                // 0x0E94(0x0004) (Transient)
	float                                              ScorpioDamageTypeSelectorBaseValue;                       // 0x0E98(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ScorpioDamageTypeSelectorModifierStack;                   // 0x0E9C(0x000C) (Const, Transient, NeedCtorLink)
	struct FString                                     SaveGameName;                                             // 0x0EA8(0x000C) (NeedCtorLink)
	int                                                SaveGameFileId;                                           // 0x0EB4(0x0004)
	int                                                LastStationSaveTime;                                      // 0x0EB8(0x0004)
	TArray<struct FSpeedKillData>                      RecentKillHistory;                                        // 0x0EBC(0x000C) (Transient, NeedCtorLink)
	int                                                CurrKillingSpree;                                         // 0x0EC8(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ProfileMenuDlg;                                           // 0x0ECC(0x0004) (Transient)
	class AWeapon*                                     LastUsedWeapon;                                           // 0x0ED0(0x0004) (Transient)
	int                                                LoadedCharPlayTime;                                       // 0x0ED4(0x0004)
	class UPlayerSaveGame*                             LastLoadedSaveGame;                                       // 0x0ED8(0x0004) (Transient)
	float                                              SaveStartTime;                                            // 0x0EDC(0x0004)
	TArray<class AWillowPlayerController*>             PlayersToSave;                                            // 0x0EE0(0x000C) (Transient, NeedCtorLink)
	float                                              MinSaveDuration;                                          // 0x0EEC(0x0004) (Transient)
	class UWillowGFxDialogBox*                         SavingDlg;                                                // 0x0EF0(0x0004) (Transient)
	class UWillowGFxDialogBox*                         PS3WritingProfileDlg;                                     // 0x0EF4(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ControllerRemovedDlg;                                     // 0x0EF8(0x0004) (Transient)
	TArray<struct FString>                             LoadedLevelsList;                                         // 0x0EFC(0x000C) (Transient, NeedCtorLink)
	float                                              KillSkillTimeRemaining;                                   // 0x0F08(0x0004) (Net, RepNotify)
	float                                              DurationOfLastKillSkillActivation;                        // 0x0F0C(0x0004) (Transient)
	TArray<class ADroppedPickup*>                      PickupsHiddenWhileInStatusMenu;                           // 0x0F10(0x000C) (Transient, NeedCtorLink)
	class AActor*                                      CurrentEchoActor;                                         // 0x0F1C(0x0004) (Transient)
	class UWillowDialogEmoteDefinition*                CurrentEchoEmote;                                         // 0x0F20(0x0004) (Transient)
	class UTextureMovie*                               CurrentEchoMovie;                                         // 0x0F24(0x0004) (Transient)
	class UParticleSystem*                             CurrentEchoParticleSystem;                                // 0x0F28(0x0004) (Transient)
	class UParticleSystemComponent*                    CurrentEchoPSC;                                           // 0x0F2C(0x0004) (ExportObject, Transient, Component, EditInline)
	float                                              CurrentEchoPSCFadeStartTime;                              // 0x0F30(0x0004) (Transient)
	class UTextureMovie*                               CurrentEchoVideoMovie;                                    // 0x0F34(0x0004) (Transient)
	float                                              CurrentEchoOpacity;                                       // 0x0F38(0x0004)
	float                                              EchoPSCFadeTime;                                          // 0x0F3C(0x0004) (Config)
	float                                              MeleeHealthStealPercent;                                  // 0x0F40(0x0004) (Transient)
	float                                              MeleeHealthStealPercentBaseValue;                         // 0x0F44(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MeleeHealthStealPercentModifierStack;                     // 0x0F48(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedBulletHealingModifier;                          // 0x0F54(0x0004) (Transient)
	float                                              InstigatedBulletHealingModifierBaseValue;                 // 0x0F58(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedBulletHealingModifierModifierStack;             // 0x0F5C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedMeleeHealingModifier;                           // 0x0F68(0x0004) (Transient)
	float                                              InstigatedMeleeHealingModifierBaseValue;                  // 0x0F6C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedMeleeHealingModifierModifierStack;              // 0x0F70(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedGrenadeHealingModifier;                         // 0x0F7C(0x0004) (Transient)
	float                                              InstigatedGrenadeHealingModifierBaseValue;                // 0x0F80(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedGrenadeHealingModifierModifierStack;            // 0x0F84(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedRocketHealingModifier;                          // 0x0F90(0x0004) (Transient)
	float                                              InstigatedRocketHealingModifierBaseValue;                 // 0x0F94(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedRocketHealingModifierModifierStack;             // 0x0F98(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedStatusEffectHealingModifier;                    // 0x0FA4(0x0004) (Transient)
	float                                              InstigatedStatusEffectHealingModifierBaseValue;           // 0x0FA8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedStatusEffectHealingModifierModifierStack;       // 0x0FAC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedSkillHealingModifier;                           // 0x0FB8(0x0004) (Transient)
	float                                              InstigatedSkillHealingModifierBaseValue;                  // 0x0FBC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedSkillHealingModifierModifierStack;              // 0x0FC0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ReceivedBulletHealingModifier;                            // 0x0FCC(0x0004) (Transient)
	float                                              ReceivedBulletHealingModifierBaseValue;                   // 0x0FD0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ReceivedBulletHealingModifierModifierStack;               // 0x0FD4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ReceivedMeleeHealingModifier;                             // 0x0FE0(0x0004) (Transient)
	float                                              ReceivedMeleeHealingModifierBaseValue;                    // 0x0FE4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ReceivedMeleeHealingModifierModifierStack;                // 0x0FE8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ReceivedGrenadeHealingModifier;                           // 0x0FF4(0x0004) (Transient)
	float                                              ReceivedGrenadeHealingModifierBaseValue;                  // 0x0FF8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ReceivedGrenadeHealingModifierModifierStack;              // 0x0FFC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ReceivedRocketHealingModifier;                            // 0x1008(0x0004) (Transient)
	float                                              ReceivedRocketHealingModifierBaseValue;                   // 0x100C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ReceivedRocketHealingModifierModifierStack;               // 0x1010(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ReceivedStatusEffectHealingModifier;                      // 0x101C(0x0004) (Transient)
	float                                              ReceivedStatusEffectHealingModifierBaseValue;             // 0x1020(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ReceivedStatusEffectHealingModifierModifierStack;         // 0x1024(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ReceivedSkillHealingModifier;                             // 0x1030(0x0004) (Transient)
	float                                              ReceivedSkillHealingModifierBaseValue;                    // 0x1034(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ReceivedSkillHealingModifierModifierStack;                // 0x1038(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedBulletShieldRestoreModifier;                    // 0x1044(0x0004) (Transient)
	float                                              InstigatedBulletShieldRestoreModifierBaseValue;           // 0x1048(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedBulletShieldRestoreModifierModifierStack;       // 0x104C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedMeleeShieldRestoreModifier;                     // 0x1058(0x0004) (Transient)
	float                                              InstigatedMeleeShieldRestoreModifierBaseValue;            // 0x105C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedMeleeShieldRestoreModifierModifierStack;        // 0x1060(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedGrenadeShieldRestoreModifier;                   // 0x106C(0x0004) (Transient)
	float                                              InstigatedGrenadeShieldRestoreModifierBaseValue;          // 0x1070(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedGrenadeShieldRestoreModifierModifierStack;      // 0x1074(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedRocketShieldRestoreModifier;                    // 0x1080(0x0004) (Transient)
	float                                              InstigatedRocketShieldRestoreModifierBaseValue;           // 0x1084(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedRocketShieldRestoreModifierModifierStack;       // 0x1088(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedStatusEffectShieldRestoreModifier;              // 0x1094(0x0004) (Transient)
	float                                              InstigatedStatusEffectShieldRestoreModifierBaseValue;     // 0x1098(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedStatusEffectShieldRestoreModifierModifierStack; // 0x109C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedSkillShieldRestoreModifier;                     // 0x10A8(0x0004) (Transient)
	float                                              InstigatedSkillShieldRestoreModifierBaseValue;            // 0x10AC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedSkillShieldRestoreModifierModifierStack;        // 0x10B0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastKillExcessDamageDealt;                                // 0x10BC(0x0004) (Transient)
	float                                              LastKillExcessDamageDealtBaseValue;                       // 0x10C0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  LastKillExcessDamageDealtModifierStack;                   // 0x10C4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ShakeOffsetLength;                                        // 0x10D0(0x0004)
	float                                              ShakeRotLength;                                           // 0x10D4(0x0004)
	float                                              ShakeFOVLength;                                           // 0x10D8(0x0004)
	int                                                PresenceUpdateInterval;                                   // 0x10DC(0x0004)
	struct FLungeData                                  CurrentLunge;                                             // 0x10E0(0x0010)
	class UAttributeModifier*                          LungeSpeedModifier;                                       // 0x10F0(0x0004)
	float                                              MaxLungeDistance;                                         // 0x10F4(0x0004) (Transient)
	float                                              MaxLungeDistanceBaseValue;                                // 0x10F8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MaxLungeDistanceModifierStack;                            // 0x10FC(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             SprintModifiers;                                          // 0x1108(0x000C) (NeedCtorLink)
	float                                              SprintFOVAngle;                                           // 0x1114(0x0004)
	float                                              SprintDesiredFOV;                                         // 0x1118(0x0004)
	struct FLurchData                                  CurrentLurch;                                             // 0x111C(0x0014)
	float                                              CurrentLurchPos;                                          // 0x1130(0x0004)
	float                                              ActualCurrentLurchLoc;                                    // 0x1134(0x0004)
	float                                              ActualCurrentLurchRot;                                    // 0x1138(0x0004)
	float                                              ActualCurrentLurchRotRoll;                                // 0x113C(0x0004)
	class AVehicleSpawnStationTerminal*                ConnectedVSSTerminal;                                     // 0x1140(0x0004) (Net, RepNotify)
	int                                                VSSSlotIndexForDelayedTeleport;                           // 0x1144(0x0004) (Transient)
	class UWillowGFxMovie*                             TheVSSUIMovie;                                            // 0x1148(0x0004) (Transient)
	int                                                CurrentStreamingDebugPage;                                // 0x114C(0x0004)
	TArray<struct FScreenParticleRecord>               ScreenParticleRecords;                                    // 0x1150(0x000C) (Component, NeedCtorLink)
	TArray<struct FName>                               ActivatedTeleportersList;                                 // 0x115C(0x000C) (NeedCtorLink)
	class UTravelStationDefinition*                    LastVisitedTeleporter;                                    // 0x1168(0x0004)
	struct FString                                     LastTouchedStationPath;                                   // 0x116C(0x000C) (NeedCtorLink)
	TArray<struct FScreenParticleModifier>             HoldingCellScreenParticleModifiers;                       // 0x1178(0x000C) (NeedCtorLink)
	class UMaterialInterface*                          HoldingCellMaterialInterface;                             // 0x1184(0x0004)
	struct FName                                       HoldingCellMatParamName;                                  // 0x1188(0x0008)
	TArray<struct FMissionPlaythroughData>             MissionPlaythroughs;                                      // 0x1190(0x000C) (NeedCtorLink)
	TArray<struct FExpansionData>                      DLCExpansionData;                                         // 0x119C(0x000C) (NeedCtorLink)
	float                                              LoadingMovieShutoffTime;                                  // 0x11A8(0x0004) (Config)
	float                                              UsableObjectUpdateTime;                                   // 0x11AC(0x0004) (Transient)
	FScriptInterface                                   CachedUsableObject;                                       // 0x11B0(0x0008) (Transient)
	class UPrimitiveComponent*                         CachedUsableHitComponent;                                 // 0x11B8(0x0004) (ExportObject, Transient, Component, EditInline)
	float                                              UsableObjectUpdateRate;                                   // 0x11BC(0x0004)
	class APawnInteractionProxy*                       CachedTradeProxy;                                         // 0x11C0(0x0004) (Transient)
	class UWillowGFxUIManager*                         GFxUIManager;                                             // 0x11C4(0x0004) (Transient)
	class UGFxMovieDefinition*                         PauseMenuDefinition;                                      // 0x11C8(0x0004) (Transient)
	class UGFxMovieDefinition*                         LobbyMovieDefinition;                                     // 0x11CC(0x0004) (Transient)
	struct FString                                     BinkLoadingMovieName;                                     // 0x11D0(0x000C) (Config, NeedCtorLink)
	struct FString                                     ScaleformLoadingMovieName;                                // 0x11DC(0x000C) (Config, NeedCtorLink)
	float                                              PercentChanceInstigatedBulletDmgIgnoresShields;           // 0x11E8(0x0004) (Transient)
	float                                              PercentChanceInstigatedBulletDmgIgnoresShieldsBaseValue;  // 0x11EC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  PercentChanceInstigatedBulletDmgIgnoresShieldsModifierStack;// 0x11F0(0x000C) (Const, Transient, NeedCtorLink)
	struct FString                                     PlayerPreferredCharacterName;                             // 0x11FC(0x000C) (NeedCtorLink)
	struct FColor                                      PlayerPreferredPrimaryColor;                              // 0x1208(0x0004)
	struct FColor                                      PlayerPreferredSecondaryColor;                            // 0x120C(0x0004)
	struct FColor                                      PlayerPreferredTertiaryColor;                             // 0x1210(0x0004)
	struct FPlayerRecentDamageEventData                RecentDamageEvents[0x6];                                  // 0x1214(0x0024) (Net)
	int                                                CurrentPlayerRecentDamageEventIndex;                      // 0x12EC(0x0004) (Const)
	struct FRecentlyResistedAttackData                 RecentlyResistedAttacks[0x10];                            // 0x12F0(0x000C)
	float                                              MinTimeBetweenResistFeedback;                             // 0x13B0(0x0004) (Const)
	float                                              CoopRange;                                                // 0x13B4(0x0004)
	float                                              LastZoomTime;                                             // 0x13B8(0x0004)
	int                                                VehicleSteeringMode;                                      // 0x13BC(0x0004)
	float                                              DeadTime;                                                 // 0x13C0(0x0004)
	float                                              HUDScaleX;                                                // 0x13C4(0x0004)
	float                                              HUDScaleY;                                                // 0x13C8(0x0004)
	float                                              HUDScaleE;                                                // 0x13CC(0x0004)
	class UObject*                                     ContextualPromptContextObject;                            // 0x13D0(0x0004)
	int                                                BackpackSortPreferenceIndex;                              // 0x13D4(0x0004)
	class UObject*                                     RetryContextObject;                                       // 0x13D8(0x0004)
	struct FString                                     RetryContextString;                                       // 0x13DC(0x000C) (NeedCtorLink)
	float                                              RetryDuration;                                            // 0x13E8(0x0004)
	float                                              ContextualPromptDuration;                                 // 0x13EC(0x0004)
	float                                              MissionRestrictionTextDuration;                           // 0x13F0(0x0004)
	class AWillowPawn*                                 ReviveTarget;                                             // 0x13F4(0x0004) (Net, RepNotify)
	class UVSSUIDefinition*                            CachedVSSUIDefinition[0x2];                               // 0x13F8(0x0004) (Transient)
	class UCustomizationDefinition*                    CachedVSSVehicleCustomizationDefinition[0x2];             // 0x1400(0x0004) (Transient)
	float                                              ActionSkillTime;                                          // 0x1408(0x0004) (Net)
	int                                                IsSkillListeningForMeleeOverrideEvent;                    // 0x140C(0x0004) (Net, Transient)
	int                                                IsSkillListeningForMeleeOverrideEventBaseValue;           // 0x1410(0x0004) (Const)
	TArray<class UAttributeModifier*>                  IsSkillListeningForMeleeOverrideEventModifierStack;       // 0x1414(0x000C) (Const, Transient, NeedCtorLink)
	int                                                IsSkillListeningForThrowGrenadeOverrideEvent;             // 0x1420(0x0004) (Net, Transient)
	int                                                IsSkillListeningForThrowGrenadeOverrideEventBaseValue;    // 0x1424(0x0004) (Const)
	TArray<class UAttributeModifier*>                  IsSkillListeningForThrowGrenadeOverrideEventModifierStack;// 0x1428(0x000C) (Const, Transient, NeedCtorLink)
	float                                              CanThrowGrenadesWhileInDownState;                         // 0x1434(0x0004) (Transient)
	float                                              CanThrowGrenadesWhileInDownStateBaseValue;                // 0x1438(0x0004) (Const)
	TArray<class UAttributeModifier*>                  CanThrowGrenadesWhileInDownStateModifierStack;            // 0x143C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastKnownAmmoCount_RepeaterPistol;                        // 0x1448(0x0004)
	float                                              LastKnownAmmoCount_RevolverPistol;                        // 0x144C(0x0004)
	float                                              LastKnownAmmoCount_SMG;                                   // 0x1450(0x0004)
	float                                              LastKnownAmmoCount_CombatRifle;                           // 0x1454(0x0004)
	float                                              LastKnownAmmoCount_Shotgun;                               // 0x1458(0x0004)
	float                                              LastKnownAmmoCount_SniperRifle;                           // 0x145C(0x0004)
	float                                              LastKnownAmmoCount_RocketLauncher;                        // 0x1460(0x0004)
	float                                              LastKnownAmmoCount_Grenades;                              // 0x1464(0x0004)
	TArray<int>                                        UsedMarketingCodes;                                       // 0x1468(0x000C) (NeedCtorLink)
	TArray<int>                                        MarketingCodesNeedingNotification;                        // 0x1474(0x000C) (NeedCtorLink)
	class ACameraActor*                                SavedCameraActorForVoGMatinee;                            // 0x1480(0x0004)
	float                                              VoGMovieDuration;                                         // 0x1484(0x0004)
	TArray<struct FScriptDelegate>                     SkillPointsChangedDelegates;                              // 0x1488(0x000C) (NeedCtorLink)
	float                                              ClientLoadingMovieShutoffDelay;                           // 0x1494(0x0004) (Config)
	struct FVector                                     TransitionEntryLocation;                                  // 0x1498(0x000C)
	class UWillowGFxDialogBox*                         NoCancelConnectingDlg;                                    // 0x14A4(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ConnectingDlg;                                            // 0x14A8(0x0004) (Transient)
	float                                              ConnectingDialogRefreshTime;                              // 0x14AC(0x0004) (Const)
	int                                                ConnectionTimeout;                                        // 0x14B0(0x0004) (Const)
	float                                              ConnectionDuration;                                       // 0x14B4(0x0004) (Transient)
	struct FString                                     OneSecond;                                                // 0x14B8(0x000C) (NeedCtorLink)
	struct FString                                     MoreThanOneSecond;                                        // 0x14C4(0x000C) (NeedCtorLink)
	class UWillowGFxDialogBox*                         InviteDlg;                                                // 0x14D0(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ColiseumGameOverDlg;                                      // 0x14D4(0x0004) (Transient)
	int                                                ExpPointsLoadedFromSavedGame;                             // 0x14D8(0x0004) (Transient)
	int                                                ExpLevelLoadedFromSavedGame;                              // 0x14DC(0x0004) (Transient)
	TArray<struct FOnlineFriend>                       currentFriendsList;                                       // 0x14E0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FRegionGameStageData>                RegionGameStages;                                         // 0x14EC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FUnloadableDlcRegionGameStageData>   UnloadableDlcRegionGameStages;                            // 0x14F8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FUnloadableDlcWeaponSaveGameData>    UnloadableDlcWeaponData;                                  // 0x1504(0x000C) (Transient, NeedCtorLink)
	TArray<struct FUnloadableDlcItemSaveGameData>      UnloadableDlcItemData;                                    // 0x1510(0x000C) (Transient, NeedCtorLink)
	float                                              ControllerChangeRetryTime;                                // 0x151C(0x0004) (Transient)
	struct FVector                                     CurrentThirdPersonMenuCamLoc;                             // 0x1520(0x000C) (Transient)
	struct FRotator                                    CurrentThirdPersonMenuCamRot;                             // 0x152C(0x000C) (Transient)
	float                                              CurrentThirdPersonMenuCamFOV;                             // 0x1538(0x0004) (Transient)
	TArray<struct FPendingMissionRewardData>           UnclaimedRewards;                                         // 0x153C(0x000C) (NeedCtorLink)
	TArray<class APlayerStandIn*>                      PlayerStandIns;                                           // 0x1548(0x000C) (Transient, NeedCtorLink)
	TArray<struct FTaggedGFxMovie>                     TaggedGFxMovies;                                          // 0x1554(0x000C) (NeedCtorLink)
	TArray<class UChallengeDefinition*>                TrackedChallenges;                                        // 0x1560(0x000C) (Transient, NeedCtorLink)
	TArray<struct FChallengeData>                      LocalChallengeDataCache;                                  // 0x156C(0x000C) (NeedCtorLink)
	TArray<struct FUnloadableDlcChallengeData>         UnloadableDlcChallengeList;                               // 0x1578(0x000C) (NeedCtorLink)
	struct FString                                     DefaultMapName;                                           // 0x1584(0x000C) (Const, NeedCtorLink)
	int                                                PlayingEchoId;                                            // 0x1590(0x0004)
	class UWillowGFxThirdPersonMovie*                  CurrentThirdPersonMovie;                                  // 0x1594(0x0004) (Transient)
	TArray<class UFlagDefinition*>                     DynamicFlagDefinitions;                                   // 0x1598(0x000C) (Transient, NeedCtorLink)
	TArray<struct FDynamicFlagInstanceData>            DynamicFlags;                                             // 0x15A4(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x15B0(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerController.DynamicFlagDefLookup
	class AWillowTradeManager*                         TradeManager;                                             // 0x15EC(0x0004) (Net)
	TArray<struct FWorldDiscoveryData>                 DiscoveredWorldAreas;                                     // 0x15F0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               FullyExploredAreas;                                       // 0x15FC(0x000C) (Transient, NeedCtorLink)
	float                                              TinnitusStrength;                                         // 0x1608(0x0004)
	class UStatusEffectDefinition*                     CurrentPrimaryStatusEffect;                               // 0x160C(0x0004) (Net, Transient, RepNotify)
	class UUBMGraveyardSaveData*                       CachedGraveyardSaveData;                                  // 0x1610(0x0004) (Transient)
	struct FString                                     UBMKilledByMessage;                                       // 0x1614(0x000C) (Transient, NeedCtorLink)
	struct FString                                     NoPreferredManufacturer;                                  // 0x1620(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoPreferredWeaponType;                                    // 0x162C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UBMDefaultKilledByAIMessage;                              // 0x1638(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UBMDefaultKilledByMessage;                                // 0x1644(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UBMSuicideMessage;                                        // 0x1650(0x000C) (Const, Localized, NeedCtorLink)
	float                                              PreProfileWriteSaveDuration;                              // 0x165C(0x0004)
	int                                                BadassPoints;                                             // 0x1660(0x0004) (Transient)
	int                                                BadassPointsSpent;                                        // 0x1664(0x0004) (Transient)
	int                                                BadassTokensAvailable;                                    // 0x1668(0x0004) (Transient)
	int                                                BadassTokensEarned;                                       // 0x166C(0x0004) (Transient)
	int                                                BadassBonusTokens;                                        // 0x1670(0x0004) (Transient)
	int                                                BadassTokensDue;                                          // 0x1674(0x0004) (Transient)
	TArray<int>                                        BadassRewardsEarned;                                      // 0x1678(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        BadassRewardsToOfferNext;                                 // 0x1684(0x000C) (Transient, NeedCtorLink)
	struct FVector                                     CustomWaypointLocation;                                   // 0x1690(0x000C) (Transient)
	struct FVector                                     LastKnownLocation;                                        // 0x169C(0x000C) (Transient)
	float                                              TimeSinceLastLocationStatUpdate;                          // 0x16A8(0x0004) (Transient)
	float                                              BufferedLocationDelta;                                    // 0x16AC(0x0004) (Transient)
	float                                              BufferedVehicleLocationDelta;                             // 0x16B0(0x0004) (Transient)
	float                                              CurrentSprintDistance;                                    // 0x16B4(0x0004) (Transient)
	struct FString                                     DefaultSaveGameString;                                    // 0x16B8(0x000C) (Transient, NeedCtorLink)
	struct FString                                     IntroMovieName;                                           // 0x16C4(0x000C) (Const, NeedCtorLink)
	float                                              WaitTimeToDisableLoadingMovie;                            // 0x16D0(0x0004) (Transient)
	class UOnlineMessageGFxMovie*                      OnlineMessageMovie;                                       // 0x16D4(0x0004) (Transient)
	class UTextChatGFxMovie*                           TextChatMovie;                                            // 0x16D8(0x0004) (Transient)
	struct FAkPlayingInfo                              VOVolumePlayInfo;                                         // 0x16DC(0x0008) (Transient, Component)
	struct FAkPlayingInfo                              SFXVolumePlayInfo;                                        // 0x16E4(0x0008) (Transient, Component)
	struct FAkPlayingInfo                              MusicVolumePlayInfo;                                      // 0x16EC(0x0008) (Transient, Component)
	struct FAkPlayingInfo                              TeleporterSoundInfo;                                      // 0x16F4(0x0008) (Transient, Component)
	class UClass*                                      TravelToSearchClass;                                      // 0x16FC(0x0004) (Transient)
	TArray<struct FScriptDelegate>                     SaveGameLoadedDelegates;                                  // 0x1700(0x000C) (NeedCtorLink)
	TArray<int>                                        BlackMarketUpgrades;                                      // 0x170C(0x000C) (NeedCtorLink)
	class USaveGameChannel*                            SaveGameReplicationChannel;                               // 0x1718(0x0004) (Transient)
	class UPlayerSaveGame*                             PendingReplicatedSaveGame;                                // 0x171C(0x0004) (Transient)
	class UWillowGFxDialogBox*                         SendingSaveGameDlg;                                       // 0x1720(0x0004) (Transient)
	TArray<class UResourcePoolDefinition*>             ClientExpectedResourcePools;                              // 0x1724(0x000C) (Transient, NeedCtorLink)
	class UWillowGFxDialogBox*                         ReadingWillowOneSavesDlg;                                 // 0x1730(0x0004) (Transient)
	class UWillowGFxDialogBox*                         LoadingDynamicCharacterPackageDialog;                     // 0x1734(0x0004) (Transient)
	class AWillowSpectatorPoint*                       CurrentSpectatorPoint;                                    // 0x1738(0x0004) (Transient)
	TArray<struct FCustomizationUnlockData>            CustomizationUnlocks;                                     // 0x173C(0x000C) (Transient, NeedCtorLink)
	struct FMap_Mirror                                 UnlockedCustomizationCountMap;                            // 0x1748(0x003C) (Native, Transient)
	TArray<struct FLockoutData>                        LockoutList;                                              // 0x1784(0x000C) (NeedCtorLink)
	TArray<struct FUnloadableDlcLockoutData>           UnloadableDlcLockoutList;                                 // 0x1790(0x000C) (NeedCtorLink)
	int                                                ClientLockoutTimeAdjust;                                  // 0x179C(0x0004)
	float                                              EasterEgg1;                                               // 0x17A0(0x0004) (Transient)
	float                                              EasterEgg2;                                               // 0x17A4(0x0004) (Transient)
	float                                              EasterEgg3;                                               // 0x17A8(0x0004) (Transient)
	float                                              EasterEgg4;                                               // 0x17AC(0x0004) (Transient)
	float                                              EasterEgg5;                                               // 0x17B0(0x0004) (Transient)
	float                                              EasterEgg6;                                               // 0x17B4(0x0004) (Transient)
	float                                              EasterEgg7;                                               // 0x17B8(0x0004) (Transient)
	float                                              EasterEgg8;                                               // 0x17BC(0x0004) (Transient)
	float                                              EasterEgg9;                                               // 0x17C0(0x0004) (Transient)
	float                                              EasterEgg10;                                              // 0x17C4(0x0004) (Transient)
	TArray<int>                                        LevelChallengeUnlocks;                                    // 0x17C8(0x000C) (NeedCtorLink)
	TArray<struct FOneOffLevelChallengeData>           OneOffLevelChallengeCompletion;                           // 0x17D4(0x000C) (NeedCtorLink)
	int                                                NumChallengePrestiges;                                    // 0x17E0(0x0004) (Transient)
	class UPlayerClassDefinition*                      PendingClassSwitchDefinition;                             // 0x17E4(0x0004) (Transient)
	class AWillowPlayerPawn*                           PendingClassSwitchPawnArchetype;                          // 0x17E8(0x0004)
	float                                              SavedMapScaleVal;                                         // 0x17EC(0x0004) (Transient)
	class USkillDefinition*                            SavedSkillTreeSkill;                                      // 0x17F0(0x0004) (Transient)
	int                                                SavedBranchNavPref;                                       // 0x17F4(0x0004)
	int                                                SavedCellNavPref;                                         // 0x17F8(0x0004)
	int                                                NumQuickSlotsFlourished;                                  // 0x17FC(0x0004)
	int                                                NumGoldenKeysNotified;                                    // 0x1800(0x0004) (Transient)
	TArray<unsigned char>                              ViewWanderingIndex;                                       // 0x1804(0x000C) (Transient, NeedCtorLink)
	TArray<float>                                      ViewWanderingPercent;                                     // 0x1810(0x000C) (Transient, NeedCtorLink)
	float                                              TotalViewWanderingPersistence;                            // 0x181C(0x0004) (Transient)
	class UWillowPauseTicker*                          PauseTicker;                                              // 0x1820(0x0004) (Transient)
	class UWillowGFxDialogBox*                         OfflineWarningDlg;                                        // 0x1824(0x0004) (Transient)
	struct FString                                     DownloadPatcherFileName;                                  // 0x1828(0x000C) (NeedCtorLink)
	float                                              DownloadPatcherFilesTimeout;                              // 0x1834(0x0004)
	TArray<struct FScriptDelegate>                     DownloadPatcherFilesCompleteDelegates;                    // 0x1838(0x000C) (NeedCtorLink)
	int                                                CurrentCrossTitleTitleIdIndex;                            // 0x1844(0x0004) (Transient)
	int                                                RemoteNumGoldenKeysAvailable;                             // 0x1848(0x0004)
	int                                                RemoteNumGoldenKeysEarned;                                // 0x184C(0x0004)
	TArray<struct FPendingClientTrainingMessage>       PendingClientTrainingMessages;                            // 0x1850(0x000C) (NeedCtorLink)
	class UMissionDefinition*                          CachedMissionDefForChapterHeader;                         // 0x185C(0x0004)
	class UWillowGFxMoviePressStart*                   PressStartMovie;                                          // 0x1860(0x0004) (Transient)
	TArray<unsigned char>                              TitleFileCache;                                           // 0x1864(0x000C) (Transient, NeedCtorLink)
	int                                                IsReReadingProfile;                                       // 0x1870(0x0004) (Transient)
	TArray<struct FPendingMissionRewardsData>          PendingMissionRewardsForOtherPlaythroughs;                // 0x1874(0x000C) (Transient, NeedCtorLink)
	int                                                MaxBackpackSlotsLoadedFromSavegame;                       // 0x1880(0x0004) (Transient)
	int                                                MaxBankSlotsLoadedFromSavegame;                           // 0x1884(0x0004) (Transient)
	TArray<class UCustomizationDefinition*>            ShiftAuthorizedCustomizations;                            // 0x1888(0x000C) (Transient, NeedCtorLink)
	float                                              MeleeSelfChance;                                          // 0x1894(0x0004) (Net, Transient)
	float                                              MeleeSelfChanceBaseValue;                                 // 0x1898(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MeleeSelfChanceModifierStack;                             // 0x189C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              KillSkillDurationMultiplier;                              // 0x18A8(0x0004) (Transient)
	float                                              KillSkillDurationMultiplierBaseValue;                     // 0x18AC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  KillSkillDurationMultiplierModifierStack;                 // 0x18B0(0x000C) (Const, Transient, NeedCtorLink)
	int                                                PlayerHasPlayedInPlaythroughThree;                        // 0x18BC(0x0004) (Transient)
	int                                                UseSprintFOV;                                             // 0x18C0(0x0004) (Transient)
	int                                                LilacWeaponsRestrictionActive;                            // 0x18C4(0x0004) (Transient)
	struct FName                                       SkillDefinitionForInjuredStrings;                         // 0x18C8(0x0008) (Transient)
	int                                                OverpowerChoiceValue;                                     // 0x18D0(0x0004) (Transient)
	TArray<struct FChosenVehicleCustomization>         ChosenVehicleCustomizations;                              // 0x18D4(0x000C) (Transient, NeedCtorLink)
	int                                                LastUpsellOfferId;                                        // 0x18E0(0x0004) (Transient)
	class UWillowGFxDialogBox*                         RetrievingEulaDlg;                                        // 0x18E4(0x0004) (Transient)
	int                                                LastEulaRequestId;                                        // 0x18E8(0x0004) (Transient)
	struct FScriptDelegate                             __OnDownloadPatcherFilesComplete__Delegate;               // 0x18EC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PreProfileWriteSaveComplete__Delegate;                  // 0x18F8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSkillGradeChanged__Delegate;                          // 0x1904(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSkillPointsChanged__Delegate;                         // 0x1910(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSkillTreeReset__Delegate;                             // 0x191C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSaveGameLoaded__Delegate;                             // 0x1928(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLoadLastSaveGameComplete__Delegate;                   // 0x1934(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSplitscreenJoinComplete__Delegate;                    // 0x1940(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCheckSaveGamesAvailableComplete__Delegate;            // 0x194C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeviceSelectionProcessComplete__Delegate;             // 0x1958(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnStartupDeviceSelectionComplete__Delegate;             // 0x1964(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSaveComplete__Delegate;                               // 0x1970(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnButtonClicked__Delegate;                              // 0x197C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerController");
		return ptr;
	}


	bool IsInfected();
	void DoInfectionDamage(float Damage, class UClass* DamageType);
	void DisplayShiftCommunicationFailedDialog();
	bool OnCanceledRetrievingEulaDialog(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnAcknowledgeMustSignEulas(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool HasSignedAllEulas();
	void EULAInteractionComplete(TArray<struct FEULAData>* EULAState);
	void ShowEULAScreen(TArray<struct FEULAData>* EulaChain);
	void SetVehicleSteeringMode(int Mode);
	int GetVehicleSteeringMode();
	void OnSelectOverpowerLevel(class UPlayerSaveGame* SaveGame, int OverpoweredDifficulty);
	void ClientIncrementOverpowerLevel(int IncrementAmount, int MaximumValue);
	void ServerIncrementOverpowerLevel(int IncrementAmount, int MaximumValue);
	void SetVehicleCustomizationForModule(class UVehicleFamilyDefinition* FamilyDef, int ModuleIdx, class UCustomizationDefinition* ChosenCustomization);
	class UCustomizationDefinition* GetVehicleCustomizationForModule(class UVehicleFamilyDefinition* FamilyDef, int ModuleIdx);
	static int GetMaximumPossibleOverpowerModifier();
	static int GetMaximumPossiblePlayerLevelCap();
	void QueuePullThePinNotification(class USwfMovie* ExternalClip);
	void SetSkillDefinitionForInjuredStrings(class USkillDefinition* SkillDef);
	void PopulateGameMissionDataFromSavegame(int MissionPlaythroughIdx, int MissionDataIdx, const struct FMissionStatusPlayerData& SavedMStatus);
	bool ResetInfiniteVaultHunterPlaythrough(class UPlayerSaveGame* SaveGame, bool bApplyFromSaveGame);
	class UInjuredDefinition* GetInjuredDefinition();
	bool IsAutoAimEnabled();
	void ClientUnregisterPlayerWithSession(class APlayerReplicationInfo* PRI);
	void SetBackpackSortPreference(int NewPreference);
	int GetBackpackSortPreference();
	void ResetFocusCam();
	struct FName TranslateLevelToBaseName(const struct FName& LevelName);
	static bool PS3UseCircleToAccept();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	bool AllowTextMessage(const struct FString& msg);
	bool IsGuestLogin();
	void Behavior_QueuePersonalEcho(class UWillowDialogEventTag* InEventTag, class UGearboxDialogGroup* InGroup);
	void ClientShowCustomizationFanfare(unsigned char Type);
	void TryCustomizationFanfare(class AWillowInventory* WInv);
	void HandleBadassSkillActivation();
	void ServerSetBadassSkillDisabled(bool bDisabled);
	void SetBadassSkillDisabled(bool bDisabled);
	void ToggleBadassSkill();
	bool IsBadassSkillDisabled();
	void ClearDownloadPatcherFilesCompleteDelegate(const struct FScriptDelegate& DownloadPatcherFilesCompleteDelegate);
	void AddDownloadPatcherFilesCompleteDelegate(const struct FScriptDelegate& DownloadPatcherFilesCompleteDelegate);
	void DownloadPatcherFilesComplete();
	void OnDownloadedPatcherFile(bool bWasSuccessful, const struct FString& Filename);
	void HandleDownloadPatcherFileResponse(struct FSparkResult* Result);
	void DownloadPatcherFiles();
	void TryShowNewPlaythroughNotification();
	void ClearBlackMarketInventory();
	void ClientNotifyNewGameStarted();
	void InitializeViewWanderingFor(class UWeaponTypeDefinition* WeaponDef);
	bool OnGoldenKeyNotificationDismissed(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void CheckNotifyNewGoldenKeys();
	void CheckForGoldenKeys();
	void WriteGoldenKeyListToProfile(TArray<struct FGoldenKeySource> FullKeyList);
	void GatherGoldenKeysFromDlc();
	TArray<struct FGoldenKeySource> GetAllAcquiredGoldenKeyData();
	struct FGoldenKeySource GetNextUnspentGoldenKey();
	bool AddGoldenKeysFromSource(unsigned char SourceId, int NumKeys);
	int GetNumGoldenKeysAcquired();
	int GetNumGoldenKeysAvailable();
	void SpendGoldenKey();
	void ExecFor(int controllerIdx, const struct FString& Command);
	bool PreviousGamePlayersThanked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void UnlockCustomizationListFromKeyedPool(TArray<class UKeyedItemPoolDefinition*> KeyedPoolList);
	void UnlockLoyalCustomerCustomizations();
	void EndGetNumCrossTitleSaveGames(bool bWasSuccessful);
	void BeginGetNumCrossTitleSaveGames();
	TArray<int> GetAlternateTitleIds();
	void NewsRetrieved(unsigned char RetrievealResult, class USparkNews* newsObj);
	void TryConsumeSparkGoldenKey();
	void OnEntitlementsUpdated(class UGearboxAccountData* GbxAccount);
	void OnSparkEmergencyMessageUpdated();
	void ResetMOTD(bool bDelay);
	void OnSparkInitialized(unsigned char InitializedResult);
	void ServerSkipMatinee();
	void SkipMatinee();
	void KillEnemies();
	void OnPetNoLongerTargetedByAI(class AWillowAIPawn* Pet, class AWillowMind* AIMind);
	void OnPetTargetedByAI(class AWillowAIPawn* Pet, class AWillowMind* AIMind);
	void DeveloperDemigod();
	void ServerDeveloperDemigod();
	void DeveloperLoaded();
	void ServerDeveloperLoaded();
	void DeveloperSpawnAwesomeItems();
	void ServerDeveloperSpawnAwesomeItems();
	void ServerDeveloperKillEnemies();
	void DeveloperUnlockAllCustomizations();
	void DeveloperUnlockAnAchievement(int TitleId);
	void ReadAchievements(int TitleId, const struct FScriptDelegate& CompleteDelegate);
	void GetAchievementDetails(int TitleId);
	void ShowMissionWeaponTraining(class AWillowWeapon* MissionWeapon);
	void Behavior_Destroy();
	void SaveQueuedTrainingMessageData(class UPlayerSaveGame* SaveGame);
	void ApplyQueuedTrainingMessageData(class UPlayerSaveGame* SaveGame);
	void ServerComputeLockoutTimeAdjust(int ClientPackedSystemTime);
	void ClientSetLockout(class ULockoutDefinition* LockoutDef);
	int ComputeLockoutTimeAdjust(int ClientPackedSystemTime);
	void SetLockout(class ULockoutDefinition* LockoutDef);
	void SaveLockoutData(class UPlayerSaveGame* SaveGame);
	void ApplyLockoutData(class UPlayerSaveGame* SaveGame);
	void ClientStartFade(float InFadeOpacity, float InFadeDuration, const struct FColor& InFadeColor);
	void OnCameraFade(class USeqAct_CameraFade* Action);
	void FlushNetDriver();
	void ClientHostLeavingGame();
	void NotifyHostLeavingGame();
	void DisplaySubtitle(const struct FString& msg);
	void ClearTrackedChallenges();
	void DisplayTrackedChallenges(class AHUD* aHUD, float* out_YL, float* out_YPos);
	void UntrackChallenge(class UChallengeDefinition* ChallengeDef);
	void UpdateLcdWatchedChallenges();
	void TrackChallenge(class UChallengeDefinition* ChallengeDef);
	int GetCurrentChallengeLevel(class UChallengeDefinition* ChallengeDef);
	void TrackChallengeToggle(class UChallengeDefinition* ChallengeDef);
	bool IsTrackedChallenge(class UChallengeDefinition* ChallengeDef);
	int FindTrackedChallengeIndex(class UChallengeDefinition* ChalDef);
	unsigned char GetRestoreNetworkType(class UOnlineGameSettings* GameSettings);
	void OnCausePlayerDeath(class USeqAct_CausePlayerDeath* inAction);
	void CausePlayerDeath(bool bInstaKill);
	void UnregisterPlayerStandIn(class APlayerStandIn* StandIn);
	void RegisterPlayerStandIn(class APlayerStandIn* StandIn);
	void ClientToggleTelescopeOverlay(bool bEnabled);
	void ClientCloseProjectedMenus();
	void ConditionalShowHUDForAllPlayers();
	void HideAsyncCharacterLoadDialog();
	void ShowAsyncCharacterLoadDialog();
	void NotifyReadyToLoadPendingSavegame();
	void ClearWaitingForAsyncCharacterLoadAndHideBusyDialog();
	void SetWaitingForAsyncCharacterLoadAndShowBusyDialog();
	static bool AreAnyPlayersWaitingOnAsyncCharacterLoad();
	void RunStreamingDataEvent(const struct FName& EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, int IntParam, float FloatParam);
	void SetPendingClassSwitch(class UPlayerClassDefinition* InPlayerClass, class AWillowPlayerPawn* InPawnArchetype);
	bool ErrorDialogClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool AreAllPlayersLoggedIn(bool bRequireOnlineLogin);
	void PromptAndKickNonLocalPlayers();
	void ShowServerBrowser(bool bIsLanBrowser);
	void NotifyUIRefresh();
	void OnDestroyGameForSystemLinkComplete(const struct FName& SessionName, bool bWasSuccessful);
	void TransitionToSystemLink();
	bool OnKickNetworkedPlayersForSystemLink_Confirm(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void NotifyUIAddSplitPlayer();
	void NotifyUIClearPendingSplitJoin();
	void AttemptSystemLinkTransition(bool bPrompt);
	void EndUpdatingSession();
	void BeginUpdatingSession();
	bool OnPurchaseCanceled(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnPurchaseRequest(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnOfflineWarning_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void CheckChatDisabled(int ControllerId);
	void OnCreateGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void OnDestroySystemLinkForInternetGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void DestroyOnlineGameWithDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate);
	void TransitionToInternetGame();
	bool OnKickNetworkedPlayersForInternetGame_Confirm(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void AttemptInternetTransition(unsigned char InviteType, bool bPrompt);
	bool CheckCanCreateOnlineGame(bool bPrompt);
	bool CheckCanCreateLanGame(bool bPrompt);
	bool DownloadCompatibilityPack(int ControllerId);
	bool OnDialogClickDownloadCompatibilityPack(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnDialogClickShowLogin(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void OnDestroyGameForOfflineComplete(const struct FName& SessionName, bool bWasSuccessful);
	void TransitionToOffline();
	bool OnKickNetworkedPlayersForOffline_Confirm(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void AttemptOfflineTransition(bool bPrompt);
	void OnUpdateComplete(const struct FName& SessionName, bool bWasSuccessful);
	void AttemptInternetInviteTypeTransition(unsigned char InviteType, bool bPrompt);
	bool CheckCanUpdateInviteType(unsigned char InviteType, bool bPrompt);
	bool CheckMatchmakingEnabled(bool bPrompt);
	bool IsPublicModeDisabled();
	bool IsMatchmakingDisabled();
	void AttemptNetworkTransition(unsigned char NetworkType, unsigned char InviteType, bool bPrompt);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevSpectatorPoint();
	void ViewPrevSpectatorPoint();
	void ServerViewNextSpectatorPoint();
	void ViewNextSpectatorPoint();
	void ServerViewFirstSpectatorPoint();
	void ViewFirstSpectatorPoint();
	void ClientShowGenericRevive(class UGenericReviveMessageDefinition* ReviveDef, class APlayerReplicationInfo* OtherPRI, bool bIsOtherEventParticipant);
	class AWillowMind* GetAWillowMind();
	class AWillowPlayerController* GetAWillowPlayerController();
	class AController* GetABaseController();
	void PreClientTravel(const struct FString& PendingURL, unsigned char TravelType, bool bIsSeamlessTravel);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void ClientForceCancelMapChange();
	void CinematicAutoSkip(const struct FString& Arg);
	bool ToggleCinematicAutoSkip();
	void SetCinematicAutoSkip(bool bInSkip);
	void DumpBlackMarketUpgrades();
	void ClientBlackMarketUpgradePurchased(int UpgradeIndex);
	void ServerPurchaseBlackMarketUpgrade(class UInventoryBalanceDefinition* BalanceDef);
	void PurchaseBlackMarketUpgrade(class UInventoryBalanceDefinition* BalanceDef);
	int LookupBlackMarketUpgradeIndex(class UInventoryBalanceDefinition* BalanceDef);
	void IncBlackMarketUpgrade(int Index);
	int GetBlackMarketUpgrade(int Index);
	void VerifyBlackMarketUpgradesLength(int Min);
	void UnregisteredControllerButtonPress(int ControllerId);
	bool HasAnyInviteDialogsOpen();
	void DebugEnablePCSplitscreen(bool bEnabled);
	void OnJoinTravelToSessionComplete(const struct FName& SessionName, bool bWasSuccessful);
	void OnDestroyForTravelComplete(const struct FName& SessionName, bool bWasSuccessful);
	void ClientTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo);
	void StopLoopingSound(const struct FAkPlayingInfo& Sound, class UAkEvent* StopAkEvent);
	bool IsSoundPlaying(const struct FAkPlayingInfo& Sound);
	void StopMusicVolumeSound();
	void PlayMusicVolumeSound();
	void StopSFXVolumeSound();
	void PlaySFXVolumeSound();
	void StopVOVolumeSound();
	void PlayVOVolumeSound();
	void HideGameMessage();
	void ClientDisplayWaitingMessage(class APlayerReplicationInfo* OtherPRI);
	void DisplayGameMessage(unsigned char MessageType, float Duration, const struct FString& Message, const struct FString& Subtitle);
	void PushToTalkStop();
	void PushToTalkStart();
	void StartTextChat();
	class UTextChatGFxMovie* GetTextChatMovie();
	class UOnlineMessageGFxMovie* GetOnlineMessageMovie();
	void ClientKickedPartyKill();
	void CheckStat(const struct FName& StatName);
	void CheckNotifyPlaythroughThree();
	void ShowPlaythrough3Message();
	void ClientGenericPlayerInitialization();
	void TryRegisterStandIns();
	void SharedPlayerInitialization();
	void CreateSaveGameReplicationChannel();
	void GenericPlayerInitialization();
	bool OnFastForward_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool CanPromptForFastForward();
	bool IsFastForwardPromptValid();
	void TryPromptForFastForward();
	void UpdateHUDMinimapRadius(bool bInVehicle, float LerpTime);
	void TurnOffCinematicMode();
	void UpdateMissionWeaponRestrictionContextualPrompt();
	void ClearContextualPromptScreen();
	void HideContextualPrompt();
	void ShowContextualPromptEx(unsigned char PromptScreen, class UObject* ContextObject, const struct FString& ContextString, const struct FString& TrainingString, const struct FString& TitleString, float Duration);
	void ShowContextualPrompt(unsigned char PromptScreen, class UObject* ContextObject, const struct FString& ContextString, float Duration);
	void RetryContextualPrompt();
	void TestContextualPrompt(unsigned char PromptScreen);
	void ServerIncrementStatByValue(const struct FName& StatName, int Value);
	void ServerIncrementStat(const struct FName& StatName);
	bool ConditionalIncrementTechWeaponPickedUpStat(class UWillowDamageTypeDefinition* WillowDamageTypeDef);
	void IncrementUsedItemStat(const struct FName& StatName);
	void NotifyShotStatus(class UClass* DamageTypeClass, const FScriptInterface& DamageCauser, bool bMiss, bool bKill);
	void OnUpdateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void ClientSetSessionInviteFlags(const struct FName& SessionName, bool bAllowInvites, bool bAllowJoinViaPresence, bool bAllowJoinViaPresenceFriendsOnly);
	void CharacterSelected();
	void ServerPlayerSelectedCharacter();
	void ServerPlayerOpenedCharacterSelect();
	void CheckIntroMovieComplete();
	void ClientPlayIntroMovie();
	class UWillowHUDGFxMovie* GetHUDMovie();
	void NotifyInviteFailed();
	void NotifyNeedsCompatibilityContent();
	void NotifyNotEnoughSpaceInInvite();
	void NotifyNotAllPlayersCanJoinInvite();
	void HandleInviteFailure(const struct FString& DialogSection);
	int GetSkillGradeByDef(class USkillDefinition* SkillDef);
	struct FString GetBadassRewardsString();
	struct FString GetBadassSkillPresentedValue(class UBadassRewardDefinition* RewardDef);
	float GetBadassSkillActualValue(class UBadassRewardDefinition* RewardDef);
	int GetBadassRewardsEarned(int RewardIndex);
	void SetBadassRewardsEarned(int RewardIndex, int NewRewardValue);
	void ServerSetBadassRewardsEarned(int RewardIndex, int NewRewardValue);
	void ServerAwardBadassReward(int RewardIndex);
	void AwardBadassReward(int RewardIndex);
	class UBadassRewardDefinition* GetBadassReward(int Index);
	int GetBadassRewardCount();
	void ResetBadass();
	int BadassRanksPerToken(int TokenNumber);
	int TokensDue();
	int GetBadassPointsForNextRank();
	int GetBadassPointsForCurrentRank();
	int GetBadassPointsForRank(int Rank);
	int GetBadassRankForPointsSpent(int PointsSpent);
	int GetBadassPointsPerRank();
	int GetNumUniqueBadassRewardsEarned();
	int GetBadassTokensSpent();
	void SpendBadassTokens(int TokensSpent);
	void AddBadassTokens(int AdditionalTokens);
	void AdjustBadassPoints(int Adjustment);
	void AdjustBadassPointsSpent(int Adjustment);
	void SetBadassPoints(int NewValue);
	void SetBadassPointsSpent(int NewValue);
	int GetBadassTokensAvailable();
	int GetBadassPointsSpent();
	int GetBadassPoints();
	int GetBadassPointsCostOfNextRank();
	int GetBadassPointsSpentOnNextRank();
	int GetBadassPointsAvailable();
	int GetBadassRank();
	void ClientYouNeedThisPackage(const struct FString& PackageString);
	void ServerUpdateOnDemandPackageStatus(const struct FString& PackageString, bool bIsLoaded);
	void ClientWhatPackagesHaveYou();
	void RetryChapterHeader();
	void ClientShowChapterHeader(class UMissionDefinition* MissionDef);
	void ServerShowChapterHeader(class UMissionDefinition* MissionDef);
	void ServerClearCustomizations();
	void ClearCustomizations();
	void WriteCustomizationUnlocksToProfile();
	void ReadCustomizationUnlocksFromProfile();
	void WriteStashToProfile();
	void FillEmptyStorageBuffer(TArray<unsigned char>* Buffer);
	void CopyToStorageBuffer(const struct FInventorySerialNumber& SerialNumber, TArray<unsigned char>* Buffer);
	void ReadStashFromProfile();
	void CopyFromStorageBuffer(class UWillowInventoryStorage* Storage, TArray<unsigned char>* Buffer);
	void OnChestOpened(class UWillowInventoryStorage* Storage);
	void OnChestClosing(class UWillowInventoryStorage* Storage);
	bool CanDrop(class AWillowInventory* Inv);
	void OnStandInSaveGameLoaded(unsigned char LoadGameResult);
	void OnUpdatePropertyFOVAngle();
	void ReactToPrimaryStatusEffect(class UStatusEffectDefinition* StatusEffect);
	void DebugDiscoverAllAreasInCurrentMap();
	void ServerAwardExperienceForWorldDiscovery(class AWorldDiscoveryArea* DiscoveryArea);
	void HandleWorldDiscoveryCompletion(class ULevelDependencyList* SourceList);
	void ClientSetCurrentMapFullyExplored();
	void CheckForExplorationAchievements();
	bool HandleWorldAreaDiscovery(const struct FName& DiscoveryName, const struct FString& WorldAreaName, class UAkEvent* SoundEvent, bool bForFogOfWarOnly);
	void TEST_ServerPrintInv();
	void SellAllTrash();
	void ClientTradeFinished(unsigned char Reason);
	void ServerRequestTrade();
	bool CanBeginTrade(class AWillowPlayerController* Partner, class AWillowPlayerReplicationInfo* PartnerPRI);
	class AWillowPlayerReplicationInfo* GetTradePartnerPRI();
	class AWillowPlayerController* GetTradePartner();
	void AttemptTrade();
	void ActionSkillCooldownComplete();
	void SetUseRealTimeForWeaponZoom(bool bUseRealTime);
	void SetWindowTitle(const struct FString& NewTitle);
	void ChangeWindowTitle(const struct FString& NewTitle);
	class UWillowGFxThirdPersonMovie* GetThirdPersonMovie();
	bool WantsThirdPersonMenu();
	void HandleSkillTreeReset(int SkillPointsReturned);
	void NotifyDamageDealt(class APawn* DamagedPawn, struct FDamageEventSummary* DamageSummary);
	void ClientShowVSSInUseMessage();
	void RouteCallToSetVehicleFamily(class UVehicleFamilyDefinition* TheVehicleFamilyDef);
	void RouteCallToServerChangeSeat(int RequestedSeat);
	bool TrySeatSwapClient();
	void ClientUpdatePosition();
	void PlayUIAkEvent(class UAkEvent* Event);
	bool RefreshBalanceDataFromMissionCompletion(class UMissionDefinition* MissionDef);
	bool ResetGameStageForRegion(class URegionDefinition* Region);
	class AWillowPlayerPawn* GetWillowPlayerPawn();
	void SetGameStageForRegion(class URegionDefinition* Region, int GameStage);
	int GetGameStageFromRegion(class URegionDefinition* Region);
	void NavMeshWalking();
	void ServerDebugActionSkill();
	void DebugActionSkill();
	void ServerResetCooldown();
	void ResetCooldown();
	void ToggleMeleeSkillDebug();
	void DebugMeleeSkill();
	void ServerResetMeleeCooldown();
	void ResetMeleeCooldown();
	void ClientReceiveChallenge(class UChallengeDefinition* ChalDef);
	bool ChallengeExistsInChallengeList(class UChallengeDefinition* ChalDef);
	void CompleteChallengeIfConditionsMet(class UChallengeDefinition* ChalDef);
	void ReceiveChallenge(class UChallengeDefinition* ChalDef, bool bIsCharacterLoad, bool bGiveToAllPlayers);
	bool SelectInputContext();
	void UpdateInputContext();
	void AltSaveGameLoaded(bool bWasSuccessful);
	void LoadAltSaveGame(const struct FString& Filename);
	void ReadCrossTitleSaveGamesComplete(bool bWasSuccessful);
	bool ReadNextCrossTitleSaveGameList(const struct FScriptDelegate& ReadCrossTitleContentCompleteDelegate, int StorageDeviceId);
	void ReadCrossTitleSaveGameList(int StorageDeviceId);
	void GetAltSaveGameList();
	void SortMarketplaceContentByOfferId(bool bDescending, TArray<struct FMarketplaceContent>* ContentList);
	bool IsStationToUninstalledDlc(const struct FName& StationDefinitionName);
	void ServerInitClientFlags();
	void ClientFlagSet(const struct FName& ClientFlag, bool bEnable);
	void NotifyDesignerAttribute(const struct FName& Attribute, float Value);
	void ServerSendInitialColiseumStat(int InitialKillCount);
	void ClientCatchUpColiseumOverlay(class UWillowGFxColiseumOverlayDefinition* OverlayDef, int CurrentRound, int CurrentWave, int MaxRounds, class UColiseumRuleDefinition* Rule1, class UColiseumRuleDefinition* Rule2, class UColiseumRuleDefinition* Rule3, class UColiseumRuleDefinition* Rule4);
	void ClientAnnouncePenaltyBox();
	void OnColiseumAnnouncePenaltyBox(class UWillowSeqAct_ColiseumAnnouncePenaltyBox* Sequence);
	void ClientCloseCertificateScreen();
	void ServerCertificateClosed();
	void ClientColiseumAwardCertificate();
	void ClientCloseResultsScreen();
	void ServerResultsScreenClosed(const struct FName& ResultsClosedEvent);
	void ClientShowColiseumDefeatedScreen(bool bEnableGamerCardUI);
	void ClientShowColiseumVictoryScreen(bool bEnableGamerCardUI);
	void ClientPublishColiseumStatDelta(const struct FString& CharacterName, class APlayerReplicationInfo* PRI, unsigned char StatType, int StatDelta);
	void ShowColiseumDefeatedScreen();
	void ShowColiseumVictoryScreen();
	bool IsEveryoneSignedIn();
	void ClientColiseumNotify(unsigned char NotifyType);
	void ClientRuleAnnounce();
	void ClientRoundAnnounce(int Round, int Wave, int MaxRound, const struct FString& HealthModText, const struct FString& DamageModTex, const struct FString& ShieldModTex);
	void BeginRoundAnnounce();
	void ClientStartColiseumTimer(unsigned char CountdownLength);
	void ClientCloseColiseumOverlay();
	void ClientUpdateColiseumRule(class UColiseumRuleDefinition* RuleInfo, unsigned char UpdateMode);
	int GetBankUpgradeSlots();
	void GetFullInventory(TArray<class AWillowInventory*>* FullInv);
	void SaveScreenShotOfItemCard(class AWillowInventory* WInv);
	void FastAI();
	bool OnConnectionFailed_Click(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnConnectionCancel_Click(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void OnConnectionFailed(const struct FString& failedStr);
	void ClearInviteDelegates();
	void UpdateConnecting();
	void SetRemainingConnectionDuration(int ConnDuration);
	void HideConnectingDialog();
	void ShowConnectingDialog(bool bCanCancel);
	void PlaySpecialHUDSound(const struct FString& HUDSound);
	bool CanAllPlayersPlayOnline();
	void ClientReceiveInteractiveObjectDefinition_HACK(class AWillowInteractiveObject* InteractiveObject, class UInteractiveObjectDefinition* Definition);
	void ServerSendInteractiveObjectDefinition_HACK(class AWillowInteractiveObject* InteractiveObject);
	bool IsInactiveController(int ControllerId);
	bool OnConfirmKickPlayersForInvite(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnKickNetworkedPlayersForInvite_Confirm(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnConfirmPS3Controller(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void OnGameInviteAcceptedCheckController(struct FOnlineGameSearchResult* InviteResult);
	bool GameHasNonLocalPlayers();
	void NonPrimaryOnGameInviteAccepted(int InvitedControllerId, const struct FOnlineGameSearchResult& InviteResult);
	void InnerOnGameInviteAcceptedP(int P, struct FOnlineGameSearchResult* InviteResult);
	bool NeedsCompatibilityContent();
	void PreInviteSaveAllPlayersComplete();
	void OnDownloadPatcherFilesForInvite();
	void PostDlcRefreshForInvite();
	bool OnUninstalledDlcInvite_Click(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void DlcRefreshCompleteFromBusy();
	void OnGameInviteAcceptedP(int P, struct FOnlineGameSearchResult* InviteResult);
	bool DlcPreInviteRefreshCompleteCorruptConent(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void DlcPreInviteRefreshComplete();
	void ShowCorruptDlcOkBox(const struct FScriptDelegate& OnClicked);
	bool OnButtonClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void NotifyGameInviteProcessingStarted();
	void SetResurrectionRule();
	void AllPlayersSaved();
	void SaveNextPlayer(float SaveDuration);
	void SavePlayer(class AWillowPlayerController* PlayerToSave);
	bool SaveAllPlayers(bool bReturnToTitle, const struct FScriptDelegate& OnSaveCompleteDelegate, bool bSuppressDialog);
	void OnSaveComplete();
	void UnpauseEcho();
	void PauseEcho();
	bool SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate);
	void SetTextureMoviePauseState(bool bShouldPause);
	bool VerifySkillRespec_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void VerifySkillRespec();
	void OnInviteJoinComplete(const struct FName& SessionName, bool bWasSuccessful);
	void InstantJoinOnlineGame();
	void OnDestroyForInviteComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool CanSaveGame();
	void ResetPlayerInputToDefault();
	void UpdateHUDCachedXPValue(int ExpPoints);
	void TestTrainingText(const struct FString& TrainingText);
	struct FString GetMissionDescriptionForUI(class UMissionDefinition* MissionDef, bool bShowTurnInDescriptionWhenReadyToTurnIn, bool bShowTeaserTextIfFailed, bool bUseWorldState);
	bool SystemIsSetToKOROrJPNLocale();
	bool CanUnpauseExternalUI();
	void UpdateAmmoCounts(bool bSilent);
	void ListFriends();
	void msg(const struct FString& FriendName, const struct FString& Message);
	void ForceUnloadStreamingLevels();
	void OnJoinGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void JoinFriendGame(int ControllerId, const struct FUniqueNetId& FriendId);
	bool IsPlayerInMyGame(const struct FUniqueNetId& UniqueId);
	bool GetFriendByName(const struct FString& FriendName, struct FOnlineFriend* Friend);
	void TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ListNetPackages();
	void ListStations();
	void OnPrimaryPlayerBusyDelay(class USeqAct_PrimaryPlayerBusyDelay* Action);
	bool GetWaitingForStorageSelectionFailure();
	void SetWaitingForStorageSelectionFailure(bool bWantsToShow);
	bool GetWaitingForStorageSelection();
	void SetWaitingForStorageSelection(bool bWantsToShow);
	bool GetWantsToShowStorageMenu();
	void SetWantsToShowStorageMenu(bool bWantsToShow);
	void SetActionSkillTime();
	void PreOnGameInviteAccepted();
	bool GetPlayerLoot(int CustomGameStage, int CustomAwesomeLevel, const struct FName& CustomConfiguration, TArray<struct FSpawnedDroppedLootData>* SpawnedLoot);
	void RefreshHUD();
	void KillHUD();
	bool CanSetResourcePoolValues(class UClass* ResourcePoolClass);
	void PauseDayCycle();
	void OnMarkExitedRegion(class UWillowSeqAct_MarkExitedRegion* inAction);
	void OnMarkEnteredRegion(class UWillowSeqAct_MarkEnteredRegion* inAction);
	void ConditionalUnlockViralAchievement();
	bool CanSpreadViralAchievement();
	void NotifyKilledEnemy(const struct FString& EnemyName);
	bool ShouldAllowExternalUIPause();
	void OnExternalUIChanged(bool bIsOpening);
	void CheckCanPauseFromExternalUINow();
	void MarkLog(const struct FString& TagString);
	void ToggleCoopRangeDebug();
	unsigned char GetLoginStatus();
	float GetFOVAngleForeground();
	class AWeapon* GetActiveOrBestWeapon();
	void ModalGameMenuClosing();
	void ModalGameMenuOpening();
	void HideInfectionBarTemporarily();
	void SetViewDistance(int Value);
	void SetGlobalViewDistance(unsigned char ViewDistance);
	void SetZoomToggle(bool bEnabled);
	void SetTradingDisabled(bool bEnabled);
	void SetInvertedReverseSteering(bool bEnabled);
	void SetDriftCameraLock(bool bEnabled);
	void SetCrouchToggle(bool bEnabled);
	void SetMouseAutoAim(bool bEnabled);
	void SetAutoAim(bool bEnabled);
	void DisplaySkillPointsPrompt(int PointsRemaining);
	void DisplayCompatDlcAvailable();
	void OnSplitJoinDeviceSelectionComplete(class AWillowPlayerController* PC, bool bHasValidDevice);
	void StartupLoadLastSaveGameComplete();
	void StartupLoadLastSaveGame(bool bHasValidDevice);
	void StartupCheckSaveGamesAvailableComplete(bool bSaveGamesAvailable);
	void StartupDeviceSelectionComplete(class AWillowPlayerController* WPC, bool bHasValidDevice);
	void DoStartupDeviceSelection(const struct FScriptDelegate& StartupDeviceSelectionCompleteDelegate);
	void OnStartupDeviceSelectionComplete();
	bool NoDeviceSelected_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool DeviceSelection_GuestLogin_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool DeviceSelection_NotLoggedIn_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void SetDoneInitialDeviceSelection(bool bDone);
	bool HasDoneInitialDeviceSelection();
	void DoDeviceSelection(const struct FScriptDelegate& DeviceSelectionProcessCompleteDelegate);
	void DoInitialDeviceSelection(const struct FScriptDelegate& DeviceSelectionProcessCompleteDelegate);
	void TriggerDeviceSelectionProcessCompleteDelegate(bool bHasValidDevice);
	void OnDeviceSelectionProcessComplete(class AWillowPlayerController* PC, bool bHasValidDevice);
	void DeviceSelectionDone(bool bWasSuccessful);
	bool ShowStorageDeviceSelector(bool bForceShow);
	bool StorageRemoved_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnStorageRemovedInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	void DisplayStorageRemovedMenu();
	bool IsCurrentStorageDeviceValid();
	void SetHasSaveGamesAvailable(bool bNewHasSavesAvailable);
	bool GetHasSaveGamesAvailable();
	void NotifyStorageDeviceChange();
	int GetStorageDeviceID();
	void ShowDeviceSelection();
	void SetStorageDeviceID(int DeviceID);
	void NotifyDeviceSelectComplete(bool bWasSuccessful);
	void DeveloperCompleteAllChallengesToLevel(int Level);
	void ServerDeveloperCompleteAllChallengesToLevel(int Level);
	void DeveloperGiveCurrency(unsigned char FormOfCurrency, int Amount);
	void ServerDeveloperGiveCurrency(unsigned char FormOfCurrency, int Amount);
	void DeveloperGiveEridium(int Amount);
	void DeveloperGiveCash(int Amount);
	void DeveloperFreeLevels(int numLevels);
	void ServerDeveloperFreeLevels(int numLevels);
	bool IsDeveloper();
	void GetHighestSaveGameComplete(bool bWasSuccessful);
	void CheckHighestSaveGameIdForSplitScreen(int CurrentHighest);
	void GetHighestSaveGameId();
	void AddMissionPlaythrough(int PlayThrough);
	void AddPlaythrough(int PlayThrough);
	int GetSplitscreenIndex();
	int GetCurrentPlaythrough();
	void OnPlaythroughAlmostComplete(int PlayThroughNumber);
	void OnPlaythroughCompleted(int PlayThroughNumber);
	struct FString GetCharacterDefaultNameFromClassDefinition(class UPlayerClassDefinition* PlayerClassDef);
	struct FString GetCharacterClassDefaultName();
	void GetPlayerUIColorPreference(struct FColor* PrimaryColor, struct FColor* SecondaryColor, struct FColor* TertiaryColor);
	void GetPlayerUINamePreference(struct FString* CharacterName);
	void GetPlayerUIPreferences(struct FString* CharacterName, struct FColor* PrimaryColor, struct FColor* SecondaryColor, struct FColor* TertiaryColor);
	void ApplyPreferredColors();
	void ServerApplyPreferredColors(const struct FColor& PrimaryColor, const struct FColor& SecondaryColor, const struct FColor& TertiaryColor);
	void SetPlayerUIPreferences(const struct FString& CharacterName, const struct FColor& PrimaryColor, const struct FColor& SecondaryColor, const struct FColor& TertiaryColor);
	void SetPlayerUINamePreference(const struct FString& CharacterName);
	void UnregisterSkillTreeResetDelegate();
	void RegisterSkillTreeResetDelegate(const struct FScriptDelegate& SkillTreeResetDelegate);
	void FireSkillPointsChangedDelegates(int NumSkillPoints);
	void UnregisterSkillPointsChangedDelegate(const struct FScriptDelegate& SkillPointsChangedDelegate);
	void RegisterSkillPointsChangedDelegate(const struct FScriptDelegate& SkillPointsChangedDelegate);
	void UnregisterSkillGradeChangedDelegate();
	void RegisterSkillGradeChangedDelegate(const struct FScriptDelegate& GradeChangedDelegate);
	void ServerTeleportPlayerToStation(class UTravelStationDefinition* StationDefinition);
	void TeleportPlayerToStation(const struct FName& StationDefinitionName);
	void ClientReturnToTitleScreen();
	bool EnableListenServer(bool bEnable);
	bool CreateListenServer();
	bool CreateLanGame();
	bool CreateOnlineGame();
	bool CreateOnlineOrLanGame();
	bool CreateGame();
	void ClientSetRestartPlayerAfterLogin(bool bShouldRestart);
	void openlArg(const struct FString& openurl, bool bDontRestartPlayer);
	void openl(const struct FString& openurl);
	void GFxMenuClosed();
	void GFxMenuOpened();
	void UpdateClassModNamePart(class UItemNamePartDefinition* ClassModNamePart);
	void EquipWeaponFromSlot(unsigned char QuickSlot);
	void GetInventoryLists(unsigned char MaxDroppability, TArray<class AWillowWeapon*>* ReadiedWeapons, TArray<class AWillowWeapon*>* UnReadiedWeapons, TArray<class AWillowItem*>* AllItems);
	void FixAllItemsList(unsigned char MaxDroppability, TArray<class AWillowItem*>* AllItems);
	bool CanKillSkillIconsBeDisplayedFromVehicles(bool bWhileDrivingOrGunning, bool bWhileAttachedRiding);
	void ToggleKillSkillsDisplay(bool bEnable);
	void ForceKillSkillsOff();
	bool UpdateKillSkills(bool bEnable);
	void TickTargets();
	void NotifyInstinctSkillAction(unsigned char SkillAction);
	bool CanResetActionSkill();
	void ResetActionSkill();
	void Behavior_ResetActionSkillCooldown();
	void ConditionalResetInterruptedActionSkill();
	void ResetSkillCooldown();
	float GetSkillCooldownTimeRemaining();
	float GetSkillCooldownTime();
	void StartActiveSkillCooldown();
	void TryPreferredStat(const struct FName& StatId, int MyIdx, int* BestCount, struct FName* BestName, int* BestIdx);
	struct FName GetPreferredWeaponType();
	struct FName GetPreferredManufacturer(int* BestMfgIdx);
	void ClientFindPlayMovie(const struct FName& LevelName);
	class AWillowPlayerController* GetPlayerMasterPlayerController();
	bool IsActionSkillCoolingDown();
	bool IsActionSkillOnCooldown();
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	class APawn* GetInstanceDataPawn();
	void IncreaseStatForAllPlayers(const struct FName& StatName, int MinimumPlayersRequired, int IncrementBy);
	void ServerUnlockAchievementForAllPlayers(int AchievementId, int MinimumPlayersRequired);
	void Behavior_UnlockAchievementForAllPlayers(int AchievementId, int MinimumPlayersRequired);
	void Behavior_UnlockAchievement(int AchievementId);
	void ApplySkidCameraLurch(float DeltaTime, struct FVector* POVLocation, struct FRotator* POVRotation);
	void EndSprint();
	void BeginSprint();
	float CalculateInverseFlexibleFOVModifier(float InModifier);
	float CalculateInverseFlexibleFOV(float InVFOV);
	float CalculateFlexibleFOVModifier(float InModifier);
	float CalculateFlexibleFOV(float InVFOV);
	static float GetVerticalDefaultDefaultFOV();
	static float GetDefaultDefaultFOV();
	float GetUnmodifiedFOVAngle();
	void DisplayStationDiscoveryIfNecessary(class UTravelStationDefinition* StationDefinition, class APlayerReplicationInfo* DiscoveredBy);
	void SaveAtStationIfNecessary(bool bNewStation);
	void ClientNotifySomeoneTouchedStation(class UTravelStationDefinition* TravelStationDef, class ATravelStation* ActivatedStation, class APlayerReplicationInfo* InstigatorPRI, bool bFromLoad, bool bSetAsLastVisited);
	static void Behavior_RegisterStationDefinition(class UTravelStationDefinition* TravelDefinition, bool bSetAsLastVisited);
	void Behavior_RegisterStation(class ATravelStation* ActivatedStation, bool bFromLoad);
	void RegisterStationForPlayer(class UTravelStationDefinition* ActivatedStationDefinition, class ATravelStation* ActivatedStation, class APlayerReplicationInfo* DiscoveredBy, bool bFromLoad, bool bSetAsLastVisited);
	bool IsStationDiscovered(class UTravelStationDefinition* StationDefinition);
	void RegisterStation(class ATravelStation* ActivatedStation, bool bFromLoad);
	void FindActiveStationsForLevel(const struct FName& LevelName, TArray<struct FName>* ActiveStationDefinitionNames);
	void FindInitiallyActiveStations(const struct FName& LevelName);
	void StopMovie();
	void PlayMovie(const struct FString& MovieName);
	void ServerSendMessageToPlayers(bool bShouldSendToInstigator, class UClass* SendMsgClass, class APlayerReplicationInfo* PRI);
	void Behavior_SendMessageToPlayers(bool bShouldSendToInstigator, class UClass* SendMsgClass);
	void ReceiveLocalizedAmmoMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
	void ReceiveLocalizedCreditMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
	void ReceiveLocalizedItemMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FItemDefinitionData& ItemInfo);
	void ReceiveLocalizedWeaponMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FWeaponDefinitionData& WeaponInfo);
	void ReceiveLocalizedTrainingDefinitionMessage(class UClass* Message, class UTrainingMessageDefinition* TrainingDefinition, float Duration);
	void CheckPendingClientTrainingMessages();
	void QueueClientTrainingMessage(class UClass* Message, class UTrainingMessageDefinition* TrainingDefinition, float Duration);
	bool CanReceiveTrainingMessage();
	void ReceiveLocalizedInventoryRefreshMessage();
	void WarmupPause(bool bDesiredPauseState);
	bool CanUnpauseWarmup();
	void SetLoadingMovieSkipEnabled(bool bEnabled);
	void ClientPlayBinkMovie(const struct FString& MovieName, bool bStreamed, bool bLooping, bool bForceNoSkip);
	void WillowClientDisableLoadingMovie();
	void WillowClientShowLoadingMovie(const struct FString& MovieName, bool bShowMovie, bool bPauseAfterHide, float PauseDuration, float KeepPlayingDuration, bool OverridePreviousDelays, bool NoLooping);
	static void WillowShowLoadingMovie(const struct FString& MovieName, bool bShowMovie, bool bPauseAfterHide, float PauseDuration, float KeepPlayingDuration, bool NoLooping);
	void InitializeGFxUIManager();
	void ClientCloseLobby();
	void StartActionSkill();
	void TryOpenCharacterSelectUI();
	void ClientNotifyPostInitialize();
	void ClientSetHUD(class UClass* newHUDType, bool bShowLobby);
	bool IsCurrentLevelInTheGame();
	void ClientGFxStopMovie(const struct FName& MovieTag);
	void ClientGFxPlayMovie(class UGFxMovieDefinition* MovieDefinition, class UObject* OtherObject, const struct FName& MovieTag);
	void ClientGFxChangeState(const FScriptInterface& TargetActor, const struct FName& State, unsigned char Change, bool bAllPlayers);
	void ReadSaveGamesComplete(bool bWasSuccessful);
	void LoadGameFromLoadInfo(const struct FLoadInfo& LI1, const struct FLoadInfo& LI2, const struct FString& P2ClassName);
	void GetSaveGameList();
	void CheckSaveGamesAvailableCompleted(bool bSaveGamesAvailable);
	void ReadSaveGameListComplete(bool bWasSuccessful);
	void CheckPS3ReadSaveGameListComplete();
	void CheckSaveGamesAvailable(const struct FScriptDelegate& CheckSaveGamesAvailableCompleteDelegate);
	void OnCheckSaveGamesAvailableComplete(bool bSaveGamesAvailable);
	void ClientDamageShake(int Damage);
	void UpdateVisibilityOfAllActiveScreenParticles();
	bool ScreenParticlesShouldBeVisible();
	void SetUpVoGScreenParticle(class UParticleSystem* Template, const struct FName& TextureMovieParamName);
	void HideScreenParticle(class UParticleSystem* Template, const struct FName& ParticleTag, bool bAllowParticleToFinish);
	void ApplyScreenParticleModifiers(class UParticleSystem* Template, TArray<struct FScreenParticleModifier> ScreenParticleModifiers);
	int FindScreenParticleRecordIndexByTag(const struct FName& ParticleTag);
	int FindScreenParticleRecordIndexByTemplate(class UParticleSystem* Template);
	void OnScreenParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void ShowScreenParticle(const struct FScreenParticleInitParams& InitParams);
	void TickScreenParticleModifiers();
	void NotifyTargetedActionSkillImpact();
	void NotifyPetKilledEnemy();
	void NotifyActionSkillRunTime(int Runtime);
	void ClientUnlockAvatarAward(unsigned char AvatarAward);
	void ClientUnlockAchievement(int AchievementId);
	void OnUnlockAchievement(class USeqAct_UnlockAchievement* Action);
	void UnPauseGFxMovie(const struct FString& MoviePath);
	void PauseGFxMovie(const struct FString& MoviePath);
	void CloseGfxMovie(const struct FString& MoviePath);
	void StartPausedGfxMovie(const struct FString& MoviePath);
	void PlayGfxMovie(const struct FString& MoviePath);
	void PlayGfxMovieDefinition(const struct FString& MovieDefinitionName);
	void ServerTryToTeleportToVehicle(int SlotIndex, class UWillowGFxMovie* VSSUIMovie);
	void EnsureWeaponsUp();
	void DelayedTeleportToVehicle();
	void DespawnVehicleFromConnectedVehicleSpawnStationTerminal(int SlotIndex, class UVSSUIDefinition* FutureVehicleUIDef);
	void SpawnVehicleFromConnectedVehicleSpawnStationTerminal(int SlotIndex, class UVSSUIDefinition* VehicleUIDef, class UCustomizationDefinition* DesiredCustomization);
	void ServerStopUsingVehicleSpawnStationTerminal();
	void StopUsingVehicleSpawnStationTerminal();
	void StartUsingVehicleSpawnStationTerminal(class AVehicleSpawnStationTerminal* VSST);
	void OutOfDuelBounds();
	void SetDuelingEnabled(bool bDuelingEnabled);
	void SetHearOptionalPlayerVO(bool bValue);
	void EnterStartState();
	bool HasCachedSaveGame();
	class UPlayerSaveGame* GetCachedSaveGame();
	static void ClearRestartPlayerAfterLoginForAllLocalPlayers();
	void OnDestroyGameForReturnToTitleComplete(const struct FName& SessionName, bool bWasSuccessful);
	void OnEndGameForReturnToTitleComplete(const struct FName& SessionName, bool bWasSuccessful);
	void ReturnToTitleScreenAfterSave();
	void ReturnToTitleScreen(bool bSkipSave, bool bRemoveSplitPlayer);
	void ClearGameInviteDelegates();
	unsigned char GetGamePlayerIndex();
	void NotifyLoginChange(unsigned char LocalUserNum);
	void NotifyUILoginStatusChange(unsigned char LoginStatus);
	void OnDownloadPatcherFilesBeforeRestore();
	void HandleLoginStatusChange();
	void NotifyLoginStatusChange(unsigned char NewStatus, const struct FUniqueNetId& NewId);
	void HandleSignInChange();
	void CleanUpPlayerForTitleScreen();
	int GetNumCompletedMissions(int PlayThrough);
	void UpdateWillowProperties(int CurrPresenceMode, TArray<struct FSettingsProperty>* WillowProperties);
	void UpdateWillowContexts(TArray<struct FLocalizedStringSetting>* WillowContexts);
	void InnerSetOnlineStatus();
	void ClientSetOnlineStatus();
	void ClientSetOnlineStatusAllPlayers();
	bool IsCurrentGameFull();
	int GetNumPlayers();
	void OnStopCameraAnim(class UWillowSeqAct_StopCameraAnim* inAction);
	void OnPlayCameraAnim(class UWillowSeqAct_PlayCameraAnim* inAction);
	void WillowClientStopCameraAnim(bool bImmediate);
	void WillowClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, unsigned char Space, const struct FRotator& CustomPlaySpace, unsigned char MirrorAxes);
	void StopAnimSeqCameraAnim(bool bImmediate);
	void PlayAnimSeqCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime);
	void StopCameraAnim(bool bImmediate);
	void PlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, unsigned char MirrorAxes);
	void TeleportPlayersToTravelStation(class ATravelStation* Station);
	class ATravelStation* FindTravelStationByDefinition(const struct FString& StationDefinitionName);
	void TeleportPlayersToStation(const struct FString& StationDefinitionName);
	void UpdatePlayerName();
	void ServerSetPlayerName(const struct FString& PlayerName);
	void ServerSetIsGuest(bool bIsGuest);
	void RegisterCustomPlayerDataStores();
	void InvertMouseLook(bool InvertMouse);
	void InvertGamepadLook(bool InvertGamepad);
	int GetProfileSettingInt(int ProfileId, bool bShouldDisplayMessage);
	void SetProfileSettingInt(int ProfileId, int pVal, bool bDisplayDebugMessage);
	void ClientHandleKickedForNotHavingDlc(class UDownloadableExpansionDefinition* DlcExpansion);
	void ClientHandleKicked();
	void ClientWasKicked();
	void OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult);
	struct FString GetConnectionFailureNoticeMsg();
	void NotifyUILinkOn();
	void NotifyUILinkLost();
	void NotifyLinkStatusChange(bool bIsConnected);
	void ReceivedPlayer();
	void PostControllerIdChange();
	void PreControllerIdChange();
	void ClearOnlineDelegates();
	class UCharacterSelectionReduxGFxMovie* GetCharacterSelectMovie();
	class UFrontendGFxMovie* GetFrontendMovie();
	void UpdateLastNewOfferVersion();
	bool AreNewOffersAvailable();
	bool HasSeasonPassContentToInstall(bool bPreOrder);
	void RegisterOnlineDelegates();
	void OnSentGameInvite(unsigned char LocalUserNum, bool bWasSuccessful);
	void OnReceivedNewProfile();
	bool TryUpdateProfileCounts();
	void OnReadProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	void SetAudioGroupVolumesFromProfile();
	void SetAudioProfileAkRtpc(class UAkRtpc* RTPC, float Value);
	void UpdateFOVAspectRatioScalar();
	void SetVerticalSplit(bool bEnable);
	void SetSplitDirectionFromProfile();
	void SetPlayerFOVFromProfile();
	void SetGammaFromProfile();
	void HidePS3WritingProfileDialog();
	void ShowPS3WritingProfileDialog();
	void CheckDeferredOperations();
	void SetCheckDeferredOperations();
	void SetNeedsProfileWrite(bool bNeedsProfileWrite);
	bool GetNeedsProfileWrite();
	void SetHUDScaleFromProfile();
	float GetPercentToNextToken();
	void SetupBadassInfo();
	void ServerUnpackBadassRewardsEarned(const struct FString& RewardString);
	int GetBadassRewardsToOfferNext(int RewardIndex);
	bool HasEverCalculatedBadassRewardsToOffer();
	int CalculateBadassRewardGradeBaseline();
	void CalculateNextBadassRewardsToOffer();
	void UnpackBadassRewardArray(const struct FString& RewardString, TArray<int>* UnpackedArray);
	void PackBadassRewardArray(TArray<int> UnpackedArray, struct FString* PackedString);
	void ServerSetVehicleSteeringMode(int Mode);
	void ServerSetInvertedReverseSteering(bool bInUseInvertedReverseSteering);
	void ServerSetTradingDisabled(bool bInTradingDisabled);
	void ClientSendProfileSettingsToServer();
	void SetSettingsFromProfile();
	void SetColorBlindModeProfileSetting(int InColorBlindMode);
	void SetControllerRebinding(const struct FString& ControllerRebindingString);
	void ApplyControllerRebinding(const struct FString& ControllerRebindingString);
	void SetKeyRebinding(const struct FString& KeyRebindingString);
	void ApplyKeyRebinding(const struct FString& KeyRebindingString);
	void SetControllerPreset(const struct FName& PresetName);
	bool ApplyControllerPreset(const struct FName& PresetName);
	void SetupInputDevices();
	void ClientSetupInputDevices();
	void OnProfileWriteComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	bool WriteProfile(bool bShouldShowProfileDialog);
	bool WriteProfileFor(int controllerIdx);
	void SetPlayerMovementType(int NewType);
	void DirtyViewPoint();
	void SetGFxMoviesNeedMatrixUpdate();
	void UpdateScaleformHUDVisibility();
	void OnToggleHUD(class USeqAct_ToggleHUD* inAction);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons, bool bAffectsGodMode, bool bAffectsNoTarget, bool bInAllowCinematicSplitScreen, bool bPauseDialog, bool bKismetSetCinematicMode);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons, bool bAffectsHUD, bool bInAllowCinematicSplitScreen, bool bPauseDialog, bool bKismetSetCinematicMode);
	void SetMapChangeCinematicMode();
	class AWillowPawn* GetPlayerBodyPawn();
	void ClearHUDMessage(unsigned char MsgType);
	bool IsTrainingEnabled();
	void DisplayTrainingMessage(unsigned char MsgType, const struct FString& MessageString, const struct FString& MessageTitleString, float Duration, const struct FColor& DrawColor, const struct FString& HUDInitializationFrame, bool PausesGame, float PauseContinueDelay, bool bMandatory, unsigned char StatusMenuTab, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void DisplayHUDMessage(unsigned char MsgType, const struct FString& MessageString, float Duration, const struct FColor& DrawColor, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void ClearActivePlayerChallenges();
	void HandleTrainingEventDefinition(class UTrainingMessageDefinition* TrainingDefinition);
	void TrainingEventComplete(const struct FTrainingData& Listener);
	bool CanDisplayTrainingMessage(class UTrainingMessageDefinition* TrainingMessageDef);
	void ClearActiveStatListeners();
	void SaveGameStageData(class UPlayerSaveGame* SaveGame);
	void ApplyGameStageData(class UPlayerSaveGame* SaveGame);
	void OnArrivedInNewLevel();
	bool PlayerHasChallenge(class UChallengeDefinition* ChalDef);
	void SaveChallengeData(class UPlayerSaveGame* SaveGame);
	bool OnPrestigeResetChallenges_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void TryPrestige();
	int GetHighestChallengeLevelIncomplete(class UChallengeDefinition* ChalDef);
	int GetHighestChallengeLevelComplete(class UChallengeDefinition* ChalDef);
	bool IsChallengeComplete(class UChallengeDefinition* ChalDef);
	bool IsChallengeLevelCompleteForValue(class UChallengeDefinition* ChalDef, int LevelIdx, const struct FName& Stat, int StatValue);
	bool IsChallengeLevelComplete(class UChallengeDefinition* ChalDef, int LevelIdx);
	bool CanPrestigeResetChallenges();
	void PrestigeResetChallenges(bool bForce);
	void AddChallengeToLocalCache(const struct FChallengeData& InChalData);
	void ApplyPlayerChallengeData(class UPlayerSaveGame* SaveGame);
	void ClientResetPlayerChallenges();
	void ServerResetPlayerChallenges(bool bIsFromCharacterLoad);
	bool StatsAreReady();
	void ResetStatsListeners();
	void RegisterStatListener(class UPlayerStatsNotifier* Notifier, class UTrainingMessageDefinition* TrainingMessageDef);
	void ClientShowChallengeProgressUpdate(class UChallengeDefinition* Challenge, int LevelIndex, int ConditionIndex, int CurrStatVal, int GoalStatVal);
	void ShowChallengeProgressUpdate(class UChallengeDefinition* Challenge, int LevelIndex, int ConditionIndex, int CurrStatVal, int GoalStatVal);
	void CheckForChallengeCompletionAchievement();
	void ClientOnChallengeComplete(class UChallengeDefinition* Challenge, int LevelIdx);
	float GetPointsForChallenge(const struct FAttributeInitializationData& Points);
	void GrantChallengeCompletionItemRewards(class UChallengeDefinition* ChalDef, int LevelIdx);
	void ChallengeCompleted(class UChallengeDefinition* Challenge, int LevelIdx);
	void Destroyed();
	void StopTeleporterSound();
	void PlayTeleporterSound();
	bool ReleaseHolding();
	bool TryToTeleportIntoVehicle(class AWillowVehicleBase* SeatActor);
	void HoldingReleaseTimerExpired();
	void TeleportPlayerToHoldingCell(class AActor* HoldingActor, class AActor* FinalDestActor, bool bUpdateRotation);
	void OnTeleport(class USeqAct_Teleport* Action);
	bool AllDestinationLevelsAreVisible(const struct FVector& DestLoc);
	void ClientSetPawnLocation(class APawn* aPawn, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	bool NoFailSetPawnLocation(class APawn* aPawn, const struct FVector& NewLocation);
	bool TeleportPlayer(const struct FVector& TeleportLocation, const struct FRotator& TeleportRotation, bool bSuppressNotifyTeleported, bool bHideTeleportEffect);
	void Behavior_SpawnTeleporter(class UPersonalTeleporterDefinition* Definition);
	void ServerSpawnTeleporter(class UPersonalTeleporterDefinition* Definition);
	void aa_SetLockEnabled(bool bEnabled);
	void aa_SetOnMoveOnly(bool bEnabled);
	void aa_SetTargetSet(unsigned char Type);
	void tl_DumpList();
	void Behavior_CameraAnim(class UCameraAnim* Anim);
	void Behavior_ViewShake(const struct FGearboxViewShakeInfo& ShakeInfo);
	void Behavior_ForceFeedback(class UForceFeedbackWaveform* FFWaveform, bool ForWeaponFiring);
	bool IsShotForceFeedbackAllowedByPlayerProfile();
	void ConsumeProjectileResource(class UProjectileDefinition* ProjectileDefinition);
	class AWillowProjectile* Behavior_SpawnCurrentProjectile(class UProjectileDefinition* CurrentProjectile, bool bLeftHand, bool bConsumeResource, bool bNoVelocity, bool bSetProjectileToGrenadeMod);
	void Behavior_SetCurrentProjectile(class UProjectileDefinition* CurrentProjectile);
	class APawn* GetSpawnInstigator();
	int GetProjectileExpLevelFromPlayerLevel();
	int GetProjectileExpLevelFromEquipmentLevel(unsigned char EquipmentLocation);
	void CheckReload();
	bool CanThrowGrenade(class UProjectileDefinition* ProjectileDefinition);
	bool CanAffordGrenadeCost(class UProjectileDefinition* ProjectileDefinition);
	void WeaponActionComplete();
	void GrenadeThrowComplete();
	void MeleeAttackComplete();
	void ClientNotifyOutOfGrenades();
	void ClientThrowGrenade();
	void ThrowGrenade(class UProjectileDefinition* ProjectileDefinition);
	void ServerThrowGrenade(class UProjectileDefinition* ProjectileDefinition);
	void ThrowGrenadeSkillOverride();
	bool CanPerformThrowGrenadeSkill();
	void StartThrowGrenadeSkill();
	void ServerStartThrowGrenadeSkill();
	void Behavior_ThrowGrenade();
	void TestMeleeLunge();
	void ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator* out_ViewRotation);
	void LungeTowardTarget(class AActor* LungeTarget, float LungeLength);
	class APawn* FindMeleeTarget();
	bool CanLunge(class AActor* LungeTarget);
	void DetachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void AttachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_DetachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void Behavior_AttachMeleeWeapon(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void MeleeAttack(unsigned char BodyWeaponAction);
	void ServerMeleeSelf();
	void ServerMeleeAttack();
	void NotifyActionSkillOwnerMelee(class AWillowPawn* PawnAutoAimTarget);
	class AWillowPawn* GetPawnAutoAimTarget();
	void ServerNotifyActionSkillOwnerMelee(class AWillowPawn* AutoAimTarget);
	void Behavior_Melee();
	void PerformSharedWeaponActions(float TimerDuration, const struct FName& TimerFunctionName);
	void ServerPerformReload();
	void PerformReload(bool bOnlyReloadIfNeeded);
	void Behavior_Reload();
	bool CanPerformWeaponAction(unsigned char FireModeNum);
	void DebugProjectiles();
	void ToggleDebugProjectiles();
	class UProjectileDefinition* GetCurrentProjectileDefinition();
	class AWillowGrenadeMod* GetCurrentGrenadeMod();
	void OnWeaponsRestrictedChange();
	void SetWeaponsRestricted(bool bNewWeaponsRestrictedState, bool bOverrideAllowWeaponsRestriction, bool bShouldEndDuels, bool bLilacHACKOverride);
	void ToggleWeaponsRestricted();
	void QueryRestricted();
	bool CanHoldWeapon(class APawn* Holder, class AWeapon* TestWeapon, bool bHoldInOffHand);
	void SetTeleporterRestricted(bool bNewTeleporterRestrictedState);
	void ToggleTeleporterRestricted();
	class UUIDataStore_OnlineGameSearch* GetOnlineGameSearchDatastore();
	class UWillowOnlineGameSettings_DataStore* GetOnlineGameSettingsDatastore();
	class UWillowOnlineGameSettings* GetOnlineGameSettingsViaDatastore();
	bool CanCommunicate();
	void TriggerSplitscreenJoinCompleteDelegates(int ControllerId, bool bWasSuccessful);
	void ClearSplitscreenJoinCompleteDelegate(const struct FScriptDelegate& SplitscreenJoinCompletelDelegate);
	void AddSplitscreenJoinCompleteDelegate(const struct FScriptDelegate& SplitscreenJoinCompleteDelegate);
	void OnSplitscreenJoinComplete(int ControllerId, bool bWasSuccessful);
	void SplitScreenLeave();
	void CheckForSplitPC();
	void ClientSplitScreenJoin(int ControllerId, bool bCanSplitscreenJoin);
	void ServerSplitScreenJoin(int ControllerId);
	void SplitScreenJoin(int ControllerId);
	void ss_func(const struct FString& args);
	void OnResurrectPlayer(class UWillowSeqAct_ResurrectPlayer* Action);
	void ServerResurrect(unsigned char ResurrectReason);
	void Respawn();
	void Resurrect();
	void UpdateLostShieldEffect();
	void EndLostShield();
	void BeginLostShield(const struct FName& HealthParamName, const struct FName& MaterialEffectName, float UpdateRate, class UPostProcessChain* InChain);
	void PopPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	void ApplyMaterialEffectModifiers(class UPostProcessChain* InChain, TArray<struct FMaterialEffectModifier> MaterialEffectModifiers);
	void PushPostProcessChain(class UPostProcessChain* InChain, const struct FPostProcessChainOptions& InChainOptions);
	int FindPostProcessChainRecordIndex(class UPostProcessChain* InChain);
	void ClearPostProcessChains();
	void SendClientInteractionMessage(class UClass* ClientType, int MessageValue, class UObject* Data);
	void SendServerInteractionMessage(class UClass* ClientType, int MessageValue, class UObject* Data);
	void EndInteraction();
	void StartInteraction(class UClass* ClientType, int MessageValue);
	void pip_sendmessage(int MessageValue);
	void UpdatePlayerPostProcessOverlay(float DeltaTime);
	void ClearPostProcessOverlayQueue(int IndexToSave);
	void SetupPostProcessOverlay(int Index, bool bReset);
	int GetPostProcessOverlayIndex(const struct FName& OverlayName);
	int AddPostProcessOverlay(const struct FPostProcessOverlay& NewPostProcessOverlay);
	class UCharacterClassDefinition* GetClassDefinition();
	void DisplayDebugControllers(class AHUD* HUD, float* out_YL, float* out_YPos);
	void DisplayDebugDamageTypeModifiers(class AHUD* HUD, float* out_YL, float* out_YPos);
	void DisplayDebugProficiencySkills(class AHUD* HUD, float* out_YL, float* out_YPos);
	class UWillowAIDebugCamera* GetWillowAIDebugCam();
	bool ShouldCheckRemoteControlCheckbox(unsigned char CheckBoxName, class AHUD* HUD);
	void ShowPlayerInfo();
	void AITree();
	void ToggleWillowInspectorStats();
	void ToggleAccuracyDebug();
	void ToggleTerritoryZones();
	void AIToggleShowTimers();
	void AIShowNodeReservation();
	void AIDebugSetPawn(class AGearboxPawn* NewPawn);
	void AILog();
	void ShowRotation();
	void AIDebugSetPawnByName(const struct FName& NewPawnName);
	void debugpawn();
	void aisetp(const struct FName& NewPawnName);
	void NotifyGameUnPaused();
	void NotifyGamePaused();
	bool IsTriggerUsable(const struct FVector& PlayerCameraLoc, const struct FRotator& PlayerCameraRot, class ATrigger* TriggerActor, bool bAimToInteract, bool bUseTriggerInteractDistance, float TriggerInteractDistance);
	bool IsTriggerUsableByPlayer(class ATrigger* TriggerActor, bool bAimToInteract, bool bUseTriggerInteractDistance, float TriggerInteractDistance);
	void GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, TArray<class ATrigger*>* out_useList);
	void ShowHUDToolTip(const struct FInteractionIconWithOverrides& HUDIcon, unsigned char UsabilityType);
	void UpdateInteractionIcon(const struct FInteractionIconWithOverrides& Icon, unsigned char UsabilityType);
	void ClientSetBehindView(bool bNewBehindView);
	void WillowBehindView(bool bNewBehindView);
	struct FRotator Get3rdPersonAimRotation(class AWeapon* W, const struct FVector& StartFireLoc);
	void LaunchGameFromMainMenuData();
	void HB(const struct FString& Out);
	void SetMainMenuHostFlag(bool StartAHost);
	void SetMainMenuCharacterClass(int forWhom, const struct FString& CharacterClassStr);
	void SetAndBroadcastMainMenuCharacterClass(int forWhom, const struct FString& CharacterClassStr);
	void SetMainMenuSplitScreenFlag(bool bUseSplit, bool bSpawnActor, int NewControllerId);
	void MainMenuResetPlayers();
	void SetMainMenuMapName(const struct FString& MapName);
	void InitAccuracyFromWeapon(class AWillowWeapon* TheWeapon);
	void GetAccuracyExtremes(bool bOffHand, float* MinAccuracy, float* MaxAccuracy, float* CurrentAccuracy);
	float GetBaseAccuracy(bool bOffHand);
	float GetAccuracy(bool bOffHand);
	void FinalAddHUDDamageIndicator();
	void AddHUDDamageIndicator(const struct FVector& HitDir, bool bShieldOnlyDamage);
	struct FString GetNextString(struct FString* args);
	void InitInputSystem();
	void DisplayAudioDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void DisplayLevelTransitionState(class AHUD* HUD, float* out_YL, float* out_YPos);
	void SetParkedSlip(float Slip);
	void SetCMMEnabled(bool bEnabled);
	void SetCMMThreat(float Threat);
	void ServerPlayVehicleHorn();
	void PlayVehicleHorn();
	void ClientCloseMenu();
	void HideQuickSelectWeaponMenu();
	void ShowQuickSelectWeaponMenu();
	void ShowStatusMenu_Logs();
	void ShowStatusMenu_Challenges();
	void ShowStatusMenu_Skills();
	void ShowStatusMenu_Inventory();
	void ShowMap();
	void ServerSetStatusMenuOpen(bool bNewValue);
	void SetStatusMenuOpen(bool bNewValue);
	void ShowCannotOpenMenu();
	void ShowStatusMenu();
	bool CanShowModalMenu(unsigned char* bDisplayFailureWarning);
	void ShowDebugMenu();
	void ZoomIfPending();
	void ClearPendingZoom();
	void SetPendingZoom();
	bool IsZoomed();
	void ForceUnzoom(bool bClearInput);
	class UWillowGameViewportClient* GetPlayerViewportClient();
	void ClosePS3ControllerDialog();
	void ShowPS3ControllerDialog(int ForControllerId);
	class UWillowGFxUIManager* GetUIManager(bool bWantPrimaryManager);
	class AWillowPlayerController* GetPrimaryPlayer();
	bool CheckAllControllersConnected(int* DisconnectedId);
	void OnControllerChanged(int ControllerId, bool bIsConnected);
	void CheckControllerChangeStatusAfterDelay();
	void RetryControllerDisconnect();
	bool CanShowPauseMenu();
	bool IsPauseMenuOpen();
	bool IsLobbyEnabled();
	void EnableLobby(bool bEnable);
	bool IsLobbyMenuOpen();
	void HideLobbyUI();
	void ShowLobbyUI();
	void SetLobbyReady(bool bIsReady);
	void ServerSetLobbyReady(bool bIsReady);
	void ApplySaveGamesBeforeLevelTransition();
	void GFxPauseMenuClosed();
	void GFxPauseMenu();
	void SetGFxPauseMenuOpenState(bool bIsOpen);
	void ShowPauseMenu();
	void ShowMenu();
	void Pause();
	void FixFOV();
	void AdjustFOV(float DeltaTime);
	void OnDefaultFOVChanged();
	void RemoveSprintFOV();
	void ApplySprintFOV();
	void SetPlayerFOV(float HFOV);
	void FOV(float HFOV);
	static float ToHFOV(float FFOV);
	static float ToVFOV(float HFOV);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void PreTransitionCleanup();
	void HideHUD();
	void DisplayHUD(bool bDeferred);
	void UnPressButtons();
	void FinishUncrouch();
	void ClientUnDuck();
	void CheckJumpOrDuck();
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	float AimHelpDistance();
	bool AimingHelp(bool bInstantHit);
	void ServerToggleEquipInventory(class AWillowInventory* InventoryObject);
	void ToggleEquipInventory(class AWillowInventory* InventoryObject);
	void ClientDisplayPickupFailedMessage();
	void CloneAndGiveToCoopPawns(const FScriptInterface& Pickup, bool bReady);
	void GetCoopPawns(TArray<class APawn*>* CoopPawns);
	bool ShouldUseCoopRange(const FScriptInterface& Pickup);
	void PickupPickupable(const FScriptInterface& CurrentPickupable, bool bReadyAfterPickup);
	void ServerPickupSomething(bool bReadyAfterPickup);
	void ServerPickupSpecific(const FScriptInterface& Pickupable);
	void ClientSpawnPickupableMesh(const FScriptInterface& Pickup);
	void ServerUpdatePickupFailsFull();
	void ServerConditionalThrowPawnEquippedItem(unsigned char EquipLocation);
	void ServerThrowPawnActiveWeapon();
	void PickupSomething(bool bReadyAfterPickup);
	bool AllowReadyAfterPickup(const FScriptInterface& CurrentPickupable);
	bool HasRoomInInventoryFor(const FScriptInterface& Pickupable);
	void ClearSeenPickupable();
	void ServerClearSeenPickupable();
	void SawPickupable(const FScriptInterface& Pickup);
	void ServerSawPickupable(const FScriptInterface& Pickup);
	void UnTouchedPickupable(const FScriptInterface& Pickup);
	void TouchedPickupable(const FScriptInterface& Pickup);
	void ServerDiscoveredCallOutItem(const FScriptInterface& Pickup);
	void DiscoveredCallOutItem(const FScriptInterface& Pickup);
	FScriptInterface GetCurrentPickupable();
	bool LandingShake();
	void CheckBulletWhip(class UAkEvent* BulletWhipAkEvent, const struct FVector& FireLocation, const struct FVector& FireDir, const struct FVector& HitLocation);
	int GetMaxOverpowerLevel();
	int GetMaxExpLevel();
	int GetExpPoints();
	static int GetExpPointsRequiredForLevel(int Level);
	float GetExpPercentToNextLevel(float CurrXp, int* PointsTowardLevel, int* PointsRequiredTolevel);
	void UpdateLcdExp(float ExpPoints);
	void OnAllyLevelChange(class AWillowPlayerReplicationInfo* AllyPRI);
	void DoLevelUpNotifications(int ExpLevel);
	void ClientOnExpLevelChange(int ExpLevel);
	void OnExpLevelChange(bool bFeedback, bool bNaturalLevelup);
	void ExpLevelUp(bool bCheated);
	void ExpEarn(int Exp, unsigned char Source, unsigned char ExpType);
	void ScriptAnnounceAmmoGain(int AmmoType, int GainedAmount);
	void ScriptAnnounceCreditGain(int GainedAmount, class APlayerReplicationInfo* PRI);
	void ServerAnnounceItemPickup(class AWillowItem* ItemPickedUp, class APlayerReplicationInfo* PRI);
	void ServerAnnounceWeaponPickup(class AWillowWeapon* WeaponPickedUp, class APlayerReplicationInfo* PRI);
	void HandlePickup(class AInventory* Inv);
	int GetSkillGrade(class USkillDefinition* Definition);
	void ClientSetSkillGrade(class USkillDefinition* Skill, unsigned char NewSkillPoints, unsigned char Grade);
	void ServerSkillSaveGameDataCompleted();
	void ServerSetSkillSaveGameData(class USkillDefinition* Skill, unsigned char Grade);
	void ServerUpgradeSkill(class USkillDefinition* Skill);
	void UpdateSkillsAfterTreeReset();
	void CheckSkillActivation(class USkillDefinition* Skill);
	int GetSkillUpgradeCost(class USkillDefinition* Skill);
	void ClientResetSkillTree(bool bIgnoreProficiencies);
	int ResetSkillTree(bool bIgnoreProficiencies, bool bIsCharacterLoad);
	void ClientPurchaseSkillTreeResetFailed();
	void ServerPurchaseSkillTreeReset();
	int GetSkillTreeResetCost();
	void ResetMeleeSkillCooldown();
	void ResetMeleeSkill();
	float GetMeleeSkillCooldownTimeRemaining();
	float GetMeleeSkillCooldownTime();
	void StartMeleeSkillCooldown();
	bool IsMeleeSkillOnCooldown();
	bool CanPerformMeleeSkill();
	void StartMeleeSkill();
	void ServerStartMeleeSkill();
	void ServerStartActionSkillCooldownAbility(class AWillowPawn* AutoAimTarget);
	void StartActionSkillCooldownAbility();
	void ServerNotifyActionSkillActiveAbility(class AWillowPawn* AutoAimTarget);
	void NotifyActionSkillActiveAbility();
	void ServerStartActionSkillActiveAbility(class AWillowPawn* AutoAimTarget, bool bNotifyClient);
	void StartActionSkillActiveAbility();
	void ServerStartActionSkill(class AWillowPawn* SkillTarget);
	float GetActionSkillDuration();
	void ActionSkillCallback(class USkill* ActivatedSkill, bool bActivated);
	class AController* Behavior_GetSkillInstigatorController();
	void Behavior_UpgradeSkill(class USkillDefinition* SkillToUpgrade, int NumberOfLevelsToRaise, int MaximumLevelToRaiseSkill);
	void ServerDeactivateSkill(class USkillDefinition* SkillToDeactivate, bool bIgnoreSkillInstigator);
	void Behavior_DeactivateSkill(class USkillDefinition* SkillToDeactivate, bool bIgnoreSkillInstigator);
	void ServerActivateSkill(class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade);
	void Behavior_ActivateSkill(class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade);
	class ASkillEffectManager* GetSkillManager();
	void InitPlayerSkillTree();
	void OnPlayerClassChange();
	void ApplyCharacterClassStartingValues(class UCharacterClassDefinition* CharClass);
	void ApplyCharacterClassDefaults(class APawn* P, class UCharacterClassDefinition* CharClass);
	void ClientNotifyClassChanged(class UPlayerClassDefinition* NewPlayerClass);
	void RetryClassSwitch();
	void SwitchPlayerClass(class UPlayerClassDefinition* NewPlayerClass);
	void ServerSwitchPlayerClass(class UPlayerClassDefinition* NewPlayerClass);
	void ServerPlayerSelectClass(const struct FString& ClassDefinitionName);
	void PlayerSelectClass(const struct FString& args);
	void InitializeWorldMissionState();
	void RefreshHUDMissionWidget();
	void FixupPlaythroughTwo(int PlaythroughsCompleted);
	void ApplyMissionSaveGameData(class UPlayerSaveGame* SaveGame, bool bManageRewards);
	void FixupSavedMissionGameStage(int PlaythroughIndex, struct FMissionStatusPlayerData* MStatus);
	void ApplyGatewayDLCStations();
	void ApplyVisitedTeleporterData(class UPlayerSaveGame* SaveGame);
	void ReapplyVisitedTeleporterData();
	class UTravelStationDefinition* GetSavedTravelStation(class UPlayerSaveGame* SaveGame);
	void RequestNewStatsChannel();
	void ApplyStatsSaveGameData(class UPlayerSaveGame* SaveGame);
	void ServerSetWeaponSaveGameData(int Index, const struct FWeaponDefinitionData& DefinitionData, unsigned char QuickSlot, unsigned char Mark);
	void ApplyWeaponSaveGameData(class UPlayerSaveGame* SaveGame);
	void FixupSavedWeapons(TArray<struct FWeaponSaveGameData>* WeaponData);
	void ServerSetInventorySlotSaveGameData(const struct FInventorySlotSaveGameData& Data);
	void ApplyInventorySlotSaveGameData(class UPlayerSaveGame* SaveGame);
	void ServerSetItemSaveGameData(int Index, const struct FItemDefinitionData& DefinitionData, int Quantity, bool bEquipped, unsigned char Mark);
	void ServerItemSaveGameDataCompleted();
	void ApplyDLCInventorySaveGameData(TArray<struct FInventorySaveGameData> ItemData, TArray<struct FWeaponSaveGameData> WeaponData);
	void ApplyItemSaveGameData(class UPlayerSaveGame* SaveGame);
	bool ValidateItemDefinition(const struct FItemDefinitionData& DefinitionData);
	bool ValidateWeaponDefinition(const struct FWeaponDefinitionData& DefinitionData);
	void ApplyInventorySaveGameData(class UPlayerSaveGame* SaveGame);
	void ServerSetResourceSaveGameData(int Index, class UResourceDefinition* ResDefinition, class UResourcePoolDefinition* PoolDefinition, float Amount, int UpgradeLevel);
	void ApplyResourceSaveGameData(class UPlayerSaveGame* SaveGame);
	void RecalculateAttributeInitializedState();
	bool ConditionalLoadDefaultSaveGame();
	struct FString GetSaveGameNameFromid(int SaveGameId);
	void BuildSaveGameNameFromId(int SaveGameId);
	void ProcessShiftEntitlements(bool bCustomizationsOnly);
	bool GrantShiftProfileEntitlement(int Id, const struct FName& Identifier, const struct FString& Payload);
	bool GrantShiftCustomizationEntitlement(int Id, const struct FName& Identifier, const struct FString& Payload);
	bool GrantShiftItemEntitlement(int Id, const struct FName& Identifier, const struct FString& Payload, bool Consumable, int ConsumableAmount, int Consumed);
	void GrantUnconsumedDemoPerk();
	void GrantNewMarketingCodeBonuses();
	bool IsMarketingCodeUnlocked(int MarketingCode);
	bool HasUnlockedCode(int MarketingCode);
	void SaveMarketingCodeSaveGameData(class UPlayerSaveGame* SaveGame);
	void ApplyMarketingCodeSaveGameData(class UPlayerSaveGame* SaveGame);
	void ServerSetSaveGameData(int ClientExpLevel, int ClientExpPoints, int ClientGeneralSkillPoints, int ClientSpecialistSkillPoints, int CurrencyOnHand, int PlaythroughsCompleted);
	void ApplyPlayerSaveGameData(class UPlayerSaveGame* SaveGame);
	void ApplySkillSaveGameData(class UPlayerSaveGame* SaveGame);
	void ApplyVehicleSteeringModeData(class UPlayerSaveGame* SaveGame);
	void ApplyVehicleCustomizationData(class UPlayerSaveGame* SaveGame);
	void ApplyAwesomeSkillSaveGameData(class UPlayerSaveGame* SaveGame);
	void SaveAppliedCustomizationData(class UPlayerSaveGame* SaveGame);
	void SaveMissionSaveGameData(class UPlayerSaveGame* SaveGame);
	void SaveDiscoveredWorldAreaData(class UPlayerSaveGame* SaveGame);
	void ApplyDiscoveredWorldAreaData(class UPlayerSaveGame* SaveGame);
	void SaveVisitedTeleporterData(class UPlayerSaveGame* SaveGame);
	void SavePlayerUIPreferences(class UPlayerSaveGame* SaveGame);
	void SaveStatsSaveGameData(class UPlayerSaveGame* SaveGame);
	void SaveWeaponSaveGameData(class UPlayerSaveGame* SaveGame);
	void SaveInventorySlotSaveGameData(class UPlayerSaveGame* SaveGame);
	void ExtractExpansionSavedataFromUnloadableItemData(class UPlayerSaveGame* SaveGame);
	void AddExpansionSavedataToUnloadableItemData(class UPlayerSaveGame* SaveGame, bool bTrustSaveGameValues);
	void SaveItemSaveGameData(class UPlayerSaveGame* SaveGame);
	class AWillowInventoryManager* GetPawnInventoryManager();
	class APawn* GetInventoryPawn();
	void SaveResourceSaveGameData(class UPlayerSaveGame* SaveGame);
	void SaveSkillSaveGameData(class UPlayerSaveGame* SaveGame);
	void SaveVehicleSteeringModeData(class UPlayerSaveGame* SaveGame);
	void SaveVehicleCustomizationData(class UPlayerSaveGame* SaveGame);
	void SaveAwesomeSkillSaveGameData(class UPlayerSaveGame* SaveGame);
	void SavePlayerSaveGameData(class UPlayerSaveGame* SaveGame);
	void ApplyPlayerCustomizationData(class UPlayerSaveGame* NewSaveGame);
	void ApplyPlayerUIPreferencesData(class UPlayerSaveGame* NewSaveGame);
	bool IsMissionObjectiveActiveLocal(class UMissionObjectiveDefinition* MissionObjective, int ForPlaythrough);
	bool IsMissionObjectiveCompleteLocal(class UMissionObjectiveDefinition* MissionObjective, int ForPlaythrough);
	bool LocalMissionDependenciesMet(class UMissionDefinition* InMission, int ForPlaythrough);
	int GetLocalActiveMissionNumber(int ForPlaythrough);
	int GetActivePlotCriticalMissionNumber(int ForPlaythrough);
	int GetActiveMissionNumber();
	void UpdateOnlineGameSettings(bool bRefreshOnlineData);
	void NotifyUpdateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void SetNeedsUpdateOnlineGameSettings();
	void CheckEquipDefaultWeapon();
	void GrantDefaultWeaponIfEligible(class AMissionTracker* MissionTracker);
	void ClientValidateMissionData();
	void ClientReceiveMissionFiltered(const struct FReplicatedMissionFilterData& MissionFilterData);
	void ClientReceiveMissionObjective(const struct FReplicatedMissionObjectiveData& ObjectiveData);
	void ClientSubObjectiveSetAdvanced(class UMissionObjectiveSetDefinition* SubObjectiveSetAdvanced);
	void ClientReceiveMissionActiveObjectiveSet(class UMissionObjectiveSetDefinition* ActiveObjectiveSet);
	void ClientReceiveMissionStatus(const struct FReplicatedMissionStatusData& MissionStatusData, int GameStage);
	void ClientReceiveMissionData(const struct FReplicatedMissionData& MissionData);
	void SetMissionKickoffHeard(class UMissionDefinition* MissionDef);
	void ClientReceivedMissionKickoffHeard(class UMissionDefinition* MissionDef);
	void ServerRequestMissionData();
	void RequestMissionData();
	void LoadBlackMarketUpgrades(class UPlayerSaveGame* SaveGame);
	void LoadTheBank(class UPlayerSaveGame* SaveGame);
	void ApplyHardcoreMode(class UPlayerSaveGame* NewSaveGame);
	void StoreUnloadableDlcContent(class UPlayerSaveGame* NewSaveGame);
	void ServerSetRemoteGoldenKeyData(int Acquired, int Available);
	void LoadPlayerSaveGame(class UPlayerSaveGame* NewSaveGame);
	void AttemptPostSaveGameCreateFixup(class UPlayerSaveGame* SaveGame);
	void ConditionalFixWeaponReadyMax(class UPlayerSaveGame* SaveGame);
	void AttemptPreSaveGameLoadFixup(class UPlayerSaveGame* SaveGame);
	void ClientHideSendingSaveGameDialog();
	void CheckSentFullSaveGame();
	bool DoReceivedSaveGameValuesMatchExpected();
	bool HasSentFullSaveGame();
	void ClientShowSendingSaveGameDialog();
	int GetExpLevelLoadedFromSavedGame();
	int GetExpPointsLoadedFromSavedGame();
	void AttemptReplicateSaveGame(class UPlayerSaveGame* NewSaveGame);
	void NotifyClosedSaveGameChannel(class USaveGameChannel* InChannel);
	void NotifyReceivedSaveGameChannel(class USaveGameChannel* InChannel);
	void ParseWillowOneDLCExpansionData(TArray<unsigned char> ExpansionData);
	void ApplyDLCExpansionData(class UPlayerSaveGame* NewSaveGame);
	void SaveDLCExpansionData(class UPlayerSaveGame* NewSaveGame);
	void ClearPlayerSaveGame();
	void WriteLastSavedId();
	void ReloadDefaultSaveGame();
	void StartNewPlaySession();
	void LoadCachedSaveGame();
	void ShortServerMove(float TimeStamp, const struct FVector& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View, unsigned char AnalogPct);
	void CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove);
	void AdjustCameraScale(bool bIn);
	struct FString GetClassModString(bool bPrefixOnly);
	class UItemNamePartDefinition* GetClassModNamePart();
	void ServerPlayerResetShop(const FScriptInterface& Shop);
	void SetPendingTransactionStatus(unsigned char TransactionStatus);
	void PlayerBuyBackInventory(unsigned char FormOfCurrency, int Price, int Quantity);
	void PlayerSoldItem(unsigned char FormOfCurrency, int Price);
	void ClientCongradulatePurchase();
	void PurchaseWasMade(unsigned char CurrencyType, int Price, bool bWasItemOfTheDay);
	void ClientTriggerDispenseEventForShop(class AWillowInteractiveObject* Shop);
	void ServerPlayerBoughtItem(class AWillowInventory* InventoryObject, int Quantity, bool bReadyItem, const FScriptInterface& Shop, bool bWasItemOfTheDay);
	void PlayerBoughtItem(class AWillowInventory* InventoryObject, int Quantity, bool bReadyItem);
	void ServerStoppedShopping();
	void ServerStartedShopping();
	void UnHideDroppedPickupsHiddenWhileInStatusMenu();
	class ADroppedPickup* ServerThrowInventory(class AWillowInventory* InventoryObject, int Quantity);
	void ThrowInventory(class AWillowInventory* InventoryObject, int Quantity);
	void NextWeapon();
	void PrevWeapon();
	float ScaleFOV(float InFOV, float TangentScalar);
	float GetFOVAngle();
	int BlendRot(float DeltaTime, int BlendC, int NewC);
	void ReplaceKilledByAIMessageTokens(const struct FString& SourceString, class AWillowAIPawn* SourcePawn);
	void GenerateUBMKilledByMessageString(class AController* Killer, class UClass* DamageType);
	struct FString GetPreferredWeaponTypeString();
	struct FString GetPreferredManufacturerString();
	float CalculatePercentMissionsComplete();
	float CalculatePercentChallengesComplete();
	bool PopulateTombstoneData(struct FTombstoneData* NewTombstoneData);
	void SetHardcoreMode(bool NewValue);
	void ClientPermadeath(const struct FString& KilledByMessage);
	void Permadeath();
	void ClearInjuredScreenFadeParticle();
	void ClearInjuredState(bool bPlayInjuredStopSound);
	void ClearControllerInjuredState();
	void SetupInjuredState();
	void SetupControllerInjuredState();
	void ServerInjuredNoTimeout();
	void SayIdleTimeOut();
	void InjuredNoTimeout();
	void ClientOnRevivedPlayer(class APlayerReplicationInfo* PRI);
	void Behavior_StopRevive();
	void Behavior_StartRevive();
	void ServerStopRevive();
	void ServerStartRevive();
	bool CanPerformReviveTarget();
	void SetReviveTarget();
	bool IsInTransitionalVehicleState(float* RemainingTime);
	void StopAltFire(unsigned char FireModeNum);
	void StartAltFire(unsigned char FireModeNum);
	void StopFire(unsigned char FireModeNum);
	void PostFireDelay();
	void StartFire(unsigned char FireModeNum);
	void ServerSecondaryUse();
	void ServerUse();
	void SwitchSeats();
	void UseSecondary();
	void Use();
	void ServerSpectate();
	void QuickLookPlayerMove(float DeltaTime);
	void NotifyTakeHit(class AController* InstigatedBy, class APawn* HitPawn, const struct FVector& HitLocation, float Damage, class UClass* DamageType, const struct FVector& Momentum, class UDamagePipeline* Pipeline);
	bool UsingFirstPersonCamera();
	void ResetCameraMode();
	void ClientReset();
	void Reset();
	void TestViewShake(float OffsetX, float OffsetY, float OffsetZ, float OffsetRate, float OffsetTime, float RotX, float RotY, float RotZ, float RotRate, float RotTime, float FOVMag, float FOVRate, float FOVTime);
	void ViewShake(float DeltaTime);
	void ClientShakeView(const struct FGearboxViewShakeInfo& ShakeInfo);
	void ShakeView(const struct FGearboxViewShakeInfo& NewViewShake);
	void CameraShake(float Duration, const struct FVector& newRotAmplitude, const struct FVector& newRotFrequency, const struct FVector& newLocAmplitude, const struct FVector& newLocFrequency, float newFOVAmplitude, float newFOVFrequency);
	void AddWeaponKick(float Amount, class UWeaponTypeDefinition* WeaponTypeDef);
	void ApplyWanderingAndKick(float DeltaTime, struct FVector* POVLocation, struct FRotator* POVRotation);
	void AdjustViewPointForFocusCam(float DeltaTime, struct FVector* POVLocation, struct FRotator* POVRotation);
	void GetPlayerViewPoint(bool bMustBeCurrent, struct FVector* POVLocation, struct FRotator* POVRotation);
	void SpawnCamera();
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void SetCameraMode(const struct FName& NewCamMode);
	void RaiseFirstPersonHands();
	void LowerFirstPersonHands();
	void UpdateForegroundFOV();
	void SetViewingThirdPersonMenu(bool bNewViewingThirdPersonMenu, bool bIsStatusMenu);
	void SetBehindView(bool bNewBehindView);
	void SetContentDebugger();
	void ClearContentDebugger();
	void BehindView();
	void SoakPause(class APawn* P);
	void Typing(bool bTyping);
	void ServerAcknowledgePossession(class APawn* P);
	void AcknowledgePossession(class APawn* P);
	void UnPossess();
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void GivePawn(class APawn* NewPawn);
	void SetHand(unsigned char NewWeaponHand);
	void ServerSetHand(unsigned char NewWeaponHand);
	void ServerPlayerPreferences(unsigned char NewWeaponHand, bool bNewCenteredWeaponFire);
	void NotifyChangedItem(class AWillowItem* PreviousItem, class AWillowItem* NewItem);
	void ResetMapChangeTeleportFlags();
	void ReadyForPlay();
	void ReadyForCommit();
	void NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon, bool bOffHandWeapon);
	void TickPostProcessChainModifiers(float DeltaTime);
	void DrawCoopRangeDebug();
	void ClientAddTinnitusSource(class UAkEvent* TinnitusEvent, float Strength, const struct FVector& VToSource);
	void TriggerTinnitus(float Strength, class UAkEvent* TinnitusEvent, struct FVector* VToSource);
	void TriggerTinnitusFromLocation(float Radius, float StrengthModifier, class UAkEvent* OverrideTinnitusEvent, struct FVector* SourceLocation);
	void ShutDownEchoPSC();
	void TickEchoPSCOpacity();
	void PlayerTick(float DeltaTime);
	void PayForPickupable(const FScriptInterface& Pickupable);
	bool CanAffordToPickUpPickupable(const FScriptInterface& Pickupable);
	void PayForUsedObject(const FScriptInterface& UsedObject, unsigned char UsabilityType);
	bool CanAffordToUseUsableObject(const FScriptInterface& UsedObject, unsigned char UsabilityType);
	void NotifyUnableToAffordPickupable();
	void NotifyUnableToAffordUsableObject(unsigned char UsabilityType);
	void ServerExitVehicle();
	void ExitVehicle();
	bool PerformedSecondaryUseAction();
	bool OnClickSpendGoldenKeyToUse(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool ServerUseWithoutConfirmation();
	void ClientShowGoldenKeyUseConfirmationDialog();
	bool PerformedUseAction();
	bool DoesObjectCostToUse(const FScriptInterface& UsableObject, unsigned char UsabilityType, unsigned char* CurrencyType, int* CostsAmount);
	struct FString FixUpLoadString(const struct FString& InLoadString);
	void QuickLoad();
	void QuickSave();
	void OnSaveGameComplete(float SaveDuration);
	void SaveGame(const struct FString& Filename);
	void SaveGameFor(int controllerIdx, const struct FString& args);
	void enum_targetables(unsigned char Type);
	void ClientApplySaveGame();
	bool PlayerIsLicensedToSaveGame(class UPlayerSaveGame* SaveGame);
	class UItemNamePartDefinition* FindClassModNamePartInSaveGame(class UPlayerSaveGame* SaveGame);
	void UpdatePRIWithSaveGame(int ExpLevel, class UItemNamePartDefinition* ClassModNamePart, class UPlayerNameIdentifierDefinition* CharacterNameIdDef);
	void ServerUpdatePRIWithSaveGame(int ExpLevel, class UItemNamePartDefinition* ClassModNamePart, class UPlayerNameIdentifierDefinition* CharacterNameIdDef);
	static struct FString StaticGetSaveGamePrefix();
	void OnLoadSaveGame(bool bWasSuccessful);
	unsigned char FinishSaveGameLoad(class UPlayerSaveGame* SaveGame, unsigned char LoadResult, bool bUpdatePRI, bool bLoadedNewSaveGame, bool bLoadPlayer, bool bShouldRefreshStandIn, unsigned char LoadPlayerBehavior);
	unsigned char LoadGame(const struct FString& args, bool bUpdatePRI, bool bLoadPlayer, unsigned char LoadPlayerBehavior, class UPlayerSaveGame** SaveGame);
	void NotifySaveGameLoadedDelegates(unsigned char LoadGameResult);
	void UnregisterSaveGameLoadedDelegate(const struct FScriptDelegate& SaveGameLoadedDelegate);
	void RegisterSaveGameLoadedDelegate(const struct FScriptDelegate& SaveGameLoadedDelegate);
	void OnLoadLastSaveGameComplete();
	void OnSaveGameLoaded(unsigned char LoadGameResult);
	void DebugLoadGameFor(int controllerIdx, const struct FString& args);
	void DebugLoadGame(const struct FString& args);
	bool AreSaveGuidsEqual(class UPlayerSaveGame* SaveA, class UPlayerSaveGame* SaveB);
	bool GenerateSaveGameGuid(class UPlayerSaveGame* SaveGame);
	struct FName GetLevelForMission(class UMissionDefinition* InMission);
	void ServerCompleteMission(class UMissionDefinition* Mission, const FScriptInterface& MissionDirector);
	void ServerAcceptMission(class UMissionDefinition* Mission, const FScriptInterface& MissionDirector);
	void AcceptMission(class UMissionDefinition* Mission, const FScriptInterface& MissionDirector);
	unsigned char GetPlayersMissionStatus(class UMissionDefinition* InMission);
	struct FString PopulateMissionDataFromStatus(const struct FMissionStatusPlayerData& MStatus);
	void UpdateLcdMissionStatus();
	bool IsEligibleForMission(class UMissionDefinition* InMission, class AMissionTracker* Tracker);
	bool IsMissionAvailableToTrack(class UMissionDefinition* InMission);
	void UpdateActiveMission(class UMissionDefinition* InMission);
	void GetPlayerActiveMissionIndex(TArray<struct FStatusMenuMissionEligibilityData>* MissionsInProgress, int* ActiveMissionIndex);
	void ServerSetActiveMission(class UMissionDefinition* Mission);
	void GetPlayerAllMissions(TArray<struct FStatusMenuMissionEligibilityData>* MissionsInProgress, int* ActiveMissionIndex);
	int GetMissionIndex(class UMissionDefinition* InMission);
	int NativeGetMissionIndex(class UMissionDefinition* InMission);
	void ClientDoMissionStatusFanfare(unsigned char FanFareType, bool bNotReplicated, class UMissionDefinition* MissionDef, class UMissionObjectiveDefinition* MissionObjective);
	int AddMission(class UMissionDefinition* InMission);
	void ClientReceiveDecrementedMissionObjective(class UMissionObjectiveDefinition* MissionObjective);
	void ClientReceiveClearedMissionObjective(class UMissionObjectiveDefinition* MissionObjective);
	void ClientReceiveMissionTimerChanged(class UMissionDefinition* Mission, float SecondsToAdd);
	void ClientReceiveMissionTimerStopped(class UMissionDefinition* Mission);
	void ClientReceiveMissionTimerStarted(class UMissionDefinition* Mission);
	void DecrementMissionObjective(class UMissionObjectiveDefinition* MissionObjective, class UMissionObjectiveSetDefinition* ActiveObjectiveSet);
	void ClearMissionObjective(class UMissionObjectiveDefinition* MissionObjective, class UMissionObjectiveSetDefinition* ActiveObjectiveSet);
	void SubObjectiveSetAdvanced(class UMissionObjectiveSetDefinition* SubObjectiveSetAdvanced);
	void UpdateMissionObjective(class UMissionObjectiveDefinition* MissionObjective, int ObjectiveBit);
	void SetPlayersMissionObjectiveProgressToWorldsMissionObjectiveProgress(class AMissionTracker* Tracker, class UMissionDefinition* Mission, int PlayThroughNumber, int MissionIndex);
	void SetPlayersMissionProgressToWorldsMissionProgress(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
	void MissionRewardsReceived(class UMissionDefinition* Mission);
	void ReceiveItemReward(class UMissionDefinition* Mission, struct FItemDefinitionData* DefinitionData);
	void ReceiveWeaponReward(class UMissionDefinition* Mission, struct FWeaponDefinitionData* DefinitionData);
	void AcceptOrSaveUnclaimedReward(const struct FPendingMissionRewardData& MissionReward);
	bool IsMissionMoviePlaying();
	void ClientSpawnMissionRewardUI(const struct FPendingMissionRewardData& MissionReward);
	void ClientShowNoRewardScreen(class UMissionDefinition* Mission, unsigned char OldStatus);
	void ClientUpdateUIMissionList(class UMissionDefinition* OnlyIfThisMissionIsAlreadyInTheList);
	int GetNumRewardChoices(const struct FPendingMissionRewardData& MissionReward);
	void ServerGrantMissionRewards(class UMissionDefinition* Mission, bool bGrantAltReward);
	void UpdateActiveObjectiveSet(class UMissionObjectiveSetDefinition* ActiveObjectiveSet);
	void CheckAllSideMissionsCompleteAchievement(class UDownloadableExpansionDefinition* DlcExpansion);
	void CheckForSlaughterAchievement();
	bool CheckPlaythroughAlmostComplete(int PlayThroughNumber);
	bool IsPlaythroughComplete(int PlayThroughNumber);
	bool CheckPlaythroughComplete(int PlayThroughNumber);
	void UpdateMissionStatus(class UMissionDefinition* Mission, unsigned char NewMissionStatus);
	void ToggleMissionFiltered(class UMissionDefinition* Mission);
	void SetMissionFiltered(class UMissionDefinition* Mission, bool bFiltered);
	bool IsMissionFiltered(class UMissionDefinition* Mission);
	class UWillowGlobals* GetWillowGlobals();
	void CheckForHolidayTimedMissions();
	void SpawningProcessComplete();
	bool ShouldLoadSaveGameOnSpawn(bool bIsInitialSpawn, bool bIsClassChange);
	void PawnDied(class APawn* P);
	void ReplicatedEvent(const struct FName& VarName);
	void SaveBlackMarketUpgrades(class UPlayerSaveGame* SaveGame);
	void SaveTheBank(class UPlayerSaveGame* SaveGame);
	void SaveUnloadableDlcContent(class UPlayerSaveGame* SaveGame);
	class UPlayerSaveGame* GeneratePlayerSaveGame();
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void OnCurrencyChanged(const struct FCurrencyState& ChangedCurrency);
	void InviteFriendByIndex(int FriendIndex);
	void UpdateLcdFriendsList();
	void PostSparkEvents();
	void UpdateSparkLocation();
	void PostSparkStats();
	void SortFriends();
	void SetSparkTimers();
	void PostBeginPlay();
	void UpdateSavegameForPlaythroughCompletion(class UPlayerSaveGame** SaveGame);
	void ClientPublishCachedSaveGameToPRI();
	bool IsInPublicOnlineGame();
	void NotifyInitialDeviceSelectionComplete(bool bHasValidDevice);
	void OnLoadLastSaveGame(unsigned char LoadGameResult);
	void LoadLastSavedSaveGame();
	void RefreshRemotePlayerStandIns();
	class APlayerStandIn* GetPrimaryPlayerStandIn();
	class APlayerStandIn* GetPlayerStandIn(class APlayerReplicationInfo* PRI);
	void PlayPlayerStandInTeleportEffect(const struct FVector& EffectLocation, const struct FRotator& EffectRotation);
	void UpdateRemotePlayerStandIn(class AWillowPlayerReplicationInfo* WPRI);
	void ClearPlayerStandIn(class APlayerReplicationInfo* PRI);
	void RefreshPlayerStandIn();
	bool PrimaryPlayerUsingSavedCharacter();
	struct FName GetOutermostLevelName();
	bool ShouldEnterLobbySpectatorMode();
	int GetPlayerIndex();
	void ClientConsoleCommand(const struct FString& Command);
	void CheatServerRCon(const struct FString& Command);
	void CheatRCon(const struct FString& Command);
	void ServerRCon(const struct FString& Command);
	void RCon(const struct FString& Command);
	void RelevanceUtility(bool TurnOn);
	void ClientSetOneOffCompletion(int OneOffIndex, int CompletionIndex, int CompletionMask);
	void ClientSetLevelChallengeUnlockMask(class UChallengeDefinition* AssociatedChallenge, int Index, int Mask, int TotalObjectCount);
	void DetectAndRestoreMissingProfileData(class UPlayerSaveGame* SaveGame);
	bool GetChallengeTotalProgress(class UChallengeDefinition* ChalDef, int* CurrentValue, int* TargetValue);
	bool GetChallengeCurrentLevelProgress(class UChallengeDefinition* ChalDef, int* CurrentValue, int* TargetValue, int* CurrentLevel);
	bool CheckHasCompletedOneOffLevelChallenge(class UChallengeDefinition* ChalDef);
	void ServerCompleteChallenge(class UChallengeDefinition* ChalDef, int LevelIdx);
	int GetNumLevelObjectsFoundFromBitmask(int DiscoveredObjectMask);
	int GetNumLevelObjectsFound(class UChallengeDefinition* ChalDef);
	bool CheckHasCompletedLevelObjectChallengeFromBitmask(int DiscoveredObjectMask, int TotalObjects);
	bool CheckHasCompletedLevelObjectChallenge(class UChallengeDefinition* ChalDef, const struct FName& ForMap);
	void SetHasUnlockedLevelChallengeObject(const FScriptInterface& LevelChallengeObject, bool bIgnoreNumbering);
	bool GetHasUnlockedLevelChallengeObject(const FScriptInterface& LevelChallengeObject);
	void SynchronizeLocalDataPackagesWithServer();
	void UpdateOnDemandPackageStatus(const struct FString& PackageString, bool bIsLoaded);
	void NotifyServerPackageUnloaded(const struct FString& PackageString);
	void NotifyServerPackageLoaded(const struct FString& PackageString);
	void ClientUnloadOnDemandPackage(const struct FString& PackageString);
	void ClientLoadOnDemandPackage(const struct FString& PackageString);
	bool HasPlayerEarnedAnySkillPoints();
	void StopAnyBinkMovie();
	bool IsBinkMoviePlaying(const struct FString& MovieName);
	bool UseScaleformLoadingMovie();
	bool IsAnyBinkMoviePlaying();
	bool IsLoadingMoviePlaying();
	bool UnlockPlayerClassAchievementIfConditionsMet(unsigned char AchievementUnlockType, int IntData, bool bCanBeGreater, bool bCanBeLess);
	bool UnlockAchievementIfConditionsMet(unsigned char AchievementUnlockType, const struct FString& StringData, int IntData, bool bCanBeGreater, bool bCheckStringAndIntData, bool bCanBeLess);
	void SetDataStoreStringValue(const struct FString& MarkupString, const struct FString& NewValue);
	struct FString GetDataStoreStringValue(const struct FString& MarkupString);
	void MarkStationsAsVisited();
	class ATravelStation* NativeFindActiveStation();
	class APawn* GetWorldPawn();
	void OnSkillTreeReset(int NewSkillPoints);
	void OnSkillPointsChanged(int NewSkillPoints);
	void OnSkillGradeChanged(class USkillDefinition* Skill, unsigned char NewSkillPoints, unsigned char Grade);
	void PreProfileWriteSaveComplete(float SaveDuration);
	void OnDownloadPatcherFilesComplete();
};


// Class WillowGame.PlayerStandIn
// 0x01AC (0x0188 - 0x0334)
class APlayerStandIn : public AActor
{
public:
	struct FPointer                                    VfTable_IIGearLikenessConsumer;                           // 0x0188(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x018C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyInfoProvider;                               // 0x0190(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IICustomizable;                                   // 0x0194(0x0004) (Const, Native, NoExport)
	class AWillowPlayerReplicationInfo*                OwningPRI;                                                // 0x0198(0x0004)
	class UPlayerSaveGame*                             SaveGame;                                                 // 0x019C(0x0004)
	float                                              LastDataRequestTimeStamp;                                 // 0x01A0(0x0004) (Transient)
	class UBodyClassDefinition*                        BodyClass;                                                // 0x01A4(0x0004)
	class USkeletalMeshComponent*                      PlayerMeshComp;                                           // 0x01A8(0x0004) (ExportObject, Component, EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x01AC(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bIsPrimary : 1;                                           // 0x01B0(0x0004) (Edit)
	unsigned long                                      bDisplayGear : 1;                                         // 0x01B0(0x0004) (Edit)
	unsigned long                                      bDisplayInForeground : 1;                                 // 0x01B0(0x0004) (Transient)
	unsigned long                                      bHasHead : 1;                                             // 0x01B0(0x0004) (Transient)
	unsigned long                                      bHasSkin : 1;                                             // 0x01B0(0x0004) (Transient)
	unsigned long                                      bAwaitingCustomizationsForTeleportEffect : 1;             // 0x01B0(0x0004) (Transient)
	struct FInstanceDataSet                            InstanceState;                                            // 0x01B4(0x000C) (Transient, Component, NeedCtorLink)
	unsigned char                                      bUsedSlot[0x4];                                           // 0x01C0(0x0001) (Transient)
	unsigned char                                      bUsedGroup[0x2];                                          // 0x01C4(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01C6(0x0002) MISSED OFFSET
	struct FWeaponDefinitionData                       Weapon1Data;                                              // 0x01C8(0x0044) (Transient)
	struct FWeaponDefinitionData                       Weapon2Data;                                              // 0x020C(0x0044) (Transient)
	struct FItemDefinitionData                         ShieldData;                                               // 0x0250(0x0044) (Transient)
	struct FItemDefinitionData                         GrenadeModData;                                           // 0x0294(0x0044) (Transient)
	struct FItemDefinitionData                         ClassModData;                                             // 0x02D8(0x0044) (Transient)
	struct FVector                                     ExtraPlayerMeshOffset;                                    // 0x031C(0x000C) (Transient)
	struct FRotator                                    ExtraPlayerMeshRotation;                                  // 0x0328(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerStandIn");
		return ptr;
	}


	void SetExtraPlayerMeshRotation(const struct FRotator& NewRotation);
	void SetExtraPlayerMeshOffset(const struct FVector& NewOffset);
	void ClearBodyCompositionInstance();
	void ApplyPreviewBodyComposition();
	FScriptInterface GetBodyInfoProvider();
	void ChangeInstanceDataSwitch(const struct FName& SwitchName, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	bool ShouldRefreshLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
	void AssumeLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
	void CloneItemMesh(class USkeletalMeshComponent* ItemMeshComp, const struct FItemDefinitionData& DefinitionData);
	void CloneWeaponMesh(class USkeletalMeshComponent* WeaponMeshComp, const struct FWeaponDefinitionData& DefinitionData, TArray<class USkeletalMeshComponent*>* ComponentsAttachedToPrimaryMesh);
	void InitWeaponMesh(const struct FWeaponDefinitionData& DefinitionData);
	void RefreshGearForRemotePlayer();
	void PlayGearDigistructInEffect();
	void HideEquippedGear();
	void PlayStandInTeleportEffect();
	void RemoveAllComponents();
	void Initialize(class UBodyClassDefinition* StandInBodyClass);
	bool AllowFallbackToDefaultCustomizations();
	void RefreshCustomizationsOnInstanceData();
	struct FName GetCustomizableName();
	void GetCustomizableInstanceDataSets(TArray<struct FPointer>* OutData);
	class UCustomizationDefinition* GetDesiredCustomizationOfType(class UClass* Type);
	void CustomizationApplied(class UCustomizationData* Data);
	void Destroyed();
	void PostBeginPlay();
};


// Class WillowGame.PlayerStatAttributeValueResolver
// 0x0008 (0x003C - 0x0044)
class UPlayerStatAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FName                                       StatName;                                                 // 0x003C(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerStatAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.PlayThroughCountAttributeValueResolver
// 0x0004 (0x003C - 0x0040)
class UPlayThroughCountAttributeValueResolver : public UAttributeValueResolver
{
public:
	int                                                IncludePlaythroughThree;                                  // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayThroughCountAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.PopulationFactoryInteractiveObject
// 0x0024 (0x0058 - 0x007C)
class UPopulationFactoryInteractiveObject : public UPopulationFactory
{
public:
	class UInteractiveObjectDefinition*                ObjectDefinition;                                         // 0x0058(0x0004) (Edit, Const)
	class UInteractiveObjectBalanceDefinition*         ObjectBalanceDefinition;                                  // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSpawnObjectOnGround : 1;                                 // 0x0060(0x0004) (Edit, Const)
	TArray<struct FName>                               EnabledBehaviorSets;                                      // 0x0064(0x000C) (Edit, NeedCtorLink)
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x0070(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryInteractiveObject");
		return ptr;
	}


	struct FString GetDescriptionOfFactoryOutput();
	struct FVector GetSpawnLocation(class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, class UInteractiveObjectDefinition* SelectedObjectDefinition);
	class AWillowInteractiveObject* CreateInteractiveObject(class UPopulationMaster* Master, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, class UInteractiveObjectDefinition* SelectedObjectDefinition);
	void GetPopulatedInteractiveObjectMemento(class AWillowInteractiveObject* InteractiveObject, struct FPopulatedInteractiveObjectMemento* Memento);
	static bool ShouldSavePopulationActor(class UPopulationMaster* Master, class AActor* ActorToSave);
	class AWillowInteractiveObject* RestoreInteractiveObject(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, const struct FPopulatedInteractiveObjectMemento& Memento);
	class AActor* CreatePopulationActor(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel);
	struct FBoxSphereBounds GetSpawnVisibilityBounds(int GameStage, int AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int GameStage, int AwesomeLevel);
	class UInteractiveObjectDefinition* GetObjectDefinition(int GameStage, int AwesomeLevel);
};


// Class WillowGame.PopulationFactoryBlackMarket
// 0x0004 (0x007C - 0x0080)
class UPopulationFactoryBlackMarket : public UPopulationFactoryInteractiveObject
{
public:
	class UBlackMarketDefinition*                      MarketDefinition;                                         // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryBlackMarket");
		return ptr;
	}


	static bool ShouldSavePopulationActor(class UPopulationMaster* Master, class AActor* ActorToSave);
	class AWillowInteractiveObject* CreateInteractiveObject(class UPopulationMaster* Master, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, class UInteractiveObjectDefinition* SelectedObjectDefinition);
	class AActor* CreatePopulationActor(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel);
};


// Class WillowGame.PopulationFactoryVendingMachine
// 0x0060 (0x007C - 0x00DC)
class UPopulationFactoryVendingMachine : public UPopulationFactoryInteractiveObject
{
public:
	unsigned char                                      ShopType;                                                 // 0x007C(0x0001) (Edit)
	unsigned char                                      FormOfCurrency;                                           // 0x007D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007E(0x0002) MISSED OFFSET
	struct FAttributeInitializationData                CommerceMarkup;                                           // 0x0080(0x0010) (Edit, Const)
	struct FName                                       LootConfiguration;                                        // 0x0090(0x0008) (Edit, Const)
	struct FFeaturedItemData                           FeaturedItem;                                             // 0x0098(0x0038) (Edit, Const)
	int                                                FixedItemCost;                                            // 0x00D0(0x0004) (Edit)
	int                                                FixedFeaturedItemCost;                                    // 0x00D4(0x0004) (Edit)
	unsigned long                                      bOverrideFormOfCurrency : 1;                              // 0x00D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryVendingMachine");
		return ptr;
	}


	static bool ShouldSavePopulationActor(class UPopulationMaster* Master, class AActor* ActorToSave);
	class AWillowInteractiveObject* CreateInteractiveObject(class UPopulationMaster* Master, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, class UInteractiveObjectDefinition* SelectedObjectDefinition);
	class AActor* CreatePopulationActor(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel);
};


// Class WillowGame.PopulationFactoryWillowProjectile
// 0x0024 (0x0058 - 0x007C)
class UPopulationFactoryWillowProjectile : public UPopulationFactory
{
public:
	struct FName                                       AttachmentPointName;                                      // 0x0058(0x0008) (Edit, Const)
	unsigned char                                      SpawnDirection;                                           // 0x0060(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	class UProjectileDefinition*                       ProjectileDefinition;                                     // 0x0064(0x0004) (Edit, Const)
	struct FVector                                     RelativeLocation;                                         // 0x0068(0x000C) (Edit, Const)
	unsigned long                                      InheritParentVelocity : 1;                                // 0x0074(0x0004) (Edit, Const)
	float                                              DirectionConeSize;                                        // 0x0078(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryWillowProjectile");
		return ptr;
	}


	struct FString GetDescriptionOfFactoryOutput();
	class AWillowProjectile* CreateProjectile(class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	static bool DestroyPopulationActor(class UPopulationMaster* Master, int nOpportunityIdx, class AActor* ActorToDestroy, class UPopulationFactory* SpawnFactory, int CreationFlags, bool bDontSaveActor);
	class AActor* CreatePopulationActor(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int GameStage, int AwesomeLevel);
};


// Class WillowGame.PopulationFactoryWillowVehicle
// 0x0041 (0x0058 - 0x0099)
class UPopulationFactoryWillowVehicle : public UPopulationFactory
{
public:
	class UVehicleBalanceDefinition*                   VehicleBalanceDefinition;                                 // 0x0058(0x0004) (Edit, Const)
	class AWillowVehicle*                              VehicleArchetype;                                         // 0x005C(0x0004) (Edit, Const)
	class UPawnAllegiance*                             SpawnAllegiance;                                          // 0x0060(0x0004) (Edit, Const)
	int                                                TeamNum;                                                  // 0x0064(0x0004) (Edit, Const)
	TArray<struct FItemPoolInfo>                       ItemPoolList;                                             // 0x0068(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UItemPoolListDefinition*>             ItemPoolIncludedLists;                                    // 0x0074(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FVehicleDefaultCrewStruct>           DefaultCrew;                                              // 0x0080(0x000C) (Edit, NeedCtorLink)
	TArray<struct FRotator>                            InitialGunRotations;                                      // 0x008C(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      BalanceVehicleFor;                                        // 0x0098(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryWillowVehicle");
		return ptr;
	}


	static bool DestroyPopulationActor(class UPopulationMaster* Master, int nOpportunityIdx, class AActor* ActorToDestroy, class UPopulationFactory* SpawnFactory, int CreationFlags, bool bDontSaveActor);
	struct FString GetDescriptionOfFactoryOutput();
	class AActor* CreatePopulationActor(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel);
	void InitializeClone(class AWillowVehicle* Clone);
	class UObject* GetAContextSourceForThePopulationActor(class UPopulationMaster* Master);
	struct FBoxSphereBounds GetSpawnVisibilityBounds(int GameStage, int AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int GameStage, int AwesomeLevel);
	int GetActorSpawnCost(int GameStage, int AwesomeLevel, bool bCanSpawnTest);
	class AWillowVehicle* GetVehicleArchetype(int GameStage, int AwesomeLevel);
};


// Class WillowGame.PopulationOpportunityDen
// 0x00D4 (0x01F0 - 0x02C4)
class APopulationOpportunityDen : public APopulationOpportunity
{
public:
	struct FPointer                                    VfTable_IIAIInterface;                                    // 0x01F0(0x0004) (Const, Native, NoExport)
	int                                                MaxActiveActorsIsNormal;                                  // 0x01F4(0x0004) (Edit)
	int                                                MaxActiveActorsThreatened;                                // 0x01F8(0x0004) (Edit)
	struct FAttributeInitializationData                MaxTotalActorsFormula;                                    // 0x01FC(0x0010) (Edit)
	class APopulationEncounter*                        ParentEncounter;                                          // 0x020C(0x0004) (Edit, EditConst, DuplicateTransient)
	int                                                ParentEncounterWave;                                      // 0x0210(0x0004) (Edit, EditConst, DuplicateTransient)
	class UPopulationDefinition*                       PopulationDef;                                            // 0x0214(0x0004) (Edit)
	float                                              RespawnDelay;                                             // 0x0218(0x0004) (Edit)
	unsigned long                                      bIsCriticalActor : 1;                                     // 0x021C(0x0004) (Edit)
	unsigned long                                      bApplyAspectToChildAI : 1;                                // 0x021C(0x0004) (Edit, Const)
	unsigned long                                      bOpportunityRadius : 1;                                   // 0x021C(0x0004) (Edit)
	unsigned long                                      bAlwaysSeeInThreatRadius : 1;                             // 0x021C(0x0004) (Edit, Const)
	unsigned long                                      bPatrolDen : 1;                                           // 0x021C(0x0004) (Edit, Const)
	unsigned long                                      bNeutral : 1;                                             // 0x021C(0x0004) (Edit, Const)
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;                 // 0x021C(0x0004) (Edit, Const)
	unsigned long                                      bPlayerHasBeenDetected : 1;                               // 0x021C(0x0004) (Transient)
	unsigned long                                      bKeepLeader : 1;                                          // 0x021C(0x0004) (Transient)
	unsigned long                                      bFoundPerches : 1;                                        // 0x021C(0x0004) (Transient)
	unsigned long                                      bFoundRallyPoints : 1;                                    // 0x021C(0x0004) (Transient)
	TArray<class AVolume*>                             DetectionVolumes;                                         // 0x0220(0x000C) (Edit, NeedCtorLink)
	float                                              DenHeight;                                                // 0x022C(0x0004) (Edit, Const)
	float                                              SpawnRadius;                                              // 0x0230(0x0004) (Edit, Const)
	float                                              PatrolRadius;                                             // 0x0234(0x0004) (Edit, Const)
	float                                              ThreatRadius;                                             // 0x0238(0x0004) (Edit, Const)
	TArray<class APopulationOpportunityDen*>           SharedThreatDens;                                         // 0x023C(0x000C) (Edit, NeedCtorLink)
	class UPawnAllegiance*                             OverrideAllegiance;                                       // 0x0248(0x0004) (Edit, Const)
	class AVolume*                                     CombatVolume;                                             // 0x024C(0x0004) (Edit, Const)
	int                                                MaxTotalActors;                                           // 0x0250(0x0004) (Transient)
	class UPawnAllegiance*                             Allegiance;                                               // 0x0254(0x0004) (Transient)
	TArray<class AWillowPawn*>                         SpawnedDenMembers;                                        // 0x0258(0x000C) (Transient, NeedCtorLink)
	struct FPopulationOptionDenSpawnData               SpawnData;                                                // 0x0264(0x0024) (Transient, NeedCtorLink)
	class AActor*                                      Leader;                                                   // 0x0288(0x0004) (Transient)
	TArray<class APerch*>                              Perches;                                                  // 0x028C(0x000C) (Transient, NeedCtorLink)
	class ARallyPoint*                                 CurrentRallyPoint;                                        // 0x0298(0x0004) (Transient)
	TArray<class ARallyPoint*>                         RallyPoints;                                              // 0x029C(0x000C) (Transient, NeedCtorLink)
	struct FFlag                                       Flag_ShouldRally;                                         // 0x02A8(0x0010) (Transient)
	class UWillowAIDenComponent*                       AIComponent;                                              // 0x02B8(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned char                                      TrackedStat;                                              // 0x02BC(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02BD(0x0003) MISSED OFFSET
	int                                                StatValue;                                                // 0x02C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationOpportunityDen");
		return ptr;
	}


	void ApplyPreviewBodyComposition();
	FScriptInterface GetBodyInfoProvider();
	void OnAIAbortMoveToActor(class USeqAct_AIAbortMoveToActor* inAction);
	void OnAICombatVolume(class UWillowSeqAct_AICombatVolume* inAction);
	void OnAIScripted(class UWillowSeqAct_AIScripted* inAction);
	void OnAIScriptedAnim(class UWillowSeqAct_AIScriptedAnim* inAction);
	void OnAIScriptedDeath(class UWillowSeqAct_AIScriptedDeath* inAction);
	void OnAIScriptedFollow(class UWillowSeqAct_AIScriptedFollow* inAction);
	void OnAIScriptedHold(class UWillowSeqAct_AIScriptedHold* inAction);
	void OnAISetItemTossTarget(class UWillowSeqAct_AISetItemTossTarget* inAction);
	void OnAIProvoke(class UWillowSeqAct_AIProvoke* Action);
	void RemoveStat(unsigned char StatType, class AWillowAIPawn* DenPawn, bool bUpdateLinkedDens);
	void AddStat(unsigned char StatType, class AWillowAIPawn* DenPawn, bool bUpdateLinkedDens);
	void InitSequence(class UActionSequence* NewSequence);
	class UAIDefinition* GetAIDefinition();
	class UAIComponent* GetAIComponent();
	FScriptInterface GetAIParent();
	struct FVector GetAILocation();
	class AActor* GetAIActor();
	bool CanTickAI();
	void TriggerProvokedEvents();
	void SetAllegiance(class UPawnAllegiance* NewAllegiance);
	class UPawnAllegiance* GetAllegiance();
	void GetDenMembers(TArray<class AWillowPawn*>* Members);
	void TriggerKismetDeathEvent();
	float SpawnedCanAttackVehicles();
	float GetNumSpawned();
	float GetNumAlive();
	float GetNumDied();
	class ARallyPoint* GetRallyPoint();
	void ChooseNewRallyPoint();
	void FindRallyPoints();
	void TryToAddPerch(class APerch* NewPerch);
	void FindPerches();
	void EnableDebugging(bool bEnabled);
	void RespawnKilledActors(float PercentageOfKilledActorsToRespawn);
	void DoSpawning(class UPopulationMaster* PopMaster);
	void PostBeginPlay();
};


// Class WillowGame.PopulationOpportunityDen_Dynamic
// 0x0010 (0x02C4 - 0x02D4)
class APopulationOpportunityDen_Dynamic : public APopulationOpportunityDen
{
public:
	struct FName                                       DynamicPointName;                                         // 0x02C4(0x0008) (Edit)
	float                                              DynamicPointRadius;                                       // 0x02CC(0x0004) (Edit)
	unsigned long                                      bGetGameStageFromOwner : 1;                               // 0x02D0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationOpportunityDen_Dynamic");
		return ptr;
	}


	void Destroyed();
	void ApplyPreviewBodyComposition();
	FScriptInterface GetBodyInfoProvider();
	bool GetOpportunityGameStage(int* GameStage, int* AwesomeLevel);
};


// Class WillowGame.PopulationOpportunityDenRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UPopulationOpportunityDenRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationOpportunityDenRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.PostureStateExpressionEvaluator
// 0x0004 (0x003C - 0x0040)
class UPostureStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bStanding : 1;                                            // 0x003C(0x0004) (Edit)
	unsigned long                                      bCrouched : 1;                                            // 0x003C(0x0004) (Edit)
	unsigned long                                      bInjured : 1;                                             // 0x003C(0x0004) (Edit)
	unsigned long                                      bSprinting : 1;                                           // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PostureStateExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.ProjectileBehaviorBase
// 0x0000 (0x004C - 0x004C)
class UProjectileBehaviorBase : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehaviorBase");
		return ptr;
	}

};


// Class WillowGame.ProjectileBehavior_Bounce
// 0x0024 (0x004C - 0x0070)
class UProjectileBehavior_Bounce : public UProjectileBehaviorBase
{
public:
	class UAkEvent*                                    BounceAkEvent;                                            // 0x004C(0x0004) (Edit, Const)
	struct FAttributeInitializationData                ElasticityScaleFormula;                                   // 0x0050(0x0010) (Edit, Const)
	struct FVector                                     HitNormal;                                                // 0x0060(0x000C) (Edit, Const)
	float                                              ElasticityScale;                                          // 0x006C(0x0004) (Const, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_Bounce");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileDefinition
// 0x0204 (0x003C - 0x0240)
class UProjectileDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyInfoProvider;                               // 0x0040(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0044(0x0004) (Const, Native, NoExport)
	class UMeshComponent*                              Mesh;                                                     // 0x0048(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	class UAkEvent*                                    AmbientAkEvent;                                           // 0x004C(0x0004) (Edit, Const)
	class UParticleSystem*                             InFlightEffects;                                          // 0x0050(0x0004) (Edit, Const)
	struct FBehaviorContextData                        InFlightEffectsOverrideContext;                           // 0x0054(0x0010) (Edit, Const)
	struct FName                                       InFlightEffectsOverrideName;                              // 0x0064(0x0008) (Edit, Const)
	float                                              InFlightEffectsScale;                                     // 0x006C(0x0004) (Edit, Const)
	class UParticleSystem*                             OverchargedPSCTemplate;                                   // 0x0070(0x0004) (Const, Deprecated)
	class ATemporalField*                              TemporalField;                                            // 0x0074(0x0004) (Edit, Const)
	struct FBehaviorContextData                        DamageTypeOverrideContext;                                // 0x0078(0x0010) (Edit, Const)
	struct FName                                       DamageTypeOverrideName;                                   // 0x0088(0x0008) (Edit, Const)
	class UWillowDamageTypeDefinition*                 DefaultDamageTypeDefinition;                              // 0x0090(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     BounceImpact;                                             // 0x0094(0x0004) (Edit, Const)
	class UAkRtpc*                                     BounceImpactAkRtpc;                                       // 0x0098(0x0004) (Edit, Const)
	struct FBehaviorContextData                        ExplosionOverrideContext;                                 // 0x009C(0x0010) (Edit, Const)
	struct FName                                       ExplosionOverrideName;                                    // 0x00AC(0x0008) (Edit, Const)
	class UExplosionDefinition*                        DefaultExplosionDefinition;                               // 0x00B4(0x0004) (Edit, Const)
	struct FName                                       DamageTypeParameterName;                                  // 0x00B8(0x0008) (Edit, Const)
	unsigned long                                      bAllowRigidBodyImpactEffect : 1;                          // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bUseCustomAimDirection : 1;                               // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bAlwaysOrientInDirectionOfMovement : 1;                   // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bReplicateMovement : 1;                                   // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bInheritVehicleVelocity : 1;                              // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                                // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bTreatVehicleHitsAsTouch : 1;                             // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bCanTouchInstigator : 1;                                  // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bCollideActors : 1;                                       // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bStickyProjectilesDontChangeCollisionSize : 1;            // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bSpawnNoCollisionFail : 1;                                // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bClientIgnoreHitAndTouch : 1;                             // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bAlsoUseZeroExtentTrace : 1;                              // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bCanTakeDirectDamage : 1;                                 // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bCanTakeRadiusDamage : 1;                                 // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      CanTarget : 1;                                            // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bWaitForEffects : 1;                                      // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bTreatProjectileAsEnemy : 1;                              // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      SmoothHomingReplication : 1;                              // 0x00C0(0x0004) (Edit)
	unsigned long                                      bHomingRoll : 1;                                          // 0x00C0(0x0004) (Edit)
	unsigned long                                      bHomingCollisionAvoidance : 1;                            // 0x00C0(0x0004) (Edit)
	unsigned long                                      bStopIfPastTarget : 1;                                    // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bAdjustHomingZVelocity : 1;                               // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bRetryIfTargetInvalid : 1;                                // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bCanHomePhaselockedTargets : 1;                           // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bAutoAimTarget : 1;                                       // 0x00C0(0x0004) (Edit)
	unsigned long                                      bDynamicLightEnvironment : 1;                             // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bCastShadows : 1;                                         // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;                      // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bDynamic : 1;                                             // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bSynthesizeSHLight : 1;                                   // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bShadowFromEnvironment : 1;                               // 0x00C0(0x0004) (Edit, Const)
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                        // 0x00C4(0x0004) (Edit, Const)
	unsigned long                                      bDontDestroyIfVisible : 1;                                // 0x00C4(0x0004) (Edit)
	unsigned long                                      bAICanAvoid : 1;                                          // 0x00C4(0x0004) (Edit, Const)
	unsigned long                                      bIsPossibleHomingTarget : 1;                              // 0x00C4(0x0004) (Edit)
	unsigned long                                      bIsWeaponFire : 1;                                        // 0x00C4(0x0004) (Edit, Const)
	unsigned long                                      bReceiveWeaponFire : 1;                                   // 0x00C4(0x0004) (Edit, Const)
	float                                              RigidBodyImpactEffectThreshold;                           // 0x00C8(0x0004) (Edit, Const)
	float                                              RigidBodyImpactEffectDelay;                               // 0x00CC(0x0004) (Edit, Const)
	struct FVector                                     CustomAimDirection;                                       // 0x00D0(0x000C) (Edit, Const)
	float                                              UpwardVelocityBonus;                                      // 0x00DC(0x0004) (Edit, Const)
	struct FAttributeInitializationData                SpeedFormula;                                             // 0x00E0(0x0010) (Edit, Const)
	float                                              Speed;                                                    // 0x00F0(0x0004) (Const, Deprecated)
	unsigned char                                      PhysicsMode;                                              // 0x00F4(0x0001) (Edit, Const)
	unsigned char                                      AutoAimProfile;                                           // 0x00F5(0x0001) (Edit)
	unsigned char                                      ProjectileType;                                           // 0x00F6(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00F7(0x0001) MISSED OFFSET
	float                                              AtRestSpeedThreshold;                                     // 0x00F8(0x0004) (Edit, Const)
	float                                              GravityScaling;                                           // 0x00FC(0x0004) (Edit, Const)
	struct FVector                                     WaveAmp;                                                  // 0x0100(0x000C) (Edit, Const)
	struct FVector                                     WaveFreq;                                                 // 0x010C(0x000C) (Edit, Const)
	struct FVector                                     WavePhase;                                                // 0x0118(0x000C) (Edit, Const)
	class UBulletListenerComponent*                    BulletListenerComponent;                                  // 0x0124(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	float                                              StickyChildSpawnCollisionIgnoreTime;                      // 0x0128(0x0004) (Edit, Const)
	struct FAttributeInitializationData                Damage;                                                   // 0x012C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                DamageRadius;                                             // 0x013C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MomentumTransfer;                                         // 0x014C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                FuseTime;                                                 // 0x015C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                NumberOfChildProjectiles;                                 // 0x016C(0x0010) (Edit, Const)
	float                                              MaxLifespan;                                              // 0x017C(0x0004) (Edit, Const)
	class UPawnAllegiance*                             Allegiance;                                               // 0x0180(0x0004) (Edit, Const)
	float                                              ViewGuideDistance;                                        // 0x0184(0x0004) (Edit)
	float                                              ViewGuideLockOnAngle;                                     // 0x0188(0x0004) (Edit)
	float                                              SearchRadius;                                             // 0x018C(0x0004) (Edit)
	float                                              TurningRadius;                                            // 0x0190(0x0004) (Edit)
	float                                              TurnThresholdTight;                                       // 0x0194(0x0004) (Edit)
	float                                              TurnThresholdWide;                                        // 0x0198(0x0004) (Edit)
	float                                              HomingRollAmt;                                            // 0x019C(0x0004) (Edit)
	float                                              HomingRollSpeed;                                          // 0x01A0(0x0004) (Edit)
	TArray<struct FHomingRadiusThreshold>              HomingThresholds;                                         // 0x01A4(0x000C) (Edit, Const, NeedCtorLink)
	struct FRotator                                    HomingRotationRate;                                       // 0x01B0(0x000C) (Edit, Const)
	class UClass*                                      ProjectileClass;                                          // 0x01BC(0x0004) (Edit)
	class UResourceDefinition*                         Resource;                                                 // 0x01C0(0x0004) (Edit)
	struct FAttributeInitializationData                ResourceCost;                                             // 0x01C4(0x0010) (Edit)
	float                                              ExpPoints;                                                // 0x01D4(0x0004) (Edit, Const)
	float                                              LightingBoundsScale;                                      // 0x01D8(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutExponent;                                 // 0x01DC(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutTime;                                     // 0x01E0(0x0004) (Edit, Const)
	struct FLinearColor                                AmbientGlow;                                              // 0x01E4(0x0010) (Edit, Const)
	struct FVector                                     AmbientShadowSourceDirection;                             // 0x01F4(0x000C) (Edit, Const)
	struct FLinearColor                                AmbientShadowColor;                                       // 0x0200(0x0010) (Edit, Const)
	float                                              DominantShadowTransitionStartDistance;                    // 0x0210(0x0004) (Edit, Const)
	float                                              DominantShadowTransitionEndDistance;                      // 0x0214(0x0004) (Edit, Const)
	float                                              AIAvoidRadius;                                            // 0x0218(0x0004) (Edit, Const)
	struct FString                                     FlashIconName;                                            // 0x021C(0x000C) (Edit, Const, NeedCtorLink)
	struct FBodyCompositionData                        BodyComposition;                                          // 0x0228(0x0014) (Const, Component, DuplicateTransient, NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x023C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileDefinition");
		return ptr;
	}


	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
	void OnHomingTargetChanged(unsigned char EventOutput, class AActor* TargetObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnReflected(class UObject* HitObject, const struct FVector& ReflectedDirection, const struct FVector& HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTouchProximity(unsigned char EventOutput, class UObject* HitObject, const struct FVector& HitNormal, const struct FVector& HitLocation, int DamageSurfaceType, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitTheWorld(class UObject* HitObject, const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitDamagableObject(unsigned char EventOutput, class UObject* HitObject, const struct FVector& HitNormal, const struct FVector& HitLocation, int DamageSurfaceType, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilledEnemy(class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilledFriendly(class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilledNeutral(class UObject* KilledObject, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedFriendly(class UObject* DamageTaker, float DamageAmount, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnCounterEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTimerEvent(const struct FName& SpecializedEventName, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTookDirectOrRadiusDamage(class UObject* DamageCauser, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTookRadiusDamage(class UObject* DamageCauser, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTookDirectDamage(class UObject* DamageCauser, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnComeToRest(const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitWall(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitShields(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitArmor(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitFleshOrArmor(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitFlesh(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTouched(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, int BoneIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnHitWater(class AActor* HitActor, const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnExplode(class APawn* Instigator, const struct FVector& HitNormal, const struct FVector& HitLocation, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnSpawn(class APawn* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.QSortComparer
// 0x0000 (0x003C - 0x003C)
class UQSortComparer : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("QSortComparer");
		return ptr;
	}

};


// Class WillowGame.InventoryUIStatComparer
// 0x0008 (0x003C - 0x0044)
class UInventoryUIStatComparer : public UQSortComparer
{
public:
	int                                                StatIndex;                                                // 0x003C(0x0004) (Edit)
	unsigned long                                      bSortBestToWorst : 1;                                     // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryUIStatComparer");
		return ptr;
	}

};


// Class WillowGame.QSortAttributeComparer
// 0x0008 (0x003C - 0x0044)
class UQSortAttributeComparer : public UQSortComparer
{
public:
	class UAttributeDefinition*                        Attribute;                                                // 0x003C(0x0004) (Edit)
	unsigned long                                      bBiggerIsBetter : 1;                                      // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("QSortAttributeComparer");
		return ptr;
	}

};


// Class WillowGame.WeaponTypeComparer
// 0x0000 (0x003C - 0x003C)
class UWeaponTypeComparer : public UQSortComparer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponTypeComparer");
		return ptr;
	}

};


// Class WillowGame.RallyPoint
// 0x0000 (0x0188 - 0x0188)
class ARallyPoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RallyPoint");
		return ptr;
	}

};


// Class WillowGame.RecentDropList
// 0x0324 (0x003C - 0x0360)
class URecentDropList : public UObject
{
public:
	int                                                RecentDrops[0xC8];                                        // 0x003C(0x0004)
	int                                                NextIndex;                                                // 0x035C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RecentDropList");
		return ptr;
	}


	bool Contains(int Id);
	void Add(int Id);
};


// Class WillowGame.ResourcePoolStateAttributeValueResolver
// 0x0001 (0x003C - 0x003D)
class UResourcePoolStateAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      PoolState;                                                // 0x003C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ResourcePoolStateAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.SaveGameChannel
// 0x0014 (0x0068 - 0x007C)
class USaveGameChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0068(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SaveGameChannel");
		return ptr;
	}

};


// Class WillowGame.SeqAct_IsInVolume
// 0x001C (0x00A4 - 0x00C0)
class USeqAct_IsInVolume : public USequenceAction
{
public:
	TArray<class AVolume*>                             Volumes;                                                  // 0x00A4(0x000C) (Edit, NeedCtorLink)
	TArray<class AActor*>                              Actors;                                                   // 0x00B0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bAllActorsInVolumes : 1;                                  // 0x00BC(0x0004) (Edit)
	unsigned long                                      bIsTrue : 1;                                              // 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_IsInVolume");
		return ptr;
	}


	bool ActorIsInAnyVolumes(class AActor* inActor);
};


// Class WillowGame.SeqAct_SetNameList
// 0x0008 (0x00A4 - 0x00AC)
class USeqAct_SetNameList : public USequenceAction
{
public:
	unsigned char                                      SetType;                                                  // 0x00A4(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	class UNameListDefinition*                         NameListDef;                                              // 0x00A8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_SetNameList");
		return ptr;
	}

};


// Class WillowGame.SeqEvent_TakeHitRegionDamage
// 0x0044 (0x00C4 - 0x0108)
class USeqEvent_TakeHitRegionDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                          // 0x00C4(0x0004) (Edit)
	float                                              DamageThreshold;                                          // 0x00C8(0x0004) (Edit)
	unsigned long                                      UsePercentOfMaxHealthLimit : 1;                           // 0x00CC(0x0004) (Edit)
	TArray<class UClass*>                              DamageTypes;                                              // 0x00D0(0x000C) (Edit, NeedCtorLink)
	TArray<class UDamageTypeDefinition*>               DamageTypeDefinitions;                                    // 0x00DC(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              IgnoreDamageTypes;                                        // 0x00E8(0x000C) (Edit, NeedCtorLink)
	TArray<class UDamageTypeDefinition*>               IgnoreDamageTypeDefinitions;                              // 0x00F4(0x000C) (Edit, NeedCtorLink)
	class UBodyHitRegionDefinition*                    DamageHitRegion;                                          // 0x0100(0x0004) (Edit)
	float                                              CurrentDamage;                                            // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqEvent_TakeHitRegionDamage");
		return ptr;
	}


	void Reset();
	void HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, class UDamageTypeDefinition* inDamageTypeDefinition, int inAmount, class UBodyHitRegionDefinition* HitRegion);
	bool IsValidDamageTypeDefinition(class UDamageTypeDefinition* inDamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion);
	bool IsValidDamageType(class UClass* inDamageType, class UBodyHitRegionDefinition* HitRegion);
};


// Class WillowGame.SequenceEventEnableByMission
// 0x0024 (0x003C - 0x0060)
class USequenceEventEnableByMission : public USequenceEventCustomEnableCondition
{
public:
	struct FPointer                                    VfTable_IIMission;                                        // 0x003C(0x0004) (Const, Native, NoExport)
	class UMissionDefinition*                          LinkedMission;                                            // 0x0040(0x0004) (Edit)
	struct FMissionStateSelectionData                  MissionStatesToLinkTo;                                    // 0x0044(0x0004) (Edit)
	unsigned long                                      bIsObjectiveSpecific : 1;                                 // 0x0048(0x0004) (Edit)
	class UMissionObjectiveDefinition*                 LinkedObjective;                                          // 0x004C(0x0004) (Edit)
	struct FMissionObjectiveStateSelectionData         ObjectiveStatesToLinkTo;                                  // 0x0050(0x0004) (Edit)
	TArray<class UMissionObjectiveSetDefinition*>      ObjectiveSetRestrictions;                                 // 0x0054(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SequenceEventEnableByMission");
		return ptr;
	}


	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
};


// Class WillowGame.ShieldResourcePool
// 0x0000 (0x0118 - 0x0118)
class UShieldResourcePool : public UResourcePool
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ShieldResourcePool");
		return ptr;
	}

};


// Class WillowGame.ShopTimerRateValueResolver
// 0x0000 (0x003C - 0x003C)
class UShopTimerRateValueResolver : public UAttributeValueResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ShopTimerRateValueResolver");
		return ptr;
	}

};


// Class WillowGame.SkillDefinition
// 0x00F4 (0x003C - 0x0130)
class USkillDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0040(0x0004) (Const, Native, NoExport)
	unsigned long                                      bAutoUpdateContexts : 1;                                  // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bCanBeToggledOff : 1;                                     // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bDoNotShiftPastCurrentTime : 1;                           // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bSubjectToGradeRules : 1;                                 // 0x0044(0x0004) (Edit, Const)
	float                                              SkillEffectUpdateIterval;                                 // 0x0048(0x0004) (Edit, Const)
	struct FString                                     SkillName;                                                // 0x004C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     SkillDescription;                                         // 0x0058(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ScaleformFrameName;                                       // 0x0064(0x000C) (Edit, Const, NeedCtorLink)
	unsigned char                                      SkillType;                                                // 0x0070(0x0001) (Edit, Const)
	unsigned char                                      DurationType;                                             // 0x0071(0x0001) (Edit, Const)
	unsigned char                                      TrackedSkillType;                                         // 0x0072(0x0001) (Edit, Const)
	unsigned char                                      TrackedSkillHUDSlot;                                      // 0x0073(0x0001) (Edit, Const)
	float                                              InitialDuration;                                          // 0x0074(0x0004) (Edit, Const)
	float                                              BaseRange;                                                // 0x0078(0x0004) (Edit, Const)
	struct FName                                       EffectSourceInstanceDataName;                             // 0x007C(0x0008) (Edit, Const)
	TArray<struct FSkillEffectData>                    SkillEffectDefinitions;                                   // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FSkillConstraintData>                SkillConstraints;                                         // 0x0090(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UAttributePresentationDefinition*>    SkillEffectPresentations;                                 // 0x009C(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class AActionSkill*                                ActionSkillArchetype;                                     // 0x00A8(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                SkillVisionModeCoordinatedEffect;                         // 0x00AC(0x0004) (Edit, Const)
	TArray<struct FSkillActionData>                    SkillActivationActions;                                   // 0x00B0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FSkillActionData>                    SkillDeactivationActions;                                 // 0x00BC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FSkillEventResponseData>             EventResponses;                                           // 0x00C8(0x000C) (Edit, Const, NeedCtorLink)
	int                                                DefaultStartingGrade;                                     // 0x00D4(0x0004) (Edit, Const)
	int                                                MaxGrade;                                                 // 0x00D8(0x0004) (Edit, Const)
	int                                                PlayerLevelRequirement;                                   // 0x00DC(0x0004) (Edit, Const)
	class USwfMovie*                                   SkillIcon;                                                // 0x00E0(0x0004) (Edit, Const)
	class UAttributeDefinition*                        CustomStackCount;                                         // 0x00E4(0x0004) (Edit, Const)
	class USkillDefinition*                            TrackedActiveSkill;                                       // 0x00E8(0x0004) (Const, Deprecated)
	TArray<class USkillDefinition*>                    TrackedActiveSkills;                                      // 0x00EC(0x000C) (Edit, Const, NeedCtorLink)
	class UClass*                                      SkillClass;                                               // 0x00F8(0x0004) (Const)
	struct FString                                     LockedSkillDetailStr;                                     // 0x00FC(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FNamedSkillEvent>                    CustomEvents;                                             // 0x0108(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FSkillDamageEventData>               DamageEvents;                                             // 0x0114(0x000C) (Edit, NeedCtorLink)
	TArray<struct FSkillKillEventData>                 KillEvents;                                               // 0x0120(0x000C) (Edit, NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x012C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillDefinition");
		return ptr;
	}


	void FireCustomEvent(const struct FName& EventName, class AController* InController, class UObject* OtherParticipant);
	bool DoesSkillPassMinGradeTest(int SkillGrade);
	void GetSkillEffectPresentations(int SkillGrade, class UObject* ContextSource, TArray<struct FModifierValuePresentationData>* EffectPresentations);
	struct FString GetHumanReadableSkillEffects(int SkillGrade, class UObject* ContextSource);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
	void OnStatusEffectTypeEnd(class AController* SkillInstigator, int EffectType, float TotalDamageDealtToHealth, float TotalDamageDealtToShields, float TotalDuration, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnStatusEffectTypeBegin(class AController* SkillInstigator, int EffectType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnMeleeAttack(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnBledOut(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDownStateEnd(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDownStateBegin(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnAppliedStatusEffectToEnemy(class AController* SkillInstigator, class AController* Enemy, class UObject* StatusEffect, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedEnemyWithMeleeFromBehind(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, const struct FVector& HitLocation, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedUnawareEnemy(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, const struct FVector& HitLocation, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnActionSkillActiveAbilityActivated(class AController* SkillInstigator, class AWillowPawn* AutoAimTarget, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnActionSkillCooldownAbilityActivated(class AController* SkillInstigator, class AWillowPawn* AutoAimTarget, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPlayerResurrected(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPlayerRecoveredFromDownState(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPlayerDeathAverted(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnMissedWeaponShot(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedByFriendly(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Friendly, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedByEnemy(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, class UClass* DamageSource, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedFriendly(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Friendly, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedEnemyExposeDamageSurfaceType(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, bool bWasInjured, const struct FVector& HitLocation, float ExcessDamageDone, int PenetrationCount, int DamageSurfaceType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDamagedEnemy(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, bool bWasInjured, const struct FVector& HitLocation, float ExcessDamageDone, int PenetrationCount, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnWeaponStartReload(class AController* SkillInstigator, class UObject* WeaponReloading, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilledByEnemy(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilledEnemy(const struct FName& SpecializedEventName, class AController* SkillInstigator, class AController* Enemy, bool bWasCrit, float HealthDamageDone, float ShieldDamageDone, float ExcessDamageDone, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldFull(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldDepleted(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnShieldDepletedAfterBeingFull(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnWeaponSwapped(class AController* SkillInstigator, class UObject* NewWeapon, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnWeaponManuallyReloaded(class AController* SkillInstigator, class UObject* WeaponReloaded, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnWeaponReloaded(class AController* SkillInstigator, class UObject* WeaponReloaded, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnWeaponFired(class AController* SkillInstigator, class UObject* WeaponFired, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnWeaponUnzoomed(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnWeaponZoomed(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnThrowGrenadeOverrideSkillActivated(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnMeleeOverrideSkillActivated(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnResumed(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPaused(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDeactivated(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnActivated(class AController* SkillInstigator, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.Skill
// 0x0094 (0x003C - 0x00D0)
class USkill : public UObject
{
public:
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x003C(0x0004) (Const, Native, NoExport)
	class USkillDefinition*                            Definition;                                               // 0x0040(0x0004)
	TArray<struct FAppliedSkillEffect>                 SkillEffects;                                             // 0x0044(0x000C) (NeedCtorLink)
	int                                                Grade;                                                    // 0x0050(0x0004) (Transient)
	int                                                GradeBaseValue;                                           // 0x0054(0x0004) (Const)
	TArray<class UAttributeModifier*>                  GradeModifierStack;                                       // 0x0058(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BonusGradePointsOnExpConversion;                          // 0x0064(0x0004) (Transient)
	float                                              BonusGradePointsOnExpConversionBaseValue;                 // 0x0068(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BonusGradePointsOnExpConversionModifierStack;             // 0x006C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              Duration;                                                 // 0x0078(0x0004) (Transient)
	float                                              DurationBaseValue;                                        // 0x007C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  DurationModifierStack;                                    // 0x0080(0x000C) (Const, Transient, NeedCtorLink)
	float                                              Range;                                                    // 0x008C(0x0004) (Transient)
	float                                              RangeBaseValue;                                           // 0x0090(0x0004) (Const)
	TArray<class UAttributeModifier*>                  RangeModifierStack;                                       // 0x0094(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StartTime;                                                // 0x00A0(0x0004)
	float                                              ActivatedTime;                                            // 0x00A4(0x0004) (Transient)
	unsigned char                                      SkillState;                                               // 0x00A8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	float                                              NextContextUpdateTime;                                    // 0x00AC(0x0004)
	unsigned long                                      bForceRefreshModifiersNextTick : 1;                       // 0x00B0(0x0004)
	unsigned long                                      bWantsToDeactivate : 1;                                   // 0x00B0(0x0004)
	class AController*                                 SkillInstigator;                                          // 0x00B4(0x0004)
	class UObject*                                     AdditionalSkillTarget;                                    // 0x00B8(0x0004)
	class AActionSkill*                                CachedActionSkill;                                        // 0x00BC(0x0004)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x00C0(0x0004)
	struct FScriptDelegate                             __OnSkillStateChanged__Delegate;                          // 0x00C4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Skill");
		return ptr;
	}


	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void ForceRefresh();
	int GetGrade();
	void GetSkillDebug(TArray<struct FString>* DebugInfo);
	void RunSkillEventResponses(unsigned char EventType, class AController* EventRecipient);
	void NotifySkillDamagedEvent(unsigned char EventType, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline);
	void NotifySkillEvent(unsigned char EventType, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline, class UObject* ContextObject);
	int GetSkillGradeForResponseData(const struct FSkillActionData& ActionData);
	static float CalculateModifierValueFromDefinitionEffectArray(class USkillDefinition* InDefinition, int EffectIndex, int SkillGrade, class UObject* ContextSource);
	static float CalculateModifierValue(int SkillGrade, class UObject* ContextSource, struct FSkillEffectData* EffectData);
	void AdjustModifiers(unsigned char AdjustMode, bool bSuppressNotify);
	void GetAttributeContexts(class AController* EffectInstigator, struct FAppliedSkillEffect* SkillEffect);
	class AController* GetEffectInstigator();
	bool IsSkillForInstigator(class AController* Instigator);
	void UpdateGrade(int NewGrade);
	unsigned char CalculateStateBasedOnConstraints(bool bIsOnActivation);
	class AController* GetSkillInstigator();
	unsigned char GetSkillState();
	void Resume();
	void Pause();
	void Deactivate();
	bool Activate();
	void BuildSkillEffects();
	void RemoveVisionModeFromPawns();
	void AddVisionModeForPawns();
	void AddSkillEffect(class AController* EffectInstigator, struct FSkillEffectData* InEffect);
	bool Initialize(class USkillDefinition* InDefinition, class AController* InSkillInstigator, class UObject* InAdditionalSkillTarget, int InGrade, const struct FScriptDelegate& StateChangeDelegate);
	void OnSkillStateChanged(class USkill* AffectedSkill, bool bActivated);
};


// Class WillowGame.SkillExpressionEvaluatorDefinition
// 0x0004 (0x003C - 0x0040)
class USkillExpressionEvaluatorDefinition : public UGBXDefinition
{
public:
	class UExpressionEvaluator*                        Evaluator;                                                // 0x003C(0x0004) (Edit, Const, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillExpressionEvaluatorDefinition");
		return ptr;
	}

};


// Class WillowGame.SkillTreeBranchDefinition
// 0x002C (0x003C - 0x0068)
class USkillTreeBranchDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<class USkillTreeBranchDefinition*>          Children;                                                 // 0x0040(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FTier>                               Tiers;                                                    // 0x004C(0x000C) (Edit, NeedCtorLink)
	class USkillTreeBranchLayoutDefinition*            Layout;                                                   // 0x0058(0x0004) (Edit, Const)
	struct FString                                     BranchName;                                               // 0x005C(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillTreeBranchDefinition");
		return ptr;
	}

};


// Class WillowGame.SkillTreeBranchLayoutDefinition
// 0x000C (0x003C - 0x0048)
class USkillTreeBranchLayoutDefinition : public UGBXDefinition
{
public:
	TArray<struct FTierLayout>                         Tiers;                                                    // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillTreeBranchLayoutDefinition");
		return ptr;
	}

};


// Class WillowGame.SkillTreeDefinition
// 0x0008 (0x003C - 0x0044)
class USkillTreeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	class USkillTreeBranchDefinition*                  Root;                                                     // 0x0040(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillTreeDefinition");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_FirstPerson
// 0x0004 (0x00BC - 0x00C0)
class USpecialMove_FirstPerson : public UGearboxAnimDefinition
{
public:
	unsigned long                                      bStopWeaponRecoilAnim : 1;                                // 0x00BC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_FirstPerson");
		return ptr;
	}


	class UAnimNodeSpecialMoveBlend* GetSMNode(const FScriptInterface& SMI);
	float PlayAnim(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	void StopWeaponRecoilAnimImp(const FScriptInterface& SMI, bool bStopPrimaryHand, bool bStopOffHand);
	void StopWeaponRecoilAnim(const FScriptInterface& SMI);
	float ClientStarted(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	class USkeletalMeshComponent* GetSkeletalMesh(const FScriptInterface& SMI);
};


// Class WillowGame.SpecialMove_FirstPersonDualWieldAction
// 0x0024 (0x00C0 - 0x00E4)
class USpecialMove_FirstPersonDualWieldAction : public USpecialMove_FirstPerson
{
public:
	struct FName                                       OffHandAnimNodeName;                                      // 0x00C0(0x0008) (Edit)
	unsigned long                                      bPlayHolsterEquipOnPrimaryHand : 1;                       // 0x00C8(0x0004) (Edit)
	unsigned long                                      bSyncHolsterEquipWithActionAnim : 1;                      // 0x00C8(0x0004) (Edit)
	unsigned long                                      bDisableDualWieldBlendDuringActionAnim : 1;               // 0x00C8(0x0004) (Edit)
	struct FName                                       HolsterAnimName;                                          // 0x00CC(0x0008) (Edit)
	float                                              HolsterDuration;                                          // 0x00D4(0x0004) (Edit)
	struct FName                                       EquipAnimName;                                            // 0x00D8(0x0008) (Edit)
	float                                              EquipDuration;                                            // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_FirstPersonDualWieldAction");
		return ptr;
	}


	float GetAnimPlayRateScale(class USkeletalMeshComponent* SMC, const struct FName& InAnimName, float Duration, bool bReverseSearchOrder);
	float GetExternalPlayRateScale(class USkeletalMeshComponent* SMC, struct FSpecialMoveData* SMData);
	float GetSyncToActionLengthPlayRateScale(class USkeletalMeshComponent* SMC);
	void StopOffHandAnim(const FScriptInterface& SMI, bool bInterrupted);
	void SetDualWieldWeaponState(class AWillowPlayerPawn* WPP, bool bShow);
	bool PlayChildAnim(const FScriptInterface& SMI, class USkeletalMeshComponent* SMC, const struct FName& InAnimName, float Duration, bool bReverseSearchOrder, const struct FName& InAnimNodeName, float BlendInOverride, float BlendOutOverride, struct FSpecialMoveData* SMData);
	bool PlayEquipAnim(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	bool PlayActionAnim(const FScriptInterface& SMI, bool bStopOffHandAnim, struct FSpecialMoveData* SMData);
	float PlayAnim(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	void AnimFinished(const FScriptInterface& SMI, class UAnimNodeSpecialMoveBlend* BlendNode, bool bInterrupted, struct FSpecialMoveData* SMData);
	void StopWeaponRecoilAnim(const FScriptInterface& SMI);
	float GetAnimLength(class USkeletalMeshComponent* SMC);
};


// Class WillowGame.SprintDefinition
// 0x0018 (0x003C - 0x0054)
class USprintDefinition : public UGBXDefinition
{
public:
	float                                              FOVModifier;                                              // 0x003C(0x0004) (Edit, Const)
	float                                              EyeHeightModifier;                                        // 0x0040(0x0004) (Edit, Const)
	float                                              BobScalar;                                                // 0x0044(0x0004) (Edit, Const)
	TArray<struct FAttributeEffectData>                AttributeEffects;                                         // 0x0048(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SprintDefinition");
		return ptr;
	}

};


// Class WillowGame.StaggerDefinition
// 0x0048 (0x003C - 0x0084)
class UStaggerDefinition : public UGBXDefinition
{
public:
	class UPhysicalMaterial*                           StaggeredPhysicalMaterial;                                // 0x003C(0x0004) (Edit, Const)
	float                                              StaggeredGravity;                                         // 0x0040(0x0004) (Edit, Const)
	float                                              StaggeredRestVelocity;                                    // 0x0044(0x0004) (Edit, Const)
	float                                              StaggeredRestTimeMin;                                     // 0x0048(0x0004) (Edit, Const)
	float                                              StaggeredRestTimeMax;                                     // 0x004C(0x0004) (Edit, Const)
	float                                              StaggeredPhysicsBlendOutSpeed;                            // 0x0050(0x0004) (Edit, Const)
	float                                              StaggeredRestGiveUpTime;                                  // 0x0054(0x0004) (Edit, Const)
	float                                              VehicleStaggerSpeed;                                      // 0x0058(0x0004) (Edit, Const)
	unsigned long                                      bPrefersOverTheHoodOnVehicleImpact : 1;                   // 0x005C(0x0004) (Edit, Const)
	float                                              StaggeredOverHoodMinSpeed;                                // 0x0060(0x0004) (Edit, Const)
	struct FVector                                     MaxStaggerAdjustExtents;                                  // 0x0064(0x000C) (Edit, Const)
	struct FStaggeredRecoveryRotationData              StaggeredRecoveryRotation;                                // 0x0070(0x000C) (Edit, Const)
	class UWillowAnimDefinition*                       HardFlinchAnimation;                                      // 0x007C(0x0004) (Edit, Const)
	float                                              UnstaggerGiveUpTime;                                      // 0x0080(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StaggerDefinition");
		return ptr;
	}

};


// Class WillowGame.StanceTypeDefinition
// 0x0034 (0x003C - 0x0070)
class UStanceTypeDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	unsigned char                                      MovementStyle;                                            // 0x0040(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              SpeedScale;                                               // 0x0044(0x0004) (Edit, Const)
	float                                              RotationScale;                                            // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bCanUseAimOffsets : 1;                                    // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bCanUseTurns : 1;                                         // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bCanUseJumps : 1;                                         // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bCanUseCringes : 1;                                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bCanUseFlinches : 1;                                      // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAllowLeftHandIK : 1;                                     // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bCanDodge : 1;                                            // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAllowMovementDodges : 1;                                 // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bOverrideFlinches : 1;                                    // 0x004C(0x0004) (Const)
	float                                              JumpNodeCostMultiplier;                                   // 0x0050(0x0004) (Edit, Const)
	class UTurnDefinition*                             Turns;                                                    // 0x0054(0x0004) (Edit, Const)
	struct FName                                       AimOffsetName;                                            // 0x0058(0x0008) (Edit, Const)
	TArray<class USpecialMove_Motion*>                 FlinchOverrides;                                          // 0x0060(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StanceTypeDefinition");
		return ptr;
	}


	void OnExitStance(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnEnterStance(struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.StatChannel
// 0x001C (0x0068 - 0x0084)
class UStatChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0068(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatChannel");
		return ptr;
	}

};


// Class WillowGame.StationTeleporterDestination
// 0x000C (0x019C - 0x01A8)
class AStationTeleporterDestination : public ATeleporterDestination
{
public:
	float                                              ExitPointRadius;                                          // 0x019C(0x0004)
	float                                              ExitPointHeight;                                          // 0x01A0(0x0004)
	unsigned long                                      MoveOwnerOnEditorMove : 1;                                // 0x01A4(0x0004) (EditorOnly)
	unsigned long                                      OwnerControlsEditorMove : 1;                              // 0x01A4(0x0004) (EditorOnly)
	unsigned long                                      DetachExitPoints : 1;                                     // 0x01A4(0x0004) (EditorOnly)
	unsigned long                                      ExitPointsReplaced : 1;                                   // 0x01A4(0x0004) (EditorOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StationTeleporterDestination");
		return ptr;
	}


	void UpdateExitPointHeights();
	void UpdateExitPointLocations();
	void Destroyed();
};


// Class WillowGame.StationTeleporterExitPoint
// 0x0000 (0x018C - 0x018C)
class AStationTeleporterExitPoint : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StationTeleporterExitPoint");
		return ptr;
	}

};


// Class WillowGame.StationTeleporterVehicleExitPoint
// 0x0000 (0x018C - 0x018C)
class AStationTeleporterVehicleExitPoint : public AStationTeleporterExitPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StationTeleporterVehicleExitPoint");
		return ptr;
	}

};


// Class WillowGame.StatusEffectChanceModifierResolver
// 0x0000 (0x003C - 0x003C)
class UStatusEffectChanceModifierResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusEffectChanceModifierResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.StatusEffectDefinition
// 0x0114 (0x003C - 0x0150)
class UStatusEffectDefinition : public UGBXDefinition
{
public:
	struct FAttributeInitializationData                BaseDuration;                                             // 0x003C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseSpreadTimeInterval;                                   // 0x004C(0x0010) (Const)
	struct FAttributeInitializationData                BaseSpreadDistanceFromSource;                             // 0x005C(0x0010) (Const)
	struct FAttributeInitializationData                BaseSpreadCap;                                            // 0x006C(0x0010) (Const)
	struct FAttributeInitializationData                TargetStatusEffectChanceModifier;                         // 0x007C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                TargetStatusEffectDurationModifier;                       // 0x008C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                TargetStatusEffectDamageModifier;                         // 0x009C(0x0010) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnApplication;                                            // 0x00AC(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnDurationBegin;                                          // 0x00B8(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnDurationEnd;                                            // 0x00C4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnSpreadToTarget;                                         // 0x00D0(0x000C) (Const, NeedCtorLink, EditInline)
	TArray<struct FDamageSurfaceTypeModifier>          DamageSurfaceChanceModifiers;                             // 0x00DC(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bCanSpread : 1;                                           // 0x00E8(0x0004) (Const)
	unsigned long                                      bDoesDamageOverTime : 1;                                  // 0x00E8(0x0004) (Edit, Const)
	unsigned long                                      bCanReturnToRegion : 1;                                   // 0x00E8(0x0004) (Const)
	unsigned long                                      bCanReturnToTarget : 1;                                   // 0x00E8(0x0004) (Const)
	unsigned long                                      bIsRegionSpecific : 1;                                    // 0x00E8(0x0004) (Edit, Const)
	unsigned long                                      bNoStatusEffectChanceFalloff : 1;                         // 0x00E8(0x0004) (Edit, Const)
	unsigned long                                      bIsInfiniteDuration : 1;                                  // 0x00E8(0x0004) (Edit, Const)
	unsigned char                                      StatusEffectType;                                         // 0x00EC(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	class UDamageTypeDefinition*                       DamageTypeDefinition;                                     // 0x00F0(0x0004) (Edit, Const)
	struct FName                                       AppliedEffectStatId;                                      // 0x00F4(0x0008) (Edit, Const)
	struct FScreenParticleInitParams                   ScreenParticleInit;                                       // 0x00FC(0x0054) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusEffectDefinition");
		return ptr;
	}

};


// Class WillowGame.StatusEffectExpressionEvaluator
// 0x0002 (0x003C - 0x003E)
class UStatusEffectExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned char                                      Type;                                                     // 0x003C(0x0001) (Edit, Const)
	unsigned char                                      EffectState;                                              // 0x003D(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusEffectExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.StatusEffectProxyActor
// 0x0004 (0x0188 - 0x018C)
class AStatusEffectProxyActor : public AActor
{
public:
	struct FPointer                                    VfTable_IIStatusEffectTarget;                             // 0x0188(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusEffectProxyActor");
		return ptr;
	}


	void ServerClearStatusEffects(bool bKillImmediately);
	void Behavior_ClearStatusEffects(bool bKillImmediately);
	bool CanReceiveStatusEffects();
	void ReactToPrimaryStatusEffect(class UStatusEffectDefinition* StatusEffect);
	class UObject* GetAttributeContextSource();
	unsigned char GetDefaultDamageSurfaceType();
	float GetBoundingSphereRadius();
	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
	void AttachEmitter(class AEmitter* E, const struct FName& SocketName);
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate();
	TArray<struct FName> GetDefaultStatusEffectSockets();
	class UStatusEffectsComponent* GetStatusEffectsComponent();
	void Destroyed();
};


// Class WillowGame.StatusEffectsComponent
// 0x011F (0x0059 - 0x0178)
class UStatusEffectsComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	FScriptInterface                                   OwnerTarget;                                              // 0x005C(0x0008)
	float                                              BodyConsumptionPercent;                                   // 0x0064(0x0004)
	TArray<struct FActiveStatusEffect>                 ActiveStatusEffects;                                      // 0x0068(0x000C) (Component, NeedCtorLink)
	class UStatusEffectDefinition*                     LastPrimaryStatusEffect;                                  // 0x0074(0x0004) (Transient)
	unsigned long                                      bCanApplyStatusEffects : 1;                               // 0x0078(0x0004)
	unsigned long                                      bUseClientEmitterList : 1;                                // 0x0078(0x0004)
	unsigned long                                      bUpdateAudio : 1;                                         // 0x0078(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0078(0x0004)
	unsigned long                                      bOwnerDied : 1;                                           // 0x0078(0x0004)
	unsigned long                                      bDebugUsingStatusEffectInspector : 1;                     // 0x0078(0x0004)
	unsigned long                                      bStatusEffectsCleared : 1;                                // 0x0078(0x0004)
	TArray<struct FHitRegionEmitters>                  ActiveEmitters;                                           // 0x007C(0x000C) (NeedCtorLink)
	TArray<struct FEffectSoundData>                    ActiveEffectSounds;                                       // 0x0088(0x000C) (NeedCtorLink)
	TArray<class AStatusEffectReplicatedEmitter*>      ClientEmitters;                                           // 0x0094(0x000C) (NeedCtorLink)
	float                                              IgniteChanceResistanceModifier;                           // 0x00A0(0x0004) (Transient)
	float                                              IgniteChanceResistanceModifierBaseValue;                  // 0x00A4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  IgniteChanceResistanceModifierModifierStack;              // 0x00A8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ShockChanceResistanceModifier;                            // 0x00B4(0x0004) (Transient)
	float                                              ShockChanceResistanceModifierBaseValue;                   // 0x00B8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShockChanceResistanceModifierModifierStack;               // 0x00BC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              CorrosiveChanceResistanceModifier;                        // 0x00C8(0x0004) (Transient)
	float                                              CorrosiveChanceResistanceModifierBaseValue;               // 0x00CC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  CorrosiveChanceResistanceModifierModifierStack;           // 0x00D0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SlowChanceResistanceModifier;                             // 0x00DC(0x0004) (Transient)
	float                                              SlowChanceResistanceModifierBaseValue;                    // 0x00E0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SlowChanceResistanceModifierModifierStack;                // 0x00E4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              AmpChanceResistanceModifier;                              // 0x00F0(0x0004) (Transient)
	float                                              AmpChanceResistanceModifierBaseValue;                     // 0x00F4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  AmpChanceResistanceModifierModifierStack;                 // 0x00F8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              IgniteDurationResistanceModifier;                         // 0x0104(0x0004) (Transient)
	float                                              IgniteDurationResistanceModifierBaseValue;                // 0x0108(0x0004) (Const)
	TArray<class UAttributeModifier*>                  IgniteDurationResistanceModifierModifierStack;            // 0x010C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ShockDurationResistanceModifier;                          // 0x0118(0x0004) (Transient)
	float                                              ShockDurationResistanceModifierBaseValue;                 // 0x011C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShockDurationResistanceModifierModifierStack;             // 0x0120(0x000C) (Const, Transient, NeedCtorLink)
	float                                              CorrosiveDurationResistanceModifier;                      // 0x012C(0x0004) (Transient)
	float                                              CorrosiveDurationResistanceModifierBaseValue;             // 0x0130(0x0004) (Const)
	TArray<class UAttributeModifier*>                  CorrosiveDurationResistanceModifierModifierStack;         // 0x0134(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SlowDurationResistanceModifier;                           // 0x0140(0x0004) (Transient)
	float                                              SlowDurationResistanceModifierBaseValue;                  // 0x0144(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SlowDurationResistanceModifierModifierStack;              // 0x0148(0x000C) (Const, Transient, NeedCtorLink)
	float                                              AmpDurationResistanceModifier;                            // 0x0154(0x0004) (Transient)
	float                                              AmpDurationResistanceModifierBaseValue;                   // 0x0158(0x0004) (Const)
	TArray<class UAttributeModifier*>                  AmpDurationResistanceModifierModifierStack;               // 0x015C(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FOngoingEffectInfo>                  OngoingEffects;                                           // 0x0168(0x000C) (NeedCtorLink)
	class UMaterialInstanceConstant*                   DebugPawnMarkerInst;                                      // 0x0174(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusEffectsComponent");
		return ptr;
	}


	void RemoveDenStat(unsigned char Type);
	void AddDenStat(unsigned char Type);
	void ClearDenStats();
	void ConditionalCreateDebugPawnMarkerInst(class UMaterial* ParentMaterial);
	TArray<unsigned char> GetActiveEffectSounds();
	void StopEffectSound(unsigned char StatusEffectType, bool bCleanly);
	void StartEffectSound(unsigned char StatusEffectType);
	bool IsTypeActive(class AStatusEffectReplicatedEmitter* Emitter, unsigned char StatusEffectType);
	void FillEffectActivityLists(TArray<unsigned char>* ActiveTypes, TArray<unsigned char>* InactiveTypes);
	void UpdateAudio();
	void UnRegisterEmitter(class AStatusEffectReplicatedEmitter* Emitter);
	void RegisterEmitter(class AStatusEffectReplicatedEmitter* Emitter);
	void EmitterUpdated(class AStatusEffectReplicatedEmitter* Emitter);
	void OwnerDied();
	void SetEnabled(bool val);
	void GetNonRegionSpecificEffects(TArray<struct FActiveStatusEffect>* out_List);
	void GetRegionSpecificEffects(class UBodyHitRegionDefinition* HitRegion, TArray<struct FActiveStatusEffect>* out_List);
	void GetStatusEffects(TArray<struct FActiveStatusEffect>* out_List);
	void OnStatusEffectEnd(const struct FActiveStatusEffect& ASE);
	class AEmitter* GetEmitterForSocketRegion(class UBodyHitRegionDefinition* HitRegion, const struct FName& SocketName, bool bCreateNew);
	TArray<struct FName> GetRegionSocketNames(class UBodyHitRegionDefinition* HitRegion);
	void UpdateRegionData(struct FActiveStatusEffect* ASE);
	struct FTraceHitInfo CreateTraceHitInfo(class UBodyHitRegionDefinition* HitRegion);
	void ApplyStatusEffect(class AActor* InstigatedBy, class UClass* DamageType, class UStatusEffectDefinition* StatusEffectDefinition, const FScriptInterface& DamageCauser, class UBodyHitRegionDefinition* HitRegion, bool bIsFromSpreading, const struct FActiveStatusEffect& SpreadSource);
	void CheatApplyStatusEffect(class AActor* InstigatedBy, class UStatusEffectDefinition* StatusEffectDefinition, const FScriptInterface& DamageCauser);
	static bool IsGuaranteedSpreadEnabled();
	static void SetGuaranteedSpreadEnabled(bool bEnable);
	static bool IsEnableLogSpreadingEnabled();
	static bool IsLogOnlyInspectedTargetsEnabled();
	static bool IsStatusEffectDebugEnabled();
	static void SetLogOnlyInspectedTargets(bool bEnable);
	static void SetEnableLogSpreading(bool bEnable);
	static void SetEnableLog(bool bEnable);
	static void ToggleStatusEffectDebug();
	void ClearAllStatusEffects(bool bCleanly);
	bool IsEnabled();
	void UpdateBodyConsumptionPercent();
	TArray<class UStatusEffectDefinition*> GetRegionStatusEffects(class UBodyHitRegionDefinition* Region);
	bool IsRegionAffectedWithStatusEffect(class UBodyHitRegionDefinition* Region, class UStatusEffectDefinition* StatusEffect, int* AffectedIndex);
	bool IsAffectedWithStatusEffectFromDamageType(unsigned char DamageType);
	bool IsAffectedWithStatusEffectType(unsigned char Type);
	void RollChanceForStatusEffect(class AActor* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, class UStatusEffectDefinition* StatusEffectDefinition, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UBodyHitRegionDefinition* HitRegion, float ChanceModifier, struct FDamageEventSummary* DamageSummary);
	TArray<unsigned char> GetActiveStatusEffectTypes();
	bool HasActiveStatusEffects();
	class UStatusEffectDefinition* GetMostRecentStatusEffect();
	class UBodyHitRegionDefinition* GetMostRecentEffectHitRegion();
};


// Class WillowGame.TargetableAttributeValueResolver
// 0x0001 (0x003C - 0x003D)
class UTargetableAttributeValueResolver : public UAttributeValueResolver
{
public:
	unsigned char                                      ValueToResolve;                                           // 0x003C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TargetableAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.TemporalField
// 0x0018 (0x0188 - 0x01A0)
class ATemporalField : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0188(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      fBlockBullets : 1;                                        // 0x018C(0x0004) (Edit)
	class USkillDefinition*                            SkillEffect;                                              // 0x0190(0x0004) (Edit, Const)
	float                                              MyTickMultiplier;                                         // 0x0194(0x0004) (Edit, Const)
	float                                              TransitionDistancePercent;                                // 0x0198(0x0004) (Edit, Const)
	class UParticleSystem*                             TouchEffectTemplate;                                      // 0x019C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TemporalField");
		return ptr;
	}


	void PlayTouchEffect(const struct FVector& HitLocation);
	float CalculateTickMultiplierForActor(class AActor* AffectedActor);
	void Destroyed();
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
	struct FVector GetFieldNormal(const struct FVector& HitLocation);
	static bool IsTemporalFieldDebugEnabled();
	static void ToggleTemporalFieldDebug();
};


// Class WillowGame.TextMarkupDictionary
// 0x0010 (0x003C - 0x004C)
class UTextMarkupDictionary : public UGBXDefinition
{
public:
	TArray<struct FTextMarkupEntry>                    Dictionary;                                               // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bInitializedMarkupTags : 1;                               // 0x0048(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TextMarkupDictionary");
		return ptr;
	}


	struct FString ResolveCustomMarkupString(const struct FString& StringToResolve);
};


// Class WillowGame.TrainingMessageDefinition
// 0x004C (0x003C - 0x0088)
class UTrainingMessageDefinition : public UGBXDefinition
{
public:
	struct FName                                       StatId;                                                   // 0x003C(0x0008) (Edit, Const)
	int                                                StatTargetValue;                                          // 0x0044(0x0004) (Edit, Const)
	struct FString                                     Key;                                                      // 0x0048(0x000C) (Edit, NeedCtorLink)
	struct FString                                     TitleKey;                                                 // 0x0054(0x000C) (Edit, NeedCtorLink)
	struct FString                                     HUDInitializationFrame;                                   // 0x0060(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      PausesGame : 1;                                           // 0x006C(0x0004) (Edit)
	unsigned long                                      bMandatory : 1;                                           // 0x006C(0x0004) (Edit)
	float                                              PauseContinueDelay;                                       // 0x0070(0x0004) (Edit)
	struct FName                                       ExceptIfStatId;                                           // 0x0074(0x0008) (Edit, Const)
	int                                                ExceptIfGreaterThan;                                      // 0x007C(0x0004) (Edit, Const)
	unsigned char                                      StatusMenuTab;                                            // 0x0080(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	class UGearboxDialogPriority*                      DialogPriority;                                           // 0x0084(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TrainingMessageDefinition");
		return ptr;
	}

};


// Class WillowGame.TravelStationDefinition
// 0x0038 (0x003C - 0x0074)
class UTravelStationDefinition : public UGBXDefinition
{
public:
	struct FName                                       StationLevelName;                                         // 0x003C(0x0008) (Edit, Const, EditConst)
	class UTravelStationDefinition*                    PreviousStation;                                          // 0x0044(0x0004) (Edit, Const, EditConst)
	class UDownloadableExpansionDefinition*            DlcExpansion;                                             // 0x0048(0x0004) (Edit, Const, EditConst)
	struct FVector                                     StationLocation;                                          // 0x004C(0x000C) (Edit, Const)
	class UTexture*                                    StationDisplayImage;                                      // 0x0058(0x0004) (Edit, Const)
	struct FString                                     StationDisplayName;                                       // 0x005C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<struct FMissionStatusData>                  MissionDependencies;                                      // 0x0068(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TravelStationDefinition");
		return ptr;
	}


	static struct FName StaticGetAccessibleLevelName(const struct FName& DefaultLevelName);
	struct FName GetStationLevelName();
};


// Class WillowGame.FastTravelStationDefinition
// 0x0025 (0x0074 - 0x0099)
class UFastTravelStationDefinition : public UTravelStationDefinition
{
public:
	unsigned long                                      bInitiallyActive : 1;                                     // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bSendOnly : 1;                                            // 0x0074(0x0004) (Edit, Const)
	struct FString                                     StationDescription;                                       // 0x0078(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     StationSign;                                              // 0x0084(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UMissionObjectiveDefinition*                 InaccessibleObjective;                                    // 0x0090(0x0004) (Edit, Const)
	class UMissionObjectiveDefinition*                 AccessibleObjective;                                      // 0x0094(0x0004) (Edit, Const)
	unsigned char                                      AccessibilityTime;                                        // 0x0098(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelStationDefinition");
		return ptr;
	}

};


// Class WillowGame.LevelTravelStationDefinition
// 0x0014 (0x0074 - 0x0088)
class ULevelTravelStationDefinition : public UTravelStationDefinition
{
public:
	unsigned long                                      bIsNonDlcToDlcTransition : 1;                             // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bAllowVehiclesToThisStation : 1;                          // 0x0074(0x0004) (Edit, Const)
	class ULevelTravelStationDefinition*               DestinationStationDefinition;                             // 0x0078(0x0004) (Edit, Const, EditConst)
	struct FString                                     DisplayName;                                              // 0x007C(0x000C) (Edit, Const, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelTravelStationDefinition");
		return ptr;
	}

};


// Class WillowGame.TravelStationNozzleComponent
// 0x0000 (0x0210 - 0x0210)
class UTravelStationNozzleComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TravelStationNozzleComponent");
		return ptr;
	}

};


// Class WillowGame.TurnDefinition
// 0x003C (0x003C - 0x0078)
class UTurnDefinition : public UGBXDefinition
{
public:
	struct FTurnData                                   Idle;                                                     // 0x003C(0x001C) (Edit, Const)
	struct FTurnData                                   Moving;                                                   // 0x0058(0x001C) (Edit, Const)
	float                                              TurnCancelTime;                                           // 0x0074(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TurnDefinition");
		return ptr;
	}


	bool UsesMovingTurns();
	bool UsesIdleTurns();
};


// Class WillowGame.VantageNode
// 0x001C (0x0244 - 0x0260)
class AVantageNode : public APathNode
{
public:
	TArray<struct FName>                               VantageOnAreas;                                           // 0x0244(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               WeaponTypeFilters;                                        // 0x0250(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      UseAsGuardPost : 1;                                       // 0x025C(0x0004) (Edit, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VantageNode");
		return ptr;
	}

};


// Class WillowGame.VehicleBalanceDefinition
// 0x0028 (0x003C - 0x0064)
class UVehicleBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	class AWillowVehicle*                              DefaultVehicle;                                           // 0x0040(0x0004) (Edit, Const)
	unsigned long                                      Champion : 1;                                             // 0x0044(0x0004) (Edit, Const)
	struct FAttributeInitializationData                DefaultExpLevel;                                          // 0x0048(0x0010) (Edit, Const)
	TArray<struct FVehicleGameStageGradeWeightData>    Grades;                                                   // 0x0058(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleBalanceDefinition");
		return ptr;
	}


	class AWillowVehicle* GetArchetypeForGrade(int GradeIndex);
	class AWillowVehicle* GetArchetypeForGameStage(int GameStage, int AwesomeLevel);
};


// Class WillowGame.VehicleBlockingVolume
// 0x0000 (0x01C0 - 0x01C0)
class AVehicleBlockingVolume : public ABlockingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleBlockingVolume");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
};


// Class WillowGame.VehicleChoiceModuleGFxObject
// 0x0014 (0x0078 - 0x008C)
class UVehicleChoiceModuleGFxObject : public UGFxObject
{
public:
	unsigned long                                      CachedAnySeatAvailable : 1;                               // 0x0078(0x0004) (Transient)
	unsigned char                                      CachedVehicleState;                                       // 0x007C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	class UVSSUIDefinition*                            SelectedVehicleUIDefinition;                              // 0x0080(0x0004) (Transient)
	class UCustomizationDefinition*                    EquippedVehicleCustomizationDefinition;                   // 0x0084(0x0004) (Transient)
	class UCustomizationDefinition*                    PreviewVehicleCustomizationDefinition;                    // 0x0088(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleChoiceModuleGFxObject");
		return ptr;
	}


	void DisableClip();
	void ConfigureVehicleState(int StateID);
	void ConfigureTeleportButton(const struct FString& Label, bool bDisabled);
	void ConfigureSpawnVehicleButton(const struct FString& Label, bool bDisabled);
	void ConfigureSkinTypeButton(const struct FString& Label, bool bDisabled);
	void ConfigureVehicleTypeButton(const struct FString& Label, bool bDisabled);
};


// Class WillowGame.VehicleClassDefinition
// 0x0318 (0x003C - 0x0354)
class UVehicleClassDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x0040(0x0004) (Edit)
	struct FCollisionDamageCalculation                 VehicleImpactDamage;                                      // 0x0044(0x002C) (Edit, NeedCtorLink)
	struct FCollisionDamageCalculation                 VehicleRunOverDamage;                                     // 0x0070(0x002C) (Edit, NeedCtorLink)
	struct FCollisionDamageCalculation                 VehicleFeedbackDamage;                                    // 0x009C(0x002C) (Edit, NeedCtorLink)
	float                                              DelayBetweenCollisionDamageDealtToSelf;                   // 0x00C8(0x0004) (Edit, Const)
	TArray<struct FVehicleSeatDefinition>              Seats;                                                    // 0x00CC(0x000C) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           SpeedVDamageCurve;                                        // 0x00D8(0x0010) (Edit, Const, NeedCtorLink)
	struct FDamageTypeResistance                       NormalDamageModifiers;                                    // 0x00E8(0x0020) (Edit, Const)
	struct FDamageTypeResistance                       ExplosiveDamageModifiers;                                 // 0x0108(0x0020) (Edit, Const)
	struct FDamageTypeResistance                       ShockDamageModifiers;                                     // 0x0128(0x0020) (Edit, Const)
	struct FDamageTypeResistance                       CorrosiveDamageModifiers;                                 // 0x0148(0x0020) (Edit, Const)
	struct FDamageTypeResistance                       IncendiaryDamageModifiers;                                // 0x0168(0x0020) (Edit, Const)
	struct FDamageTypeResistance                       AmpDamageModifiers;                                       // 0x0188(0x0020) (Edit, Const)
	struct FVStatusEffectResistance                    IgniteResistanceModifiers;                                // 0x01A8(0x0020) (Edit, Const)
	struct FVStatusEffectResistance                    ShockResistanceModifiers;                                 // 0x01C8(0x0020) (Edit, Const)
	struct FVStatusEffectResistance                    CorrosiveResistanceModifiers;                             // 0x01E8(0x0020) (Edit, Const)
	struct FVStatusEffectResistance                    AmpResistanceModifiers;                                   // 0x0208(0x0020) (Edit, Const)
	struct FString                                     DisplayName;                                              // 0x0228(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UResourcePoolDefinition*                     HealthPoolDefinition;                                     // 0x0234(0x0004) (Edit)
	struct FVector                                     DeathImpulseScalar;                                       // 0x0238(0x000C) (Edit)
	float                                              PlayerShieldDamagePercentOnVehicleDeath;                  // 0x0244(0x0004) (Edit)
	float                                              PlayerHealthDamagePercentOnVehicleDeath;                  // 0x0248(0x0004) (Edit)
	float                                              RestThreshold;                                            // 0x024C(0x0004) (Edit)
	float                                              AfterburnerSpeed;                                         // 0x0250(0x0004) (Edit)
	float                                              AfterburnerForceMagnitude;                                // 0x0254(0x0004) (Edit)
	unsigned long                                      AllowAfterburner : 1;                                     // 0x0258(0x0004) (Edit)
	unsigned long                                      AfterburnerNoThrottleShutoff : 1;                         // 0x0258(0x0004) (Edit)
	unsigned long                                      bAIVehicle : 1;                                           // 0x0258(0x0004) (Edit)
	unsigned long                                      bSnapToTarget : 1;                                        // 0x0258(0x0004) (Edit)
	unsigned long                                      SupportsTraining : 1;                                     // 0x0258(0x0004) (Edit, Const)
	float                                              AfterburnerActivationSpeed;                               // 0x025C(0x0004) (Edit)
	float                                              AfterburnerMinSpeed;                                      // 0x0260(0x0004) (Edit)
	float                                              AfterburnerMinSpeedTimeoutDuration;                       // 0x0264(0x0004) (Edit)
	struct FGearboxViewShakeInfo                       AfterburnerCameraShake;                                   // 0x0268(0x0044) (Edit)
	float                                              AfterburnerCameraShakeRepeatTime;                         // 0x02AC(0x0004) (Edit)
	float                                              AfterburnerBoostTime;                                     // 0x02B0(0x0004) (Edit)
	float                                              AfterburnerMaxFOV;                                        // 0x02B4(0x0004) (Edit)
	struct FVector                                     AfterburnerImpulseOrigin;                                 // 0x02B8(0x000C) (Edit)
	class UResourcePoolDefinition*                     AfterburnerPoolDefinition;                                // 0x02C4(0x0004) (Edit)
	float                                              AfterburnerBrakingBonus;                                  // 0x02C8(0x0004) (Edit)
	struct FVector                                     AfterburnerImpulse;                                       // 0x02CC(0x000C) (Edit)
	float                                              AfterburnerChassisTorqueScalar;                           // 0x02D8(0x0004) (Edit)
	float                                              AfterburnerTorqueBonus;                                   // 0x02DC(0x0004) (Edit)
	float                                              AfterburnerTorqueDecayRate;                               // 0x02E0(0x0004) (Edit)
	class UForceFeedbackWaveform*                      AfterburnerRumble;                                        // 0x02E4(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UForceFeedbackWaveform*                      BrakingRumble;                                            // 0x02E8(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	float                                              BrakingRumbleScaleAdjustment;                             // 0x02EC(0x0004) (Edit, Const)
	float                                              SkidParticleScale;                                        // 0x02F0(0x0004) (Edit, Const)
	float                                              SkidParticleScaleDecaySpeed;                              // 0x02F4(0x0004) (Edit, Const)
	float                                              SkidParticleMinVehicleSpeed;                              // 0x02F8(0x0004) (Edit, Const)
	float                                              FOV;                                                      // 0x02FC(0x0004) (Edit)
	float                                              DefaultFOVModifierSpeed;                                  // 0x0300(0x0004) (Edit)
	float                                              AfterburnerOnFOVModifierSpeed;                            // 0x0304(0x0004) (Edit)
	float                                              AfterburnerOffFOVModifierSpeed;                           // 0x0308(0x0004) (Edit)
	float                                              PlayerSpeed;                                              // 0x030C(0x0004) (Edit)
	float                                              AIPatrolSpeed;                                            // 0x0310(0x0004) (Edit, EditConst)
	float                                              AIPursuitSpeed;                                           // 0x0314(0x0004) (Edit, EditConst)
	float                                              AICatchUpSpeed;                                           // 0x0318(0x0004) (Edit, EditConst)
	float                                              AIMatchDistance;                                          // 0x031C(0x0004) (Edit)
	float                                              AIAdjustDistance;                                         // 0x0320(0x0004) (Edit)
	float                                              AISpeedModifier;                                          // 0x0324(0x0004) (Edit)
	float                                              AIDirectionModifier;                                      // 0x0328(0x0004) (Edit)
	float                                              AITargetSpeedLimit;                                       // 0x032C(0x0004) (Edit)
	struct FName                                       TargetableSocket;                                         // 0x0330(0x0008) (Edit)
	unsigned char                                      DefaultRootRotationMode;                                  // 0x0338(0x0001) (Edit)
	unsigned char                                      DefaultRootTranslationMode;                               // 0x0339(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x033A(0x0002) MISSED OFFSET
	struct FRotator                                    RotationRate;                                             // 0x033C(0x000C) (Edit)
	class UVehicleCrewAnimSetLookupTable*              CrewAnimSetLookupTable;                                   // 0x0348(0x0004) (Edit, Const)
	struct FName                                       StatNameFirstTimeUse;                                     // 0x034C(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleClassDefinition");
		return ptr;
	}


	float GetSpeedDamageModifier(float CollisionSpeed);
	struct FVector GetEjectionVelocity(int Seat);
	int GetSeatIndexFromPrefix(const struct FString& Prefix);
	class UWillowAnimDefinition* GetEnterAnim(int SeatIndex, unsigned char Side, int IncomingSeatIndex);
	void EvaluateDamageFormula(class AActor* Target, class AWillowVehicle* Source, struct FCollisionDamageCalculation* Formula, struct FVector* ApplyForce, float* ApplyDamage);
	void OnReverseLightsDeactivated(const struct FBehaviorConsumerHandle& Consumer);
	void OnReverseLightsActivated(const struct FBehaviorConsumerHandle& Consumer);
	void OnBrakeLightsDeactivated(const struct FBehaviorConsumerHandle& Consumer);
	void OnBrakeLightsActivated(const struct FBehaviorConsumerHandle& Consumer);
	void OnHeadlightsDeactivated(const struct FBehaviorConsumerHandle& Consumer);
	void OnHeadlightsActivated(const struct FBehaviorConsumerHandle& Consumer);
	void OnSeatExited(const struct FBehaviorConsumerHandle& Consumer, const struct FName& SpecializedEventName, class UObject* Occupant);
	void OnSeatEntered(const struct FBehaviorConsumerHandle& Consumer, const struct FName& SpecializedEventName, class UObject* Occupant);
	void OnSpawn(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnStopHandbrake(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnStartHandbrake(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTurretStoppedRotation(class AController* Instigator, class UObject* TheVehicle, int SeatIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTurretRotated(class AController* Instigator, class UObject* TheVehicle, int SeatIndex, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnCollision(unsigned char EventOutput, const struct FVector& Velocity, const struct FVector& HitLocation, class AActor* HitActor, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTakeDamage(class UObject* Instigator, float Damage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDestroy(const struct FVector& Velocity, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnKilledBy(class AController* Killer, class UClass* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDeath(const struct FVector& Velocity, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnAfterburnerDisengaged(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnAfterburnerEngaged(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPlayHorn(struct FBehaviorConsumerHandle* ConsumerHandle);
	void ProcessSeatEvent(int Index, class UObject* Occupant, bool bIsOccupied, struct FBehaviorConsumerHandle* ConsumerHandle);
	class UDamageTypeDefinition* GetCollisionDamageTypeForSpeed(float Speed, struct FCollisionDamageCalculation* DamageCalc);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.VehicleCrewAnimSetLookupTable
// 0x000C (0x003C - 0x0048)
class UVehicleCrewAnimSetLookupTable : public UObject
{
public:
	TArray<struct FVehicleCrewAnimSetMapping>          Mappings;                                                 // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleCrewAnimSetLookupTable");
		return ptr;
	}

};


// Class WillowGame.VehicleFamilyDefinition
// 0x0038 (0x003C - 0x0074)
class UVehicleFamilyDefinition : public UGBXDefinition
{
public:
	TArray<class UVSSUIDefinition*>                    VehicleUIDefinitions;                                     // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     FamilyName;                                               // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class USwfMovie*                                   VehiclePreviewClip;                                       // 0x0054(0x0004) (Edit, Const)
	class UMissionObjectiveDefinition*                 RequiredMissionCompletionToUnlock;                        // 0x0058(0x0004) (Edit, Const)
	TArray<unsigned char>                              SupportedTags;                                            // 0x005C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<unsigned char>                              RequiredTags;                                             // 0x0068(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleFamilyDefinition");
		return ptr;
	}


	struct FString GetVehiclePreviewMoviePath();
};


// Class WillowGame.VehicleHandlingDefinition
// 0x00C0 (0x003C - 0x00FC)
class UVehicleHandlingDefinition : public UGBXDefinition
{
public:
	float                                              WheelSuspensionStiffness;                                 // 0x003C(0x0004) (Edit)
	float                                              WheelSuspensionDamping;                                   // 0x0040(0x0004) (Edit)
	float                                              WheelSuspensionBias;                                      // 0x0044(0x0004) (Edit)
	float                                              WheelLongExtremumSlip;                                    // 0x0048(0x0004) (Edit)
	float                                              WheelLongExtremumValue;                                   // 0x004C(0x0004) (Edit)
	float                                              WheelLongAsymptoteSlip;                                   // 0x0050(0x0004) (Edit)
	float                                              WheelLongAsymptoteValue;                                  // 0x0054(0x0004) (Edit)
	float                                              WheelLatExtremumSlip;                                     // 0x0058(0x0004) (Edit)
	float                                              WheelLatExtremumValue;                                    // 0x005C(0x0004) (Edit)
	float                                              WheelLatAsymptoteSlip;                                    // 0x0060(0x0004) (Edit)
	float                                              WheelLatAsymptoteValue;                                   // 0x0064(0x0004) (Edit)
	float                                              WheelInertia;                                             // 0x0068(0x0004) (Edit)
	unsigned long                                      bWheelSpeedOverride : 1;                                  // 0x006C(0x0004) (Edit)
	unsigned long                                      bClampedFrictionModel : 1;                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bAutoDrive : 1;                                           // 0x006C(0x0004) (Edit)
	unsigned long                                      bStayUpright : 1;                                         // 0x006C(0x0004) (Edit)
	float                                              AutoDriveSteer;                                           // 0x0070(0x0004) (Edit)
	struct FVector                                     COMOffset;                                                // 0x0074(0x000C) (Edit)
	struct FVector                                     InertiaTensorMultiplier;                                  // 0x0080(0x000C) (Edit)
	float                                              StayUprightRollResistAngle;                               // 0x008C(0x0004) (Edit)
	float                                              StayUprightPitchResistAngle;                              // 0x0090(0x0004) (Edit)
	float                                              StayUprightStiffness;                                     // 0x0094(0x0004) (Edit)
	float                                              StayUprightDamping;                                       // 0x0098(0x0004) (Edit)
	TArray<struct FVehicleHandlingWheelData>           Wheels;                                                   // 0x009C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FFishtailingInfo>                    HandbrakeFishtailForces;                                  // 0x00A8(0x000C) (Edit, NeedCtorLink)
	struct FGearboxViewShakeInfo                       FishtailCameraShake;                                      // 0x00B4(0x0044) (Edit)
	float                                              FishtailCameraShakeMinVehicleSpeed;                       // 0x00F8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleHandlingDefinition");
		return ptr;
	}


	void ApplyDefinitionToVehicle(class AWillowVehicle* Vehicle);
};


// Class WillowGame.CarVehicleHandlingDefinition
// 0x0054 (0x00FC - 0x0150)
class UCarVehicleHandlingDefinition : public UVehicleHandlingDefinition
{
public:
	float                                              ChassisTorqueScale;                                       // 0x00FC(0x0004) (Edit)
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                                       // 0x0100(0x0010) (Edit, NeedCtorLink)
	float                                              SteerSpeed;                                               // 0x0110(0x0004) (Edit)
	float                                              ReverseThrottle;                                          // 0x0114(0x0004) (Edit)
	float                                              EngineBrakeFactor;                                        // 0x0118(0x0004) (Edit)
	float                                              MaxBrakeTorque;                                           // 0x011C(0x0004) (Edit)
	float                                              StopThreshold;                                            // 0x0120(0x0004) (Edit)
	struct FInterpCurveFloat                           TorqueVSpeedCurve;                                        // 0x0124(0x0010) (Edit, NeedCtorLink)
	float                                              LSDFactor;                                                // 0x0134(0x0004) (Edit)
	float                                              ThrottleSpeed;                                            // 0x0138(0x0004) (Edit)
	float                                              SlopeMinDriveLimit;                                       // 0x013C(0x0004) (Edit)
	float                                              SlopeMaxDriveLimit;                                       // 0x0140(0x0004) (Edit)
	float                                              FrontalCollisionGripFactor;                               // 0x0144(0x0004) (Edit)
	float                                              InAirUprightTorqueFactor;                                 // 0x0148(0x0004) (Edit)
	float                                              InAirUprightMaxTorque;                                    // 0x014C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CarVehicleHandlingDefinition");
		return ptr;
	}

};


// Class WillowGame.HoverVehicleHandlingDefinition
// 0x0028 (0x0150 - 0x0178)
class UHoverVehicleHandlingDefinition : public UCarVehicleHandlingDefinition
{
public:
	struct FVector                                     AirTransFriction;                                         // 0x0150(0x000C) (Edit)
	float                                              AirRotFriction;                                           // 0x015C(0x0004) (Edit)
	struct FVector                                     ForceScalar;                                              // 0x0160(0x000C) (Edit)
	float                                              TorqueScalar;                                             // 0x016C(0x0004) (Edit)
	float                                              TiltScalar;                                               // 0x0170(0x0004) (Edit)
	float                                              MoveTiltAmount;                                           // 0x0174(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HoverVehicleHandlingDefinition");
		return ptr;
	}

};


// Class WillowGame.TankVehicleHandlingDefinition
// 0x0028 (0x0150 - 0x0178)
class UTankVehicleHandlingDefinition : public UCarVehicleHandlingDefinition
{
public:
	float                                              MaxEngineTorque;                                          // 0x0150(0x0004) (Edit)
	float                                              EngineDamping;                                            // 0x0154(0x0004) (Edit)
	float                                              InsideTrackTorqueFactor;                                  // 0x0158(0x0004) (Edit)
	float                                              SteeringLatStiffnessFactor;                               // 0x015C(0x0004) (Edit)
	float                                              TurnInPlaceThrottle;                                      // 0x0160(0x0004) (Edit)
	float                                              TurnMaxGripReduction;                                     // 0x0164(0x0004) (Edit)
	float                                              TurnGripScaleRate;                                        // 0x0168(0x0004) (Edit)
	unsigned long                                      bTurnInPlaceOnSteer : 1;                                  // 0x016C(0x0004) (Edit)
	unsigned long                                      bDoStoppedTurns : 1;                                      // 0x016C(0x0004) (Edit)
	float                                              SteeringThresholdForStoppedTurns;                         // 0x0170(0x0004) (Edit)
	float                                              EngineDampingOnStoppedTurns;                              // 0x0174(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TankVehicleHandlingDefinition");
		return ptr;
	}

};


// Class WillowGame.ChopperVehicleHandlingDefinition
// 0x006C (0x00FC - 0x0168)
class UChopperVehicleHandlingDefinition : public UVehicleHandlingDefinition
{
public:
	float                                              MaxThrustForce;                                           // 0x00FC(0x0004) (Edit)
	float                                              MaxReverseForce;                                          // 0x0100(0x0004) (Edit)
	float                                              LongDamping;                                              // 0x0104(0x0004) (Edit)
	float                                              MaxStrafeForce;                                           // 0x0108(0x0004) (Edit)
	float                                              LatDamping;                                               // 0x010C(0x0004) (Edit)
	float                                              DirectionChangeForce;                                     // 0x0110(0x0004) (Edit)
	float                                              MaxRiseForce;                                             // 0x0114(0x0004) (Edit)
	float                                              UpDamping;                                                // 0x0118(0x0004) (Edit)
	float                                              TurnTorqueFactor;                                         // 0x011C(0x0004) (Edit)
	float                                              TurnTorqueMax;                                            // 0x0120(0x0004) (Edit)
	float                                              TurnDamping;                                              // 0x0124(0x0004) (Edit)
	float                                              MaxYawRate;                                               // 0x0128(0x0004) (Edit)
	float                                              PitchTorqueFactor;                                        // 0x012C(0x0004) (Edit)
	float                                              PitchTorqueMax;                                           // 0x0130(0x0004) (Edit)
	float                                              PitchDamping;                                             // 0x0134(0x0004) (Edit)
	float                                              RollTorqueTurnFactor;                                     // 0x0138(0x0004) (Edit)
	float                                              RollTorqueStrafeFactor;                                   // 0x013C(0x0004) (Edit)
	float                                              RollTorqueMax;                                            // 0x0140(0x0004) (Edit)
	float                                              RollDamping;                                              // 0x0144(0x0004) (Edit)
	float                                              StopThreshold;                                            // 0x0148(0x0004) (Edit)
	float                                              MaxRandForce;                                             // 0x014C(0x0004) (Edit)
	float                                              RandForceInterval;                                        // 0x0150(0x0004) (Edit)
	unsigned long                                      bAllowZThrust : 1;                                        // 0x0154(0x0004) (Edit)
	unsigned long                                      bFullThrustOnDirectionChange : 1;                         // 0x0154(0x0004) (Edit)
	unsigned long                                      bShouldCutThrustMaxOnImpact : 1;                          // 0x0154(0x0004) (Edit)
	unsigned long                                      bStabilizeStops : 1;                                      // 0x0154(0x0004) (Edit)
	unsigned long                                      bAutoHover : 1;                                           // 0x0154(0x0004) (Edit)
	float                                              StabilizationForceMultiplier;                             // 0x0158(0x0004) (Edit)
	float                                              MaxVelocityWhenAdjustingHover;                            // 0x015C(0x0004) (Edit)
	float                                              HoverDeadZone;                                            // 0x0160(0x0004) (Edit)
	float                                              RiseAdjustmentInterval;                                   // 0x0164(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChopperVehicleHandlingDefinition");
		return ptr;
	}

};


// Class WillowGame.VehicleLifetimeManager
// 0x003C (0x0188 - 0x01C4)
class AVehicleLifetimeManager : public AInfo
{
public:
	float                                              NextTickUpdateTime;                                       // 0x0188(0x0004) (Transient)
	float                                              NextCheckUsersTime;                                       // 0x018C(0x0004) (Transient)
	class UVehicleFamilyDefinition*                    CurrentVehicleFamily;                                     // 0x0190(0x0004) (Net, Transient)
	unsigned long                                      Initialized : 1;                                          // 0x0194(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      VehiclesOccupied : 1;                                     // 0x0194(0x0004) (Net, Transient)
	unsigned long                                      VehiclesUnlockedCheat : 1;                                // 0x0194(0x0004) (Net, Transient)
	struct FVSSUsageTracking                           TerminalDetail;                                           // 0x0198(0x000C)
	TArray<class AWillowVehicle*>                      AllVehicles;                                              // 0x01A4(0x000C) (Transient, NeedCtorLink)
	TArray<class AWillowVehicle*>                      VehicleUnRegisterList;                                    // 0x01B0(0x000C) (Transient, NeedCtorLink)
	float                                              TickUpdateInterval;                                       // 0x01BC(0x0004) (Const)
	float                                              CheckUsersInterval;                                       // 0x01C0(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleLifetimeManager");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void NotifySetCinematicMode(bool bInCinematicMode);
	void CleanUpPlayerVehicles(bool ForceEjectOccupants, bool PlayDeSpawnEffect);
	bool InternalAreAnyPlayersUsingVehicles();
	bool AreAnyPlayersUsingVehicles();
	bool HasVehicleInRegistry(class AWillowVehicle* OneVehicle);
	void UnRegisterVehicle(class AWillowVehicle* OneVehicle);
	void RegisterVehicle(class AWillowVehicle* NewVehicle);
	class UVehicleFamilyDefinition* GetCurrentVehicleFamily();
	void SetCurrentVehicleFamily(class UVehicleFamilyDefinition* InVehicleFamilyDef);
	bool IsSpawnStationInUseByOtherThan(class APawn* TheUser);
	void SetSpawnStationInUse(class AVehicleSpawnStationTerminal* TheTerminal, class APawn* TheUser, bool InUse);
	void Initialize();
};


// Class WillowGame.VehicleSpawnStationVehicleDefinition
// 0x0018 (0x003C - 0x0054)
class UVehicleSpawnStationVehicleDefinition : public UGBXDefinition
{
public:
	class UPopulationFactoryWillowVehicle*             VehicleFactory;                                           // 0x003C(0x0004) (Edit, Const, EditInline)
	class USkeletalMeshComponent*                      VehicleMesh;                                              // 0x0040(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	float                                              HeightAbovePlatformToSpawn;                               // 0x0044(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                PostSpawnCoordinatedEffect;                               // 0x0048(0x0004) (Edit, Const)
	class UVSSUIDefinition*                            MyUIDefinition;                                           // 0x004C(0x0004) (Transient)
	class UWillowOnDemandPackageMarker*                LinkedOnDemandPackage;                                    // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSpawnStationVehicleDefinition");
		return ptr;
	}

};


// Class WillowGame.VehicleStandIn
// 0x0020 (0x0188 - 0x01A8)
class AVehicleStandIn : public AActor
{
public:
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x0188(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IICustomizable;                                   // 0x018C(0x0004) (Const, Native, NoExport)
	class USkeletalMeshComponent*                      PreviewMesh;                                              // 0x0190(0x0004) (ExportObject, Transient, Component, EditInline)
	class UCustomizationDefinition*                    DefaultCustomization;                                     // 0x0194(0x0004) (Transient)
	class UCustomizationDefinition*                    CachedCustomization;                                      // 0x0198(0x0004) (Transient)
	struct FInstanceDataSet                            InstanceState;                                            // 0x019C(0x000C) (Transient, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleStandIn");
		return ptr;
	}


	void InitiateCustomizationRequest(class UCustomizationDefinition* NewCustomization);
	void Destroyed();
	void DestroyPreviewMesh();
	void CreatePreviewMesh(class UChassisDefinition* ChassisDef, class AWillowPlayerController* WPCOwner);
	void ClearBodyCompositionInstance();
	void ApplyPreviewBodyComposition();
	FScriptInterface GetBodyInfoProvider();
	void ChangeInstanceDataSwitch(const struct FName& SwitchName, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	bool AllowFallbackToDefaultCustomizations();
	void RefreshCustomizationsOnInstanceData();
	struct FName GetCustomizableName();
	void GetCustomizableInstanceDataSets(TArray<struct FPointer>* OutData);
	class UCustomizationDefinition* GetDesiredCustomizationOfType(class UClass* Type);
	void CustomizationApplied(class UCustomizationData* Data);
};


// Class WillowGame.VehicleWheelDefinition
// 0x0030 (0x003C - 0x006C)
class UVehicleWheelDefinition : public UGBXDefinition
{
public:
	struct FVector                                     BoneOffset;                                               // 0x003C(0x000C) (Edit)
	float                                              WheelRadius;                                              // 0x0048(0x0004) (Edit)
	float                                              SuspensionTravel;                                         // 0x004C(0x0004) (Edit)
	float                                              SuspensionSpeed;                                          // 0x0050(0x0004) (Edit)
	float                                              LongSlipFactor;                                           // 0x0054(0x0004) (Edit)
	float                                              LatSlipFactor;                                            // 0x0058(0x0004) (Edit)
	float                                              HandbrakeLongSlipFactor;                                  // 0x005C(0x0004) (Edit)
	float                                              HandbrakeLatSlipFactor;                                   // 0x0060(0x0004) (Edit)
	float                                              ParkedSlipFactorLat;                                      // 0x0064(0x0004) (Edit)
	float                                              ParkedSlipFactorLong;                                     // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleWheelDefinition");
		return ptr;
	}

};


// Class WillowGame.VSSUIDefinition
// 0x0064 (0x003C - 0x00A0)
class UVSSUIDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIDlcLicensableObject;                            // 0x003C(0x0004) (Const, Native, NoExport)
	class UVehicleFamilyDefinition*                    VehicleFamily;                                            // 0x0040(0x0004) (Edit, Const)
	struct FString                                     VehicleName;                                              // 0x0044(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     PathToVSSDefinition;                                      // 0x0050(0x000C) (Edit, Const, NeedCtorLink)
	int                                                PreferredOrdering;                                        // 0x005C(0x0004) (Edit, Const)
	TArray<class UClass*>                              EligibleUsage;                                            // 0x0060(0x000C) (Edit, Const, NeedCtorLink)
	TArray<unsigned char>                              SupportedTags;                                            // 0x006C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<unsigned char>                              RequiredTags;                                             // 0x0078(0x000C) (Edit, Const, NeedCtorLink)
	int                                                VehicleMaterialBankIndex;                                 // 0x0084(0x0004) (Edit, Const)
	struct FString                                     VehiclePreviewFrame;                                      // 0x0088(0x000C) (Transient, NeedCtorLink)
	class USwfMovie*                                   VehiclePreviewClip;                                       // 0x0094(0x0004) (Edit, Const)
	class UMissionObjectiveDefinition*                 RequiredMissionCompletionToUnlock;                        // 0x0098(0x0004) (Edit, Const)
	class UDownloadableVehicleDefinition*              DlcVehicleDef;                                            // 0x009C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VSSUIDefinition");
		return ptr;
	}


	struct FString GetVehiclePreviewMoviePath();
	class UDownloadableContentDefinition* GetDownloadableContentDefinition();
	struct FString GetHumanReadableVehicleName();
};


// Class WillowGame.WaypointComponent
// 0x0007 (0x0059 - 0x0060)
class UWaypointComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned long                                      bActive : 1;                                              // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WaypointComponent");
		return ptr;
	}


	void RemoveWaypoint();
};


// Class WillowGame.LevelTransitionWaypointComponent
// 0x000C (0x0060 - 0x006C)
class ULevelTransitionWaypointComponent : public UWaypointComponent
{
public:
	class UMissionDefinition*                          Mission;                                                  // 0x0060(0x0004)
	struct FName                                       MissionLevel;                                             // 0x0064(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelTransitionWaypointComponent");
		return ptr;
	}


	void RemoveWaypoint();
};


// Class WillowGame.MissionDirectiveWaypointComponent
// 0x0005 (0x0060 - 0x0065)
class UMissionDirectiveWaypointComponent : public UWaypointComponent
{
public:
	class UMissionDefinition*                          LinkedMission;                                            // 0x0060(0x0004)
	unsigned char                                      BranchEnding;                                             // 0x0064(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionDirectiveWaypointComponent");
		return ptr;
	}


	void RemoveWaypoint();
};


// Class WillowGame.FailableMissionDirectiveWaypointComponent
// 0x0003 (0x0065 - 0x0068)
class UFailableMissionDirectiveWaypointComponent : public UMissionDirectiveWaypointComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FailableMissionDirectiveWaypointComponent");
		return ptr;
	}

};


// Class WillowGame.MissionObjectiveWaypointComponent
// 0x0014 (0x0060 - 0x0074)
class UMissionObjectiveWaypointComponent : public UWaypointComponent
{
public:
	struct FMissionObjectiveWaypointData               WaypointInfo;                                             // 0x0060(0x0010) (NeedCtorLink)
	int                                                WaypointRadius;                                           // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionObjectiveWaypointComponent");
		return ptr;
	}


	void RemoveWaypoint();
};


// Class WillowGame.WeaponAmmoResourceAttributeValueResolver
// 0x001C (0x003C - 0x0058)
class UWeaponAmmoResourceAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                        // 0x003C(0x0010) (Edit, Const)
	TArray<struct FWeaponAmmoResourceSelectorData>     AmmoResources;                                            // 0x004C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponAmmoResourceAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.WeaponGlowEffectDefinition
// 0x0010 (0x003C - 0x004C)
class UWeaponGlowEffectDefinition : public UGBXDefinition
{
public:
	struct FInterpCurveFloat                           GlowScaleCurve;                                           // 0x003C(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponGlowEffectDefinition");
		return ptr;
	}

};


// Class WillowGame.WeaponPartDefinition
// 0x0144 (0x0098 - 0x01DC)
class UWeaponPartDefinition : public UWillowInventoryPartDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0098(0x0004) (Const, Native, NoExport)
	TArray<class UWeaponNamePartDefinition*>           TitleList;                                                // 0x009C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UWeaponNamePartDefinition*>           PrefixList;                                               // 0x00A8(0x000C) (Edit, Const, NeedCtorLink)
	class UWillowDamageTypeDefinition*                 CustomDamageTypeDefinition;                               // 0x00B4(0x0004) (Edit, Const)
	class UFiringModeDefinition*                       CustomFiringModeDefinition;                               // 0x00B8(0x0004) (Edit)
	TArray<struct FAttributeEffectData>                ExternalAttributeEffects;                                 // 0x00BC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                WeaponAttributeEffects;                                   // 0x00C8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                ZoomExternalAttributeEffects;                             // 0x00D4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                ZoomWeaponAttributeEffects;                               // 0x00E0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributePriorityData>              WeaponCardAttributes;                                     // 0x00EC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UAttributePresentationDefinition*>    CustomPresentations;                                      // 0x00F8(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	unsigned char                                      PartType;                                                 // 0x0104(0x0001) (Edit, Const)
	unsigned char                                      PartVariation;                                            // 0x0105(0x0001) (Edit, Const)
	unsigned char                                      NumPhysicalBarrelsToFireFrom;                             // 0x0106(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0107(0x0001) MISSED OFFSET
	TArray<struct FWeaponBoneControllerData>           BoneControllers;                                          // 0x0108(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FName>                               VisibleAmmoBoneNames;                                     // 0x0114(0x000C) (Edit, Const, NeedCtorLink)
	struct FName                                       LeftHandIKHoldName;                                       // 0x0120(0x0008) (Edit, Const)
	unsigned long                                      bIsSpinningEnabled : 1;                                   // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bFlapsEnabled : 1;                                        // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bOverrideShellCasing : 1;                                 // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bUseWeaponMelee : 1;                                      // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bScoped : 1;                                              // 0x0128(0x0004) (Edit, Const)
	struct FAttributeInitializationData                SpinUpDuration;                                           // 0x012C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                SpinDownDuration;                                         // 0x013C(0x0010) (Edit, Const)
	float                                              StartingSpinUpFireIntervalMultiplier;                     // 0x014C(0x0004) (Edit, Const)
	struct FAttributeInitializationData                FlapsExpandDuration;                                      // 0x0150(0x0010) (Edit, Const)
	struct FAttributeInitializationData                FlapsCollapseDuration;                                    // 0x0160(0x0010) (Edit, Const)
	class UParticleSystem*                             ShellCasingPSCTemplate;                                   // 0x0170(0x0004) (Edit, Const)
	struct FName                                       ShellCasingSocket;                                        // 0x0174(0x0008) (Edit, Const)
	struct FVector                                     ScopedShellCasingOffset;                                  // 0x017C(0x000C) (Edit, Const)
	struct FRotator                                    OffHandShellCasingRotOffset;                              // 0x0188(0x000C) (Edit, Const)
	class UEffectCollectionDefinition*                 MuzzleFlashPSTemplates;                                   // 0x0194(0x0004) (Edit, Const)
	TArray<struct FName>                               AltMuzzleFlashSockets;                                    // 0x0198(0x000C) (Edit, Const, NeedCtorLink)
	class UWillowImpactDefinition*                     WeaponImpact;                                             // 0x01A4(0x0004) (Edit, Const)
	class UParticleSystemComponent*                    FirstPersonParticle;                                      // 0x01A8(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	struct FName                                       FirstPersonParticleSocketName;                            // 0x01AC(0x0008) (Edit, Const)
	struct FName                                       FirstPersonParticleInstanceDataName;                      // 0x01B4(0x0008) (Edit, Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x01BC(0x0004)
	class UManufacturerDefinition*                     ManufacturerDefinitionForScopeMovie;                      // 0x01C0(0x0004) (Edit, Const)
	float                                              ZoomedFOVLerpPct;                                         // 0x01C4(0x0004) (Edit, Const)
	class UMaterialInterface*                          SightFXCrosshairMaterial;                                 // 0x01C8(0x0004) (Edit, Const)
	struct FName                                       SightFXCrosshairParamName;                                // 0x01CC(0x0008) (Edit, Const)
	struct FName                                       SightFXCrosshairRefractionParamName;                      // 0x01D4(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponPartDefinition");
		return ptr;
	}


	void OnAbortReload(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnZoomOut(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnZoomIn(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUnequip(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnEquip(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnCreate(struct FBehaviorConsumerHandle* ConsumerHandle);
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.WeaponNamePartDefinition
// 0x0028 (0x01DC - 0x0204)
class UWeaponNamePartDefinition : public UWeaponPartDefinition
{
public:
	unsigned long                                      bNameIsUnique : 1;                                        // 0x01DC(0x0004) (Edit, Const)
	struct FString                                     PartName;                                                 // 0x01E0(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<struct FAttributeExpressionData>            Expressions;                                              // 0x01EC(0x000C) (Edit, Const, NeedCtorLink)
	int                                                MinExpLevelRequirement;                                   // 0x01F8(0x0004) (Edit, Const)
	int                                                MaxExpLevelRequirement;                                   // 0x01FC(0x0004) (Edit, Const)
	float                                              Priority;                                                 // 0x0200(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponNamePartDefinition");
		return ptr;
	}

};


// Class WillowGame.WeaponTypeAttributeValueResolver
// 0x001C (0x003C - 0x0058)
class UWeaponTypeAttributeValueResolver : public UAttributeValueResolver
{
public:
	struct FAttributeInitializationData                ValueIfNotMatched;                                        // 0x003C(0x0010) (Edit, Const)
	TArray<struct FWeaponTypeSelectorData>             WeaponTypes;                                              // 0x004C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponTypeAttributeValueResolver");
		return ptr;
	}

};


// Class WillowGame.WeaponTypeDefinition
// 0x0500 (0x0180 - 0x0680)
class UWeaponTypeDefinition : public UWillowInventoryDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0180(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x0184(0x0004) (Const, Native, NoExport)
	unsigned char                                      WeaponType;                                               // 0x0188(0x0001) (Edit, Const)
	unsigned char                                      BarrelSpinMode;                                           // 0x0189(0x0001) (Edit, Const)
	unsigned char                                      InventoryGroup;                                           // 0x018A(0x0001) (Edit, Const)
	unsigned char                                      WeaponLockType;                                           // 0x018B(0x0001) (Edit, Const)
	struct FString                                     ScaleformFrameName;                                       // 0x018C(0x000C) (Edit, Const, NeedCtorLink)
	class USwfMovie*                                   ScaleformDLCClip;                                         // 0x0198(0x0004) (Edit, Const)
	class UResourceDefinition*                         AmmoResource;                                             // 0x019C(0x0004) (Edit, Const)
	int                                                StartingAmmoCount;                                        // 0x01A0(0x0004) (Edit, Const)
	int                                                MaxStoredAmmo;                                            // 0x01A4(0x0004) (Edit, Const)
	int                                                ShotCost;                                                 // 0x01A8(0x0004) (Edit, Const)
	int                                                ClipSize;                                                 // 0x01AC(0x0004) (Edit, Const)
	float                                              AmmoRegenerationRate;                                     // 0x01B0(0x0004) (Edit, Const)
	unsigned long                                      bUseOverheatBehavior : 1;                                 // 0x01B4(0x0004) (Edit, Const)
	unsigned long                                      bRemoveBaseAccuracyFromRecoilScale : 1;                   // 0x01B4(0x0004) (Edit, Const)
	unsigned long                                      AltFireRespectsPrimaryFireInterval : 1;                   // 0x01B4(0x0004) (Edit, Const)
	unsigned long                                      bAlternativeKickEnabled : 1;                              // 0x01B4(0x0004) (Edit, Const)
	unsigned long                                      bMuzzleFlashPSCLoops : 1;                                 // 0x01B4(0x0004) (Edit, Const)
	unsigned long                                      bTypeNameIsFullName : 1;                                  // 0x01B4(0x0004) (Edit, Const)
	unsigned long                                      bDisableReloadMessages : 1;                               // 0x01B4(0x0004) (Edit, Const)
	float                                              RegenRate;                                                // 0x01B8(0x0004) (Edit, Const)
	float                                              OverheatRegenDelay;                                       // 0x01BC(0x0004) (Edit, Const)
	float                                              FireRegenDelay;                                           // 0x01C0(0x0004) (Edit, Const)
	struct FAttributeInitializationData                InstantHitDamage;                                         // 0x01C4(0x0010) (Edit, Const)
	class UClass*                                      InstantHitDamageType;                                     // 0x01D4(0x0004) (Edit, Const)
	class UWillowDamageTypeDefinition*                 DefaultDamageTypeDefinition;                              // 0x01D8(0x0004) (Edit, Const)
	struct FAttributeInitializationData                InstantHitMomentum;                                       // 0x01DC(0x0010) (Edit, Const)
	int                                                ProjectilesPerShot;                                       // 0x01EC(0x0004) (Edit, Const)
	struct FAttributeInitializationData                MeleeDamage;                                              // 0x01F0(0x0010) (Edit, Const)
	struct FAttributeInitializationData                NormalizedInstantHitDamage;                               // 0x0200(0x0010) (Edit, Const)
	struct FAttributeInitializationData                NormalizedMeleeDamage;                                    // 0x0210(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseStatusEffectChanceModifier;                           // 0x0220(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectDamage;                                       // 0x0230(0x0010) (Edit, Const)
	float                                              Spread;                                                   // 0x0240(0x0004) (Edit, Const)
	float                                              PerShotAccuracyImpulse;                                   // 0x0244(0x0004) (Edit, Const)
	struct FName                                       BodyWeaponHoldName;                                       // 0x0248(0x0008) (Edit, Const)
	class UAnimSet*                                    WeaponAnimSet;                                            // 0x0250(0x0004) (Edit, Const)
	class UAnimTree*                                   WeaponAnimTree;                                           // 0x0254(0x0004) (Edit, Const)
	TArray<struct FConditionalAnimationData>           WeaponIdleAnimations;                                     // 0x0258(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalAnimationData>           WeaponFireAnimations;                                     // 0x0264(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalAnimationData>           WeaponReloadAnimations;                                   // 0x0270(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalAnimationData>           WeaponEquipAnimations;                                    // 0x027C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalAnimationData>           WeaponPutDownAnimations;                                  // 0x0288(0x000C) (Edit, Const, NeedCtorLink)
	struct FName                                       AnimNodeSlotName;                                         // 0x0294(0x0008) (Edit, Const)
	struct FName                                       OffHandAnimNodeSlotName;                                  // 0x029C(0x0008) (Edit, Const)
	struct FName                                       WeaponGrabAnimation;                                      // 0x02A4(0x0008) (Edit, Const)
	float                                              MinFireAnimDuration;                                      // 0x02AC(0x0004) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             AnimThresholdValues;                                      // 0x02B0(0x000C) (Edit, Const, NeedCtorLink)
	struct FInterpCurveFloat                           RecoilAnimScaleCurve;                                     // 0x02BC(0x0010) (Edit, Const, NeedCtorLink)
	float                                              ZoomedRecoilAnimScale;                                    // 0x02CC(0x0004) (Edit, Const)
	class UFiringModeDefinition*                       DefaultFiringModeDefinition;                              // 0x02D0(0x0004) (Edit, Const)
	float                                              Range;                                                    // 0x02D4(0x0004) (Edit, Const)
	float                                              FireRate;                                                 // 0x02D8(0x0004) (Edit, Const)
	struct FVector                                     FireOffset;                                               // 0x02DC(0x000C) (Edit, Const)
	class UForceFeedbackWaveform*                      FiringForceFeedback;                                      // 0x02E8(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	TArray<struct FAttributeBaseValueData>             ProjectileBaseValues;                                     // 0x02EC(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                ExtraShotDelay;                                           // 0x02F8(0x0010) (Edit, Const)
	float                                              ShortFireIntervalModPower;                                // 0x0308(0x0004) (Edit, Const)
	float                                              LongFireIntervalModPower;                                 // 0x030C(0x0004) (Edit, Const)
	float                                              BurstInterval;                                            // 0x0310(0x0004) (Edit, Const)
	int                                                AutomaticBurstCount;                                      // 0x0314(0x0004) (Edit, Const)
	float                                              BurstShotAccuracyImpulseScale;                            // 0x0318(0x0004) (Edit, Const)
	float                                              ReloadTime;                                               // 0x031C(0x0004) (Edit, Const)
	float                                              ReloadCompletePercent;                                    // 0x0320(0x0004) (Edit, Const)
	float                                              ReloadDOFKernelSize;                                      // 0x0324(0x0004) (Edit, Const)
	float                                              ReloadDOFZoomRate;                                        // 0x0328(0x0004) (Edit, Const)
	float                                              ReloadDOFInnerRadius;                                     // 0x032C(0x0004) (Edit, Const)
	float                                              ReloadDOFFocusDistance;                                   // 0x0330(0x0004) (Edit, Const)
	float                                              EquipTime;                                                // 0x0334(0x0004) (Edit, Const)
	float                                              PutDownTime;                                              // 0x0338(0x0004) (Edit, Const)
	float                                              GrabEquipTime;                                            // 0x033C(0x0004) (Edit, Const)
	float                                              LeadingSpeed;                                             // 0x0340(0x0004) (Edit, Const)
	struct FName                                       ViewModelLeadPivotName;                                   // 0x0344(0x0008) (Edit, Const)
	struct FVector                                     ViewModelRotationOriginOffset;                            // 0x034C(0x000C) (Edit, Const)
	float                                              ViewModelRotationAmt;                                     // 0x0358(0x0004) (Edit, Const)
	float                                              ViewModelTranslationAmt;                                  // 0x035C(0x0004) (Edit, Const)
	float                                              LeadingZoomedScale;                                       // 0x0360(0x0004) (Edit, Const)
	float                                              ZoomedEndFOV;                                             // 0x0364(0x0004) (Edit, Const)
	float                                              ZoomedRate;                                               // 0x0368(0x0004) (Edit, Const)
	float                                              BobDamping;                                               // 0x036C(0x0004) (Edit, Const)
	float                                              MaxPitchLead;                                             // 0x0370(0x0004) (Edit, Const)
	float                                              MaxYawLead;                                               // 0x0374(0x0004) (Edit, Const)
	struct FVector                                     PlayerViewOffset;                                         // 0x0378(0x000C) (Edit, Const)
	float                                              FirstPersonMeshFOV;                                       // 0x0384(0x0004) (Edit, Const)
	struct FName                                       ZoomSocketPreferred;                                      // 0x0388(0x0008) (Edit, Const)
	struct FName                                       ZoomSocketFallback;                                       // 0x0390(0x0008) (Edit, Const)
	struct FName                                       FrontScopeSocket;                                         // 0x0398(0x0008) (Edit, Const)
	struct FName                                       FrontSightSocket;                                         // 0x03A0(0x0008) (Edit, Const)
	struct FName                                       RearSightSocket;                                          // 0x03A8(0x0008) (Edit, Const)
	float                                              ZoomTime;                                                 // 0x03B0(0x0004) (Edit, Const)
	float                                              FractalWanderSpeed;                                       // 0x03B4(0x0004) (Edit, Const)
	float                                              FractalWanderLacunarity;                                  // 0x03B8(0x0004) (Edit, Const)
	float                                              FractalWanderPersistence;                                 // 0x03BC(0x0004) (Edit, Const)
	float                                              FractalWanderDiscWidth;                                   // 0x03C0(0x0004) (Edit, Const)
	float                                              FractalWanderDiscHeight;                                  // 0x03C4(0x0004) (Edit, Const)
	float                                              ZoomWanderSmoothingSpeed;                                 // 0x03C8(0x0004) (Edit, Const)
	float                                              ZoomWanderSmoothInTime_OnZoom;                            // 0x03CC(0x0004) (Edit, Const)
	float                                              ZoomWanderSmoothInTime_OnFire;                            // 0x03D0(0x0004) (Edit, Const)
	struct FVector                                     ScopedMuzzleFlashOffset;                                  // 0x03D4(0x000C) (Edit, Const)
	struct FName                                       BoneToHideOnMesh;                                         // 0x03E0(0x0008) (Edit, Const)
	struct FName                                       AdditionalBoneToHideOnMesh;                               // 0x03E8(0x0008) (Edit, Const)
	float                                              WeaponKickSpeed;                                          // 0x03F0(0x0004) (Edit, Const)
	float                                              WeaponKickRecoveryTime;                                   // 0x03F4(0x0004) (Edit, Const)
	float                                              WeaponKickZoomMultiplier;                                 // 0x03F8(0x0004) (Edit, Const)
	float                                              WeaponKickUp;                                             // 0x03FC(0x0004) (Edit, Const)
	float                                              WeaponKickDown;                                           // 0x0400(0x0004) (Edit, Const)
	float                                              MinimumVerticalPercentage;                                // 0x0404(0x0004) (Edit, Const)
	float                                              WeaponKickLeft;                                           // 0x0408(0x0004) (Edit, Const)
	float                                              WeaponKickRight;                                          // 0x040C(0x0004) (Edit, Const)
	float                                              MinimumHorizontalPercentage;                              // 0x0410(0x0004) (Edit, Const)
	struct FAttributeInitializationData                AlternativeWeaponKick;                                    // 0x0414(0x0010) (Edit, Const)
	float                                              DOFKernelSize;                                            // 0x0424(0x0004) (Edit, Const)
	float                                              DOFZoomRate;                                              // 0x0428(0x0004) (Edit, Const)
	float                                              DOFInnerRadius;                                           // 0x042C(0x0004) (Edit, Const)
	struct FName                                       EffectSocket;                                             // 0x0430(0x0008) (Edit, Const)
	float                                              MuzzleFlashDuration;                                      // 0x0438(0x0004) (Edit, Const)
	class UEffectCollectionDefinition*                 MuzzleFlashPSTemplates;                                   // 0x043C(0x0004) (Edit, Const)
	class UWillowPointLight*                           MuzzleFlashLightTemplate;                                 // 0x0440(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	struct FName                                       MuzzleFlashSocket;                                        // 0x0444(0x0008) (Edit, Const)
	struct FGearboxViewShakeInfo                       FireShake;                                                // 0x044C(0x0044) (Edit)
	class UCameraAnim*                                 MeleeCameraAnim;                                          // 0x0490(0x0004) (Edit, Const)
	class UParticleSystem*                             TracerTemplate;                                           // 0x0494(0x0004) (Edit, Const)
	struct FColor                                      TracerColor;                                              // 0x0498(0x0004) (Edit, Const)
	struct FName                                       TracerColorParameterName;                                 // 0x049C(0x0008) (Edit, Const)
	class UWillowImpactDefinition*                     DroppedImpact;                                            // 0x04A4(0x0004) (Edit, Const)
	class UParticleSystem*                             ShellCasingPSCTemplate;                                   // 0x04A8(0x0004) (Edit, Const)
	struct FName                                       ShellCasingSocket;                                        // 0x04AC(0x0008) (Edit, Const)
	struct FVector                                     ScopedShellCasingOffset;                                  // 0x04B4(0x000C) (Edit, Const)
	struct FRotator                                    OffHandShellCasingRotOffset;                              // 0x04C0(0x000C) (Edit, Const)
	struct FName                                       GlowScaleMaterialParamName;                               // 0x04CC(0x0008) (Edit, Const)
	float                                              MaxGlowImpulseScale;                                      // 0x04D4(0x0004) (Edit, Const)
	float                                              GlowImpulseDecayDelay;                                    // 0x04D8(0x0004) (Edit, Const)
	float                                              GlowImpulseDecayRate;                                     // 0x04DC(0x0004) (Edit, Const)
	float                                              FiringGlowImpulse;                                        // 0x04E0(0x0004) (Edit, Const)
	float                                              InventoryWeight;                                          // 0x04E4(0x0004) (Edit, Const)
	TArray<struct FConditionalSoundData>               FireSounds;                                               // 0x04E8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               FireTailSounds;                                           // 0x04F4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               EquipSounds;                                              // 0x0500(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               PutDownSounds;                                            // 0x050C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               DryFireSounds;                                            // 0x0518(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               BarrelStartSpinningUpSounds;                              // 0x0524(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               BarrelStopSpinningUpSounds;                               // 0x0530(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               BarrelFullySpunUpSounds;                                  // 0x053C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               MagazineStartSpinningUpSounds;                            // 0x0548(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               MagazineStopSpinningUpSounds;                             // 0x0554(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FConditionalSoundData>               MagazineFullySpunUpSounds;                                // 0x0560(0x000C) (Edit, Const, NeedCtorLink)
	float                                              LockRequiredTime;                                         // 0x056C(0x0004) (Edit, Const)
	float                                              LockCoolDownTime;                                         // 0x0570(0x0004) (Edit, Const)
	float                                              LockRequiredDotProduct;                                   // 0x0574(0x0004) (Edit, Const)
	class UAkEvent*                                    LockAttemptStartedAkEvent;                                // 0x0578(0x0004) (Edit, Const)
	class UAkEvent*                                    LockAcquiredAkEvent;                                      // 0x057C(0x0004) (Edit, Const)
	class UAkEvent*                                    LockLostAkEvent;                                          // 0x0580(0x0004) (Edit, Const)
	float                                              AIAimError;                                               // 0x0584(0x0004) (Edit, Const)
	struct FAIRange                                    AIBurstCount;                                             // 0x0588(0x0008) (Edit, Const)
	struct FAIRange                                    AIBurstDelay;                                             // 0x0590(0x0008) (Edit, Const)
	struct FString                                     Typename;                                                 // 0x0598(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<class UWeaponNamePartDefinition*>           TitleList;                                                // 0x05A4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UWeaponNamePartDefinition*>           PrefixList;                                               // 0x05B0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                ExternalAttributeEffects;                                 // 0x05BC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                WeaponAttributeEffects;                                   // 0x05C8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                ZoomExternalAttributeEffects;                             // 0x05D4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeEffectData>                ZoomWeaponAttributeEffects;                               // 0x05E0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributePriorityData>              WeaponCardAttributes;                                     // 0x05EC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UAttributePresentationDefinition*>    CustomPresentations;                                      // 0x05F8(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class UGestaltSkeletalMeshDefinition*              GestaltMesh;                                              // 0x0604(0x0004) (Edit, Const)
	struct FWeaponPartAttachmentData                   AttachmentData;                                           // 0x0608(0x0020) (Edit, Const)
	class UWeaponPartListDefinition*                   BodyParts;                                                // 0x0628(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   GripParts;                                                // 0x062C(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   BarrelParts;                                              // 0x0630(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   SightParts;                                               // 0x0634(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   StockParts;                                               // 0x0638(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   ElementalParts;                                           // 0x063C(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   Accessory1Parts;                                          // 0x0640(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   Accessory2Parts;                                          // 0x0644(0x0004) (Edit, Const)
	class UWeaponPartListDefinition*                   MaterialParts;                                            // 0x0648(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     WeaponImpact;                                             // 0x064C(0x0004) (Edit, Const)
	struct FString                                     CrosshairFrame;                                           // 0x0650(0x000C) (Edit, Const, NeedCtorLink)
	float                                              MaxDistSqr;                                               // 0x065C(0x0004) (Edit, Const)
	float                                              MaxAngleCos;                                              // 0x0660(0x0004) (Edit, Const)
	float                                              BonusToCurrentTargetScore;                                // 0x0664(0x0004) (Edit, Const)
	float                                              UpdateRate;                                               // 0x0668(0x0004) (Edit, Const)
	float                                              MaintainTargetTime;                                       // 0x066C(0x0004) (Edit, Const)
	TArray<struct FName>                               VantageTagNames;                                          // 0x0670(0x000C) (Edit, Const, NeedCtorLink)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x067C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponTypeDefinition");
		return ptr;
	}


	void OnProjectileFired(class UObject* Instigator, class UObject* Projectile, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTargetLockAcquired(class UObject* Instigator, class UObject* Target, class UObject* Weapon, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnAltFireTriggered(class UObject* Instigator, class UObject* Weapon, class APlayerController* PlayerController, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnZoomOut(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnZoomIn(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUnequip(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnEquip(class UObject* Instigator, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnCreate(struct FBehaviorConsumerHandle* ConsumerHandle);
	struct FName GetWeaponTypeName();
	unsigned char GetHolsteredGearLikenessType();
	unsigned char GetHolsteredWeaponSizeType();
	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.WillowAIMoveNodePathComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowAIMoveNodePathComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIMoveNodePathComponent");
		return ptr;
	}

};


// Class WillowGame.WillowAkComponent
// 0x0018 (0x01EC - 0x0204)
class UWillowAkComponent : public UAkComponent
{
public:
	int                                                DistanceRTPCRefCount;                                     // 0x01EC(0x0004) (Transient)
	int                                                SpeedRTPCRefCount;                                        // 0x01F0(0x0004) (Transient)
	int                                                ApproachSpeedRTPCRefCount;                                // 0x01F4(0x0004) (Transient)
	struct FVector                                     CustomVelocity;                                           // 0x01F8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAkComponent");
		return ptr;
	}

};


// Class WillowGame.WillowAnimDefinition
// 0x000C (0x00BC - 0x00C8)
class UWillowAnimDefinition : public UGearboxAnimDefinition
{
public:
	unsigned long                                      bAllowLeftHandIK : 1;                                     // 0x00BC(0x0004) (Edit)
	unsigned long                                      bStopAI : 1;                                              // 0x00BC(0x0004) (Edit)
	unsigned long                                      bStopMovement : 1;                                        // 0x00BC(0x0004) (Edit)
	unsigned long                                      bStopHeadLook : 1;                                        // 0x00BC(0x0004) (Edit)
	struct FName                                       InstanceDataName;                                         // 0x00C0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimDefinition");
		return ptr;
	}


	class UAnimNodeSpecialMoveBlend* GetSMNode(const FScriptInterface& SMI);
	void ClientFinished(const FScriptInterface& SMI, bool bInterrupted);
	float ClientStarted(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	void ServerFinished(const FScriptInterface& SMI, bool bInterrupted);
	void ServerStarted(const FScriptInterface& SMI);
	bool AuthorityCanPlay(const FScriptInterface& SMI);
};


// Class WillowGame.SpecialMove_Cringe
// 0x000C (0x00C8 - 0x00D4)
class USpecialMove_Cringe : public UWillowAnimDefinition
{
public:
	struct FName                                       CringeAnim;                                               // 0x00C8(0x0008) (Edit, Const)
	float                                              CringeTime;                                               // 0x00D0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Cringe");
		return ptr;
	}


	float PlayAnim(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
};


// Class WillowGame.SpecialMove_Motion
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Motion : public UWillowAnimDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Motion");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_Cloak
// 0x0004 (0x00C8 - 0x00CC)
class USpecialMove_Cloak : public USpecialMove_Motion
{
public:
	unsigned long                                      bCloak : 1;                                               // 0x00C8(0x0004) (Edit, Const)
	unsigned long                                      bSetAtStart : 1;                                          // 0x00C8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Cloak");
		return ptr;
	}


	void ClientFinished(const FScriptInterface& SMI, bool bInterrupted);
	float ClientStarted(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
};


// Class WillowGame.SpecialMove_Dodge
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Dodge : public USpecialMove_Motion
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Dodge");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_PhysicsJump
// 0x0018 (0x00C8 - 0x00E0)
class USpecialMove_PhysicsJump : public USpecialMove_Motion
{
public:
	struct FName                                       AnimIdle;                                                 // 0x00C8(0x0008) (Edit, Const)
	struct FName                                       AnimLand;                                                 // 0x00D0(0x0008) (Edit, Const)
	class UPopulationBodyTag*                          BodyTag;                                                  // 0x00D8(0x0004) (Edit, Const)
	unsigned long                                      bInvalidateLandingSpotForCombat : 1;                      // 0x00DC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_PhysicsJump");
		return ptr;
	}


	void PlayLand(const FScriptInterface& SMI);
	void PlayIdle(const FScriptInterface& SMI);
	float GetIdleLength(const FScriptInterface& SMI);
	bool NextEdgeIsJump(const FScriptInterface& SMI);
	int GetJumpIndex(const FScriptInterface& SMI);
	void AnimFinished(const FScriptInterface& SMI, class UAnimNodeSpecialMoveBlend* BlendNode, bool bInterrupted, struct FSpecialMoveData* SMData);
	void ClientFinished(const FScriptInterface& SMI, bool bInterrupted);
	float ClientStarted(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	void ServerFinished(const FScriptInterface& SMI, bool bInterrupted);
	void ServerStarted(const FScriptInterface& SMI);
	void OnStartLand(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnStartIdle(struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.SpecialMove_Turn
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Turn : public USpecialMove_Motion
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Turn");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_Perch
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Perch : public UWillowAnimDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Perch");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_PerchLoop
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_PerchLoop : public UWillowAnimDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_PerchLoop");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_PerchRandomLoop
// 0x000C (0x00C8 - 0x00D4)
class USpecialMove_PerchRandomLoop : public USpecialMove_PerchLoop
{
public:
	TArray<struct FSMPerchRandomPair>                  RandomList;                                               // 0x00C8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_PerchRandomLoop");
		return ptr;
	}


	bool Contains(class USpecialMoveDefinition* SMD, const FScriptInterface& SMI);
	class USpecialMoveDefinition* GetSMDToPlay(const FScriptInterface& SMI);
};


// Class WillowGame.SpecialMove_PhaseLock
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_PhaseLock : public UWillowAnimDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_PhaseLock");
		return ptr;
	}


	void ClientFinished(const FScriptInterface& SMI, bool bInterrupted);
	void ServerFinished(const FScriptInterface& SMI, bool bInterrupted);
	void ServerStarted(const FScriptInterface& SMI);
	bool AuthorityCanPlay(const FScriptInterface& SMI);
};


// Class WillowGame.SpecialMove_PopulationPoint
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_PopulationPoint : public UWillowAnimDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_PopulationPoint");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_Spawned
// 0x0008 (0x00C8 - 0x00D0)
class USpecialMove_Spawned : public UWillowAnimDefinition
{
public:
	float                                              StretchyStartTime;                                        // 0x00C8(0x0004) (Edit, Const)
	float                                              StretchyEndTime;                                          // 0x00CC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Spawned");
		return ptr;
	}


	void ClientFinished(const FScriptInterface& SMI, bool bInterrupted);
	float ClientStarted(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	void ServerFinished(const FScriptInterface& SMI, bool bInterrupted);
	void ServerStarted(const FScriptInterface& SMI);
};


// Class WillowGame.SpecialMove_Vehicle
// 0x0010 (0x00C8 - 0x00D8)
class USpecialMove_Vehicle : public UWillowAnimDefinition
{
public:
	unsigned char                                      TransitionType;                                           // 0x00C8(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	TArray<struct FCameraLerpKeyFrame>                 CameraLerpKeyFrames;                                      // 0x00CC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Vehicle");
		return ptr;
	}


	float PlayAnim(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
	bool AuthorityCanPlay(const FScriptInterface& SMI);
};


// Class WillowGame.WillowAnimNode_Simple
// 0x0038 (0x00DC - 0x0114)
class UWillowAnimNode_Simple : public UAnimNodeAdditiveBlending
{
public:
	struct FName                                       SimpleAnimName;                                           // 0x00DC(0x0008) (Edit, Const)
	float                                              BlendInTime;                                              // 0x00E4(0x0004) (Edit, Const)
	float                                              BlendOutTime;                                             // 0x00E8(0x0004) (Edit, Const)
	float                                              PlayRate;                                                 // 0x00EC(0x0004) (Edit, Const)
	unsigned char                                      Style;                                                    // 0x00F0(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	class UWillowAnimTree*                             MyTree;                                                   // 0x00F4(0x0004) (Edit, Const, EditConst)
	unsigned long                                      bAdditive : 1;                                            // 0x00F8(0x0004) (Edit, Const)
	unsigned long                                      bMirror : 1;                                              // 0x00F8(0x0004) (Edit, Const)
	unsigned long                                      bDominant : 1;                                            // 0x00F8(0x0004) (Transient)
	class UWillowAnimTree*                             LinkTree;                                                 // 0x00FC(0x0004) (Edit, Const)
	struct FName                                       LinkName;                                                 // 0x0100(0x0008) (Edit, Const)
	class UAnimNodeSequence*                           SeqNode;                                                  // 0x0108(0x0004) (Transient)
	FScriptInterface                                   CachedAnimPlayer;                                         // 0x010C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_Simple");
		return ptr;
	}


	void SetBlendTarget(float BlendTarget, float BlendTime);
	static bool PlayingSimpleAnim(const FScriptInterface& AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName, bool bCheckPlayingLastFrame);
	static int GetSimpleAnimIndex(const FScriptInterface& AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName);
	static void StopSimpleAnim(const FScriptInterface& AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName);
	static void PlaySimpleAnim(const FScriptInterface& AnimPlayer, class UWillowAnimTree* Tree, const struct FName& AnimName);
	static void UpdateSimpleAnims(const FScriptInterface& AnimPlayer, int NewState);
	static void UncacheSimpleAnims(const FScriptInterface& AnimPlayer, class USkeletalMeshComponent* SkelMesh);
	static void CacheSimpleAnims(const FScriptInterface& AnimPlayer, class USkeletalMeshComponent* SkelMesh);
	void Stop();
	void Play();
};


// Class WillowGame.WillowAnimTreeFactory
// 0x0000 (0x0070 - 0x0070)
class UWillowAnimTreeFactory : public UFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimTreeFactory");
		return ptr;
	}

};


// Class WillowGame.WillowAutoAimProfileDefinition
// 0x0018 (0x003C - 0x0054)
class UWillowAutoAimProfileDefinition : public UGBXDefinition
{
public:
	float                                              MagnetismMin;                                             // 0x003C(0x0004) (Edit, Const)
	float                                              MagnetismMax;                                             // 0x0040(0x0004) (Edit, Const)
	float                                              MaxRotationH;                                             // 0x0044(0x0004) (Edit, Const)
	float                                              MaxRotationV;                                             // 0x0048(0x0004) (Edit, Const)
	float                                              LockStrengthH;                                            // 0x004C(0x0004) (Edit, Const)
	float                                              LockStrengthV;                                            // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAutoAimProfileDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowAutoAimStrategy
// 0x0079 (0x003C - 0x00B5)
class UWillowAutoAimStrategy : public UObject
{
public:
	class UWillowAutoAimStrategyDefinition*            DataDefinition;                                           // 0x003C(0x0004)
	int                                                CurrentFrame;                                             // 0x0040(0x0004)
	int                                                LastFrame;                                                // 0x0044(0x0004)
	float                                              SustainStartTime;                                         // 0x0048(0x0004)
	float                                              AcquireStartTime;                                         // 0x004C(0x0004)
	unsigned long                                      bCanAcquireLock : 1;                                      // 0x0050(0x0004)
	unsigned long                                      bAdjustOnMoveOnly : 1;                                    // 0x0050(0x0004)
	unsigned long                                      bIsWithinWorldSpaceRadius_InstantaneousTarget : 1;        // 0x0050(0x0004)
	unsigned long                                      bIsWithinWorldSpaceRadius_LockedTarget : 1;               // 0x0050(0x0004)
	unsigned long                                      bComputedTargetLastFrame : 1;                             // 0x0050(0x0004)
	unsigned long                                      bSnappedToTarget : 1;                                     // 0x0050(0x0004)
	unsigned long                                      bIgnoreCloakAbility : 1;                                  // 0x0050(0x0004)
	FScriptInterface                                   InstantaneousTarget;                                      // 0x0054(0x0008)
	FScriptInterface                                   LastInstantaneousTarget;                                  // 0x005C(0x0008)
	FScriptInterface                                   LockedTarget;                                             // 0x0064(0x0008)
	struct FLockOnProfile                              PrevProfile;                                              // 0x006C(0x0024)
	struct FLockOnProfile                              CurrentProfile;                                           // 0x0090(0x0024)
	unsigned char                                      TargetSet;                                                // 0x00B4(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAutoAimStrategy");
		return ptr;
	}


	void SetTargetSet(unsigned char Type);
	void SetAdjustOnMoveOnly(bool bEnabled);
	void SetLockingEnabled(bool bEnabled);
	float GetLogMagnetismRange(class AWillowPlayerController* PC, const FScriptInterface& Targetable);
	void DrawAutoAimDebug(class AWillowPlayerController* Controller, class AHUD* H);
	FScriptInterface GetPreferredTarget(class AWillowPlayerController* InPlayer, bool bGetCachedResult, bool bGetInstantaneousTarget, bool bMustBeWithinWorldSpaceRadius);
	void ModifyInput(class AWillowPlayerController* InPlayer, float* aTurn, float* aLookUp, float* aForward, float* aStrafe);
};


// Class WillowGame.WillowAutoAimStrategyDefinition
// 0x0030 (0x003C - 0x006C)
class UWillowAutoAimStrategyDefinition : public UGBXDefinition
{
public:
	float                                              MaxTargetDistance;                                        // 0x003C(0x0004) (Edit, Const)
	float                                              MinTargetDistance;                                        // 0x0040(0x0004) (Edit, Const)
	float                                              RadiusMultiplier;                                         // 0x0044(0x0004) (Edit, Const)
	float                                              SustainTime;                                              // 0x0048(0x0004) (Edit, Const)
	float                                              AcquireTime;                                              // 0x004C(0x0004) (Edit, Const)
	float                                              ChangeTime;                                               // 0x0050(0x0004) (Edit, Const)
	float                                              MaxSnapAngle;                                             // 0x0054(0x0004) (Edit, Const)
	float                                              DistanceOffset;                                           // 0x0058(0x0004) (Edit, Const)
	TArray<struct FProfileDefinition>                  Profiles;                                                 // 0x005C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UWillowAutoAimProfileDefinition*             DefaultProfile;                                           // 0x0068(0x0004) (Edit, Const, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAutoAimStrategyDefinition");
		return ptr;
	}


	class UWillowAutoAimProfileDefinition* GetProfileDefinition(unsigned char Profile);
};


// Class WillowGame.WillowCalloutDefinition
// 0x0004 (0x004C - 0x0050)
class UWillowCalloutDefinition : public UGearboxCalloutDefinition
{
public:
	class UGearboxDialogEventTag*                      DialogEvent;                                              // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCalloutDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowCharacterClassDefinition
// 0x013C (0x0158 - 0x0294)
class UWillowCharacterClassDefinition : public UCharacterClassDefinition
{
public:
	struct FPointer                                    VfTable_IIBehaviorProvider;                               // 0x0158(0x0004) (Const, Native, NoExport)
	class UWillowCharacterClassDefinition*             AttributeParentClass;                                     // 0x015C(0x0004) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x0160(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FFlagDefinitionInitialization>       DesignerFlagStartingValues;                               // 0x016C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeCategory>                  AttributeStartingValuesNew;                               // 0x0178(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                BaseCommerceMarkup;                                       // 0x0184(0x0010) (Edit, Const)
	TArray<class UClass*>                              EligibleUsage;                                            // 0x0194(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bCountsTowardDamageAndKillStats : 1;                      // 0x01A0(0x0004) (Edit, Const)
	unsigned long                                      bTreatAsVehicleForStats : 1;                              // 0x01A0(0x0004) (Edit, Const)
	struct FName                                       KilledStatID;                                             // 0x01A4(0x0008) (Edit, Const)
	struct FName                                       KilledCriticalStatID;                                     // 0x01AC(0x0008) (Edit, Const)
	struct FName                                       RanOverStatID;                                            // 0x01B4(0x0008) (Edit, Const)
	TArray<struct FDeathByWeaponStatID>                KillByWeaponStatList;                                     // 0x01BC(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FDeathByDamageTypeStatID>            KillByDamageTypeStatList;                                 // 0x01C8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FDeathByWeaponDamageStatID>          KillByWeaponDamageStatList;                               // 0x01D4(0x000C) (Edit, Const, NeedCtorLink)
	struct FName                                       LevelUpKillStat;                                          // 0x01E0(0x0008) (Edit, Const)
	struct FAttributeInitializationData                BaseIgniteChanceResistanceModifier;                       // 0x01E8(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseShockChanceResistanceModifier;                        // 0x01F8(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseCorrosiveChanceResistanceModifier;                    // 0x0208(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseSlowChanceResistanceModifier;                         // 0x0218(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseAmpChanceResistanceModifier;                          // 0x0228(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseIgniteDurationResistanceModifier;                     // 0x0238(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseShockDurationResistanceModifier;                      // 0x0248(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseCorrosiveDurationResistanceModifier;                  // 0x0258(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseSlowDurationResistanceModifier;                       // 0x0268(0x0010) (Edit, Const)
	struct FAttributeInitializationData                BaseAmpDurationResistanceModifier;                        // 0x0278(0x0010) (Edit, Const)
	class UBehaviorProviderDefinition*                 BehaviorProviderDefinition;                               // 0x0288(0x0004) (Edit)
	float                                              RevivalHealthMultiplier;                                  // 0x028C(0x0004) (Edit, Const)
	class UInjuredDefinition*                          CharacterInjuredDefinition;                               // 0x0290(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCharacterClassDefinition");
		return ptr;
	}


	void SetBehaviorProviderDefinition(class UBehaviorProviderDefinition* NewBehaviorProviderDefinition);
	class UBehaviorProviderDefinition* GetBehaviorProviderDefinition();
};


// Class WillowGame.PlayerClassDefinition
// 0x0124 (0x0294 - 0x03B8)
class UPlayerClassDefinition : public UWillowCharacterClassDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x0294(0x0004) (Const, Native, NoExport)
	struct FString                                     PawnArchetypePath;                                        // 0x0298(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillTreePath;                                            // 0x02A4(0x000C) (Edit, NeedCtorLink)
	float                                              InitialFOVModifierSpeed;                                  // 0x02B0(0x0004) (Edit)
	float                                              InitialEyeHeightModifierSpeed;                            // 0x02B4(0x0004) (Edit)
	struct FName                                       GotFirstSkillPointStatID;                                 // 0x02B8(0x0008) (Edit, Const)
	float                                              MaximumCoDependentDamageReturnRange;                      // 0x02C0(0x0004) (Edit, Const)
	class UAkEvent*                                    ActionSkillAvailableAkEvent;                              // 0x02C4(0x0004) (Edit, Const)
	class UResourcePoolDefinition*                     ExperiencePoolDefinition;                                 // 0x02C8(0x0004) (Edit, Const)
	class UResourcePoolDefinition*                     SkillCooldownPoolDefinition;                              // 0x02CC(0x0004) (Edit, Const)
	class UResourcePoolDefinition*                     MeleeSkillCooldownPoolDefinition;                         // 0x02D0(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnLevelUp;                                                // 0x02D4(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnLevelUpNaturally;                                       // 0x02E0(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UParticleSystem*                             BulletReflectionParticle;                                 // 0x02EC(0x0004) (Edit, Const)
	class UWillowGFxUIManagerDefinition*               GFxUIManagerDefinition;                                   // 0x02F0(0x0004) (Edit)
	unsigned long                                      bNeedsDualWieldInventoryGuides : 1;                       // 0x02F4(0x0004) (Edit, Const)
	unsigned long                                      bMeleeSkillUsesSharedWeaponAction : 1;                    // 0x02F4(0x0004) (Edit, Const)
	struct FVector                                     CharacterSelectUIPrimaryStandInOffset;                    // 0x02F8(0x000C) (Edit, Const)
	struct FRotator                                    CharacterSelectUIPrimaryStandInRotation;                  // 0x0304(0x000C) (Edit, Const)
	struct FVector                                     CharacterSelectUISplitStandInOffset;                      // 0x0310(0x000C) (Edit, Const)
	struct FRotator                                    CharacterSelectUISplitStandInRotation;                    // 0x031C(0x000C) (Edit, Const)
	float                                              LowHealthPercent;                                         // 0x0328(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnLowHealth;                                              // 0x032C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnLowHealthRecover;                                       // 0x0338(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UPlayerNameIdentifierDefinition*             CharacterNameId;                                          // 0x0344(0x0004) (Edit, Const)
	TArray<struct FInputContextData>                   InputContexts;                                            // 0x0348(0x000C) (Edit, Const, NeedCtorLink)
	class UClass*                                      InputContextSelector;                                     // 0x0354(0x0004) (Edit, Const)
	class UInputDeviceCollectionDefinition*            InputDeviceCollection;                                    // 0x0358(0x0004) (Edit, Const)
	class USprintDefinition*                           SprintSettings;                                           // 0x035C(0x0004) (Edit)
	class UFocusCameraDefinition*                      FocusDef;                                                 // 0x0360(0x0004) (Edit)
	struct FVector                                     ExtraClipPostTranslate;                                   // 0x0364(0x000C) (Edit, Const)
	class UPawnInteractionDefinition*                  TradeInteractionDefinition;                               // 0x0370(0x0004) (Edit, Const)
	class UInjuredDefinition*                          CharacterInjuredDefinitionOverride;                       // 0x0374(0x0004) (Edit, Const)
	TArray<struct FPlayerClassAchievementUnlockData>   PlayerClassAchievementData;                               // 0x0378(0x000C) (Edit, Const, NeedCtorLink)
	struct FNameBasedObjectPath                        InjuredDefOverridePath;                                   // 0x0384(0x0034) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerClassDefinition");
		return ptr;
	}


	TArray<unsigned char> ShouldUnlockPlayerClassAchievement(unsigned char UnlockType, int IntData, bool bCanBeGreater, bool bCanBeLess);
};


// Class WillowGame.WillowClanDefinition
// 0x0018 (0x003C - 0x0054)
class UWillowClanDefinition : public UGBXDefinition
{
public:
	TArray<struct FClanMaterialData>                   MaterialMap;                                              // 0x003C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FClanSwitchData>                     SwitchData;                                               // 0x0048(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowClanDefinition");
		return ptr;
	}


	void ChangeObjectMaterials(class UObject* MaterialObject);
};


// Class WillowGame.WillowCustomizationManager
// 0x003C (0x003C - 0x0078)
class UWillowCustomizationManager : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<struct FPendingCustomization>               PendingCustomizations;                                    // 0x0040(0x000C) (NeedCtorLink)
	int                                                NumHeadsLoadedSinceLastGC;                                // 0x004C(0x0004)
	unsigned long                                      bRequestingImmediateGC : 1;                               // 0x0050(0x0004)
	TArray<class UCustomizationDefinition*>            AllCustomizations;                                        // 0x0054(0x000C) (Transient, NeedCtorLink)
	TArray<struct FProductCustomizationInfo>           LoadedProductsCustomizationInfos;                         // 0x0060(0x000C) (Native, Transient)
	TArray<struct FCustomizationSizeMapping>           CustomizationSizes;                                       // 0x006C(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCustomizationManager");
		return ptr;
	}


	void EvaluateCustomizationChangedStat(class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, bool bLocked);
	bool IsCustomizationUnlocked(class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, int* IsNew);
	void SetCustomizationSeen(class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, bool bSeen);
	void SetCustomizationLocked(class UCustomizationDefinition* Definition, class AWillowPlayerController* Controller, bool bLocked);
	class UCustomizationData* GetLoadedCustomizationData(class UCustomizationDefinition* Definition);
	void InitializePlayerPawn(class AWillowPlayerPawn* TargetPlayer);
	void ReleaseUnusedCustomizationData();
	void ReleaseCustomizationData(class UCustomizationData* Data);
	void InitiateCustomizationRequest(class UCustomizationDefinition* NewCustomization, const FScriptInterface& Target);
	void UpdatePRILocalCustomizationArrays(class UCustomizationDefinition* NewCustomization, class AWillowPlayerReplicationInfo* PRI);
	void PlayerCustomizationsUpdated(class AWillowPlayerReplicationInfo* PRI);
};


// Class WillowGame.WillowDamageArea
// 0x0074 (0x0188 - 0x01FC)
class AWillowDamageArea : public AActor
{
public:
	unsigned char                                      CollisionPrimitiveType;                                   // 0x0188(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	struct FAttributeInitializationData                DamagePerSecond;                                          // 0x018C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectDamage;                                       // 0x019C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StatusEffectChance;                                       // 0x01AC(0x0010) (Edit, Const)
	class UClass*                                      DamageSource;                                             // 0x01BC(0x0004) (Edit, Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                                     // 0x01C0(0x0004) (Edit, Const)
	class UImpactDefinition*                           ImpactDefinition;                                         // 0x01C4(0x0004) (Edit, Const)
	unsigned long                                      bCanDamageFriendlies : 1;                                 // 0x01C8(0x0004) (Edit, Const)
	unsigned long                                      bEnabled : 1;                                             // 0x01C8(0x0004) (Edit, Const)
	unsigned long                                      bApplyBeams : 1;                                          // 0x01C8(0x0004) (Edit, Const)
	unsigned long                                      bBarrelSource : 1;                                        // 0x01C8(0x0004) (Edit, Const)
	unsigned long                                      bPlantSource : 1;                                         // 0x01C8(0x0004) (Edit, Const)
	unsigned long                                      bForceTouchingUpdate : 1;                                 // 0x01C8(0x0004) (Edit, Const)
	float                                              DamageTickFrequency;                                      // 0x01CC(0x0004)
	float                                              DamageTickTime;                                           // 0x01D0(0x0004)
	struct FName                                       BeamSourceSocket;                                         // 0x01D4(0x0008) (Edit, Const)
	struct FName                                       BeamTargetSocket;                                         // 0x01DC(0x0008) (Edit, Const)
	class UFiringModeDefinition*                       BeamFiringMode;                                           // 0x01E4(0x0004) (Edit, Const)
	TArray<FScriptInterface>                           BeamTargets;                                              // 0x01E8(0x000C) (Transient, NeedCtorLink)
	float                                              BarrelSourceTime;                                         // 0x01F4(0x0004) (Edit, Const)
	float                                              PlantSourceTime;                                          // 0x01F8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDamageArea");
		return ptr;
	}


	void Destroyed();
	void OnToggle(class USeqAct_Toggle* Action);
	void DisableArea();
	void EnableArea();
	bool IsEnabled();
	class AWillowLightProjectileManager* GetLightProjectileManager();
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	float GetStatusEffectChanceModifier(class UObject* ObjContext);
	float GetStatusEffectBaseChanceModifier(class UObject* ObjContext);
	float GetStatusEffectBaseDamage(class UObject* ObjContext);
};


// Class WillowGame.WillowDamagePipeline
// 0x00C0 (0x00D0 - 0x0190)
class UWillowDamagePipeline : public UDamagePipeline
{
public:
	class UWillowDamageTypeDefinition*                 WillowDamageTypeDef;                                      // 0x00D0(0x0004)
	class UWillowImpactDefinition*                     WillowImpactDefinition;                                   // 0x00D4(0x0004)
	class AController*                                 DamageInstigator;                                         // 0x00D8(0x0004)
	struct FVector                                     HitLocation;                                              // 0x00DC(0x000C)
	struct FVector                                     HitMomentum;                                              // 0x00E8(0x000C)
	struct FTraceHitInfo                               HitInfo;                                                  // 0x00F4(0x001C) (Component)
	class UClass*                                      DamageSource;                                             // 0x0110(0x0004)
	class UWillowGlobals*                              Globals;                                                  // 0x0114(0x0004)
	class UGlobalsDefinition*                          GlobalsDef;                                               // 0x0118(0x0004)
	class AWorldInfo*                                  WorldInfo;                                                // 0x011C(0x0004)
	class AWillowGameReplicationInfo*                  WGRI;                                                     // 0x0120(0x0004)
	class AActor*                                      DamagedActor;                                             // 0x0124(0x0004)
	class APawn*                                       DamagedPawnBase;                                          // 0x0128(0x0004)
	class AWillowInteractiveObject*                    DamagedIO;                                                // 0x012C(0x0004)
	class AWillowPawn*                                 DamagedPawn;                                              // 0x0130(0x0004)
	class AWillowAIPawn*                               DamagedAIPawn;                                            // 0x0134(0x0004)
	class AWillowPlayerController*                     DamageInstigatorWPC;                                      // 0x0138(0x0004)
	class UBodyHitRegionDefinition*                    HitRegionDef;                                             // 0x013C(0x0004)
	FScriptInterface                                   DamageableInt;                                            // 0x0140(0x0008)
	FScriptInterface                                   HitRegionConsumerInt;                                     // 0x0148(0x0008)
	FScriptInterface                                   ProtectableInt;                                           // 0x0150(0x0008)
	FScriptInterface                                   DamagedReflectableInt;                                    // 0x0158(0x0008)
	FScriptInterface                                   InstigatorReflectableInt;                                 // 0x0160(0x0008)
	FScriptInterface                                   DamagedTargetableInt;                                     // 0x0168(0x0008)
	FScriptInterface                                   InstigatorTargetableInt;                                  // 0x0170(0x0008)
	unsigned long                                      bCanReflect : 1;                                          // 0x0178(0x0004)
	unsigned char                                      BulletFromClipType;                                       // 0x017C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x017D(0x0003) MISSED OFFSET
	TArray<class UBodyHitRegionDefinition*>            TakingRadiusDamageOnHitRegions;                           // 0x0180(0x000C) (NeedCtorLink)
	float                                              ResistDamageReductionThreshold;                           // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDamagePipeline");
		return ptr;
	}


	static void KillPlayer(class AWillowPlayerPawn* WPP);
	bool GetWouldBeHealedSomehowByFriendlyFire(class APawn* CheckTarget, class AController* CheckSource, class UClass* InDamageSource);
	void DamageDealtSkillEventsTriggered(unsigned char* SkillEvent);
	void DamageTakenSkillEventsTriggered(unsigned char* SkillEvent);
	static void SetAlwaysCrit(bool DesiredValue);
	static bool IsAlwaysCritCheatActive();
	void SetTakingRadiusDamageOnHitRegions(TArray<class UBodyHitRegionDefinition*> InHitRegions);
	void SetBulletClipType(unsigned char InBulletFromClipType);
	void SetCanReflect(bool inCanReflect);
	void ResetToDefaults();
	bool ConvertDamageToHealing(float IncomingDamage, class APawn* InDamagedPawn, class AController* InDamageInstigator, class UClass* InDamageSource, const struct FTraceHitInfo& InHitInfo);
	struct FDamageEventSummary AdjustDamage(float IncomingDamage, float DamageSeverityPercent, class AActor* InDamagedActor, class AController* InDamageInstigator, const struct FVector& InHitLocation, class UClass* InDamageSource, const struct FVector& InHitMomentum, const struct FTraceHitInfo& InHitInfo);
};


// Class WillowGame.WillowDamageType
// 0x001C (0x0064 - 0x0080)
class UWillowDamageType : public UDamageType
{
public:
	unsigned long                                      bDirectDamage : 1;                                        // 0x0064(0x0004)
	unsigned long                                      bSeversHead : 1;                                          // 0x0064(0x0004)
	unsigned long                                      bCauseConvulsions : 1;                                    // 0x0064(0x0004)
	unsigned long                                      bUseTearOffMomentum : 1;                                  // 0x0064(0x0004)
	unsigned long                                      bThrowRagdoll : 1;                                        // 0x0064(0x0004)
	unsigned long                                      bLeaveBodyEffect : 1;                                     // 0x0064(0x0004)
	unsigned long                                      bBulletHit : 1;                                           // 0x0064(0x0004)
	unsigned long                                      bVehicleHit : 1;                                          // 0x0064(0x0004)
	unsigned long                                      bCausesBlood : 1;                                         // 0x0064(0x0004) (Edit)
	float                                              GibPerterbation;                                          // 0x0068(0x0004) (Edit)
	class UClass*                                      DamageWeaponClass;                                        // 0x006C(0x0004)
	int                                                DamageWeaponFireMode;                                     // 0x0070(0x0004)
	struct FString                                     UBMKilledByMessageString;                                 // 0x0074(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDamageType");
		return ptr;
	}


	static void PawnTornOff(class AWillowPawn* DeadPawn);
	static void SpawnHitEffect(class APawn* P, float Damage, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, const struct FVector& HitLocation);
};


// Class WillowGame.WillowDamageSource
// 0x0000 (0x0080 - 0x0080)
class UWillowDamageSource : public UWillowDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDamageSource");
		return ptr;
	}


	static bool CanDamageSourceBeAbsorbedByShields(class UClass* DamageSource);
	static bool ShouldDamageSourcePenetrateShields(class UClass* DamageSource, class AController* DamageInstigator);
	static void GetAmmoTheftAmounts(class UClass* DamageSource, class AController* DamageInstigator, class AController* DamageReceiver, int* InstigatedDamageAmmoTheftAmount, int* ReceivedDamageAmmoTheftAmount);
};


// Class WillowGame.WillowDmgSource_Bullet
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Bullet : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Bullet");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_MachineGun
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_MachineGun : public UWillowDmgSource_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_MachineGun");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Pistol
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Pistol : public UWillowDmgSource_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Pistol");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Shotgun
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Shotgun : public UWillowDmgSource_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Shotgun");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Sniper
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Sniper : public UWillowDmgSource_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Sniper");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_SubMachineGun
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_SubMachineGun : public UWillowDmgSource_Bullet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_SubMachineGun");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_CustomCrate
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_CustomCrate : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_CustomCrate");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Grenade
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Grenade : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Grenade");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Melee
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Melee : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Melee");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Rocket
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Rocket : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Rocket");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Shield
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Shield : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Shield");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_ShieldNova
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_ShieldNova : public UWillowDmgSource_Shield
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_ShieldNova");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_ShieldSpike
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_ShieldSpike : public UWillowDmgSource_Shield
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_ShieldSpike");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Skill
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Skill : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Skill");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_Skill_IgnoreIOs
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_Skill_IgnoreIOs : public UWillowDmgSource_Skill
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_Skill_IgnoreIOs");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_StatusEffect
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_StatusEffect : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_StatusEffect");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_VehicleRanInto
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_VehicleRanInto : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_VehicleRanInto");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_VehicleRanOver
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_VehicleRanOver : public UWillowDamageSource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_VehicleRanOver");
		return ptr;
	}

};


// Class WillowGame.WillowDialogAct_MissionSwitch
// 0x0008 (0x0070 - 0x0078)
class UWillowDialogAct_MissionSwitch : public UGearboxDialogAction
{
public:
	unsigned char                                      TrackedState;                                             // 0x0070(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	class UMissionDefinition*                          MissionDefinition;                                        // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogAct_MissionSwitch");
		return ptr;
	}


	void Activate();
};


// Class WillowGame.WillowDialogAct_RandomBranch
// 0x002C (0x0070 - 0x009C)
class UWillowDialogAct_RandomBranch : public UGearboxDialogAction
{
public:
	TArray<float>                                      Chances;                                                  // 0x0070(0x000C) (Edit, NeedCtorLink)
	float                                              QuietTimeMin;                                             // 0x007C(0x0004) (Edit)
	float                                              QuietTimeMax;                                             // 0x0080(0x0004) (Edit)
	unsigned char                                      Mode;                                                     // 0x0084(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	int                                                AvoidRepeatingLastNPlayed;                                // 0x0088(0x0004) (Edit)
	float                                              NextFireTime;                                             // 0x008C(0x0004) (Transient)
	TArray<int>                                        DisableIndices;                                           // 0x0090(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogAct_RandomBranch");
		return ptr;
	}


	void Activate();
};


// Class WillowGame.WillowDialogAct_Talk
// 0x0008 (0x0084 - 0x008C)
class UWillowDialogAct_Talk : public UGearboxDialogAct_Talk
{
public:
	class UWillowDialogEmoteDefinition*                Emote;                                                    // 0x0084(0x0004) (Edit, Const)
	unsigned long                                      bEnableNoMatch : 1;                                       // 0x0088(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogAct_Talk");
		return ptr;
	}


	void Activate();
	void TalkFinished(class AActor* InTalker);
	void TalkStarted(class AActor* InTalker);
};


// Class WillowGame.WillowDialogAct_Trigger
// 0x0000 (0x0078 - 0x0078)
class UWillowDialogAct_Trigger : public UGearboxDialogAct_Trigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogAct_Trigger");
		return ptr;
	}

};


// Class WillowGame.WillowDialogEchoActor
// 0x0020 (0x0188 - 0x01A8)
class AWillowDialogEchoActor : public AActor
{
public:
	struct FPointer                                    VfTable_IGearboxDialogInterface;                          // 0x0188(0x0004) (Const, Native, NoExport)
	class UGearboxDialogNameTag*                       NameTag;                                                  // 0x018C(0x0004) (Net)
	class UGearboxDialogComponent*                     DialogComponent;                                          // 0x0190(0x0004) (ExportObject, Component, EditInline)
	struct FGearboxDialogReplicatedData                DialogReplicatedData;                                     // 0x0194(0x0014) (Net, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogEchoActor");
		return ptr;
	}


	void SetDialogNameTag(class UGearboxDialogNameTag* NewName);
	struct FGearboxDialogReplicatedData GetReplicatedDialogData();
	void SetReplicatedDialogData(class UGearboxDialogAct_Talk* TalkAct, struct FGearboxDialogData* Data);
	void GetDialogGroups(TArray<class UGearboxDialogGroup*>* Groups);
	class UGearboxDialogComponent* GetDialogComponent();
	class UGearboxDialogNameTag* GetDialogNameTag();
	class AActor* GetActor();
	bool CanTalk();
	void ServerDialog_TriggerEvent(class UGearboxDialogEventTag* EventTag, class AActor* Other, class UObject* ObjectParameter);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowDialogEmoteDefinition
// 0x0000 (0x003C - 0x003C)
class UWillowDialogEmoteDefinition : public UGBXDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogEmoteDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowDialogEventTag
// 0x0004 (0x0044 - 0x0048)
class UWillowDialogEventTag : public UGearboxDialogEventTag
{
public:
	unsigned long                                      bIsEchoEvent : 1;                                         // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bDoesNotOverrideSamePriority : 1;                         // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bMultiplayerOnly : 1;                                     // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bOncePerSession : 1;                                      // 0x0044(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogEventTag");
		return ptr;
	}

};


// Class WillowGame.WillowDialogEventTagSpecialized
// 0x0010 (0x0048 - 0x0058)
class UWillowDialogEventTagSpecialized : public UWillowDialogEventTag
{
public:
	class UGearboxDialogEventTag*                      SpecializationOfEventTag;                                 // 0x0048(0x0004) (Edit, Const)
	TArray<class UGearboxDialogNameTag*>               SpecializationForOtherNameTags;                           // 0x004C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogEventTagSpecialized");
		return ptr;
	}

};


// Class WillowGame.WillowDialogGlobalsDefinition
// 0x014C (0x004C - 0x0198)
class UWillowDialogGlobalsDefinition : public UGearboxDialogGlobalsDefinition
{
public:
	class UGearboxDialogTemplateGroup*                 DefaultTemplateGroup;                                     // 0x004C(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Jump;                                                 // 0x0050(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_JumpLand;                                             // 0x0054(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_KilledChampion;                                       // 0x0058(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_SkillKill;                                            // 0x005C(0x0004) (Edit, Const)
	float                                              KillStreakTargetScore;                                    // 0x0060(0x0004) (Edit, Const)
	float                                              KillPointValue;                                           // 0x0064(0x0004) (Edit, Const)
	float                                              DefaultKillScoreDecayRate;                                // 0x0068(0x0004) (Edit, Const)
	struct FInterpCurveFloat                           LastKillTimeVDecayRate;                                   // 0x006C(0x0010) (Edit, Const, NeedCtorLink)
	class UGearboxDialogEventTag*                      DET_KillStreak;                                           // 0x007C(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_ChallengeCompleted;                                   // 0x0080(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_JoinedGame;                                           // 0x0084(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_SeatSwap;                                             // 0x0088(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_VehicleCatchAir;                                      // 0x008C(0x0004) (Edit, Const)
	float                                              VehicleCatchAirHangTime;                                  // 0x0090(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_KilledEnemyVehicle;                                   // 0x0094(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_VehicleLowHealth;                                     // 0x0098(0x0004) (Edit, Const)
	float                                              VehicleLowHealthThreshold;                                // 0x009C(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_VehicleFlipped;                                       // 0x00A0(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_RanOverEnemy;                                         // 0x00A4(0x0004) (Edit, Const)
	int                                                RanOverEnemyMinVelocity;                                  // 0x00A8(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_HitPlayerVehicle;                                     // 0x00AC(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_VehicleSpawn;                                         // 0x00B0(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_CriticalHitKill;                                      // 0x00B4(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_CriticalHit;                                          // 0x00B8(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_OutOfAmmo;                                            // 0x00BC(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Reloading;                                            // 0x00C0(0x0004) (Edit, Const)
	int                                                WeaponMinRarityLevel;                                     // 0x00C4(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_RareWeaponEquipped;                                   // 0x00C8(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_PlayerIdle;                                           // 0x00CC(0x0004) (Edit, Const)
	float                                              IdleTimeOut;                                              // 0x00D0(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_PlayerDown;                                           // 0x00D4(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Death;                                                // 0x00D8(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_DeathByFire;                                          // 0x00DC(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_DeathByShock;                                         // 0x00E0(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Damaged;                                              // 0x00E4(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_DamagedCritical;                                      // 0x00E8(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_ShieldDown;                                           // 0x00EC(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_PlayerDownReact;                                      // 0x00F0(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_PlayerDeadReact;                                      // 0x00F4(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_GrenadeReact;                                         // 0x00F8(0x0004) (Edit, Const)
	float                                              HealedPlayerReviveTriggerValue;                           // 0x00FC(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_HealedPlayer;                                         // 0x0100(0x0004) (Edit, Const)
	TArray<class UGearboxDialogGroup*>                 NPCDialogGroups;                                          // 0x0104(0x000C) (Edit, Const, NeedCtorLink)
	class UGearboxDialogEventTag*                      DET_PlayerLingeringInMenu;                                // 0x0110(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_GenericDismissal;                                     // 0x0114(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_OnUse_AllMissionsInProgress;                          // 0x0118(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_OnUse_MissionComplete;                                // 0x011C(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_OnUse_MissionsAvailable;                              // 0x0120(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_OnUse_NoMissions;                                     // 0x0124(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_MissionTurnedIn;                                      // 0x0128(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Provoked;                                             // 0x012C(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Unprovoked;                                           // 0x0130(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Dodge;                                                // 0x0134(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_ReacquireTarget;                                      // 0x0138(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnStartEchoCallBehaviors;                                 // 0x013C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnStopEchoCallBehaviors;                                  // 0x0148(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<struct FScreenParticleModifier>             EchoScreenParticleModifiers;                              // 0x0154(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UGearboxDialogEventTag*                      DET_IncomingChampion;                                     // 0x0160(0x0004) (Edit, Const)
	float                                              MapOpenTriggerTime;                                       // 0x0164(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_MapOpenRemark;                                        // 0x0168(0x0004) (Edit, Const)
	float                                              SkillsOpenTriggerTime;                                    // 0x016C(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_SkillPointToSpend;                                    // 0x0170(0x0004) (Edit, Const)
	float                                              ComparisonOpenTriggerTime;                                // 0x0174(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_CompareItems;                                         // 0x0178(0x0004) (Edit, Const)
	float                                              TravelBlockedActorDistance;                               // 0x017C(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_TravelBlocked;                                        // 0x0180(0x0004) (Edit, Const)
	class UGearboxDialogEventTag*                      DET_Taunt;                                                // 0x0184(0x0004) (Edit, Const)
	class UGearboxDialogPriority*                      ActivePlotMissionMinPriority;                             // 0x0188(0x0004) (Edit, Const)
	class UGearboxDialogPriority*                      ActiveSideMissionMinPriority;                             // 0x018C(0x0004) (Edit, Const)
	class UGearboxDialogPriority*                      ActiveMissionMinPriorityStart;                            // 0x0190(0x0004) (Edit, Const)
	class UGearboxDialogPriority*                      SideMissionKickoffPriority;                               // 0x0194(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogGlobalsDefinition");
		return ptr;
	}


	void TriggerTemplateEvent(class UGearboxDialogEventTag* Event, class AActor* Instigator, class AActor* Other, class UObject* ObjectParameter);
	static void StaticTriggerTemplateEvent(class UGearboxDialogEventTag* Event, class AActor* Instigator, class AActor* Other, class UObject* ObjectParameter);
	static class UWillowDialogGlobalsDefinition* Get();
};


// Class WillowGame.WillowDialogManager
// 0x001C (0x00C0 - 0x00DC)
class UWillowDialogManager : public UGearboxDialogManager
{
public:
	class AActor*                                      EchoActor;                                                // 0x00C0(0x0004) (Transient)
	class UWillowDialogEmoteDefinition*                EchoEmote;                                                // 0x00C4(0x0004) (Transient)
	TArray<class AWillowDialogEchoActor*>              PureEchoActors;                                           // 0x00C8(0x000C) (Transient, NeedCtorLink)
	struct FQueuedPersonalEchoLog                      QueuedPersonalEcho;                                       // 0x00D4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogManager");
		return ptr;
	}


	void PlayPersonalEchoLog(class UWillowDialogEventTag* InEventTag, class UGearboxDialogGroup* InGroup);
	bool IsMissionKickoffPlaying();
	int GetPriorityForEchoActor();
	void Cleanup();
	void PlayEchoDialog(class UWillowDialogEventTag* InEvent, class UWillowDialogNameTag* InName, bool bForcePlayAsPureEcho);
};


// Class WillowGame.WillowDialogNameTag
// 0x0040 (0x0048 - 0x0088)
class UWillowDialogNameTag : public UGearboxDialogNameTag
{
public:
	struct FString                                     CallerName;                                               // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FEchoPortraitInfo                           DefaultEchoPortrait;                                      // 0x0054(0x0018) (Edit, Const, NeedCtorLink)
	TArray<struct FEmotePortraitInfo>                  EmotePortraits;                                           // 0x006C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FEmoteStance>                        EmoteStances;                                             // 0x0078(0x000C) (Edit, Const, NeedCtorLink)
	class UDownloadableExpansionDefinition*            DlcExpansion;                                             // 0x0084(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogNameTag");
		return ptr;
	}


	void EndStance(class AActor* inActor, class UWillowDialogEmoteDefinition* InEmote);
	void BeginStance(class AActor* inActor, class UWillowDialogEmoteDefinition* InEmote);
	static void StaticHideEchoPortrait(const FScriptInterface& DialogContext, class UWillowDialogEmoteDefinition* InEmote, class AWillowPlayerController* InInstigator);
	static void StaticShowEchoPortrait(const FScriptInterface& DialogContext, class UWillowDialogEmoteDefinition* InEmote, class AWillowPlayerController* InInstigator);
};


// Class WillowGame.WillowDialogVar_InstanceData
// 0x0008 (0x0070 - 0x0078)
class UWillowDialogVar_InstanceData : public UGearboxDialogVariable
{
public:
	struct FName                                       InstanceDataName;                                         // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogVar_InstanceData");
		return ptr;
	}

};


// Class WillowGame.WillowDialogVar_Passenger
// 0x0000 (0x0070 - 0x0070)
class UWillowDialogVar_Passenger : public UGearboxDialogVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDialogVar_Passenger");
		return ptr;
	}

};


// Class WillowGame.WillowDynamicNavMeshConnectionPoint
// 0x0054 (0x0244 - 0x0298)
class AWillowDynamicNavMeshConnectionPoint : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshSpecialMove;                          // 0x0244(0x0004) (Const, Native, NoExport)
	TArray<struct FDynamicNavMeshConnection>           Connections;                                              // 0x0248(0x000C) (Edit, NeedCtorLink)
	TArray<class AWillowDynamicNavMeshConnectionPoint*> PointsThatConnectToMe;                                    // 0x0254(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FBasedPosition                              PositionOnNavMesh;                                        // 0x0260(0x0034) (Edit, EditConst)
	unsigned long                                      bIsOnValidNavMesh : 1;                                    // 0x0294(0x0004) (Edit, EditConst)
	unsigned long                                      bEnabled : 1;                                             // 0x0294(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDynamicNavMeshConnectionPoint");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class WillowGame.WillowDynamicNavMeshConnectionPointRenderingComponent
// 0x0008 (0x0210 - 0x0218)
class UWillowDynamicNavMeshConnectionPointRenderingComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConnectionValidColor;                                     // 0x0210(0x0004) (Edit)
	struct FColor                                      ConnectionInvalidColor;                                   // 0x0214(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDynamicNavMeshConnectionPointRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.WillowDynamicPathBlockingVolume
// 0x0014 (0x01BC - 0x01D0)
class AWillowDynamicPathBlockingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IIGBXNavMeshObstacle;                             // 0x01BC(0x0004) (Const, Native, NoExport)
	unsigned long                                      bEnabled : 1;                                             // 0x01C0(0x0004) (Edit)
	TArray<class UPawnAllegiance*>                     BlockedAllegiances;                                       // 0x01C4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDynamicPathBlockingVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class WillowGame.WillowEffectCoordinator
// 0x0078 (0x003C - 0x00B4)
class UWillowEffectCoordinator : public UObject
{
public:
	TArray<struct FName>                               SupportedEffects;                                         // 0x003C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	int                                                ManagedParticlesReserveLength;                            // 0x0048(0x0004) (Config, GlobalConfig)
	int                                                ManagedAudioReserveLength;                                // 0x004C(0x0004) (Config, GlobalConfig)
	int                                                ExternalComponentsReserveLength;                          // 0x0050(0x0004) (Config, GlobalConfig)
	TArray<struct FCoordinatedEffectProcess>           Processes;                                                // 0x0054(0x000C) (NeedCtorLink)
	TArray<class UActorComponent*>                     ExternalComponents;                                       // 0x0060(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UParticleSystemComponent*>            ManagedParticles;                                         // 0x006C(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UAkComponent*>                        ManagedAudio;                                             // 0x0078(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<int>                                        ManagedAudioFreeList;                                     // 0x0084(0x000C) (NeedCtorLink)
	TArray<int>                                        ManagedParticlesFreeList;                                 // 0x0090(0x000C) (NeedCtorLink)
	TArray<int>                                        ExternalComponentsFreeList;                               // 0x009C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnEffectComplete__Delegate;                             // 0x00A8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEffectCoordinator");
		return ptr;
	}


	static void StaticHandleReplicatedEffect(class UObject* EffectOwner, const struct FName& IgnoreInstanceData, struct FReplicatedCoordinatedEffect* Effect);
	bool HasEffect(class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner);
	bool PopEffect(class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner, bool IncludeChainedEffects);
	float PushEffect(class UObject* Target, class UCoordinatedEffectDefinition* TheDefinition, class AActor* EffectOwner, float StartingPercent, const struct FName& IgnoreInstanceData, bool bViaReplication, const struct FScriptDelegate& EffectCompleteDelegate);
	bool PopMutex(class UObject* Target, const struct FName& MutexName);
	void GetBaseMaterials(class UMeshComponent* Mesh, TArray<class UMaterialInterface*>* MaterialResult, int* CurrentBaseIndex);
	void PopAllEffects(class UObject* Target);
	void OnEffectComplete(class UObject* Target);
};


// Class WillowGame.WillowElevator
// 0x0028 (0x01F4 - 0x021C)
class AWillowElevator : public AInterpActor
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x01F4(0x0004) (Edit)
	unsigned long                                      bMoving : 1;                                              // 0x01F4(0x0004)
	int                                                FloorIndex;                                               // 0x01F8(0x0004)
	int                                                DestFloorIndex;                                           // 0x01FC(0x0004)
	int                                                InitialFloorIndex;                                        // 0x0200(0x0004) (Edit)
	TArray<struct FName>                               Floors;                                                   // 0x0204(0x000C) (Edit, NeedCtorLink)
	TArray<class AWillowElevatorButton*>               Buttons;                                                  // 0x0210(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowElevator");
		return ptr;
	}


	void ButtonsGoToInUseState();
	void ButtonsGoToEnabledState();
	void OnToggle(class USeqAct_Toggle* Action);
	void SetDestFloorIndex(int NewDestFloorIndex, class AActor* InInstigator);
	void ButtonPushed(unsigned char Usage, int CallFloor, class AActor* User);
	void TryGoToInitialState();
	bool ChildEncroachingOn(class AInterpActor* Child, class AActor* Other);
	void PostBeginPlay();
};


// Class WillowGame.WillowElevatorRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowElevatorRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowElevatorRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.WillowEmitter
// 0x0008 (0x0194 - 0x019C)
class AWillowEmitter : public AEmitter
{
public:
	float                                              NetCullDistanceSquared;                                   // 0x0194(0x0004)
	unsigned long                                      bOwnerNoSeeEmitter : 1;                                   // 0x0198(0x0004) (Net, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEmitter");
		return ptr;
	}


	void SetOwnerNoSeeEmitter(bool bNewOwnerNoSeeEmitter);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.StatusEffectReplicatedEmitter
// 0x001C (0x019C - 0x01B8)
class AStatusEffectReplicatedEmitter : public AWillowEmitter
{
public:
	class UParticleSystem*                             EmitterTemplate;                                          // 0x019C(0x0004) (Net, RepNotify)
	float                                              ServerLifeSpan;                                           // 0x01A0(0x0004)
	unsigned long                                      bIgnite : 1;                                              // 0x01A4(0x0004) (Net, RepNotify)
	unsigned long                                      bCorrosive : 1;                                           // 0x01A4(0x0004) (Net, RepNotify)
	unsigned long                                      bShock : 1;                                               // 0x01A4(0x0004) (Net, RepNotify)
	unsigned long                                      bAmp : 1;                                                 // 0x01A4(0x0004) (Net, RepNotify)
	unsigned long                                      bSlow : 1;                                                // 0x01A4(0x0004) (Net, RepNotify)
	unsigned long                                      bHealing : 1;                                             // 0x01A4(0x0004) (Net, RepNotify)
	float                                              RandomTTL;                                                // 0x01A8(0x0004)
	float                                              AccumulatedTime;                                          // 0x01AC(0x0004)
	FScriptInterface                                   BaseTarget;                                               // 0x01B0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusEffectReplicatedEmitter");
		return ptr;
	}


	void TearOff();
	void ChooseRandomTTL();
	void BaseChange();
	void TornOff();
	void SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish);
	bool IsEnabled(unsigned char Type);
	struct FName GetParameterName(unsigned char Type);
	void ResetDistributionForEffect(unsigned char Type, float Distribution);
	void UpdateDistributions();
	int GetEffectCount();
	void UpdateEffect(unsigned char Type, bool bEnabled);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class WillowGame.WillowExposureUtilityStrategy
// 0x0000 (0x003C - 0x003C)
class UWillowExposureUtilityStrategy : public UExposureUtilityStrategy
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowExposureUtilityStrategy");
		return ptr;
	}

};


// Class WillowGame.WillowForcedReachSpec
// 0x0000 (0x0084 - 0x0084)
class UWillowForcedReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowForcedReachSpec");
		return ptr;
	}


	bool DoSpecialMove(class AWillowPawn* WP);
};


// Class WillowGame.WillowGameEngine
// 0x0048 (0x07CC - 0x0814)
class UWillowGameEngine : public UGearboxEngine
{
public:
	struct FPointer                                    VfTable_ISparkUpdateCallback;                             // 0x07CC(0x0004) (Const, Native, NoExport)
	struct FString                                     SourceMapName;                                            // 0x07D0(0x000C) (NeedCtorLink)
	struct FString                                     DestMapName;                                              // 0x07DC(0x000C) (NeedCtorLink)
	struct FString                                     LastNonFakeEntrySourceMapName;                            // 0x07E8(0x000C) (NeedCtorLink)
	unsigned char                                      LevelChangeState;                                         // 0x07F4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07F5(0x0003) MISSED OFFSET
	TArray<struct FString>                             FullyLoadedIniPackages;                                   // 0x07F8(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bPauseLostFocusWindowed : 1;                              // 0x0804(0x0004) (Config)
	unsigned long                                      bWasPaused : 1;                                           // 0x0804(0x0004) (Transient)
	unsigned long                                      bIsTickingCIV : 1;                                        // 0x0804(0x0004) (Transient)
	unsigned long                                      bCIVEnabled : 1;                                          // 0x0804(0x0004) (Transient)
	float                                              TimeBetweenCIVTicks;                                      // 0x0808(0x0004) (Transient)
	float                                              LastCIVCheckTime;                                         // 0x080C(0x0004) (Transient)
	struct FPointer                                    OverlappedCIV;                                            // 0x0810(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGameEngine");
		return ptr;
	}


	bool FastTravelIsAccessibleForTime(unsigned char InAccessibilityTime);
	void CheckCIV();
	class APersistentTransitionLandmark* GetTransitionLandmark(const struct FString& Source, const struct FString& Dest);
	void TeleportPlayer(class APersistentTransitionLandmark* Landmark, class AWillowPlayerPawn* PlayerPawn);
	void UnpauseForLevelLoad(class AGameInfo* GI);
	void PauseForLevelLoad(class AGameInfo* GI, class APlayerController* Authority);
	bool CanUnpause();
};


// Class WillowGame.WillowCoopGameInfo
// 0x0010 (0x0614 - 0x0624)
class AWillowCoopGameInfo : public AWillowGameInfo
{
public:
	TArray<class ATeamInfo*>                           Teams;                                                    // 0x0614(0x000C) (NeedCtorLink)
	unsigned long                                      bSomeoneJustJoined : 1;                                   // 0x0620(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCoopGameInfo");
		return ptr;
	}


	void InitializeTeams();
	void HandleSeamlessTravelPlayer(class AController** C);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void PostSeamlessTravel();
	void DisableFakePauseFor(class APlayerController* PC);
	bool OverrideCanUnpauseInternalUI();
	void ProcessLeviathanPlayerLeft(class AController* PC);
	void ProcessLeviathanPlayerJoined(class APlayerController* PC);
	unsigned char GetLeviathanPlayerType(class AWillowPlayerController* PC);
	void UpdatePartyLeader();
	void Logout(class AController* Exiting);
	void PostLogin(class APlayerController* NewPlayer);
	bool AllowPausing(class APlayerController* PC);
	bool IsHumanControlled(class APawn* P);
	bool ShouldOverrideDamageTypeForHealing(class UDamageTypeDefinition* DamageTypeDef);
	class UDamageTypeDefinition* GetHealingDamageTypeDefinition();
	bool ConvertDamageToHealing(float Damage, class APawn* DamagedPawn, class AController* DamageInstigator, const struct FVector& HitLocation, class UClass* DamageSource, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline, float* Damage, struct FVector* Momentum);
	bool IsFriendlyFire(class APawn* injured, const FScriptInterface& InstigatingTargetable);
	bool ChangeTeam(class AController* Other, int N, bool bNewTeam);
	unsigned char PickTeam(unsigned char Num, class AController* C);
	void CreateTeam(int TeamIndex, const struct FString& TeamName);
};


// Class WillowGame.WillowGameReplicationInfo
// 0x0280 (0x01EC - 0x046C)
class AWillowGameReplicationInfo : public AGameReplicationInfo
{
public:
	struct FActiveWaypointData                         ActiveWaypoints[0x6];                                     // 0x01EC(0x0018) (Net, RepRetry)
	struct FActiveAreaWaypointData                     ActiveAreaWaypoints[0x4];                                 // 0x027C(0x0014) (Net)
	class AWillowRadarManager*                         RadarMgr;                                                 // 0x02CC(0x0004) (Net)
	class AStationTeleporterDestination*               ActiveRespawnCheckpointTeleportActor;                     // 0x02D0(0x0004)
	unsigned char                                      FastTravelLocationsBitfield[0x10];                        // 0x02D4(0x0001) (Net)
	unsigned char                                      CachedBossHasShield;                                      // 0x02E4(0x0001)
	unsigned char                                      bIsNPCAllyEnabled[0x2];                                   // 0x02E5(0x0001) (Net)
	unsigned char                                      MatchmakingState;                                         // 0x02E7(0x0001) (Net, RepNotify)
	unsigned char                                      StartGameState;                                           // 0x02E8(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02E9(0x0003) MISSED OFFSET
	TArray<struct FName>                               FastTravelLocations;                                      // 0x02EC(0x000C) (NeedCtorLink)
	class AWillowVersusDuelInfo*                       PotentialDuels[0x6];                                      // 0x02F8(0x0004) (Net)
	class AWillowVersusDuelInfo*                       ActiveDuels[0x2];                                         // 0x0310(0x0004) (Net)
	float                                              TimeOfDay;                                                // 0x0318(0x0004)
	float                                              DayNightCycleRate;                                        // 0x031C(0x0004) (Transient)
	float                                              DayNightCycleRateBaseValue;                               // 0x0320(0x0004) (Const)
	TArray<class UAttributeModifier*>                  DayNightCycleRateModifierStack;                           // 0x0324(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SecondsUntilShopsReset;                                   // 0x0330(0x0004) (Net)
	float                                              ShopTimerRate;                                            // 0x0334(0x0004) (Net)
	float                                              bAnyPlayerAttemptedFastTravel;                            // 0x0338(0x0004) (Net, Transient)
	float                                              bAnyPlayerEnteredVehicle;                                 // 0x033C(0x0004) (Net, Transient)
	int                                                CurrentPlaythrough;                                       // 0x0340(0x0004) (Net, RepNotify)
	int                                                PlaythroughOverride;                                      // 0x0344(0x0004) (Net, RepNotify)
	TArray<struct FName>                               ReplicatedClientFlags;                                    // 0x0348(0x000C) (NeedCtorLink)
	class AMissionTracker*                             MissionTracker;                                           // 0x0354(0x0004) (Net)
	class AWillowVehicle*                              PlayerSpawnedVehicles[0x2];                               // 0x0358(0x0004) (Net)
	unsigned long                                      HardcoreMode : 1;                                         // 0x0360(0x0004) (Net)
	unsigned long                                      bHasBossBar : 1;                                          // 0x0360(0x0004) (Net)
	unsigned long                                      ReplicatedBossHasShield : 1;                              // 0x0360(0x0004) (Net)
	unsigned long                                      DisplayedBossHasShield : 1;                               // 0x0360(0x0004)
	unsigned long                                      bPlayersSoundLikeJack : 1;                                // 0x0360(0x0004) (Net, RepNotify)
	int                                                StartGameTimer;                                           // 0x0364(0x0004) (Net)
	class AWillowAIPawn*                               BossPawn;                                                 // 0x0368(0x0004) (Net)
	struct FString                                     BossName;                                                 // 0x036C(0x000C) (Net, NeedCtorLink)
	int                                                BossLevel;                                                // 0x0378(0x0004) (Net)
	float                                              ReplicatedBossHealth;                                     // 0x037C(0x0004) (Net)
	float                                              ReplicatedBossShield;                                     // 0x0380(0x0004) (Net)
	float                                              CachedBossHealth;                                         // 0x0384(0x0004)
	float                                              CachedBossShield;                                         // 0x0388(0x0004)
	float                                              DisplayedBossHealth;                                      // 0x038C(0x0004)
	float                                              DisplayedBossShield;                                      // 0x0390(0x0004)
	class AWillowAIPawn*                               NPCAllyPawn[0x2];                                         // 0x0394(0x0004) (Net)
	struct FString                                     NPCAllyName[0x2];                                         // 0x039C(0x000C) (Net, NeedCtorLink)
	struct FVector                                     NPCAllyLocation[0x2];                                     // 0x03B4(0x000C) (Net)
	TArray<struct FScriptDelegate>                     PlayerRemovedDelegates;                                   // 0x03CC(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     PlayerNameUpdatedDelegates;                               // 0x03D8(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     PlayerUidUpdatedDelegates;                                // 0x03E4(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     PlayerCharacterClassUpdatedDelegates;                     // 0x03F0(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     PlayerExpLevelUpdatedDelegates;                           // 0x03FC(0x000C) (NeedCtorLink)
	int                                                OverpowerLevelModifier;                                   // 0x0408(0x0004) (Transient)
	TArray<struct FScriptDelegate>                     MatchmakingStateChangedDelegates;                         // 0x040C(0x000C) (NeedCtorLink)
	class UWillowSeqAct_InterpMenu*                    MenuMatinee;                                              // 0x0418(0x0004)
	class UAkState*                                    MusicAkState;                                             // 0x041C(0x0004) (Net, Transient)
	class UNameListDefinition*                         NameListDef;                                              // 0x0420(0x0004) (Net)
	struct FScriptDelegate                             __OnPlayerRemoved__Delegate;                              // 0x0424(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayerNameUpdated__Delegate;                          // 0x0430(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayerUidUpdated__Delegate;                           // 0x043C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayerCharacterClassUpdated__Delegate;                // 0x0448(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPlayerExpLevelUpdated__Delegate;                      // 0x0454(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMatchmakingStateChanged__Delegate;                    // 0x0460(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGameReplicationInfo");
		return ptr;
	}


	void NotifyPlaythroughChanged();
	void NotifyMatchmakingStateChanged();
	void ClearMatchmakingStateChangedDelegate(const struct FScriptDelegate& MatchmakingStateChangedDelegate);
	void AddMatchmakingStateChangedDelegate(const struct FScriptDelegate& MatchmakingStateChangedDelegate);
	void OnMatchmakingStateChanged(unsigned char NewState);
	bool IsNighttime();
	bool IsDaytime();
	void ClearNPCAllies();
	void UpdateNPCAlliesInfo();
	int FindAvailableNPCAllySlot(class AWillowAIPawn* NPCAllyActor);
	int FindNPCAllyIndex(class AWillowAIPawn* NPCAllyActor);
	void InitNPCAlly(bool bEnable, class AWillowAIPawn* NPCAllyActor);
	void UpdateBossBarInfo();
	void InitBossBar(bool bEnable, class AWillowAIPawn* BossActor);
	void NotifyPlayerExpLevelUpdated(class AWillowPlayerReplicationInfo* WPRI);
	void TriggerPlayerExpLevelUpdatedDelegates(class AWillowPlayerReplicationInfo* WPRI);
	void ClearPlayerExpLevelUpdatedDelegate(const struct FScriptDelegate& PlayerExpLevelUpdatedDelegate);
	void AddPlayerExpLevelUpdatedDelegate(const struct FScriptDelegate& PlayerExpLevelUpdatedDelegate);
	void OnPlayerExpLevelUpdated(class AWillowPlayerReplicationInfo* WPRI);
	void NotifyPlayerCharacterClassUpdated(class AWillowPlayerReplicationInfo* WPRI);
	void TriggerPlayerCharacterClassUpdatedDelegates(class AWillowPlayerReplicationInfo* WPRI);
	void ClearPlayerCharacterClassUpdatedDelegate(const struct FScriptDelegate& PlayerCharacterClassUpdatedDelegate);
	void AddPlayerCharacterClassUpdatedDelegate(const struct FScriptDelegate& PlayerCharacterClassUpdatedDelegate);
	void OnPlayerCharacterClassUpdated(class AWillowPlayerReplicationInfo* WPRI);
	void NotifyPlayerUidUpdated(class APlayerReplicationInfo* PRI);
	void TriggerPlayerUidUpdatedDelegates(class APlayerReplicationInfo* PRI);
	void ClearPlayerUidUpdatedDelegate(const struct FScriptDelegate& PlayerUidUpdatedDelegate);
	void AddPlayerUidUpdatedDelegate(const struct FScriptDelegate& PlayerUidUpdatedDelegate);
	void OnPlayerUidUpdated(class APlayerReplicationInfo* PRI);
	void NotifyPlayerNameUpdated(class APlayerReplicationInfo* PRI);
	void TriggerPlayerNameUpdatedDelegates(class APlayerReplicationInfo* PRI);
	void ClearPlayerNameUpdatedDelegate(const struct FScriptDelegate& PlayerNameUpdatedDelegate);
	void AddPlayerNameUpdatedDelegate(const struct FScriptDelegate& PlayerNameUpdatedDelegate);
	void OnPlayerNameUpdated(class APlayerReplicationInfo* PRI);
	void RemovePRI(class APlayerReplicationInfo* PRI);
	void AddPRI(class APlayerReplicationInfo* PRI);
	void TriggerPlayerRemovedDelegates();
	void ClearPlayerRemovedDelegate(const struct FScriptDelegate& PlayerRemovedDelegate);
	void AddPlayerRemovedDelegate(const struct FScriptDelegate& PlayerRemovedDelegate);
	void OnPlayerRemoved();
	bool ClientFlagGet(const struct FName& ClientFlag);
	void ClientFlagSet(const struct FName& ClientFlag, bool bEnable);
	void ClientInitClientFlags();
	void InitClientFlags(class AWillowPlayerController* WPC);
	bool IsStationInList(class UTravelStationDefinition* TravelLocation);
	void AddFastTravelLocation(class UTravelStationDefinition* TravelLocation);
	bool InColiseumGameplayMap();
	bool CacheMenuMatinee();
	void PostBeginPlay();
	static class UWillowVersusDuelGlobals* GetDuelGlobals();
	void UpdateJackVoiceModulation();
	void SetPlayersSoundLikeJack(bool InPlayersSoundLikeJack);
	void NotifyMissionTrackerCinematicModeChanged();
	void ReplicatedEvent(const struct FName& VarName);
	void ClearFastTravelLocations();
	int GetCurrPlaythrough();
	void SetPlaythroughOverride(class AWillowPlayerController* PrimaryWPC, int InPlaythroughOverride);
	void SetCurrentPlaythrough(class AWillowPlayerController* PrimaryWPC, int InCurrPlaythrough);
};


// Class WillowGame.WillowGameViewportClient
// 0x015C (0x011C - 0x0278)
class UWillowGameViewportClient : public UGameViewportClient
{
public:
	class UWillowUIInteraction*                        ViewportUI;                                               // 0x011C(0x0004)
	unsigned long                                      bCheckedEntry : 1;                                        // 0x0120(0x0004)
	unsigned long                                      bMainMenuMousePressed : 1;                                // 0x0120(0x0004) (Transient)
	class UTexture2D*                                  LoadBackground;                                           // 0x0124(0x0004)
	class UTexture2D*                                  LoadingImage;                                             // 0x0128(0x0004)
	struct FSubtitleProfile                            SubtitleProfileDefault;                                   // 0x012C(0x0010) (Config)
	struct FSubtitleProfile                            SubtitleProfileSplitScreenVertical;                       // 0x013C(0x0010) (Config)
	struct FSubtitleProfile                            SubtitleProfileSplitScreenHorizontal;                     // 0x014C(0x0010) (Config)
	struct FSubtitleProfile                            SubtitleProfileCinematic;                                 // 0x015C(0x0010) (Config)
	struct FString                                     LevelActionMessages[0x6];                                 // 0x016C(0x000C) (Const, Localized, NeedCtorLink)
	struct FLoginState                                 SavedLoginState[0x4];                                     // 0x01B4(0x0010) (NeedCtorLink)
	struct FLoginState                                 CurrentLoginState[0x4];                                   // 0x01F4(0x0010) (NeedCtorLink)
	struct FGamepadState                               Gamepads[0x4];                                            // 0x0234(0x0004) (Transient)
	unsigned char                                      WaitingOnDeviceSelectionResults[0x4];                     // 0x0244(0x0001) (Transient)
	int                                                WaitingOnDeviceRemovalNotification[0x4];                  // 0x0248(0x0004) (Transient)
	int                                                LastKnownProfileSaveCount[0x4];                           // 0x0258(0x0004) (Transient)
	int                                                LastKnownChallengeRank[0x4];                              // 0x0268(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGameViewportClient");
		return ptr;
	}


	void Tick(float DeltaTime);
	void TryNotifyDeviceSelectionComplete(int ControllerId);
	void DeviceSelectionDone(bool bWasSuccessful);
	void NotifyDeviceSelectionStarted(unsigned char ControllerId);
	static void SetPCSplitscreenEnabled(bool bEnabled);
	static bool IsPCSplitscreenEnabled();
	static bool PlatformSupportsSplitscreen();
	void OnEndGameForReturnToTitleComplete(const struct FName& SessionName, bool bWasSuccessful);
	void ReturnToTitleScreenNoPC();
	void NotifyConnectionError(unsigned char MessageType, const struct FString& Message, const struct FString& Title);
	bool ShouldIgnoreNetworkErrors();
	bool IsWidescreen();
	void SplitScreenLeave();
	bool CanSplitScreenLeave();
	void UpdateSplitscreenConfiguration();
	class ULocalPlayer* SplitScreenJoin(int ControllerId, bool SpawnActor, struct FString* OutError);
	bool CanSplitScreenJoin();
	void RenderHeader(class UCanvas* Canvas);
	void PostRender(class UCanvas* Canvas);
	void GameSessionEnded();
	bool AreHudMoviesVisible();
	void GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos);
	void UpdateActiveSplitscreenType();
	void SetSplitscreenConfiguration(unsigned char SplitType);
	bool HasLoginStateChanged(unsigned char LocalUserNum);
	void SaveLoginState(unsigned char LocalUserNum);
	void InitializeCurrentLoginState();
	void NotifyLoginChanged(unsigned char LocalUserNum);
	void RemovedDlcDependantMU();
	void RemovedDlcDependantMUFrontend();
	void TryNotifyStorageDeviceChanged();
	void NotifyStorageDeviceChange();
	bool ReturnToTitleForDlcInstall_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void RegisterMarketingUnlocksFromDlc();
	void NotifyDlcRefreshComplete();
	bool RemovePlayer(class ULocalPlayer* ExPlayer);
	class ULocalPlayer* CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError);
	bool InputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool InputKey(int ControllerId, const struct FName& Key, unsigned char EventType, float AmountDepressed, bool bGamepad);
	void DlcManagerCreatedInit();
	bool Init(struct FString* OutError);
	void OpenMapMenu();
};


// Class WillowGame.WillowGlobals
// 0x00EC (0x00F4 - 0x01E0)
class UWillowGlobals : public UGearboxGlobals
{
public:
	TArray<class UPlayerClassIdentifierDefinition*>    PlayerClassIdentifiers;                                   // 0x00F4(0x000C) (NeedCtorLink)
	TArray<class UPlayerNameIdentifierDefinition*>     PlayerNameIdentifiers;                                    // 0x0100(0x000C) (NeedCtorLink)
	unsigned long                                      bEnableSpeech : 1;                                        // 0x010C(0x0004) (Config)
	unsigned long                                      bIsDefaultWorldBodyAvailable : 1;                         // 0x010C(0x0004) (Transient)
	unsigned long                                      LoadingMovieShouldPlayToEnd : 1;                          // 0x010C(0x0004) (Transient)
	unsigned long                                      bClassDropsInitialized : 1;                               // 0x010C(0x0004) (Transient)
	class UWorldBody*                                  DefaultWorldBodyStandIn;                                  // 0x0110(0x0004) (Transient)
	TArray<class UDamagePipeline*>                     DamagePipelinePool;                                       // 0x0114(0x000C) (Transient, NeedCtorLink)
	class UWillowAutoAimStrategyDefinition*            AutoAimDefinition;                                        // 0x0120(0x0004)
	class UPlayerTrainingMessageListDefinition*        PlayerTrainingMessages;                                   // 0x0124(0x0004) (Const)
	struct FString                                     DefaultGlobalsDefinitionName;                             // 0x0128(0x000C) (Config, NeedCtorLink)
	class UFastTravelStationsLookup*                   MasterFastTravelStationList;                              // 0x0134(0x0004) (Transient)
	class ULevelDependencyList*                        MasterLevelDependencyList;                                // 0x0138(0x0004) (Transient)
	class UPawnRelevanceUtility*                       TheRelevanceUtility;                                      // 0x013C(0x0004) (Transient)
	class UClass*                                      TheRelevanceUtilityClass;                                 // 0x0140(0x0004)
	TArray<class AWillowInteractiveObject*>            ClientInteractiveObjects;                                 // 0x0144(0x000C) (Transient, NeedCtorLink)
	TArray<struct FLoadingMovieExceptionInfo>          LoadingMovieExceptions;                                   // 0x0150(0x000C) (Transient, NeedCtorLink)
	class ULcdHelper*                                  TheLCDHelper;                                             // 0x015C(0x0004) (Transient)
	class UWillowEffectCoordinator*                    TheEffectsCoordinator;                                    // 0x0160(0x0004) (Transient)
	class UWillowObstacleUtility*                      TheObstacleUtility;                                       // 0x0164(0x0004) (Transient)
	class UWillowCustomizationManager*                 TheCustomizationManager;                                  // 0x0168(0x0004) (Transient)
	class UWillowPlayerPawnDataManager*                ThePlayerPawnDataManager;                                 // 0x016C(0x0004) (Transient)
	class UAkBank*                                     PersistentLevelSFXBank;                                   // 0x0170(0x0004) (Transient)
	class UAkBank*                                     PersistentLevelVoiceBank;                                 // 0x0174(0x0004) (Transient)
	TArray<class AWillowProjectile*>                   ActiveHomingProjectileList;                               // 0x0178(0x000C) (Transient, NeedCtorLink)
	TArray<class AWillowPickup*>                       PickupList;                                               // 0x0184(0x000C) (NeedCtorLink)
	class AVehicleLifetimeManager*                     TheVehicleLifetimeManager;                                // 0x0190(0x0004) (Transient)
	class UVehicleCrewAnimSetLookupTable*              AggregatedVehicleCrewAnimSetTable;                        // 0x0194(0x0004) (Transient)
	TArray<class AWillowBoundaryTurret*>               BoundaryTurretList;                                       // 0x0198(0x000C) (Transient, NeedCtorLink)
	class UNPCLoadBalancer*                            TheNPCLoadBalancer;                                       // 0x01A4(0x0004) (Transient)
	class UDamageOverTimeManager*                      TheDamageOverTimeManager;                                 // 0x01A8(0x0004) (Transient)
	TArray<class AWillowSpectatorPoint*>               SpectatorPointList;                                       // 0x01AC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FCurrencyPresentation>               KnownCurrencies;                                          // 0x01B8(0x000C) (Transient, NeedCtorLink)
	class UAssetLibraryManager*                        AssLibMan;                                                // 0x01C4(0x0004)
	TArray<class UDLCLegacyPlayerClassIdentifierDefinition*> LegacyPlayerClassIdentifiers;                             // 0x01C8(0x000C) (Transient, NeedCtorLink)
	TArray<class UBalanceModifierDefinition*>          PlayThroughBasedBalanceModifiers;                         // 0x01D4(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGlobals");
		return ptr;
	}


	void FindCurrencies();
	void FindCurrenciesIn(class UCurrencyListDefinition* CurrencyList, TArray<struct FCurrencyPresentation>* Currencies);
	void AddBoundaryTurret(class AWillowBoundaryTurret* OneTurret);
	class UDamageOverTimeManager* GetDamageOverTimeManager();
	class UNPCLoadBalancer* GetNPCLoadBalancer();
	class UGameReleaseDefinition* GetCurrentGameReleaseDef();
	struct FString GetLocalizedDamageType(unsigned char DamageType);
	struct FString GetLocalizedDamageCauser(unsigned char DamageCauserType);
	bool CheckIfSpawnWillFail(class UClass* SpawnClass, const struct FVector& SpawnLocation);
	struct FString PresetGetCaption(const struct FName& PresetName, const struct FName& KeyName);
	bool ApplyControllerPreset(const struct FName& PresetName, class UWillowPlayerInput* WPI);
	class AWillowSpectatorPoint* GetPrevSpectatorPoint(class AWillowSpectatorPoint* CurrentPoint);
	class AWillowSpectatorPoint* GetNextSpectatorPoint(class AWillowSpectatorPoint* CurrentPoint);
	class AWillowSpectatorPoint* GetFirstSpectatorPoint();
	void RemoveSpectatorPoint(class AWillowSpectatorPoint* SpecPoint);
	void AddSpectatorPoint(class AWillowSpectatorPoint* SpecPoint);
	void SetColorBlindMode(int InColorBlind);
	int GetColorBlindMode();
	void RemovePickup(class AWillowPickup* inPickup);
	void AddPickup(class AWillowPickup* inPickup);
	void RemoveActiveHomingProjectile(class AWillowProjectile* HomingProjectile);
	void AddActiveHomingProjectile(class AWillowProjectile* HomingProjectile);
	class UDominantDirectionalLightComponent* GetTimeOfDayDominantDirectionalLightComponent();
	struct FString ResolveCustomMarkupString(const struct FString& StringToResolve);
	class AVehicleLifetimeManager* GetVehicleLifetimeManager();
	class UWillowPlayerPawnDataManager* GetPlayerPawnDataManager();
	class UWillowCustomizationManager* GetCustomizationManager();
	void GetUISortedValidPlayerNameIdentifiers(bool bFilterUnownedDlcCharacters, TArray<class UPlayerNameIdentifierDefinition*>* OutPlayerNameIdentifiers);
	class UPlayerSaveGame* GetDefaultPlayerSaveGame(const struct FString& CharacterName);
	class UPlayerNameIdentifierDefinition* GetPlayerNameIdentifierDefinition(const struct FString& CharacterName);
	class UPlayerClassIdentifierDefinition* GetPlayerClassIdentifierDefinition(const struct FString& ClassName);
	TArray<class UChallengeDefinition*> GetPlayerChallenges(bool bIncludeDlcChallenges);
	class ULcdHelper* GetTheLCDHelper();
	void ToggleUnlockCode(int UnlockCode);
	bool IsCodeUnlocked(int UnlockCode);
	void SetLoadingMovieFinished();
	class UPawnRelevanceUtility* GetPawnRelevanceUtility();
	class ULevelDependencyList* GetLevelDependencyList();
	class UFastTravelStationsLookup* GetFastTravelStationsLookup();
	class UWillowEffectCoordinator* GetEffectCoordinator();
	float GetGlobalFallingDamageScale(class UObject* ContextSource);
	float GetGlobalAIRocketWeaponDamageScale();
	float GetGlobalAIAssaultWeaponDamageScale();
	float GetGlobalAISniperWeaponDamageScale();
	float GetGlobalAISmgWeaponDamageScale();
	float GetGlobalAIShotgunWeaponDamageScale();
	float GetGlobalAIPistolWeaponDamageScale();
	float GetGlobalAIWeaponDamageScale();
	float GetGlobalAIDamageScale(class UObject* DamageInstigatorContextSource);
	class UGlobalsDefinition* GetGlobalsDefinition();
	void ReleaseDamagePipelineObject(class UDamagePipeline* Pipeline);
	class UDamagePipeline* GetDamagePipelineObject();
	void DeleteWorldBodyStandIn(class UWorldBody** StandIn);
	class UWorldBody* CreateWorldBodyStandIn();
	class UWillowSaveGameManager* GetWillowSaveGameManager();
	static class UWillowGlobals* GetWillowGlobals();
	void RemoveInteractiveObject(class AWillowInteractiveObject* Object);
	void AddInteractiveObject(class AWillowInteractiveObject* Object);
};


// Class WillowGame.WillowHUD
// 0x02B4 (0x0224 - 0x04D8)
class AWillowHUD : public AHUD
{
public:
	unsigned long                                      bPawnInspectorUsesAIDebugCam : 1;                         // 0x0224(0x0004) (Const, Config, GlobalConfig)
	unsigned long                                      bShowDlcVersionErrors : 1;                                // 0x0224(0x0004) (Const, Config, GlobalConfig)
	unsigned long                                      bShowDlcNeedsEnumerationError : 1;                        // 0x0224(0x0004) (Const, Config, GlobalConfig)
	unsigned long                                      bShowBros : 1;                                            // 0x0224(0x0004) (Config)
	unsigned long                                      bShowBuildInfo : 1;                                       // 0x0224(0x0004) (Config)
	unsigned long                                      bShowHUDRestoreValue : 1;                                 // 0x0224(0x0004) (Transient)
	unsigned long                                      bAIInspectorEnabled : 1;                                  // 0x0224(0x0004)
	unsigned long                                      bStatusEffectInspectorEnabled : 1;                        // 0x0224(0x0004)
	unsigned long                                      bShowHosEnabled : 1;                                      // 0x0224(0x0004)
	unsigned long                                      bShowViewModelAnimDebug : 1;                              // 0x0224(0x0004)
	unsigned long                                      bShowConnectionWarning : 1;                               // 0x0224(0x0004)
	unsigned long                                      bAutoAimDebugEnabled : 1;                                 // 0x0224(0x0004)
	float                                              DlcVersionErrorDisplayDuration;                           // 0x0228(0x0004) (Const, Config, GlobalConfig)
	float                                              DlcVersionErrorDisplayStartTime;                          // 0x022C(0x0004) (Transient)
	float                                              PlayerInfoHeight;                                         // 0x0230(0x0004) (Edit)
	float                                              PlayerInfoMaxDist;                                        // 0x0234(0x0004)
	class APawn*                                       PawnOwner;                                                // 0x0238(0x0004)
	class AWillowInventory*                            SavedLookAtInventory;                                     // 0x023C(0x0004)
	class AActor*                                      CachedBestPickup;                                         // 0x0240(0x0004)
	class AActor*                                      CachedHoverPickup;                                        // 0x0244(0x0004)
	class AActor*                                      ClientSavedPickup;                                        // 0x0248(0x0004)
	class AActor*                                      ClosestPickup;                                            // 0x024C(0x0004)
	class UParticleSystemComponent*                    HoverParticleComponent;                                   // 0x0250(0x0004) (ExportObject, Transient, Component, EditInline)
	TArray<struct FFadePickupParticle>                 PendingKillHoverComponents;                               // 0x0254(0x000C) (Transient, Component, NeedCtorLink)
	class UItemPickupGFxMovie*                         PickupItemCard;                                           // 0x0260(0x0004) (Transient)
	class UParticleSystemComponent*                    PickupParticleComponent;                                  // 0x0264(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FString                                     BuildNumber;                                              // 0x0268(0x000C) (NeedCtorLink)
	struct FString                                     BuildTag;                                                 // 0x0274(0x000C) (NeedCtorLink)
	struct FString                                     BuildChangelist;                                          // 0x0280(0x000C) (NeedCtorLink)
	int                                                BuildInfoXOffset;                                         // 0x028C(0x0004) (Config)
	int                                                BuildInfoYOffset;                                         // 0x0290(0x0004) (Config)
	class AWillowPlayerController*                     WPlayerOwner;                                             // 0x0294(0x0004)
	class AWillowPlayerReplicationInfo*                WPRI;                                                     // 0x0298(0x0004)
	class UHUDDefinition*                              HUDDef;                                                   // 0x029C(0x0004)
	FScriptInterface                                   CurrentTargetable;                                        // 0x02A0(0x0008)
	FScriptInterface                                   LastPreferredTargetable;                                  // 0x02A8(0x0008)
	float                                              HealthBarFadeStartTime;                                   // 0x02B0(0x0004)
	struct FVector                                     LastAutogunTargetLocation;                                // 0x02B4(0x000C)
	float                                              InspectAIOutputStartingXPos;                              // 0x02C0(0x0004) (Config)
	float                                              InspectAIOutputStartingYPos;                              // 0x02C4(0x0004) (Config)
	float                                              InspectAIOutputIndentSize;                                // 0x02C8(0x0004) (Config)
	float                                              InspectAIMaxFlagOutputLineSize;                           // 0x02CC(0x0004) (Config)
	struct FColor                                      InspectAIRulesColor;                                      // 0x02D0(0x0004) (Config)
	struct FColor                                      InspectAITimersColor;                                     // 0x02D4(0x0004) (Config)
	struct FColor                                      InspectAITargetsColor;                                    // 0x02D8(0x0004) (Config)
	struct FColor                                      InspectAIFlagIsTrueColor;                                 // 0x02DC(0x0004) (Config)
	struct FColor                                      InspectAIFlagIsFalseColor;                                // 0x02E0(0x0004) (Config)
	float                                              InspectStatusEffectOutputStartingXPos;                    // 0x02E4(0x0004) (Config)
	float                                              InspectStatusEffectOutputStartingYPos;                    // 0x02E8(0x0004) (Config)
	float                                              InspectStatusEffectOutputIndentSize;                      // 0x02EC(0x0004) (Config)
	struct FString                                     InspectStatusEffectTypeName;                              // 0x02F0(0x000C) (Config, NeedCtorLink)
	struct FColor                                      ShowHosColor;                                             // 0x02FC(0x0004) (Config)
	int                                                DangerousIconDifference;                                  // 0x0300(0x0004)
	int                                                ImpossibleEnemyDifference;                                // 0x0304(0x0004)
	class UWillowHUDGFxMovie*                          HUDMovie;                                                 // 0x0308(0x0004) (Transient)
	class UWeaponScopeGFxMovie*                        WeaponScopeMovie;                                         // 0x030C(0x0004) (Transient)
	class UStatusMenuExGFxMovie*                       StatusMenuExMovie;                                        // 0x0310(0x0004)
	class UMaterialInstanceConstant*                   SavingMatInst;                                            // 0x0314(0x0004)
	class UMaterialInstanceConstant*                   ConnectionMatInst;                                        // 0x0318(0x0004)
	class UMaterial*                                   SavingMat;                                                // 0x031C(0x0004)
	class UMaterial*                                   ConnectionMat;                                            // 0x0320(0x0004)
	float                                              SaveDuration;                                             // 0x0324(0x0004)
	float                                              SaveStartTime;                                            // 0x0328(0x0004)
	float                                              FadeStartTime;                                            // 0x032C(0x0004)
	float                                              FadeDuration;                                             // 0x0330(0x0004)
	struct FString                                     RespawnDialogString;                                      // 0x0334(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RespawnDialogFeeWaivedString;                             // 0x0340(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RespawnDialogTitleString;                                 // 0x034C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RespawnDialogOtherDiedString;                             // 0x0358(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RespawnDialogOtherDiedFeeWaivedString;                    // 0x0364(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RespawnDialogUnknownPlayerString;                         // 0x0370(0x000C) (Const, Localized, NeedCtorLink)
	float                                              ScreenFadeStartTime;                                      // 0x037C(0x0004)
	float                                              ScreenFadeDuration;                                       // 0x0380(0x0004)
	float                                              ScreenFadeStartOpacity;                                   // 0x0384(0x0004)
	float                                              ScreenFadeOpacity;                                        // 0x0388(0x0004)
	struct FColor                                      ScreenFadeColor;                                          // 0x038C(0x0004)
	struct FString                                     DuelCountdownString;                                      // 0x0390(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DuelOutOfBoundsString;                                    // 0x039C(0x000C) (Const, Localized, NeedCtorLink)
	float                                              DefaultMessageDuration;                                   // 0x03A8(0x0004) (Config)
	struct FString                                     DeathStringPistol;                                        // 0x03AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringShotgun;                                       // 0x03B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringSMG;                                           // 0x03C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringSniperRifle;                                   // 0x03D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringRocketLauncher;                                // 0x03DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringAssaultRifle;                                  // 0x03E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringFragGrenade;                                   // 0x03F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringProteanGrenade;                                // 0x0400(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringIncindiaryDamage;                              // 0x040C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringShockDamage;                                   // 0x0418(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringExplosiveDamage;                               // 0x0424(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringCorrosiveDamage;                               // 0x0430(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringImpactDamage;                                  // 0x043C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringSuicide;                                       // 0x0448(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringUnknown;                                       // 0x0454(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DeathStringFallDamage;                                    // 0x0460(0x000C) (Const, Localized, NeedCtorLink)
	float                                              SavingMaterialScale;                                      // 0x046C(0x0004) (Config)
	float                                              ConnectionMaterialScale;                                  // 0x0470(0x0004) (Config)
	float                                              ConnectionWarningStartTime;                               // 0x0474(0x0004)
	float                                              SavingIconXOffset;                                        // 0x0478(0x0004) (Config)
	float                                              SavingIconYOffset;                                        // 0x047C(0x0004) (Config)
	int                                                MaxNumPickups;                                            // 0x0480(0x0004)
	float                                              PendingWeaponCardDisplayTime;                             // 0x0484(0x0004) (Const, Config, GlobalConfig)
	unsigned char                                      ActiveEquippedCardType;                                   // 0x0488(0x0001) (Transient)
	unsigned char                                      ActivePickupCardType;                                     // 0x0489(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x048A(0x0002) MISSED OFFSET
	class AWillowInventory*                            ItemComparison[0x2];                                      // 0x048C(0x0004) (Transient)
	class UMaterial*                                   DebugMarkerMat;                                           // 0x0494(0x0004) (Const)
	struct FInteractionIconWithOverrides               CurrentPickupIcon;                                        // 0x0498(0x0014)
	class UWillowGFxColiseumOverlayMovie*              ColiseumOverlayMovie;                                     // 0x04AC(0x0004)
	TArray<struct FHUDWidget_ChallengeData>            QueuedChallengeNotifications;                             // 0x04B0(0x000C) (Transient, NeedCtorLink)
	struct FString                                     QueuedInitFrame;                                          // 0x04BC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             PlayedInitFrames;                                         // 0x04C8(0x000C) (Transient, NeedCtorLink)
	class USwfMovie*                                   QueuedPullThePinNotification;                             // 0x04D4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowHUD");
		return ptr;
	}


	void ShowChallengeWidget(class UChallengeDefinition* InChallenge, int InLevelIndex, int InConditionIndex, int InCurrStatVal, int InGoalStatVal);
	void ShowIpAddress();
	void LevelTimer();
	void AutoAimDebug();
	void AmmoAbsorbed(class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef);
	bool ColiseumWantsSuppressHUD();
	class UWillowGFxColiseumOverlayMovie* GetPlayingColiseumOverlayMovie();
	void ColiseumNotify(unsigned char NotifyType);
	void RuleAnnounce();
	void RoundAnnounce(int Round, int Wave, int MaxRound, const struct FString& HealthModText, const struct FString& DamageModTex, const struct FString& ShieldModTex);
	void BeginRoundAnnounce();
	void StartColiseumTimer(unsigned char CountdownLength);
	void CloseColiseumOverlay();
	void UpdateColiseumRule(class UColiseumRuleDefinition* RuleInfo, unsigned char UpdateMode);
	void OnColiseumOverlayClosing();
	void OnColiseumOverlayOpening(class UWillowGFxColiseumOverlayMovie* Overlay);
	void OnLostFocusPause(bool Enable);
	bool CanPauseOnLostFocus(bool bEnable);
	void DrawAlwaysOnTopItems();
	void SetConnectionProblem(bool bIsConnected);
	void SetCanPickupItem(class AActor* Pickup, bool bUpdatePickupCard);
	void StartFade(float InOpacity, float InFadeDuration, const struct FColor& Incolor);
	void FadeOut(float FadeLength);
	void FadeIn(float FadeLength);
	void NotifySavingComplete(float InSaveDuration);
	void NotifySavingStarted();
	void ToggleHUD();
	void ShowTargetAnimDebug();
	void ShowAnimDebugFP();
	void ShowRespawnDialog(int Cost);
	void CloseStatusMenu(class UWillowUIInteraction* Interaction);
	void TryFakePauseInSinglePlayer();
	void RunStatusMenu(class UWillowUIInteraction* Interaction);
	void PlayStatusMovie();
	void CloseHUDMovie();
	void HUDIsClosing();
	void OpenHUDMovie(bool bDeferred);
	void _OpenHUDMovie();
	void ShowInspectedStatusEffectTarget(const FScriptInterface& Target, const struct FVector& PlayerCameraPosition, const struct FVector& PlayerCameraDirection, float* YPos);
	void AddPostRenderedActor(class AActor* A);
	void RemovePostRenderedActor(class AActor* A);
	void ShowInspectedAI(class AWillowAIPawn* AIPawnToInspect, const struct FVector& PlayerCameraPosition, const struct FVector& PlayerCameraDirection, float* YPos);
	void DrawShowIos(class AWillowInteractiveObject* WIO, const struct FVector& ViewPosition, const struct FVector& ViewRotation);
	void DrawShowHos(class AWillowAIPawn* WAIP, const struct FVector& ViewPosition, const struct FVector& ViewRotation);
	class UWeaponScopeGFxMovie* GetWeaponScopeMovie();
	class UWillowHUDGFxMovie* GetHUDMovie();
	void DisplayTargetPopupInfo();
	void UpdatePickupParticles();
	void PostRenderDebug();
	void DrawSpectatorHud();
	void DrawEngineHUD();
	float ScaleY(float Y);
	float ScaleX43(float X);
	float ScaleX(float X);
	struct FColor GetColorForExpLevel(class AActor* Pickup);
	void ShowPickupCard(bool bShow, bool bIsPrimaryPlayer, bool bAutoUse);
	struct FVector GetPickupCardLocation(class AActor* Pickup, bool bApplyPitchOffset);
	void DetachPickupHoverPSys(class AActor* Pickup);
	void AttachPickupHoverPSys(class AActor* Pickup, bool bInPickupRange);
	void GetItemHoverBounds(class AActor* Pickup, float* X, float* Y, float* XL, float* YL);
	void DrawItemFeedbackInfo();
	void DrawDebugFeedbackForPickup(class AActor* Pickup);
	void DrawBuildInfo();
	void DrawHUD();
	void DoStartupDrawHUD();
	void DrawDamageIndicator(const struct FVector& HitDir, bool bShieldOnlyDamage);
	void BuildInfo();
	void DrawbShowHUDIsFalseHUD();
	void SetWPRI();
	void Destroyed();
	void CreateWeaponScopeMovie();
	void CreateHUDMovie();
	void PostBeginPlay();
	void InitHud();
	void ClearCustomMessage(unsigned char MsgType);
	void DisplayCustomMessage(unsigned char MsgType, const struct FString& MessageString, float Duration, const struct FColor& DrawColor, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void LoadBuildInfo();
};


// Class WillowGame.WillowImpactDefinition
// 0x0138 (0x003C - 0x0174)
class UWillowImpactDefinition : public UImpactDefinition
{
public:
	struct FImpactResponseEffect                       FallbackEffect;                                           // 0x003C(0x0094) (Edit, Const, NeedCtorLink)
	unsigned char                                      Usage;                                                    // 0x00D0(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	class UWillowImpactDefinition*                     Parent;                                                   // 0x00D4(0x0004) (Edit, Const)
	class UWillowImpactDefinition*                     AlternateImpactDefinition;                                // 0x00D8(0x0004) (Edit, Const)
	struct FImpactResponseEffect                       UnconditionalResponse;                                    // 0x00DC(0x0094) (Edit, Const, NeedCtorLink)
	class UAkEvent*                                    ImpactAkEvent;                                            // 0x0170(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowImpactDefinition");
		return ptr;
	}


	void HandleRigidBodyImpact(class AActor* Instigator, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, bool bReplicateEffect, struct FCollisionImpactData* RigidCollisionData);
};


// Class WillowGame.WillowExplosionImpactDefinition
// 0x0000 (0x0174 - 0x0174)
class UWillowExplosionImpactDefinition : public UWillowImpactDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowExplosionImpactDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowInteractiveObject
// 0x022C (0x0188 - 0x03B4)
class AWillowInteractiveObject : public AActor
{
public:
	struct FPointer                                    VfTable_IITimerBehavior;                                  // 0x0188(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IICustomEvent;                                    // 0x018C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIKilledBehavior;                                 // 0x0190(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x0194(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIStatusEffectTarget;                             // 0x0198(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IITargetable;                                     // 0x019C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_ISpecialMoveInterface;                            // 0x01A0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDynamicObstacle;                                // 0x01A4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMapDisplayInfo;                                 // 0x01A8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;                      // 0x01AC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDamageSurface;                                  // 0x01B0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIUsable;                                         // 0x01B4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x01B8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMissionDirector;                                // 0x01BC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMissionObjective;                               // 0x01C0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIGFxActorMovie;                                  // 0x01C4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IILootable;                                       // 0x01C8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDamageable;                                     // 0x01CC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x01D0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x01D4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIFocusable;                                      // 0x01D8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIHitRegionConsumer;                              // 0x01DC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                               // 0x01E0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IGearboxDialogInterface;                          // 0x01E4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IILevelChallengeObject;                           // 0x01E8(0x0004) (Const, Native, NoExport)
	class UInteractiveObjectDefinition*                InteractiveObjectDefinition;                              // 0x01EC(0x0004) (Edit, Net, RepNotify)
	class UPawnAllegiance*                             Allegiance;                                               // 0x01F0(0x0004) (Edit, Net, RepNotify)
	TArray<struct FName>                               EnabledBehaviorSets;                                      // 0x01F4(0x000C) (Edit, NeedCtorLink)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0200(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      ObjectMesh;                                               // 0x0204(0x0004) (ExportObject, Transient, Component, EditInline)
	unsigned char                                      bCanBeUsed[0x2];                                          // 0x0208(0x0001)
	unsigned char                                      bCostsToUse[0x2];                                         // 0x020A(0x0001) (Transient)
	unsigned char                                      CostsToUseType[0x2];                                      // 0x020C(0x0001) (Transient)
	unsigned char                                      CompassIcon;                                              // 0x020E(0x0001) (Net, RepNotify)
	unsigned char                                      NumberInChallengeGroup;                                   // 0x020F(0x0001) (Edit, Const)
	unsigned char                                      WarriorFade;                                              // 0x0210(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	int                                                CostsToUseAmount[0x2];                                    // 0x0214(0x0004) (Transient)
	unsigned long                                      bSetPrimaryUsabilityByMissionDirectives : 1;              // 0x021C(0x0004) (Transient)
	unsigned long                                      bShouldBeTargetable : 1;                                  // 0x021C(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bTakeDamageCausedByRadiusDamage : 1;                      // 0x021C(0x0004)
	unsigned long                                      bHasBeenKilled : 1;                                       // 0x021C(0x0004) (Transient)
	unsigned long                                      bDead : 1;                                                // 0x021C(0x0004) (Transient)
	unsigned long                                      bInitialized : 1;                                         // 0x021C(0x0004) (Transient)
	unsigned long                                      MoveOwnerOnEditorMove : 1;                                // 0x021C(0x0004) (EditorOnly)
	unsigned long                                      OwnerControlsEditorMove : 1;                              // 0x021C(0x0004) (EditorOnly)
	unsigned long                                      bWaitingForInteractiveObjectDefinition : 1;               // 0x021C(0x0004)
	unsigned long                                      bBeingHealed : 1;                                         // 0x021C(0x0004) (Transient)
	unsigned long                                      bNonCheatGodMode : 1;                                     // 0x021C(0x0004) (Transient)
	unsigned long                                      bActiveObstacle : 1;                                      // 0x021C(0x0004) (Transient)
	unsigned long                                      bCurrentlyThrottled : 1;                                  // 0x021C(0x0004) (Transient)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0220(0x0004) (Edit, ExportObject, Transient, Component, EditInline)
	FScriptInterface                                   AllegianceParent;                                         // 0x0224(0x0008) (Transient)
	TArray<FScriptInterface>                           AllegianceChildren;                                       // 0x022C(0x000C) (Transient, NeedCtorLink)
	int                                                NumAICurrentlyTargeting;                                  // 0x0238(0x0004) (Transient)
	struct FInteractiveObjectReplicatedStateData       ReplicatedState;                                          // 0x023C(0x001C) (Net, Transient, RepNotify)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0258(0x0004)
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                                  // 0x025C(0x0004) (Net, RepNotify)
	struct FInstanceDataSet                            InstanceState;                                            // 0x0260(0x000C) (Component, NeedCtorLink)
	struct FReplicatedCoordinatedEffect                ReplicatedCFX;                                            // 0x026C(0x0008) (Net, RepNotify)
	class URegionDefinition*                           ManuallyBalanceToRegionDef;                               // 0x0274(0x0004) (Edit, Const)
	int                                                ExpLevel;                                                 // 0x0278(0x0004) (Net)
	int                                                GameStage;                                                // 0x027C(0x0004) (Net)
	int                                                AwesomeLevel;                                             // 0x0280(0x0004) (Net)
	struct FBalanceDefSpawnedActorState                BalanceDefinitionState;                                   // 0x0284(0x000C) (Net, Transient, RepNotify)
	struct FTimerBehaviorUserState                     InteractiveObjectTimers;                                  // 0x0290(0x0024)
	int                                                LastMaxHealth;                                            // 0x02B4(0x0004)
	float                                              LastHealth;                                               // 0x02B8(0x0004) (Transient)
	int                                                MaxHealth;                                                // 0x02BC(0x0004) (Net, Transient)
	int                                                MaxHealthBaseValue;                                       // 0x02C0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MaxHealthModifierStack;                                   // 0x02C4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              Health;                                                   // 0x02D0(0x0004) (Net)
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x02D4(0x000C) (Edit, NeedCtorLink)
	TArray<class UInstancedDesignerAttribute*>         DesignerAttributes;                                       // 0x02E0(0x000C) (NeedCtorLink)
	float                                              AlwaysRelevantDistanceSquared;                            // 0x02EC(0x0004) (Const)
	class UStatusEffectsComponent*                     StatusEffectComp;                                         // 0x02F0(0x0004) (ExportObject, Transient, Component, EditInline)
	class UMissionDirectivesDefinition*                Directives;                                               // 0x02F4(0x0004) (Edit, Net, EditInline, RepNotify)
	class UParticleSystemComponent*                    MissionDirectorParticle;                                  // 0x02F8(0x0004) (ExportObject, Transient, Component, EditInline)
	int                                                ObjectiveBit;                                             // 0x02FC(0x0004) (Edit, EditConst, DuplicateTransient)
	TArray<class UMissionDefinition*>                  AnnouncedMissions;                                        // 0x0300(0x000C) (Transient, NeedCtorLink)
	struct FName                                       AssociatedStationDefinitionName;                          // 0x030C(0x0008) (Edit)
	TArray<struct FLootConfigurationData>              Loot;                                                     // 0x0314(0x000C) (Edit, NeedCtorLink)
	float                                              MaxDrawDistanceOverride;                                  // 0x0320(0x0004) (Net, RepNotify)
	class AController*                                 LastDamagedByController;                                  // 0x0324(0x0004)
	float                                              HitRegionHealthScaleAttribute;                            // 0x0328(0x0004) (Transient)
	float                                              HitRegionHealthScaleAttributeBaseValue;                   // 0x032C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  HitRegionHealthScaleAttributeModifierStack;               // 0x0330(0x000C) (Const, Transient, NeedCtorLink)
	class UHitRegionHelper*                            MyHitRegionHelper;                                        // 0x033C(0x0004)
	class USpecialMoveComponent*                       SMComponent;                                              // 0x0340(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FReplicatedSpecialMoveData                  ReplicatedSMData;                                         // 0x0344(0x0014) (Net, RepNotify)
	int                                                SimpleAnimState;                                          // 0x0358(0x0004) (Transient)
	int                                                RepSimpleAnimState;                                       // 0x035C(0x0004) (Net, Transient, RepNotify)
	TArray<struct FSimpleAnimData>                     SimpleAnimInfo;                                           // 0x0360(0x000C) (Transient, NeedCtorLink)
	class AWillowLightProjectileManager*               LightProjMgr;                                             // 0x036C(0x0004) (Net, Transient)
	class UInteractionIconDefinition*                  InteractionIconOverride[0x2];                             // 0x0370(0x0004) (Transient)
	class AWwiseSoundGroup*                            SoundGroup;                                               // 0x0378(0x0004) (Edit, CrossLevelActive)
	FScriptInterface                                   TargetPatsy;                                              // 0x037C(0x0008) (Transient)
	class UGearboxDialogComponent*                     DialogComponent;                                          // 0x0384(0x0004) (ExportObject, Component, EditInline)
	struct FGearboxDialogReplicatedData                DialogReplicatedData;                                     // 0x0388(0x0014) (Net, RepNotify)
	class UGearboxDialogNameTag*                       CurrentNameTag;                                           // 0x039C(0x0004) (Net, Transient)
	class UPrimitiveComponent*                         LastUsedComponent;                                        // 0x03A0(0x0004) (ExportObject, Transient, Component, EditInline)
	float                                              SkelUpdateTime;                                           // 0x03A4(0x0004) (Transient)
	float                                              LastThrottleCheck;                                        // 0x03A8(0x0004) (Transient)
	class UChallengeDefinition*                        AssociatedChallenge;                                      // 0x03AC(0x0004) (Edit, Const)
	float                                              RepObjectMeshScale;                                       // 0x03B0(0x0004) (Net, Transient, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInteractiveObject");
		return ptr;
	}


	void OnPlayerClosedMissionUI(class AWillowPlayerController* ThePlayer);
	void OnPlayerOpenedMissionUI(class AWillowPlayerController* ThePlayer);
	struct FString GetMapDisplayName();
	struct FString GetMapDisplayHeader();
	void GetObstacleInfo(struct FObstacleData* Data);
	class AActor* GetObstacleActor();
	bool GetMagnetData(struct FVector* MagnetLoc, struct FVector* MagnetVel);
	void SetObstacleVelocity(struct FVector* NewVelocity);
	bool CanAvoidObstacle(struct FObstacleData* Obstacle);
	bool CanAvoidObstacles();
	void SetObstacleActive(bool bActive);
	bool IsObstacleActive();
	void SetDialogNameTag(class UGearboxDialogNameTag* NewName);
	void ServerDialog_TriggerEvent(class UGearboxDialogEventTag* EventTag, class AActor* Other, class UObject* ObjectParameter);
	struct FGearboxDialogReplicatedData GetReplicatedDialogData();
	void SetReplicatedDialogData(class UGearboxDialogAct_Talk* TalkAct, struct FGearboxDialogData* Data);
	void GetDialogGroups(TArray<class UGearboxDialogGroup*>* Groups);
	class UGearboxDialogComponent* GetDialogComponent();
	class UGearboxDialogNameTag* GetDialogNameTag();
	bool CanTalk();
	bool TouchDenied(class AActor* Other);
	void SetPatsy(const FScriptInterface& NewPatsy);
	FScriptInterface GetPatsy();
	bool IsBeingHealed();
	void SetBeingHealed(bool bNewBeingHealed);
	class AController* GetControllerResponsibleForDamage();
	class AActor* GetInstigator();
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	bool HasAnyMissionsForPlayer();
	struct FVector GetMissionDirectorLocation();
	int GetAllDirectorData(TArray<struct FMissionDirectorData>* OutData);
	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, float Damage, class UClass* DamageType, const struct FVector& Momentum, class UDamagePipeline* Pipeline);
	void ServerSpecialMove_StopAny();
	void ServerSpecialMove_Stop(class USpecialMoveDefinition* OldSMD);
	void ServerSpecialMove_Queue(class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, const struct FName& CallbackName, class UObject* CallbackObject, class UObject* Data);
	void ServerSpecialMove_Play(class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, const struct FName& CallbackName, class UObject* CallbackObject, class UObject* Data);
	void SetReplicatedSMData(struct FSpecialMoveData* NewSMData);
	unsigned char GetDefaultRootMotionRotationMode();
	unsigned char GetDefaultRootMotionMode();
	class USkeletalMeshComponent* GetSkelMesh();
	class USpecialMoveComponent* GetSMComponent();
	class AActor* GetActor();
	struct FVector GetFocusScreenOffset();
	float GetFocusRadius();
	struct FVector GetFocusLocation();
	void EndFocus(class APawn* User);
	void BeginFocus(class APawn* User);
	bool ShieldAbsorbedAmmo(class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb);
	float GetIntrinsicArmor();
	void OnShieldDepleted(class AController* DamageInstigator, unsigned char DamageType);
	void SetShieldStrength(float ShieldValue);
	float GetMaxShieldStrength();
	float GetShieldStrength();
	void NotifyDamageTaken(struct FDamageEventSummary* DamageSummary);
	bool WillLootableBeResetOnLevelLoad();
	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void ResetHitRegionHealth(class UBodyHitRegionDefinition* HitRegion);
	void PlayHealingReaction(struct FDamageReactionData* Data);
	void HealDamageOnHitRegion(class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary);
	void PlayDamageReaction(const struct FName& HitBone, bool bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum);
	void ReplicateDamageEffect(class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bWasHeal);
	float GetMaxHealth();
	float GetHealth();
	void AddDamageToHitRegion(class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FDamageEventSummary* DamageSummary);
	void GetHitRegionHealthValues(class UBodyHitRegionDefinition* HitRegion, float* outHealth, float* outMaxHealth);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, const struct FTraceHitInfo& HitInfo);
	void AddMissionLoot(class UItemPoolDefinition* MissionPool);
	bool GetDroppedLoot(TArray<struct FSpawnedDroppedLootData>* SpawnedLoot);
	bool GetAttachedLoot(TArray<struct FSpawnedAttachedLootData>* SpawnedLoot);
	void ServerClearStatusEffects(bool bKillImmediately);
	void Behavior_ClearStatusEffects(bool bKillImmediately);
	void SetMorphNodeWeight(class UMorphNodeWeight* Node, float NewWeight, float WeightBlendTime);
	void UpdateTargetableState(bool bNewShouldBeTargetable);
	void Behavior_RegisterTargetable(bool bUnregister);
	struct FString GetHumanReadableName();
	void GetTargetName(struct FString* TargetName);
	unsigned char GetAutoAimProfile();
	float GetMagnetismRange();
	struct FVector GetMagnetismOrigin();
	bool IsAutoAimTarget();
	float GetTargetingModifier();
	bool HasHomingTargetComponents();
	bool IsValidHomingTarget();
	void Behavior_SetCanTarget(unsigned char ChangeStatus);
	int ShowSelfAsTarget(bool bControllersOnly);
	bool GetTargetableIsHidden();
	struct FVector GetTargetableLocation();
	bool CanSnapZoom();
	struct FVector GetSnapLocation();
	bool IsTargetableProxy();
	bool IsTargetable(bool bIgnoreCloakAbility);
	unsigned char GetOpinion(class UObject* Other);
	void SetAllegiance(class UPawnAllegiance* NewAllegiance);
	class UPawnAllegiance* GetDefaultAllegiance();
	class UPawnAllegiance* GetObjectAllegiance();
	bool IsSameAllegiance(class UObject* anObject);
	bool IsNeutral(class UObject* anObject);
	bool IsFriendly(class UObject* anObject);
	bool IsEnemy(class UObject* anObject);
	void GFx_NotifyMovieDestroy(class UGearboxGFxMovie* Movie);
	void GFx_NotifyMovieCreate(class UGearboxGFxMovie* Movie);
	class AActor* GFx_GetMovieActor();
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	void Destroyed();
	void CleanupKilledInteractiveObject();
	int GetObjectiveBit();
	void DeactivateMissionDirectorParticle();
	void SetMissionDirectorParticle();
	void MissionStatusChanged();
	void SetMissionDirectivesUsability(unsigned char ChangeUsability);
	void OnPlayerTurnedInMission(class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn);
	void OnPlayerAcceptedMission(class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted);
	int GetInProgressMissions(TArray<class UMissionDefinition*>* InProgressMissions);
	int GetRedeemableMissions(TArray<class UMissionDefinition*>* RedeemableMissions);
	int GetEligibleMissions(TArray<class UMissionDefinition*>* EligibleMissions);
	void AddMissionDirective(bool bRegisterDirector, struct FMissionDirectorData* NewDirective);
	void RegisterMissionDirector();
	void NotifyUserCouldNotAffordAttemptedUse(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	class UInstancedDesignerAttribute* GetInstancedDesignerAttribute(class UAttributeDefinition* Definition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	class UInstancedDesignerAttribute* CreateDesignerAttribute(class UDesignerAttributeDefinition* Definition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	void InitializeAttributeStartingValues();
	void Behavior_ChangeUsabilityCost(unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType);
	bool GetUsability(unsigned char UsedType);
	bool SetUsabilityForComponent(bool bNewUsable, class UActorComponent* UsedComponent, unsigned char UsedType);
	void SetUsability(bool bUsable, unsigned char UsedType, class UActorComponent* UsedComponent);
	void Behavior_ChangeUsability(unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType);
	void Behavior_Killed(class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType);
	void Behavior_CauseRadiusDamage(float Radius, float DamageAmount, bool bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, const struct FVector& Offset, const FScriptInterface& DamageCauser, bool bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray<class AActor*>* ActorsHurt);
	void Behavior_CauseDamage(class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, const FScriptInterface& DamageCauser, float BarrelSourceTime, float PlantSourceTime);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, const FScriptInterface& DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline);
	void DeadInteractiveObjectCleanup();
	void StartDeadInteractiveObjectCleanupTimer();
	void KilledBy(class APawn* EventInstigator);
	void HandleHealthDepleted(class APawn* EventInstigator);
	bool IsFullyArmored();
	unsigned char GetDamageSurfaceTypeFromHit(struct FTraceHitInfo* HitInfo);
	unsigned char GetDefaultDamageSurfaceType();
	float AdjustMomentumForSurfaceType(float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, const struct FTraceHitInfo& HitInfo);
	void ReduceInteractiveObjectDamage(class AController* InstigatedBy, float* Damage);
	class AController* GetLastDamagedByController();
	void TakeDamage(float RawDamage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	bool GetNonCheatGodMode();
	void SetNonCheatGodMode(bool NewMode);
	void RunCustomEvent(const struct FName& EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData);
	void OnTimerEvent(unsigned char EventType, const struct FBehaviorParameters& EventData);
	bool SetTimerState(unsigned char TimerId, const struct FBehaviorTimerState& TimerState);
	bool GetTimerState(unsigned char TimerId, struct FBehaviorTimerState* TimerState);
	float GetTimeSeconds();
	float EvaluateAttributeInitialization(const struct FAttributeInitializationData& InitData);
	class UMeshComponent* GetMesh();
	class UAnimNode* FindAnimNode(const struct FName& NodeName);
	void SetRotationRate(const struct FRotator& NewRotationRate);
	float GetCollisionRadius();
	bool ConditionalReactToUse(class APawn* User, class UActorComponent* UsedComponent, unsigned char UsedType);
	bool UsedBy(class APawn* User);
	bool IsComponentUsable(class UActorComponent* UsableComponent, unsigned char UsedType);
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void InitializeRelevanceDistance(unsigned char RelevanceDistance);
	void InitializeTickGroup();
	void InitializeFromDefinition(class UInteractiveObjectDefinition* Definition, bool bSkipBehaviorSetsInitialization);
	void ClearBodyCompositionInstance();
	FScriptInterface GetBodyInfoProvider();
	void ApplyPreviewBodyComposition();
	void ChangeInstanceDataSwitch(const struct FName& Switch, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	void InitializeRBPhys();
	void TerminateRBPhys();
	void SetCompassIcon(unsigned char NewIcon);
	void ConditionalAddToCompass(bool bDestroyed);
	void TornOff();
	void ApplyBalanceDefinitionCustomizations();
	void InitializeBalanceDefinitionState(class UBaseBalanceDefinition* BalanceDefinition, int GradeIndex);
	void ReplicatedEvent(const struct FName& VarName);
	void ReceiveDefinition(class UInteractiveObjectDefinition* Definition);
	void ResendDefinition();
	bool CanResendDefinition();
	void TryAddToPostRenderedActorsList();
	void PostBeginPlay();
	void SetOverrideProgressNumber(unsigned char ProgressNum);
	void SetOverrideAssociatedChallenge(class UChallengeDefinition* ChalDef);
	unsigned char GetProgressNumber();
	class UChallengeDefinition* GetAssociatedChallenge();
	void ApplyMaxDrawDistanceOverride();
	void SetMaxDrawDistanceOverride(float NewMaxDrawDistanceOverride);
	void UpdateCollideAsEncroacher();
	void SetCollisionOnComponentFromCollisionType(class UPrimitiveComponent* InComponent, unsigned char InCollisionType);
	void SetCollisionFromCollisionType();
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void ProcessBehaviorSetsFlags();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStage();
	bool CanReceiveStatusEffects();
	void ReactToPrimaryStatusEffect(class UStatusEffectDefinition* StatusEffect);
	class UObject* GetAttributeContextSource();
	float GetBoundingSphereRadius();
	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
	void AttachEmitter(class AEmitter* E, const struct FName& SocketName);
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate();
	TArray<struct FName> GetDefaultStatusEffectSockets();
	class UStatusEffectsComponent* GetStatusEffectsComponent();
	void SetInfoBarVisibility(bool bVisible);
	bool HideTargetInfoOnHud(class APawn* HUDOwner);
	float HackHealthDisplay(float InPercent);
	bool IsChampion();
	bool IsBoss();
	bool DoesTargetableTakeDamage();
	bool DisplayParentInfo();
	void GetAllBarInfo(TArray<struct FInfoBarData>* BarData);
	void GetExpInfo(int* ExpLevelValue);
	class AActor* GetTargetableActor();
};


// Class WillowGame.TravelStation
// 0x0070 (0x03B4 - 0x0424)
class ATravelStation : public AWillowInteractiveObject
{
public:
	struct FPointer                                    VfTable_IIMission;                                        // 0x03B4(0x0004) (Const, Native, NoExport)
	class UParticleSystemComponent*                    StationAntennaLight;                                      // 0x03B8(0x0004) (ExportObject, Component, EditInline)
	class AStationTeleporterDestination*               TeleportDest;                                             // 0x03BC(0x0004) (DuplicateTransient)
	struct FVector                                     TeleportDestOffset;                                       // 0x03C0(0x000C) (Edit)
	struct FVector                                     TravelStationActivationOffset;                            // 0x03CC(0x000C) (Edit)
	unsigned long                                      DetachTeleporter : 1;                                     // 0x03D8(0x0004) (Edit)
	unsigned long                                      DetachTeleportInteraction : 1;                            // 0x03D8(0x0004) (Edit)
	unsigned long                                      bShouldBeActive : 1;                                      // 0x03D8(0x0004) (Edit, Net, RepNotify)
	unsigned long                                      bIsCurrentlyActive : 1;                                   // 0x03D8(0x0004)
	unsigned long                                      bHasActiveState : 1;                                      // 0x03D8(0x0004)
	unsigned long                                      bFastTravelEnabled : 1;                                   // 0x03D8(0x0004) (Net)
	struct FString                                     DebugDescription;                                         // 0x03DC(0x000C) (Edit, NeedCtorLink)
	class URegionDefinition*                           DebugGameStageRegion;                                     // 0x03E8(0x0004) (Edit)
	TArray<class AVolume*>                             TouchVolumes;                                             // 0x03EC(0x000C) (Edit, NeedCtorLink)
	float                                              TouchRadius;                                              // 0x03F8(0x0004) (Deprecated)
	float                                              StationTouchRadius;                                       // 0x03FC(0x0004) (Edit)
	float                                              StationTouchHeight;                                       // 0x0400(0x0004) (Edit)
	struct FName                                       Nozzle1SocketName;                                        // 0x0404(0x0008)
	struct FName                                       Nozzle2SocketName;                                        // 0x040C(0x0008)
	struct FName                                       Nozzle3SocketName;                                        // 0x0414(0x0008)
	struct FName                                       Nozzle4SocketName;                                        // 0x041C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TravelStation");
		return ptr;
	}


	bool CanResurrectHere(bool bIsLevelTravel);
	void SetUsability(bool bUsable, unsigned char UsedType, class UActorComponent* UsedComponent);
	class ULevelTransitionWaypointComponent* AddLevelTransitionWaypoint(class UMissionDefinition* Mission, const struct FName& MissionLevel);
	static class ATravelStation* FindTravelStation(const struct FString& TravelStationDefinitionName);
	static void SetFastTravelDebug(bool Enabled);
	bool IsFastTravelEnabled();
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	void ReplacePreviouslyActivatedStation();
	void SetStationActivatedState(bool bNewShouldBeActive, bool bChangeStateRegardlessOfCurrentState, bool bIsInitialActivation, bool bShouldBeInactive);
	bool TouchDenied(class AActor* Other);
	class UTravelStationDefinition* GetTravelStationDefinition();
	void InitializeFromDefinition(class UInteractiveObjectDefinition* Definition, bool bSkipBehaviorSetsInitialization);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void UpdateCollideAsEncroacher();
};


// Class WillowGame.FastTravelStation
// 0x0004 (0x0424 - 0x0428)
class AFastTravelStation : public ATravelStation
{
public:
	class UFastTravelStationDefinition*                TravelDefinition;                                         // 0x0424(0x0004) (Edit, Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelStation");
		return ptr;
	}


	bool CanResurrectHere(bool bIsLevelTravel);
	struct FString GetMapDisplayName();
	struct FString GetHumanReadableName();
	int GetIsRegistered();
	class UTravelStationDefinition* GetTravelStationDefinition();
};


// Class WillowGame.LevelTravelStation
// 0x001C (0x0424 - 0x0440)
class ALevelTravelStation : public ATravelStation
{
public:
	class ULevelTravelStationDefinition*               TravelDefinition;                                         // 0x0424(0x0004) (Edit, Net)
	TArray<class UMissionObjectiveSetDefinition*>      WaypointExceptions;                                       // 0x0428(0x000C) (Edit, NeedCtorLink)
	struct FString                                     LevelTravelMapDisplayName;                                // 0x0434(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelTravelStation");
		return ptr;
	}


	struct FString GetDestinationMapName();
	struct FString GetMapDisplayName();
	struct FString GetHumanReadableName();
	class ULevelTravelStationDefinition* GetDlcDestination();
	void PostBeginPlay();
	class UTravelStationDefinition* GetTravelStationDefinition();
};


// Class WillowGame.ResurrectTravelStation
// 0x0000 (0x0424 - 0x0424)
class AResurrectTravelStation : public ATravelStation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ResurrectTravelStation");
		return ptr;
	}


	bool CanResurrectHere(bool bIsLevelTravel);
};


// Class WillowGame.VehicleSpawnStationPlatform
// 0x000C (0x03B4 - 0x03C0)
class AVehicleSpawnStationPlatform : public AWillowInteractiveObject
{
public:
	unsigned char                                      StationSlot;                                              // 0x03B4(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03B5(0x0003) MISSED OFFSET
	class UVehicleSpawnStationVehicleDefinition*       CachedVSSVehicleDefinition;                               // 0x03B8(0x0004) (Net, Transient, RepNotify)
	int                                                SeatOccupiedFlags;                                        // 0x03BC(0x0004) (Net, Transient, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSpawnStationPlatform");
		return ptr;
	}


	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	void TriggerKismetVehicleSpawnEvents(class AWillowVehicle* SpawnedVehicle);
	void SpawnVehicle();
	void Behavior_SpawnVehicle();
	void StartSpawnProcess(class UVehicleSpawnStationVehicleDefinition* VehicleDef);
	bool UsedBy(class APawn* User);
	bool TryToTeleportToVehicle(class APawn* User);
	bool IsActorSpawnedVehicle(class AActor* Other);
	void SetSeatOccupied(int SeatIdx, bool IsOccupied);
};


// Class WillowGame.VehicleSpawnStationTerminal
// 0x0008 (0x03B4 - 0x03BC)
class AVehicleSpawnStationTerminal : public AWillowInteractiveObject
{
public:
	class AVehicleSpawnStationPlatform*                SpawnPlatforms[0x2];                                      // 0x03B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSpawnStationTerminal");
		return ptr;
	}


	void DespawnVehicle(int SlotIndex);
	void SpawnVehicle(int SlotIndex, class UVehicleSpawnStationVehicleDefinition* VehicleType);
	void StopUsing();
	bool UsedBy(class APawn* User);
	bool ActivatedForPlayerUse();
	void UnlockForOtherUsers();
	void LockOutOtherUsers(class APawn* User);
	void PostBeginPlay();
};


// Class WillowGame.WillowElevatorButton
// 0x0058 (0x03B4 - 0x040C)
class AWillowElevatorButton : public AWillowInteractiveObject
{
public:
	unsigned char                                      Usage;                                                    // 0x03B4(0x0001) (Edit)
	unsigned char                                      ButtonState;                                              // 0x03B5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03B6(0x0002) MISSED OFFSET
	int                                                CallFloor;                                                // 0x03B8(0x0004) (Edit)
	unsigned long                                      bGlowing : 1;                                             // 0x03BC(0x0004) (Edit)
	struct FName                                       BehaviorSetName_Enabled;                                  // 0x03C0(0x0008) (Edit)
	struct FName                                       BehaviorSetName_Disabled;                                 // 0x03C8(0x0008) (Edit)
	struct FName                                       BehaviorSetName_InUse;                                    // 0x03D0(0x0008) (Edit)
	struct FName                                       BehaviorSetName_EnabledButUseless;                        // 0x03D8(0x0008) (Edit)
	struct FName                                       BehaviorSetName_Enabled_Glowing;                          // 0x03E0(0x0008) (Edit)
	struct FName                                       BehaviorSetName_Disabled_Glowing;                         // 0x03E8(0x0008) (Edit)
	struct FName                                       BehaviorSetName_InUse_Glowing;                            // 0x03F0(0x0008) (Edit)
	struct FName                                       BehaviorSetName_EnabledButUseless_Glowing;                // 0x03F8(0x0008) (Edit)
	TArray<class AWillowElevator*>                     AssociatedElevators;                                      // 0x0400(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowElevatorButton");
		return ptr;
	}


	void UpdateState();
	bool CanBeUsedForAnyAssociatedElevator();
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
};


// Class WillowGame.WillowInteractiveSwitch
// 0x0050 (0x03B4 - 0x0404)
class AWillowInteractiveSwitch : public AWillowInteractiveObject
{
public:
	struct FName                                       OnBehaviorSetName;                                        // 0x03B4(0x0008) (Edit)
	struct FName                                       NotAllPlayersNearBehaviorSetName;                         // 0x03BC(0x0008) (Edit)
	struct FName                                       OffBehaviorSetName;                                       // 0x03C4(0x0008) (Edit)
	TArray<class AVolume*>                             AllActorsInVolumes;                                       // 0x03CC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FTouchingPawn>                       TouchingPlayers;                                          // 0x03D8(0x000C) (NeedCtorLink)
	TArray<struct FTouchingPawn>                       TouchingVehicles;                                         // 0x03E4(0x000C) (NeedCtorLink)
	int                                                NumberOfTouchingPlayers;                                  // 0x03F0(0x0004)
	unsigned char                                      OffIcon;                                                  // 0x03F4(0x0001) (Deprecated)
	unsigned char                                      NotAllPlayersNearIcon;                                    // 0x03F5(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03F6(0x0002) MISSED OFFSET
	class UInteractionIconDefinition*                  OffIconDef;                                               // 0x03F8(0x0004) (Edit)
	class UInteractionIconDefinition*                  NotAllPlayersNearIconDef;                                 // 0x03FC(0x0004) (Edit)
	class UInteractionIconDefinition*                  CurrentIcon;                                              // 0x0400(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInteractiveSwitch");
		return ptr;
	}


	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	void PlayerLeftGame(class APlayerController* PC);
	void PlayerEnteredGame(class APlayerController* PC);
	void SetCurrentIcon(const struct FName& BehaviorSetName);
	void SetInitialState();
	void PostBeginPlay();
};


// Class WillowGame.WillowPropObject
// 0x0000 (0x03B4 - 0x03B4)
class AWillowPropObject : public AWillowInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPropObject");
		return ptr;
	}


	void PostBeginPlay();
};


// Class WillowGame.WillowVendingMachineBase
// 0x0014 (0x03B4 - 0x03C8)
class AWillowVendingMachineBase : public AWillowInteractiveObject
{
public:
	struct FPointer                                    VfTable_IIShop;                                           // 0x03B4(0x0004) (Const, Native, NoExport)
	unsigned char                                      ShopType;                                                 // 0x03B8(0x0001) (Net, Transient)
	unsigned char                                      FormOfCurrency;                                           // 0x03B9(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03BA(0x0002) MISSED OFFSET
	unsigned long                                      bOverrideFormOfCurrency : 1;                              // 0x03BC(0x0004) (Net, Transient)
	int                                                FixedItemCost;                                            // 0x03C0(0x0004) (Net, Transient)
	int                                                FixedFeaturedItemCost;                                    // 0x03C4(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVendingMachineBase");
		return ptr;
	}


	void Destroyed();
	int GetResetCost();
	void ClearInventory();
	void ResetInventory();
	bool PlayerBuyBackItem(class AWillowInventory* Item, class AWillowPlayerController* WPC);
	void PlayerBuyItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, bool bWasItemOfTheDay);
	void PlayerSellItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity);
	struct FShopItemData GetFeaturedItem(class AWillowPlayerController* WPC);
	void GetBuyBackList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* BuyBackItems);
	void GetInventoryList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* InventoryList);
	unsigned char GetItemStatus(class AWillowInventory* Item, class AWillowPlayerController* WPC, int ItemPrice);
	void NotifyBasedPickupRemoved(class AWillowPickup* Pickup);
	void RemoveSoldInventory(class AWillowInventory* SoldItem);
	void GetWeaponList(class AWillowPlayerController* WPC, TArray<class AWillowWeapon*>* WeaponList);
	void GetItemList(class AWillowPlayerController* WPC, TArray<class AWillowItem*>* ItemList);
	int GetSellingPriceForInventory(class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity);
	unsigned char GetCurrencyTypeInventoryIsSoldIn(class AWillowInventory* InventoryForSale);
	unsigned char GetShopType();
};


// Class WillowGame.WillowVendingMachine
// 0x00DC (0x03C8 - 0x04A4)
class AWillowVendingMachine : public AWillowVendingMachineBase
{
public:
	class AWillowInventory*                            ShopInventory[0x1E];                                      // 0x03C8(0x0004) (Net, Transient)
	class AWillowInventory*                            FeaturedItem;                                             // 0x0440(0x0004) (Net, Transient)
	class AWillowPickup*                               FeaturedItemPickup;                                       // 0x0444(0x0004) (Net, Transient)
	struct FName                                       FeaturedItemPickupAttachmentPoint;                        // 0x0448(0x0008) (Transient)
	float                                              LastInventoryResetTime;                                   // 0x0450(0x0004) (Transient)
	struct FAttributeInitializationData                CommerceMarkup;                                           // 0x0454(0x0010) (Net, Transient)
	struct FName                                       InventoryConfigurationName;                               // 0x0464(0x0008) (Transient)
	struct FAttributeInitializationData                FeaturedItemCommerceMarkup;                               // 0x046C(0x0010) (Net, Transient)
	struct FName                                       FeaturedItemConfigurationName;                            // 0x047C(0x0008) (Transient)
	struct FAttributeInitializationData                FeaturedItemGameStage;                                    // 0x0484(0x0010) (Transient)
	struct FAttributeInitializationData                FeaturedItemAwesomeLevel;                                 // 0x0494(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVendingMachine");
		return ptr;
	}


	void PlayerBuyItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, bool bWasItemOfTheDay);
	void NotifyBasedPickupRemoved(class AWillowPickup* Pickup);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	void SetFeaturedItem(class AWillowInventory* Inv, const struct FName& AttachmentPoint);
	void ClearInventory();
	void ResetInventory();
	struct FShopItemData GetFeaturedItem(class AWillowPlayerController* WPC);
	void GetInventoryList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* InventoryList);
	void RemoveSoldInventory(class AWillowInventory* SoldItem);
	void GetWeaponList(class AWillowPlayerController* WPC, TArray<class AWillowWeapon*>* WeaponList);
	void GetItemList(class AWillowPlayerController* WPC, TArray<class AWillowItem*>* ItemList);
	int GetSellingPriceForInventory(class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity);
	void GenerateInventory();
};


// Class WillowGame.WillowVendingMachineBlackMarket
// 0x0004 (0x03C8 - 0x03CC)
class AWillowVendingMachineBlackMarket : public AWillowVendingMachineBase
{
public:
	class UBlackMarketDefinition*                      DefinitionData;                                           // 0x03C8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVendingMachineBlackMarket");
		return ptr;
	}


	void PlayerBuyItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, bool bWasItemOfTheDay);
	unsigned char GetRarityLevelForUpgradeLevel(int CurrentLevel);
	class AWillowItem* BuildUpgradeItemForPlayer(class UBlackMarketUpgradeDefinition* UpgradeDef, class AWillowPlayerController* WPC);
	struct FShopItemData GetFeaturedItem(class AWillowPlayerController* WPC);
	void CreateNecessaryBlackMarketItems(class AWillowPlayerController* WPC, class AWillowInventoryManager** InvManager);
	void GetInventoryList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* InventoryList);
	void RemoveSoldInventory(class AWillowInventory* SoldItem);
	void GetWeaponList(class AWillowPlayerController* WPC, TArray<class AWillowWeapon*>* WeaponList);
	void GetItemList(class AWillowPlayerController* WPC, TArray<class AWillowItem*>* ItemList);
	static int StaticGetSellingPriceForBlackMarketInventory(class UInventoryBalanceDefinition* BalanceDef, class AWillowPlayerController* WPC);
	int GetSellingPriceForInventory(class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity);
};


// Class WillowGame.WillowInteractiveSwitchRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowInteractiveSwitchRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInteractiveSwitchRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.WillowInventoryManager
// 0x0084 (0x01B4 - 0x0238)
class AWillowInventoryManager : public AInventoryManager
{
public:
	unsigned long                                      bAutoSwitchWeaponOnPickup : 1;                            // 0x01B4(0x0004) (Config)
	unsigned long                                      bLimitedInventory : 1;                                    // 0x01B4(0x0004)
	int                                                InventorySlotMax_Misc;                                    // 0x01B8(0x0004) (Net)
	int                                                WeaponReadyMax;                                           // 0x01BC(0x0004) (Net, Transient)
	int                                                WeaponReadyMaxBaseValue;                                  // 0x01C0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  WeaponReadyMaxModifierStack;                              // 0x01C4(0x000C) (Const, Transient, NeedCtorLink)
	class AInventory*                                  ItemChain;                                                // 0x01D0(0x0004) (Net)
	TArray<class AInventory*>                          Backpack;                                                 // 0x01D4(0x000C) (NeedCtorLink)
	int                                                BackpackInventoryCount;                                   // 0x01E0(0x0004)
	class AWillowInventory*                            BackpackInventoryBeingEquipped;                           // 0x01E4(0x0004)
	class AWillowInventory*                            EquippedInventoryGoingToBackpack;                         // 0x01E8(0x0004)
	class AWillowWeapon*                               EquippedWeaponBeingSwapped;                               // 0x01EC(0x0004)
	class AWillowWeapon*                               OtherEquippedWeaponBeingSwapped;                          // 0x01F0(0x0004)
	TArray<class AInventory*>                          BuybackInventory;                                         // 0x01F4(0x000C) (NeedCtorLink)
	TArray<class AWillowInventory*>                    BlackMarketItemList;                                      // 0x0200(0x000C) (Transient, NeedCtorLink)
	class AWillowInventory*                            BlackMarketFeaturedItem;                                  // 0x020C(0x0004) (Transient)
	class UWillowInventoryStorage*                     TheBank;                                                  // 0x0210(0x0004)
	class UWillowInventoryStorage*                     TheStash;                                                 // 0x0214(0x0004)
	float                                              LastAdjustTime;                                           // 0x0218(0x0004)
	float                                              LastItemAdjustTime;                                       // 0x021C(0x0004)
	unsigned char                                      PendingQuickSlot;                                         // 0x0220(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	class URecentDropList*                             RecentStuff;                                              // 0x0224(0x0004)
	class AWillowWeapon*                               WeaponSwitchSlots[0x4];                                   // 0x0228(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInventoryManager");
		return ptr;
	}


	void InternalSetCurrentWeapon(class AWeapon* DesiredWeapon, bool bEquipInOffHand);
	class AWillowInventory* GetEquippedAnalogue(class AWillowInventory* InThing);
	class AWillowInventory* GetBlackMarketFeaturedItem();
	void AddBlackMarketFeaturedItem(class AWillowInventory* Item);
	void GetBlackMarketItemList(TArray<class AWillowInventory*>* ItemList);
	void AddBlackMarketItem(class AWillowInventory* Item);
	void ClearBlackMarketInventory();
	void ClientRemoveStoredItem(const struct FItemDefinitionData& ItemDef, unsigned char StorageType);
	void ClientRemoveStoredWeapon(const struct FWeaponDefinitionData& WeaponDef, unsigned char StorageType);
	void ClientStoreItem(const struct FItemDefinitionData& ItemDef, unsigned char StorageType, bool bIgnoreCapacityCheck, bool bUniqueInventory);
	void ClientStoreWeapon(const struct FWeaponDefinitionData& WeaponDef, unsigned char StorageType, bool bIgnoreCapacityCheck, bool bUniqueInventory);
	bool ClientSetBankSlots(int NewSlotCount);
	void PrintAllInventory();
	void SellAllTrash();
	void RemoveMissionWeapons(class UMissionWeaponBalanceDefinition* MissionWeapon);
	void ClientRemoveMissionWeapons(class UMissionWeaponBalanceDefinition* MissionWeapon);
	void ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet, bool bDoNotActivate);
	bool IsInventoryItemInInventory(class AInventory* CheckItem);
	void GetEquippedWeapons(class AWillowWeapon** UpThing, class AWillowWeapon** DownThing, class AWillowWeapon** LeftThing, class AWillowWeapon** RightThing);
	void EquipWeaponFromSlot(unsigned char QuickSlot);
	void RecordItemToInventoryEventForWeapon(class AWillowWeapon* WWeap, bool bReplacedWeapon);
	static unsigned char TranslateWeaponSlotToInventorySlot(unsigned char WeaponSlot);
	void SafelySetQuickSlot(class AWeapon* Weap, unsigned char QuickSlot);
	void AssignNextAvailableDefaultQuickSlot(class AWeapon* NewWeapon);
	class AWillowItem* GetCurrentClassMod();
	static void SortInventory(class UQSortComparer* Comparer, TArray<class AWillowInventory*>* Items);
	static void SortItems(class UQSortComparer* Comparer, TArray<class AWillowItem*>* Items);
	static void SortWeapons(class UQSortComparer* Comparer, TArray<class AWillowWeapon*>* Weapons);
	void DiscardInventory(bool bDestroyContents);
	bool HandlePickupQuery(const FScriptInterface& Pickup);
	void CopyInventory(class APawn* Other);
	void FillWeaponSwitchSlots();
	void NextWeapon();
	void PrevWeapon();
	void SwitchToBestWeapon(bool bForceADifferentWeapon);
	bool ShouldSwitchToBestWeapon();
	void ReloadWeapon(unsigned char FireModeNum);
	void ChangedWeapon(bool bEquipInOffHand);
	bool CancelWeaponChange();
	void ServerPlayerBuyBackInventory(unsigned char FormOfCurrency, int Price, int Quantity);
	bool PlayerBuyBackItem(class AWillowInventory* Inv);
	void ServerPlayerSoldItem(class AWillowInventory* Inv, int Quantity);
	void ServerPlayerSoldBackpackItem(unsigned char FormOfCurrency, int Price);
	void PlayerSoldItem(class AWillowInventory* Inv, int Quantity);
	void ServerThrowItemFromBackpack(const struct FItemDefinitionData& DefinitionData, int Quantity);
	void ServerThrowWeaponFromBackpack(const struct FWeaponDefinitionData& DefinitionData);
	void ThrowBackpackInventory(class AWillowInventory* Inv);
	void ServerReadyWeaponFromBackpack(const struct FWeaponDefinitionData& DefinitionData, unsigned char WeaponSlot, unsigned char Mark);
	void ServerReadyItemFromBackpack(const struct FItemDefinitionData& DefinitionData, unsigned char Mark);
	void ReadyBackpackInventory(class AWillowInventory* Inv, unsigned char WeaponSlot);
	void SendEquipLocThingToBackpack(unsigned char EquipmentLocation);
	void SendSlottedThingToBackpack(unsigned char WeaponSlot);
	void ServerSwitchQuickSlot(class AWillowInventory* Thing, unsigned char NewWeaponSlot);
	void SwitchQuickSlot(class AWillowInventory* Thing, unsigned char NewWeaponSlot);
	class AWillowWeapon* GetWeaponInSlot(unsigned char NewWeaponSlot);
	void OnDroppedInventory(int Id);
	void ClientOnDroppedInventory(int Id);
	void ClientConditionalIncrementPickupStats(class AInventory* InvObject);
	void ServerIncrementItemPickedUpStats(const struct FItemDefinitionData& ItemDef);
	void CheckItemAgainstBackpackInventoryBeingEquipped(class AWillowItem* WItem);
	void ServerIncrementWeaponPickedUpStats(const struct FWeaponDefinitionData& WeaponDef);
	void CheckWeaponAgainstEquippedWeaponsBeingSwapped(class AWillowWeapon* WWeapon);
	void CheckWeaponAgainstBackpackInventoryBeingEquipped(class AWillowWeapon* WWeapon);
	bool InventoryTransitionInProgress();
	void IncPlayerRarityStat(int RarityLevel, class AWillowPlayerController* WPC);
	unsigned char GetMatchedSetRarity();
	bool HasMatchedRainbowSet();
	void OnEquipped(class AWillowInventory* Inv);
	bool IsRecent(class AWillowInventory* Inv);
	void RemoveInventoryFromBackpack(class AWillowInventory* Inv);
	void AddInventoryToBackpack(class AWillowInventory* Inv);
	void ClientAddItemToBackpack(const struct FItemDefinitionData& DefinitionData, int Quantity, unsigned char Mark, bool bReadyAfterAdd, unsigned char ItemLocation, int TradePartnerId);
	void ClientAddWeaponToBackpack(const struct FWeaponDefinitionData& DefinitionData, unsigned char Mark, bool bReadyAfterAdd, unsigned char ItemLocation, int TradePartnerId);
	void GiveStoredAmmoBeforeGoingToBackpack(class UResourceDefinition* Resource, int Amount);
	void AddClientSideInventoryToBackpackInventory(class AWillowInventory* Inv);
	void AddBackpackItemFromDefinitionData(struct FItemDefinitionData* DefinitionData);
	void AddBackpackWeaponFromDefinitionData(struct FWeaponDefinitionData* DefinitionData);
	void AddBackpackInventory(class AInventory* Inv);
	void InternalAddBackpackInventory(class AInventory* Inv, bool bReadyAfterAdd);
	void InventoryUnreadied(class AInventory* Inv, bool PlaceInBackpack);
	void ServerUpdateBackpackInventoryCount(int NewCount);
	void UpdateBackpackInventoryCount();
	void UpdatePawnGearLikenessComponents();
	void SetHolsteredWeapon(int SlotIdx, class AWillowWeapon* NewWeapon);
	void ReplaceHolsteredWeapon(class AWillowWeapon* OldWeapon, class AWillowWeapon* NewWeapon);
	class AWillowWeapon* FindBestHolsteredWeapon(unsigned char SizeFilter);
	void InventoryReadied(class AInventory* Inv);
	void RemoveFromInventory(class AInventory* ItemToRemove, bool bCanDrop);
	bool HasRoomInInventoryFor(const FScriptInterface& Pickupable);
	int GetEmptyBackpackSlots();
	bool InventoryShouldBeReadiedWhenEquipped(class AWillowInventory* WillowInv);
	void GiveGrenadeToPlayer();
	void GiveGrenadeToPlayerIfGrenadeMod(class AWillowItem* Item);
	bool AddInventory(class AInventory* NewItem, bool bReady, bool bDoNotActivate, bool bPlayPickupSound);
	class AWillowPlayerController* GetOwningPlayerController();
	void GetItemList(unsigned char MaxDroppability, bool bIncludeBackpackTransitions, TArray<class AWillowItem*>* ItemList);
	void GetWeaponList(bool bIncludeUnreadied, bool bIncludeReadied, unsigned char MaxDroppability, bool bIncludeBackpackTransitions, TArray<class AWillowWeapon*>* WeaponList);
	void UnreadyExcessWeapons();
	void SetWeaponReadyMax(int NewSize);
	void SetupForPlayer();
	void SetupFor(class APawn* P);
	void ReplicatedEvent(const struct FName& VarName);
	int GetWeaponReadyMax(bool bWantBaseValue);
	int CountReadiedWeapons();
	void SetInventoryMaxSize(int NewSize, bool bOverrideDefaultMin);
	int GetUnreadiedInventoryMaxSize();
	int CountUnreadiedInventory();
	class AWillowWeapon* FindLeastValuableWeapon(bool bIncludeUnreadied, bool bIncludeReadied);
	class AWillowInventory* FindLeastValuableItem(bool bIncludeUnreadied, bool bIncludeReadied);
	void ItemActors(class UClass* BaseClass, bool bOnlyReadied, class AInventory** Inv);
};


// Class WillowGame.WillowInventoryStorage
// 0x0024 (0x003C - 0x0060)
class UWillowInventoryStorage : public UObject
{
public:
	int                                                MaxSlots;                                                 // 0x003C(0x0004)
	int                                                ChestSlots;                                               // 0x0040(0x0004)
	unsigned long                                      ChestIsOpen : 1;                                          // 0x0044(0x0004)
	TArray<struct FChestData>                          TheChest;                                                 // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FInventorySerialNumber>              UnloadableInventory;                                      // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInventoryStorage");
		return ptr;
	}


	void SetMaxSlots(int NewMaxSlots);
	void PrintLog();
	bool IsOpen();
	void GetList(TArray<class AWillowInventory*>* StorageList);
	bool PutItem(class AWillowItem* WItem, bool bOwned);
	bool PutWeapon(class AWillowWeapon* WWeapon, bool bOwned);
	bool GetInternal(class AWillowInventory* Inv, bool bIgnoreSizeCheck);
	bool Get(class AWillowInventory* Inv);
	bool PutInternal(class AInventory* Inv, bool bIgnoreSizeCheck);
	bool Put(class AInventory* Inv);
	void RemoveWeaponsByDef(const struct FWeaponDefinitionData& WeaponDef);
	void RemoveItemsByDef(const struct FItemDefinitionData& ItemDef);
	bool AddWeaponFromDef(const struct FWeaponDefinitionData& WeaponDef, bool bIgnoreSizeCheck, bool bUniqueInventory);
	bool AddItemFromDef(const struct FItemDefinitionData& ItemDef, bool bIgnoreSizeCheck, bool bUniqueInventory);
	bool Swap(class AWillowInventory* StorageThing, class AWillowInventory* PlayerThing);
	void Close();
	bool Open();
	void Reset();
	bool SetSlotCount(int NewSlotCount);
	bool AddSlots(int SlotsToAdd);
	int GetSizeIncludingUnloadable();
	int GetUnloadableCount();
	int GetMaxSize();
	int GetSize();
};


// Class WillowGame.WillowItem
// 0x00F4 (0x0898 - 0x098C)
class AWillowItem : public AWillowInventory
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x0898(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMissionInventory;                               // 0x089C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x08A0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIItemCardable;                                   // 0x08A4(0x0004) (Const, Native, NoExport)
	struct FItemDefinitionData                         DefinitionData;                                           // 0x08A8(0x0044) (Net, RepNotify)
	class UItemPartListCollectionDefinition*           PartListCollection;                                       // 0x08EC(0x0004) (Transient)
	unsigned long                                      bSelectRandomPartsOnInitialization : 1;                   // 0x08F0(0x0004)
	class UMaterialInstanceConstant*                   HUDMaterialInstance;                                      // 0x08F4(0x0004)
	class UMeshComponent*                              Mesh;                                                     // 0x08F8(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      ItemSkeletalMesh;                                         // 0x08FC(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        ItemStaticMesh;                                           // 0x0900(0x0004) (ExportObject, Component, EditInline)
	class UMaterialInstance*                           ItemMaterial;                                             // 0x0904(0x0004)
	TArray<struct FAppliedAttributeEffect>             ExternalAttributeModifiers;                               // 0x0908(0x000C) (NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             PartExternalAttributeModifiers;                           // 0x0914(0x000C) (NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             ItemAttributeModifiers;                                   // 0x0920(0x000C) (NeedCtorLink)
	TArray<struct FModifierValuePresentationData>      ItemCardModifierStats;                                    // 0x092C(0x000C) (Const, Transient, NeedCtorLink)
	struct FReplicatedInventoryCardData                ReplicatedItemCardModifierValues[0x5];                    // 0x0938(0x0008) (Const, Net, Transient)
	TArray<struct FUIStatModifierData>                 UIStatModifiers;                                          // 0x0960(0x000C) (NeedCtorLink)
	struct FInstanceDataSet                            InstanceDataState;                                        // 0x096C(0x000C) (Transient, Component, NeedCtorLink)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0978(0x0004)
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                          // 0x097C(0x000C) (Net, RepNotify)
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                                  // 0x0988(0x0004) (Net, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowItem");
		return ptr;
	}


	bool IsUsefulToThisPlayer(class APlayerController* C);
	static bool CheckDefMatch(bool bShortCheck, bool bUniqueIDCheck, struct FItemDefinitionData* Def, struct FItemDefinitionData* OtherDef);
	static bool SerialNumberMatchesDef(bool bShortCheck, bool bUniqueIDCheck, struct FInventorySerialNumber* SerialNumber, struct FItemDefinitionData* Def);
	static class AWillowItem* CreateItemFromSerialNumber(class UObject* InAdditionalQueryInterfaceSource, struct FInventorySerialNumber* SerialNumber);
	static bool UnpackSerialNumber(struct FInventorySerialNumber* SerialNumber, struct FItemDefinitionData* Def);
	static struct FInventorySerialNumber PackSerialNumber(struct FItemDefinitionData* Def);
	struct FInventorySerialNumber CreateSerialNumber();
	static void DefinitionFromHashString(const struct FString& HashString, struct FItemDefinitionData* ItemData);
	struct FString GetHashString();
	static class AWillowItem* CreateItemFromDef(const struct FItemDefinitionData& NewItemDef, class AWillowPawn* PlayerOwner, int NewQuantity, bool bForceSelectNameParts);
	struct FName GetCategoryKey();
	static class AWillowItem* CreateItemFromMemento(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class UObject* InAdditionalQueryInterfaceSource, struct FItemMemento* Memento);
	struct FItemMemento GetMemento();
	struct FString GetModelName();
	void GetItemCardTopSectionString(struct FString* Section);
	struct FString GetRainGrenadeIcon();
	float GetTechIconFrame();
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	class UImpactDefinition* GetDroppedImpactDefinition();
	void GetItemDebug(TArray<struct FString>* DebugInfo);
	void LogInventoryDebug();
	struct FString FormatFunStatsText(TArray<struct FModifierValuePresentationData>* BottomStats);
	struct FString GenerateFunStatsText();
	void GetInventoryStatTextData(TArray<struct FModifierValuePresentationData>* Stats);
	void GetInventoryStatNumberData(class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray<struct FTopStatData>* Stats);
	void CacheItemCard();
	bool CanCompareUIStat(class UAttributeDefinition** Attrib, class UAttributeDefinition** CompareAttrib, class AWillowInventory** CompareItem);
	int CompareUIStat(int StatIdx, class AWillowInventory* CompareTo);
	bool CanBeUsedBy(class APawn* Other);
	void TranslateUseFailure(class APawn* Other, int FailureFlag, struct FString* Output);
	static struct FString GenerateHumanReadableNameFromDefinitionParts(bool bIncludeManufacturer, bool bIncludeModelName, bool bIncludePrefixTitle, struct FItemDefinitionData* DefData);
	static struct FString GenerateHumanReadableNameFromDefinition(struct FItemDefinitionData* DefData);
	struct FString GetInventoryCardString(bool bIncludeManufacturer, bool bIncludeModelName, bool bIncludePrefixTitle);
	struct FString GetShortHumanReadableName();
	struct FString GenerateHumanReadableName(bool bPrefixOnly);
	class UInventoryCardPresentationDefinition* GetPresentationDefinition();
	static struct FString GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
	void ServerReselectItem();
	bool DenyPickupQuery(const FScriptInterface& Pickup);
	class AWillowInventory* CreateClone();
	class ADroppedPickup* DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity, bool bForceNoRBPhysics, bool bTorque, const struct FVector& Torque);
	void GivenTo(class APawn* NewOwner, bool bReady, bool bDoNotActivate);
	bool IsPlayerRestricted(class APawn* PawnToCheck);
	void RemoveFromShop();
	class UProjectileDefinition* GetProjectileDefinition();
	void UpdateUIStateModifierCompareValues();
	class UAttributePresentationListDefinition* GetAttributePresentationOverride(class UAttributeDefinition* Attribute);
	void InitUIStats();
	void RemoveAllPartExternalAttributeEffects();
	void RemoveAllExternalAttributeEffects();
	void ApplyAllExternalAttributeEffects();
	void RemoveAllItemAttributeEffects();
	void ApplyNamePartItemAttributeEffects();
	void ApplyAllItemAttributeEffects(bool bIncludeNameParts);
	void DeactivateAttributeSlotSkill();
	void ActivateAttributeSlotSkill();
	void ComputeValueOfParts();
	static int StaticCalculateItemRarityLevel(struct FItemDefinitionData* ItemDefinitionData);
	int CalculateItemRarityLevel();
	static bool IsAllPartsDebugEnabled();
	static void ToggleAllPartsDebug();
	class UItemNamePartDefinition* SelectNamePartFromList(TArray<class UItemNamePartDefinition*>* NameList);
	void ChooseRandomNameParts();
	void ChooseRandomParts(class UObject* ContextSource);
	void ChoosePartListCollection();
	class UMeshComponent* ClonePrimaryMesh();
	void CloneAppearance(class AActor* CloneOwner, class USkeletalMeshComponent* ClonedPrimaryMeshComponent, TArray<class UPrimitiveComponent*>* ClonedComponentsAttachedToPrimaryMesh, class UMaterialInstance** ClonedMeshMaterial);
	void AttachMeshToPickup(class AActor* Pickup);
	void PickupDisassociated(class ADroppedPickup* Pickup);
	void PickupAssociated(class ADroppedPickup* Pickup);
	void InitMeshes();
	static class UMeshComponent* InitConstructPreview(class UMeshComponent* Existing, class UWillowInventoryDefinition* InvDefinition);
	static class UMaterialInstance* BuildItemMaterial(class AActor* MaterialOwner, class UMeshComponent* FallbackMeshComp, const struct FItemDefinitionData& InDefinitionData);
	static class USkeletalMesh* BuildCompositeMesh(class USkeletalMeshComponent* ItemMeshComp, const struct FItemDefinitionData& InDefinitionData);
	bool ClientInitializeFromItemDefinition();
	bool ValidateDefinitions();
	void RecomputeAttributeBaseValues();
	void CalculateItemBaseValues();
	void InitializeInternal(bool bForceSelectNameParts);
	void InitializeFromDefinitionData(const struct FItemDefinitionData& NewDefinitionData, class UObject* InAdditionalQueryInterfaceSource, bool bForceSelectNameParts);
	void InitializeInventory(class UBaseBalanceDefinition* InBalanceDef, class UManufacturerDefinition* InManufacturer, int InGradeIndex, class UObject* InAdditionalQueryInterfaceSource);
	static void AllParts(bool bIncludeNameParts, struct FItemDefinitionData* DefData, class UItemPartDefinition** Part);
	void CheckItemAgainstBackpackInventoryBeingEquipped();
	void ReplicatedEvent(const struct FName& VarName);
	bool IsEquipped();
	unsigned char GetEquipmentLocation();
	void OnPickupDisassociated(class UObject* Pickup, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnPickupAssociated(class UObject* Pickup, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnCreate(TArray<class UBehaviorProviderDefinition*>* Providers);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
};


// Class WillowGame.WillowEquipAbleItem
// 0x0000 (0x098C - 0x098C)
class AWillowEquipAbleItem : public AWillowItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEquipAbleItem");
		return ptr;
	}


	bool CanBeUsedBy(class APawn* Other);
	void ItemEquipped();
	void ItemUnequipped(bool bReplace);
	void Unreadied();
	void Readied();
	bool IsEquipped();
	void ItemRemovedFromInvManager();
	bool SetElementalFrame();
	bool ClientInitializeFromItemDefinition();
	void OnUnequipped(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnEquipped(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
};


// Class WillowGame.WillowArtifact
// 0x0000 (0x098C - 0x098C)
class AWillowArtifact : public AWillowEquipAbleItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowArtifact");
		return ptr;
	}


	void GetItemCardTopSectionString(struct FString* Section);
	class UAttributePresentationListDefinition* GetAttributePresentationOverride(class UAttributeDefinition* Attribute);
	bool SetElementalFrame();
	bool ValidateDefinitions();
	struct FName GetEquippedStat();
	unsigned char GetEquipmentLocation();
};


// Class WillowGame.WillowClassMod
// 0x0018 (0x098C - 0x09A4)
class AWillowClassMod : public AWillowEquipAbleItem
{
public:
	struct FString                                     ClassRequirementMetString;                                // 0x098C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ClassRequirementNotMetString;                             // 0x0998(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowClassMod");
		return ptr;
	}


	void GetItemCardTopSectionString(struct FString* Section);
	void GetInventoryStatNumberData(class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray<struct FTopStatData>* Stats);
	unsigned char GetHolsteredGearLikenessType();
	class UAttributePresentationListDefinition* GetAttributePresentationOverride(class UAttributeDefinition* Attribute);
	bool IsModifyingSkill(class USkillDefinition* SkillDef, int* Amount);
	bool GetClassModIconLabel(struct FString* FrameLabel);
	bool ValidateDefinitions();
	struct FName GetEquippedStat();
	unsigned char GetEquipmentLocation();
};


// Class WillowGame.WillowGrenadeMod
// 0x0090 (0x098C - 0x0A1C)
class AWillowGrenadeMod : public AWillowEquipAbleItem
{
public:
	float                                              GrenadeDamage;                                            // 0x098C(0x0004) (Transient)
	float                                              GrenadeDamageBaseValue;                                   // 0x0990(0x0004) (Const)
	TArray<class UAttributeModifier*>                  GrenadeDamageModifierStack;                               // 0x0994(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BlastRadius;                                              // 0x09A0(0x0004) (Transient)
	float                                              BlastRadiusBaseValue;                                     // 0x09A4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BlastRadiusModifierStack;                                 // 0x09A8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              FuseTime;                                                 // 0x09B4(0x0004) (Transient)
	float                                              FuseTimeBaseValue;                                        // 0x09B8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  FuseTimeModifierStack;                                    // 0x09BC(0x000C) (Const, Transient, NeedCtorLink)
	int                                                NumberOfChildProjectiles;                                 // 0x09C8(0x0004) (Net, Transient)
	int                                                NumberOfChildProjectilesBaseValue;                        // 0x09CC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NumberOfChildProjectilesModifierStack;                    // 0x09D0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BaseStatusEffectChanceModifier;                           // 0x09DC(0x0004) (Transient)
	float                                              BaseStatusEffectChanceModifierBaseValue;                  // 0x09E0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BaseStatusEffectChanceModifierModifierStack;              // 0x09E4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectChanceModifier;                               // 0x09F0(0x0004) (Transient)
	float                                              StatusEffectChanceModifierBaseValue;                      // 0x09F4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  StatusEffectChanceModifierModifierStack;                  // 0x09F8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectDamage;                                       // 0x0A04(0x0004) (Transient)
	float                                              StatusEffectDamageBaseValue;                              // 0x0A08(0x0004) (Const)
	TArray<class UAttributeModifier*>                  StatusEffectDamageModifierStack;                          // 0x0A0C(0x000C) (Const, Transient, NeedCtorLink)
	unsigned long                                      bGrenadeStored : 1;                                       // 0x0A18(0x0004)
	unsigned long                                      bStorageSet : 1;                                          // 0x0A18(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGrenadeMod");
		return ptr;
	}


	void GetItemCardTopSectionString(struct FString* Section);
	struct FName GetCategoryKey();
	void SetGrenadeStorage(bool bNewGrenadeStored);
	void RemoveFromShop();
	class ADroppedPickup* CreatePickup(bool bDroppedPickup, bool bEnablePickup, const struct FVector& StartLocation);
	class ADroppedPickup* GetPickup(bool bDisableRigidBody, bool bEnablePickup);
	unsigned char GetHolsteredGearLikenessType();
	class UAttributePresentationListDefinition* GetAttributePresentationOverride(class UAttributeDefinition* Attribute);
	bool CanAIUse();
	class UProjectileDefinition* GetProjectileDefinition();
	void Init(class AController* Spawner, class AWillowProjectile* SpawnedProjectile);
	class AWillowProjectile* SpawnProjectile(class UProjectileDefinition* ProjectileDef, const struct FVector& SpawnLocation, bool bSpawnWithNoCollisionFail);
	bool SetElementalFrame();
	bool ValidateDefinitions();
	struct FName GetEquippedStat();
	unsigned char GetEquipmentLocation();
	void OnGrenadeKilledEnemy(class UObject* KilledObject, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnGrenadeKilledFriendly(class UObject* KilledObject, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnGrenadeKilledNeutral(class UObject* KilledObject, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnGrenadeDamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnGrenadeDamagedFriendly(class UObject* DamageTaker, float DamageAmount, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnGrenadeDamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnGrenadeExploded(class UObject* Grenade, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnGrenadeSpawned(class UObject* SpawnedProjectile, TArray<class UBehaviorProviderDefinition*>* Providers);
};


// Class WillowGame.WillowShield
// 0x01D8 (0x098C - 0x0B64)
class AWillowShield : public AWillowEquipAbleItem
{
public:
	float                                              PercentChanceToAbsorbAmmo;                                // 0x098C(0x0004) (Transient)
	float                                              PercentChanceToAbsorbAmmoBaseValue;                       // 0x0990(0x0004) (Const)
	TArray<class UAttributeModifier*>                  PercentChanceToAbsorbAmmoModifierStack;                   // 0x0994(0x000C) (Const, Transient, NeedCtorLink)
	float                                              PercentDamageToNegateWhenAmmoAbsorbed;                    // 0x09A0(0x0004) (Transient)
	float                                              PercentDamageToNegateWhenAmmoAbsorbedBaseValue;           // 0x09A4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  PercentDamageToNegateWhenAmmoAbsorbedModifierStack;       // 0x09A8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              GenericStatusEffectDamageModifier;                        // 0x09B4(0x0004) (Transient)
	float                                              GenericStatusEffectDamageModifierBaseValue;               // 0x09B8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  GenericStatusEffectDamageModifierModifierStack;           // 0x09BC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaCorrosiveExplosionSize;                               // 0x09C8(0x0004) (Transient)
	float                                              NovaCorrosiveExplosionSizeBaseValue;                      // 0x09CC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaCorrosiveExplosionSizeModifierStack;                  // 0x09D0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaExplosiveExplosionSize;                               // 0x09DC(0x0004) (Transient)
	float                                              NovaExplosiveExplosionSizeBaseValue;                      // 0x09E0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaExplosiveExplosionSizeModifierStack;                  // 0x09E4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaFireExplosionSize;                                    // 0x09F0(0x0004) (Transient)
	float                                              NovaFireExplosionSizeBaseValue;                           // 0x09F4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaFireExplosionSizeModifierStack;                       // 0x09F8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaShockExplosionSize;                                   // 0x0A04(0x0004) (Transient)
	float                                              NovaShockExplosionSizeBaseValue;                          // 0x0A08(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaShockExplosionSizeModifierStack;                      // 0x0A0C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaCorrosiveExplosionDamage;                             // 0x0A18(0x0004) (Transient)
	float                                              NovaCorrosiveExplosionDamageBaseValue;                    // 0x0A1C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaCorrosiveExplosionDamageModifierStack;                // 0x0A20(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaExplosiveExplosionDamage;                             // 0x0A2C(0x0004) (Transient)
	float                                              NovaExplosiveExplosionDamageBaseValue;                    // 0x0A30(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaExplosiveExplosionDamageModifierStack;                // 0x0A34(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaFireExplosionDamage;                                  // 0x0A40(0x0004) (Transient)
	float                                              NovaFireExplosionDamageBaseValue;                         // 0x0A44(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaFireExplosionDamageModifierStack;                     // 0x0A48(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NovaShockExplosionDamage;                                 // 0x0A54(0x0004) (Transient)
	float                                              NovaShockExplosionDamageBaseValue;                        // 0x0A58(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NovaShockExplosionDamageModifierStack;                    // 0x0A5C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SpikeCorrosiveDamage;                                     // 0x0A68(0x0004) (Transient)
	float                                              SpikeCorrosiveDamageBaseValue;                            // 0x0A6C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SpikeCorrosiveDamageModifierStack;                        // 0x0A70(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SpikeExplosiveDamage;                                     // 0x0A7C(0x0004) (Transient)
	float                                              SpikeExplosiveDamageBaseValue;                            // 0x0A80(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SpikeExplosiveDamageModifierStack;                        // 0x0A84(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SpikeFireDamage;                                          // 0x0A90(0x0004) (Transient)
	float                                              SpikeFireDamageBaseValue;                                 // 0x0A94(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SpikeFireDamageModifierStack;                             // 0x0A98(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SpikeShockDamage;                                         // 0x0AA4(0x0004) (Transient)
	float                                              SpikeShockDamageBaseValue;                                // 0x0AA8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SpikeShockDamageModifierStack;                            // 0x0AAC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              RoidMeleeDamage;                                          // 0x0AB8(0x0004) (Net, Transient)
	float                                              RoidMeleeDamageBaseValue;                                 // 0x0ABC(0x0004) (Const, Net)
	TArray<class UAttributeModifier*>                  RoidMeleeDamageModifierStack;                             // 0x0AC0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              PercentChanceToSpawnBoosterItem;                          // 0x0ACC(0x0004) (Transient)
	float                                              PercentChanceToSpawnBoosterItemBaseValue;                 // 0x0AD0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  PercentChanceToSpawnBoosterItemModifierStack;             // 0x0AD4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ImpactDamageBonus;                                        // 0x0AE0(0x0004) (Transient)
	float                                              ImpactDamageBonusBaseValue;                               // 0x0AE4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ImpactDamageBonusModifierStack;                           // 0x0AE8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              PercentShieldToConsumeOnImpactProc;                       // 0x0AF4(0x0004) (Transient)
	float                                              PercentShieldToConsumeOnImpactProcBaseValue;              // 0x0AF8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  PercentShieldToConsumeOnImpactProcModifierStack;          // 0x0AFC(0x000C) (Const, Transient, NeedCtorLink)
	class UShieldDefinition*                           ShieldDef;                                                // 0x0B08(0x0004) (Transient)
	class UWillowDamageTypeDefinition*                 DamageResistanceType;                                     // 0x0B0C(0x0004) (Net, Transient)
	unsigned long                                      bPrimed : 1;                                              // 0x0B10(0x0004) (Net, Transient, RepNotify)
	float                                              ShieldCapacitySlotGradeMinusRarity;                       // 0x0B14(0x0004) (Transient)
	float                                              ShieldCapacitySlotGradeMinusRarityBaseValue;              // 0x0B18(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShieldCapacitySlotGradeMinusRarityModifierStack;          // 0x0B1C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ShieldRechargeRateSlotGradeMinusRarity;                   // 0x0B28(0x0004) (Transient)
	float                                              ShieldRechargeRateSlotGradeMinusRarityBaseValue;          // 0x0B2C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShieldRechargeRateSlotGradeMinusRarityModifierStack;      // 0x0B30(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ShieldRechargeDelaySlotGradeMinusRarity;                  // 0x0B3C(0x0004) (Transient)
	float                                              ShieldRechargeDelaySlotGradeMinusRarityBaseValue;         // 0x0B40(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShieldRechargeDelaySlotGradeMinusRarityModifierStack;     // 0x0B44(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ShieldSpecialSlotGradeMinusRarity;                        // 0x0B50(0x0004) (Transient)
	float                                              ShieldSpecialSlotGradeMinusRarityBaseValue;               // 0x0B54(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShieldSpecialSlotGradeMinusRarityModifierStack;           // 0x0B58(0x000C) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowShield");
		return ptr;
	}


	unsigned char GetHolsteredGearLikenessType();
	void GetItemCardTopSectionString(struct FString* Section);
	class UAttributePresentationListDefinition* GetAttributePresentationOverride(class UAttributeDefinition* Attribute);
	bool IsSameShieldTypeAs(class AWillowShield** CompareShield);
	bool CanCompareUIStat(class UAttributeDefinition** Attrib, class UAttributeDefinition** CompareAttrib, class AWillowInventory** CompareItem);
	bool ValidateDefinitions();
	struct FName GetEquippedStat();
	unsigned char GetEquipmentLocation();
	void SetDamageResistanceType(class UWillowDamageTypeDefinition* NewType);
	void ShieldTriggered();
	void ShieldPrimedStateChanged();
	bool TryAbsorbingAmmo(class UObject* DamageSource, class UWillowDamageTypeDefinition* DamageType, float* PercentDamageToAbsorb);
	void ItemUnequipped(bool bReplace);
	void ItemEquipped();
	bool ClientInitializeFromItemDefinition();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowUsableItem
// 0x0008 (0x098C - 0x0994)
class AWillowUsableItem : public AWillowItem
{
public:
	struct FPointer                                    VfTable_IIMissionObjective;                               // 0x098C(0x0004) (Const, Native, NoExport)
	int                                                ObjectiveBit;                                             // 0x0990(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowUsableItem");
		return ptr;
	}


	class UAttributePresentationListDefinition* GetAttributePresentationOverride(class UAttributeDefinition* Attribute);
	void ConsumeItem();
	bool TryConsume();
	void Consume();
	void Readied();
	class AWillowPlayerController* GetOwningPlayerController();
	void HandleOnUsed();
	void GivenTo(class APawn* thisPawn, bool bReady, bool bDoNotActivate);
	bool CanBeReadiedOnPickup(class APawn* Other);
	bool HandlePickupQuery(class APawn* Other, const FScriptInterface& Pickup);
	bool IsItemAutoUsedBy(class APawn* Other);
	int GetObjectiveBit();
	bool ValidateDefinition();
	void OnUsed(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
};


// Class WillowGame.WillowMissionItem
// 0x0010 (0x0994 - 0x09A4)
class AWillowMissionItem : public AWillowUsableItem
{
public:
	class AWillowMissionPickupFailsafe*                PickupFailsafe;                                           // 0x0994(0x0004)
	struct FString                                     MissionItemString;                                        // 0x0998(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowMissionItem");
		return ptr;
	}


	struct FString FormatFunStatsText(TArray<struct FModifierValuePresentationData>* BottomStats);
	struct FString GenerateFunStatsText();
	void GetItemCardTopSectionString(struct FString* Section);
	void PickupAssociated(class ADroppedPickup* Pickup);
	bool MissionDenyPickup();
	void HandleOnUsed();
	bool CanBeUsedBy(class APawn* Other);
	bool ClientInitializeFromItemDefinition();
	bool ValidateDefinitions();
};


// Class WillowGame.WillowUsableCustomizationItem
// 0x0000 (0x0994 - 0x0994)
class AWillowUsableCustomizationItem : public AWillowUsableItem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowUsableCustomizationItem");
		return ptr;
	}


	bool IsUsefulToThisPlayer(class APlayerController* C);
	void GetItemCardTopSectionString(struct FString* Section);
	void InitMeshes();
	bool IsItemAutoUsedBy(class APawn* Other);
	struct FString FormatFunStatsText(TArray<struct FModifierValuePresentationData>* BottomStats);
	bool CanBeApplied();
	bool TryConsume();
	bool IsConsumable();
	bool ValidateDefinition();
};


// Class WillowGame.WillowLightProjectileManager
// 0x0C94 (0x0188 - 0x0E1C)
class AWillowLightProjectileManager : public AActor
{
public:
	class AWillowWeapon*                               WeaponOwner;                                              // 0x0188(0x0004) (Net)
	class APawn*                                       PawnOwner;                                                // 0x018C(0x0004) (Net)
	TArray<struct FLightProjectile>                    MyProjs;                                                  // 0x0190(0x000C) (Component, NeedCtorLink)
	TArray<struct FLightProjectile>                    RemovedProjs;                                             // 0x019C(0x000C) (Component, NeedCtorLink)
	struct FReplicatedLightProjectile                  ReplicatedProjectiles[0x10];                              // 0x01A8(0x0034) (Net)
	float                                              ReplicatedCutoffTime;                                     // 0x04E8(0x0004)
	unsigned char                                      ProjectileCount;                                          // 0x04EC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04ED(0x0003) MISSED OFFSET
	unsigned long                                      bCreatingReplicatedProjectiles : 1;                       // 0x04F0(0x0004) (Transient)
	TArray<struct FBeamState>                          MyBeams;                                                  // 0x04F4(0x000C) (Component, NeedCtorLink)
	struct FReplicatedBeamState                        ReplicatedBeams[0x14];                                    // 0x0500(0x005C) (Net)
	struct FReplicatedBeamEndPoints                    RepBeamEndPoints[0x14];                                   // 0x0C30(0x0018) (Net)
	float                                              LastTimeSeconds;                                          // 0x0E10(0x0004)
	float                                              DamageApplicationInterval;                                // 0x0E14(0x0004)
	float                                              DeadOwnerCheckTime;                                       // 0x0E18(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowLightProjectileManager");
		return ptr;
	}


	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
	void SpawnOverchargedImpactEffect(const struct FImpactInfo& Impact, class UParticleSystem* Template);
	static struct FRotator GetReflectionInaccuracyAngle(class AActor* ProjectileInstigator, float ReflectedInaccuracyModifier);
	static struct FVector GetReflectionDestination(const struct FVector& HitLocation, class AActor* HitActor, class AActor* ProjectileInstigator, struct FReflectionInfo* ReflectionData);
	void CauseBeamRadiusDamage(int BeamIndex, const struct FBeamDamageData& DamageData, const struct FVector& DamageOrigin);
	struct FName GetBoneNameForBeamLock(class USkeletalMesh* Mesh);
	void DeleteBeamsForSource(class AActor* SourceActor, const struct FName& SocketName);
	void DeleteBeamsFor(class AActor* TargetActor);
	void DeleteAllBeamsFromWeapon();
	void DeleteAllBeams();
	void CleanupProjectiles();
	void AddBeam(class UFiringModeDefinition* FiringModeDefinition, class UImpactDefinition* ImpactDefinition, bool bStartLocked, int ParentIndex, struct FBeamDamageData* DamageData, struct FBeamLocationData* SourceData, struct FBeamLocationData* TargetData);
	void AddChildBeam(struct FBeamState* Parent, struct FBeamLocationData* TargetData);
	void AddWeaponBeam(const struct FName& SocketName, class UFiringModeDefinition* FiringModeDefinition);
	int AddProj(const struct FVector& StartTrace, const struct FVector& EndTrace, class APawn* ProjectileInstigator, class UFiringModeDefinition* FiringModeDefinition, bool bStartParticleTracerAtWeapon, bool bOvercharged, bool bRicochetTowardsEnemy);
	void Destroyed();
};


// Class WillowGame.WillowLocalMessage
// 0x0003 (0x0049 - 0x004C)
class UWillowLocalMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowLocalMessage");
		return ptr;
	}


	static struct FString CloseFontColorTag();
	static struct FString OpenFontColorTag(const struct FColor& FontColor);
	static struct FString TrimWhitespace(const struct FString& InString);
};


// Class WillowGame.LocalInventoryRefreshMessage
// 0x0000 (0x004C - 0x004C)
class ULocalInventoryRefreshMessage : public UWillowLocalMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LocalInventoryRefreshMessage");
		return ptr;
	}


	static void ClientInventoryRefresh(class AWillowPlayerController* WPC);
};


// Class WillowGame.LocalTrainingDefinitionMessage
// 0x0000 (0x004C - 0x004C)
class ULocalTrainingDefinitionMessage : public UWillowLocalMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LocalTrainingDefinitionMessage");
		return ptr;
	}


	static void ClientTrainingDefinitionReceive(class AWillowPlayerController* WPC, class UTrainingMessageDefinition* TrainingDefinition, float Duration);
};


// Class WillowGame.LocalTrainingMessage
// 0x0004 (0x004C - 0x0050)
class ULocalTrainingMessage : public UWillowLocalMessage
{
public:
	struct FColor                                      DefaultTrainingMessageColor;                              // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LocalTrainingMessage");
		return ptr;
	}


	static struct FString GetLocalStringForTrainingMessageKey(class AWillowPlayerController* WPC, const struct FString& MessageKey);
	static void ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.ReceivedAmmoMessage
// 0x0028 (0x004C - 0x0074)
class UReceivedAmmoMessage : public UWillowLocalMessage
{
public:
	struct FString                                     ReceivedAmmo;                                             // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelfReceivedAmmo;                                         // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NumberOfRounds;                                           // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	int                                                AmmoFakedRarityLevelForItemColor;                         // 0x0070(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ReceivedAmmoMessage");
		return ptr;
	}


	static struct FColor GetAmmoColor();
	static struct FString GetNumberOfRoundsString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
	static struct FString GetAmmoString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
	static void ClientAmmoReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
};


// Class WillowGame.WillowMapInfo
// 0x000C (0x003C - 0x0048)
class UWillowMapInfo : public UMapInfo
{
public:
	class USwfMovie*                                   TacticalMapMovie;                                         // 0x003C(0x0004) (Edit, Const)
	class AWillowTacticalMapVolume*                    TacticalMapVolume;                                        // 0x0040(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         FrontEndMovieDef;                                         // 0x0044(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowMapInfo");
		return ptr;
	}

};


// Class WillowGame.WillowMissionPickupSpawner
// 0x0018 (0x0188 - 0x01A0)
class AWillowMissionPickupSpawner : public AActor
{
public:
	struct FPointer                                    VfTable_IIMission;                                        // 0x0188(0x0004) (Const, Native, NoExport)
	class UMissionItemDefinition*                      MissionItemDef;                                           // 0x018C(0x0004) (Edit)
	class AWillowWaypoint*                             LinkedAreaWaypoint;                                       // 0x0190(0x0004) (Edit)
	int                                                ObjectiveBit;                                             // 0x0194(0x0004) (Edit, EditConst, DuplicateTransient)
	class AWillowPickup*                               MissionPickup;                                            // 0x0198(0x0004) (Transient)
	class USpriteComponent*                            Sprite;                                                   // 0x019C(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowMissionPickupSpawner");
		return ptr;
	}


	void RunPickupEvent();
	void SetPickupStatus(bool bPickupEnabled);
	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
	void PostBeginPlay();
};


// Class WillowGame.WillowMissionPickupFailsafe
// 0x0014 (0x01A0 - 0x01B4)
class AWillowMissionPickupFailsafe : public AWillowMissionPickupSpawner
{
public:
	class UMissionPopulationAspect*                    LinkedAspect;                                             // 0x01A0(0x0004) (Edit, Const, EditConst)
	class UMissionObjectiveDefinition*                 CompletedObjective;                                       // 0x01A4(0x0004) (Edit, Const)
	class UMissionObjectiveSetDefinition*              ObjectiveSet;                                             // 0x01A8(0x0004) (Edit, Const)
	float                                              TimeToTriggerFailsafe;                                    // 0x01AC(0x0004)
	class AWillowMissionItem*                          MissionItem;                                              // 0x01B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowMissionPickupFailsafe");
		return ptr;
	}


	void EnactFailsafe();
	void CheckFailsafe();
	void SetupFailsafe();
	void WaitingForActivation();
	void SetPickup(class ADroppedPickup* Pickup);
	void SetFailsafePickup();
	void SetPickupStatus(bool bPickupEnabled);
};


// Class WillowGame.WillowObstacleUtility
// 0x002C (0x003C - 0x0068)
class UWillowObstacleUtility : public UObject
{
public:
	unsigned long                                      bDebug : 1;                                               // 0x003C(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x003C(0x0004)
	int                                                GridSize;                                                 // 0x0040(0x0004)
	float                                              MaxTime;                                                  // 0x0044(0x0004)
	float                                              MaxDist;                                                  // 0x0048(0x0004)
	float                                              LastPointBonus;                                           // 0x004C(0x0004)
	TArray<struct FObstacleData>                       Obstacles;                                                // 0x0050(0x000C) (NeedCtorLink)
	TArray<struct FObstaclePoint>                      ObstaclePoints;                                           // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowObstacleUtility");
		return ptr;
	}


	struct FObstacleData GetObstacleData(class AActor* Obstacle);
	bool IsDebugObstacle(class AActor* Obstacle);
	void UnRegisterObstacle(class AActor* Obstacle);
	void RegisterObstacle(class AActor* Obstacle);
};


// Class WillowGame.WillowOnDemandPackageMarker
// 0x0000 (0x003C - 0x003C)
class UWillowOnDemandPackageMarker : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnDemandPackageMarker");
		return ptr;
	}

};


// Class WillowGame.WillowOnlineGameSettings_DataStore
// 0x0000 (0x0098 - 0x0098)
class UWillowOnlineGameSettings_DataStore : public UUIDataStore_OnlineGameSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSettings_DataStore");
		return ptr;
	}


	int GetPlaythrough();
	int GetLevel();
	void OnGameCreated(const struct FName& SessionName, bool bWasSuccessful);
	bool CreateGame(unsigned char ControllerIndex);
};


// Class WillowGame.WillowPauseTicker
// 0x0010 (0x003C - 0x004C)
class UWillowPauseTicker : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<struct FPauseTimerData>                     Timers;                                                   // 0x0040(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPauseTicker");
		return ptr;
	}


	void ClearTimer(const struct FName& inTimerFunc, class UObject* inObj);
	bool IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj);
	void SetTimer(float Rate, bool bLoop, const struct FName& TimerFunc, class UObject* TimerObj);
};


// Class WillowGame.WillowPawn
// 0x0964 (0x0700 - 0x1064)
class AWillowPawn : public AGearboxPawn
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x0700(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDesignerAttributeProvider;                      // 0x0704(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDamageSurface;                                  // 0x0708(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIFaceFXActor;                                    // 0x070C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMeleeAttacker;                                  // 0x0710(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyPawn;                                       // 0x0714(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIStatusEffectTarget;                             // 0x0718(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x071C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIShop;                                           // 0x0720(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIHealable;                                       // 0x0724(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMaterialFadeBehavior;                           // 0x0728(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x072C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDamageable;                                     // 0x0730(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIHitRegionConsumer;                              // 0x0734(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x0738(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyInfoProvider;                               // 0x073C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x0740(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIGearLikenessConsumer;                           // 0x0744(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IINounAttributeProvider;                          // 0x0748(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIUsable;                                         // 0x074C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIAnimProvider;                                   // 0x0750(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                               // 0x0754(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIProjectileReflector;                            // 0x0758(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDynamicObstacle;                                // 0x075C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIExtraImpactEffects;                             // 0x0760(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMapDisplayInfo;                                 // 0x0764(0x0004) (Const, Native, NoExport)
	struct FResourcePoolReference                      ShieldArmor;                                              // 0x0768(0x000C) (Net, RepRetry)
	int                                                ShieldVar;                                                // 0x0774(0x0004) (Net, RepNotify)
	int                                                ShieldMaxVar;                                             // 0x0778(0x0004) (Net)
	unsigned long                                      bHasShieldVar : 1;                                        // 0x077C(0x0004) (Net)
	unsigned long                                      bLastHasShieldVar : 1;                                    // 0x077C(0x0004)
	unsigned long                                      bFixedView : 1;                                           // 0x077C(0x0004)
	unsigned long                                      bIsTyping : 1;                                            // 0x077C(0x0004) (Net)
	unsigned long                                      bForcedOverlay : 1;                                       // 0x077C(0x0004)
	unsigned long                                      bIsInvulnerable : 1;                                      // 0x077C(0x0004)
	unsigned long                                      bShieldAbsorb : 1;                                        // 0x077C(0x0004)
	unsigned long                                      bUpdateEyeheight : 1;                                     // 0x077C(0x0004)
	unsigned long                                      bWeaponBob : 1;                                           // 0x077C(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUsingFootIK : 1;                                         // 0x077C(0x0004) (Transient)
	unsigned long                                      bNotifyBeginFalling : 1;                                  // 0x077C(0x0004)
	unsigned long                                      bNotifyStopFalling : 1;                                   // 0x077C(0x0004)
	unsigned long                                      bNotifyBeginWalking : 1;                                  // 0x077C(0x0004)
	unsigned long                                      bNotifyStopWalking : 1;                                   // 0x077C(0x0004)
	unsigned long                                      bShouldRagdollAfterDeathAnim : 1;                         // 0x077C(0x0004)
	unsigned long                                      bUnderFullRagdollControl : 1;                             // 0x077C(0x0004) (Transient)
	unsigned long                                      bDeathRagdollInitialized : 1;                             // 0x077C(0x0004) (Transient)
	unsigned long                                      bBlendingIntoDeathRagdoll : 1;                            // 0x077C(0x0004) (Transient)
	unsigned long                                      bEquippedWeaponsHidden : 1;                               // 0x077C(0x0004) (Transient)
	unsigned long                                      bHolsteredWeaponsHidden : 1;                              // 0x077C(0x0004) (Transient)
	unsigned long                                      bHolsteredItemsHidden : 1;                                // 0x077C(0x0004) (Transient)
	unsigned long                                      bWeaponParticleAttachmentsHidden : 1;                     // 0x077C(0x0004) (Transient)
	unsigned long                                      bShouldUseAimAtActor : 1;                                 // 0x077C(0x0004) (Net)
	unsigned long                                      bShouldUseAimAtVector : 1;                                // 0x077C(0x0004)
	unsigned long                                      bAlignToSurfaceNormal : 1;                                // 0x077C(0x0004)
	unsigned long                                      bTookCriticalHitThisTick : 1;                             // 0x077C(0x0004)
	unsigned long                                      bWasLastDamageACriticalHit : 1;                           // 0x077C(0x0004)
	unsigned long                                      bBeenRunOver : 1;                                         // 0x077C(0x0004)
	unsigned long                                      bKilledByTechEffect : 1;                                  // 0x077C(0x0004)
	unsigned long                                      bExistsDeathSound : 1;                                    // 0x077C(0x0004)
	unsigned long                                      bExistsCriticalHitSound : 1;                              // 0x077C(0x0004)
	unsigned long                                      bExistsCriticalDeathSound : 1;                            // 0x077C(0x0004)
	unsigned long                                      bExistsRanOverSound : 1;                                  // 0x0780(0x0004)
	unsigned long                                      bExistsTechDeathSound : 1;                                // 0x0780(0x0004)
	unsigned long                                      bUnderMatineeControl : 1;                                 // 0x0780(0x0004) (Transient)
	unsigned long                                      bUnderMatineeAnimControl : 1;                             // 0x0780(0x0004) (Transient)
	unsigned long                                      bResetAnimTree : 1;                                       // 0x0780(0x0004) (Transient)
	unsigned long                                      FaceFXSpeechPending : 1;                                  // 0x0780(0x0004)
	unsigned long                                      bAlwaysPostRender : 1;                                    // 0x0780(0x0004) (Net)
	unsigned long                                      bIsLeaping : 1;                                           // 0x0780(0x0004)
	unsigned long                                      bAIDEBUG_MarkCurrentPawn : 1;                             // 0x0780(0x0004)
	unsigned long                                      NoEnemyBehaviorsRun : 1;                                  // 0x0780(0x0004)
	unsigned long                                      bTargetedBehaviorsRun : 1;                                // 0x0780(0x0004)
	unsigned long                                      bCausePlayerDeath : 1;                                    // 0x0780(0x0004)
	unsigned long                                      bPlayerFellIntoPlayerKillVolume : 1;                      // 0x0780(0x0004)
	unsigned long                                      bBeingRevived : 1;                                        // 0x0780(0x0004)
	unsigned long                                      bInjuredNoTimeout : 1;                                    // 0x0780(0x0004) (Net)
	unsigned long                                      bIsInInjuredBonusTime : 1;                                // 0x0780(0x0004)
	unsigned long                                      bInjuredHasPausedDueToCinematicMode : 1;                  // 0x0780(0x0004)
	unsigned long                                      bTearOffAfterDeath : 1;                                   // 0x0780(0x0004) (Net, RepNotify)
	unsigned long                                      bGibbed : 1;                                              // 0x0780(0x0004)
	unsigned long                                      bDidServerGibPawn : 1;                                    // 0x0780(0x0004) (Net, RepNotify)
	unsigned long                                      bDestroyPawnAfterGoreEffectDeath : 1;                     // 0x0780(0x0004)
	unsigned long                                      bFlinching : 1;                                           // 0x0780(0x0004)
	unsigned long                                      bTakingRadiusDamage : 1;                                  // 0x0780(0x0004)
	unsigned long                                      bMuteHitSound : 1;                                        // 0x0780(0x0004)
	unsigned long                                      bDebugActionSkill : 1;                                    // 0x0780(0x0004) (Transient)
	unsigned long                                      bMeleeWeaponAttached : 1;                                 // 0x0780(0x0004) (Net, RepNotify)
	unsigned long                                      bHideAttachedWeapon : 1;                                  // 0x0780(0x0004) (Edit)
	unsigned long                                      bBigBoy : 1;                                              // 0x0780(0x0004) (Edit)
	unsigned long                                      bInjuredSuicide : 1;                                      // 0x0780(0x0004)
	unsigned long                                      bGaveUp : 1;                                              // 0x0780(0x0004)
	unsigned long                                      bAllowProjectilesToCollideWithSkeletalMesh : 1;           // 0x0780(0x0004) (Transient)
	unsigned long                                      bSwitchingSeats : 1;                                      // 0x0780(0x0004)
	unsigned long                                      bWantsFullLOSTrace : 1;                                   // 0x0784(0x0004) (Transient)
	unsigned long                                      bInterpYawOnly : 1;                                       // 0x0784(0x0004)
	unsigned long                                      bCanUse : 1;                                              // 0x0784(0x0004)
	unsigned long                                      bTurning : 1;                                             // 0x0784(0x0004) (Transient)
	unsigned long                                      bSlowTurning : 1;                                         // 0x0784(0x0004) (Transient)
	unsigned long                                      bBeingHealed : 1;                                         // 0x0784(0x0004) (Transient)
	unsigned long                                      bActiveObstacle : 1;                                      // 0x0784(0x0004) (Transient)
	unsigned long                                      bRMWantsToMove : 1;                                       // 0x0784(0x0004) (Net)
	unsigned long                                      bRMForceStop : 1;                                         // 0x0784(0x0004)
	unsigned long                                      bStuck : 1;                                               // 0x0784(0x0004)
	int                                                LastShieldVar;                                            // 0x0788(0x0004)
	int                                                LastShieldMaxVar;                                         // 0x078C(0x0004)
	float                                              IntrinsicArmor;                                           // 0x0790(0x0004) (Net, Transient)
	float                                              IntrinsicArmorBaseValue;                                  // 0x0794(0x0004) (Const)
	TArray<class UAttributeModifier*>                  IntrinsicArmorModifierStack;                              // 0x0798(0x000C) (Const, Transient, NeedCtorLink)
	unsigned char                                      WeaponHand;                                               // 0x07A4(0x0001)
	unsigned char                                      ServerPhysics;                                            // 0x07A5(0x0001) (Transient)
	unsigned char                                      HolsteredWeaponSlotUsed;                                  // 0x07A6(0x0001) (Transient)
	unsigned char                                      CurrentNumOfHolsteredWeaponSlots;                         // 0x07A7(0x0001) (Transient)
	unsigned char                                      ReplicatedGearHiddenState;                                // 0x07A8(0x0001) (Net, Transient, RepNotify)
	unsigned char                                      SecondWindReason;                                         // 0x07A9(0x0001) (Transient)
	unsigned char                                      InjuredState;                                             // 0x07AA(0x0001) (Net, RepNotify)
	unsigned char                                      InjuredDeadState;                                         // 0x07AB(0x0001) (Net, RepNotify)
	unsigned char                                      ForceTechDeathIndex;                                      // 0x07AC(0x0001) (Net)
	unsigned char                                      MeshBodyCompositionIndex;                                 // 0x07AD(0x0001)
	unsigned char                                      InterpRotMode;                                            // 0x07AE(0x0001)
	unsigned char                                      InterpContRotMode;                                        // 0x07AF(0x0001)
	unsigned char                                      InterpLocMode;                                            // 0x07B0(0x0001)
	unsigned char                                      InterpRelRotMode;                                         // 0x07B1(0x0001)
	unsigned char                                      InterpRelLocMode;                                         // 0x07B2(0x0001)
	unsigned char                                      bCloaked;                                                 // 0x07B3(0x0001) (Transient)
	unsigned char                                      bCloakedReplicated;                                       // 0x07B4(0x0001) (Net, Transient, RepNotify)
	unsigned char                                      CloakOverride;                                            // 0x07B5(0x0001) (Transient)
	unsigned char                                      bOvercharged;                                             // 0x07B6(0x0001) (Transient)
	unsigned char                                      bOverchargedBaseValue;                                    // 0x07B7(0x0001) (Const)
	TArray<class UAttributeModifier*>                  bOverchargedModifierStack;                                // 0x07B8(0x000C) (Const, Transient, NeedCtorLink)
	class USkeletalMeshComponent*                      HeadMesh;                                                 // 0x07C4(0x0004) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x07C8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UAudioComponent*                             PawnAmbientSound;                                         // 0x07CC(0x0004) (ExportObject, Component, EditInline, Deprecated)
	class UAudioComponent*                             WeaponAmbientSound;                                       // 0x07D0(0x0004) (ExportObject, Component, EditInline, Deprecated)
	float                                              Bob;                                                      // 0x07D4(0x0004) (Net, Transient, Config, GlobalConfig)
	float                                              BobBaseValue;                                             // 0x07D8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BobModifierStack;                                         // 0x07DC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BobTime;                                                  // 0x07E8(0x0004)
	struct FVector                                     WalkBob;                                                  // 0x07EC(0x000C)
	float                                              EyeHeightModifier;                                        // 0x07F8(0x0004) (Net, Transient)
	float                                              EyeHeightModifierBaseValue;                               // 0x07FC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  EyeHeightModifierModifierStack;                           // 0x0800(0x000C) (Const, Transient, NeedCtorLink)
	float                                              EyeHeightModifierSpeed;                                   // 0x080C(0x0004) (Net, Transient)
	float                                              EyeHeightModifierSpeedBaseValue;                          // 0x0810(0x0004) (Const)
	TArray<class UAttributeModifier*>                  EyeHeightModifierSpeedModifierStack;                      // 0x0814(0x000C) (Const, Transient, NeedCtorLink)
	float                                              AppliedEyeHeightModifier;                                 // 0x0820(0x0004)
	float                                              SlopeBoostFriction;                                       // 0x0824(0x0004)
	struct FVector                                     FixedViewLoc;                                             // 0x0828(0x000C)
	struct FRotator                                    FixedViewRot;                                             // 0x0834(0x000C)
	float                                              CameraScale;                                              // 0x0840(0x0004) (Config, GlobalConfig)
	float                                              CameraScaleRight;                                         // 0x0844(0x0004) (Config, GlobalConfig)
	float                                              CameraScaleUp;                                            // 0x0848(0x0004) (Config, GlobalConfig)
	float                                              CameraScaleStep;                                          // 0x084C(0x0004)
	float                                              CurrentCameraScale;                                       // 0x0850(0x0004)
	struct FVector2D                                   CameraScaleRange;                                         // 0x0854(0x0008)
	float                                              FreeCameraTargetForwardOffset;                            // 0x085C(0x0004)
	float                                              CurrentFreeCameraTargetForwardOffset;                     // 0x0860(0x0004)
	float                                              FreeCamTargetForwardOffsetStep;                           // 0x0864(0x0004)
	struct FVector2D                                   FreeCamTargetForwardOffsetRange;                          // 0x0868(0x0008)
	struct FVector                                     Cached3rdPersonCamLoc;                                    // 0x0870(0x000C)
	struct FRotator                                    Cached3rdPersonCamRot;                                    // 0x087C(0x000C)
	float                                              OldLocationZ;                                             // 0x0888(0x0004)
	float                                              MeshSlopeOffset;                                          // 0x088C(0x0004) (Transient)
	float                                              MeshSlopeOffsetPercent;                                   // 0x0890(0x0004) (Edit, Const)
	float                                              MaxMeshSlopeOffsetPercent;                                // 0x0894(0x0004) (Edit, Const)
	float                                              CustomGravityScaling;                                     // 0x0898(0x0004) (Net, Transient)
	float                                              CustomGravityScalingBaseValue;                            // 0x089C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  CustomGravityScalingModifierStack;                        // 0x08A0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastPainSound;                                            // 0x08AC(0x0004)
	float                                              DeathTime;                                                // 0x08B0(0x0004)
	int                                                LookYaw;                                                  // 0x08B4(0x0004)
	class UBodyClassDeathDefinition*                   MyDeathDef;                                               // 0x08B8(0x0004) (Net)
	class USpecialMoveDefinition*                      CurrentDeathAnimation;                                    // 0x08BC(0x0004)
	float                                              DeathImpactAngle;                                         // 0x08C0(0x0004) (Transient)
	class UClass*                                      BloodEmitterClass;                                        // 0x08C4(0x0004)
	class AWillowEquipAbleItem*                        EquippedItems[0x4];                                       // 0x08C8(0x0004) (Net, RepNotify)
	class UItemDefinition*                             EquippedItemDefs[0x4];                                    // 0x08D8(0x0004) (Net, RepNotify)
	struct FHolsteredGearDisplaySlot                   HolsteredItemDisplaySlots[0x4];                           // 0x08E8(0x0008) (Transient)
	struct FHolsteredGearDisplaySlot                   HolsteredWeaponDisplaySlots[0x3];                         // 0x0908(0x0008) (Transient)
	class AWillowWeapon*                               HolsteredWeaponSlots[0x3];                                // 0x0920(0x0004) (Net, Transient, RepNotify)
	class UBodyClassDefinition*                        BodyClass;                                                // 0x092C(0x0004) (Edit, Net, RepNotify)
	struct FColor                                      ShieldColor;                                              // 0x0930(0x0004) (Net)
	int                                                ShouldBulletsPenetrateEnemies;                            // 0x0934(0x0004)
	float                                              BulletPenetratedEnemyDamageScale;                         // 0x0938(0x0004) (Transient)
	float                                              BulletPenetratedEnemyDamageScaleBaseValue;                // 0x093C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletPenetratedEnemyDamageScaleModifierStack;            // 0x0940(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BulletReflectionOffEnemyChance;                           // 0x094C(0x0004) (Transient)
	float                                              BulletReflectionOffEnemyChanceBaseValue;                  // 0x0950(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletReflectionOffEnemyChanceModifierStack;              // 0x0954(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BulletReflectedOffEnemyDamageScale;                       // 0x0960(0x0004) (Transient)
	float                                              BulletReflectedOffEnemyDamageScaleBaseValue;              // 0x0964(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletReflectedOffEnemyDamageScaleModifierStack;          // 0x0968(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BulletReflectionOffSelfChance;                            // 0x0974(0x0004) (Transient)
	float                                              BulletReflectionOffSelfChanceBaseValue;                   // 0x0978(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletReflectionOffSelfChanceModifierStack;               // 0x097C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BulletReflectedOffSelfDamageScale;                        // 0x0988(0x0004) (Transient)
	float                                              BulletReflectedOffSelfDamageScaleBaseValue;               // 0x098C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletReflectedOffSelfDamageScaleModifierStack;           // 0x0990(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BulletReflectedOffSelfDamageTakenScale;                   // 0x099C(0x0004) (Transient)
	float                                              BulletReflectedOffSelfDamageTakenScaleBaseValue;          // 0x09A0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletReflectedOffSelfDamageTakenScaleModifierStack;      // 0x09A4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BulletRicochetTowardsEnemyChance;                         // 0x09B0(0x0004) (Transient)
	float                                              BulletRicochetTowardsEnemyChanceBaseValue;                // 0x09B4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletRicochetTowardsEnemyChanceModifierStack;            // 0x09B8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BulletRicochetedTowardsEnemyDamageScale;                  // 0x09C4(0x0004) (Transient)
	float                                              BulletRicochetedTowardsEnemyDamageScaleBaseValue;         // 0x09C8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BulletRicochetedTowardsEnemyDamageScaleModifierStack;     // 0x09CC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatedMeleeDamageAdded;                               // 0x09D8(0x0004) (Transient)
	float                                              InstigatedMeleeDamageAddedBaseValue;                      // 0x09DC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatedMeleeDamageAddedModifierStack;                  // 0x09E0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              PlayerAvertDeathChance;                                   // 0x09EC(0x0004) (Transient)
	float                                              PlayerAvertDeathChanceBaseValue;                          // 0x09F0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  PlayerAvertDeathChanceModifierStack;                      // 0x09F4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              FireRateMultiplier;                                       // 0x0A00(0x0004)
	float                                              WeaponSwapTimeMultiplier;                                 // 0x0A04(0x0004) (Net, Transient)
	float                                              WeaponSwapTimeMultiplierBaseValue;                        // 0x0A08(0x0004) (Const)
	TArray<class UAttributeModifier*>                  WeaponSwapTimeMultiplierModifierStack;                    // 0x0A0C(0x000C) (Const, Transient, NeedCtorLink)
	int                                                bReloading;                                               // 0x0A18(0x0004)
	TArray<struct FItemPoolInfo>                       ItemPoolList;                                             // 0x0A1C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class AWillowMind*>                         Trackers;                                                 // 0x0A28(0x000C) (NeedCtorLink)
	class AActor*                                      AimAtActor;                                               // 0x0A34(0x0004) (Net)
	struct FVector                                     AimAtVector;                                              // 0x0A38(0x000C)
	float                                              TakeHitTime;                                              // 0x0A44(0x0004)
	float                                              MaxFootstepEffectDistance;                                // 0x0A48(0x0004)
	float                                              LastPainSoundTime;                                        // 0x0A4C(0x0004)
	float                                              LastPainSoundLength;                                      // 0x0A50(0x0004)
	float                                              NextDotResponseTime;                                      // 0x0A54(0x0004)
	float                                              SummedPain;                                               // 0x0A58(0x0004)
	class UAnimNodeBlendPerBone*                       ArmBoneBlend;                                             // 0x0A5C(0x0004) (Transient)
	class USkelControlLeftHandGripWeapon*              LeftHandIK;                                               // 0x0A60(0x0004) (Transient)
	TArray<struct FAIHoldData>                         LeftHandIKHolds;                                          // 0x0A64(0x000C) (Transient, NeedCtorLink)
	class UInterpGroup*                                MatineeInterpGroup;                                       // 0x0A70(0x0004) (Transient)
	class AActor*                                      LookAtTarget;                                             // 0x0A74(0x0004) (Net)
	struct FVector                                     LookAtOffset;                                             // 0x0A78(0x000C) (Net)
	float                                              LookAtSpeedOverride;                                      // 0x0A84(0x0004) (Net, Transient)
	class UWillowAnimNodeAimOffset*                    AimOffset;                                                // 0x0A88(0x0004) (Transient)
	class UWillowSkelControl_LookAtActor*              HeadLookAt;                                               // 0x0A8C(0x0004) (Transient)
	int                                                LastAnimSetsCount;                                        // 0x0A90(0x0004) (Transient)
	TArray<class UAnimSet*>                            WeaponAnimSets;                                           // 0x0A94(0x000C) (Transient, NeedCtorLink)
	int                                                DesiredMeshYawOffset;                                     // 0x0AA0(0x0004) (Net, Transient)
	int                                                MeshYawOffset;                                            // 0x0AA4(0x0004) (Transient)
	float                                              LeapGravityScale;                                         // 0x0AA8(0x0004)
	class AWillowInteractiveObject*                    RejuvenateInteraction;                                    // 0x0AAC(0x0004)
	TArray<struct FAppliedAttributeEffect>             SavedInjuredModifiers;                                    // 0x0AB0(0x000C) (NeedCtorLink)
	class APawnInteractionProxy*                       InjuredInteractionProxy;                                  // 0x0ABC(0x0004)
	float                                              flInjuredTargetedTime;                                    // 0x0AC0(0x0004)
	float                                              InjuredTargetedDurationMultiplier;                        // 0x0AC4(0x0004)
	float                                              TimeToBeRevivedMultiplier;                                // 0x0AC8(0x0004) (Net, Transient)
	float                                              TimeToBeRevivedMultiplierBaseValue;                       // 0x0ACC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  TimeToBeRevivedMultiplierModifierStack;                   // 0x0AD0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              TotalBleedoutTime;                                        // 0x0ADC(0x0004)
	float                                              SuccessiveBleedoutTimePenalty;                            // 0x0AE0(0x0004)
	float                                              InjuredBaseDelay;                                         // 0x0AE4(0x0004)
	struct FName                                       InjuredScreenFadeParticleTag;                             // 0x0AE8(0x0008)
	TArray<struct FScreenParticleModifier>             InjuredScreenFadeScreenParticleModifiers;                 // 0x0AF0(0x000C) (NeedCtorLink)
	class UMaterialInterface*                          InjuredScreenFadeMaterialInterface;                       // 0x0AFC(0x0004)
	struct FName                                       InjuredScreenFadeMatParamName;                            // 0x0B00(0x0008)
	float                                              ReviveTime;                                               // 0x0B08(0x0004)
	float                                              SavedPostProcessDurationMultiplier;                       // 0x0B0C(0x0004)
	class AWillowPawn*                                 Reviver;                                                  // 0x0B10(0x0004)
	float                                              InjuredBonusDamageScale;                                  // 0x0B14(0x0004)
	float                                              InjuredAnimLength;                                        // 0x0B18(0x0004)
	class UHitRegionHelper*                            MyHitRegionHelper;                                        // 0x0B1C(0x0004)
	float                                              TargetPriority;                                           // 0x0B20(0x0004) (Edit, Transient)
	float                                              TargetPriorityBaseValue;                                  // 0x0B24(0x0004) (Const)
	TArray<class UAttributeModifier*>                  TargetPriorityModifierStack;                              // 0x0B28(0x000C) (Const, Transient, NeedCtorLink)
	int                                                ActorSpawnCost;                                           // 0x0B34(0x0004) (Edit)
	float                                              FlinchStartTime;                                          // 0x0B38(0x0004)
	class UStatusEffectsComponent*                     StatusEffectComp;                                         // 0x0B3C(0x0004) (ExportObject, Component, EditInline)
	struct FDamageEventSummary                         FullRadiusDamageSummary;                                  // 0x0B40(0x0078)
	struct FInstanceDataSet                            InstanceDataState;                                        // 0x0BB8(0x000C) (Component, NeedCtorLink)
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                              // 0x0BC4(0x0010) (Net, Transient, RepNotify)
	struct FReplicatedCoordinatedEffect                ReplicatedCFX;                                            // 0x0BD4(0x0008) (Net, Transient, RepNotify)
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x0BDC(0x000C) (Edit, NeedCtorLink)
	TArray<class UInstancedDesignerAttribute*>         DesignerAttributes;                                       // 0x0BE8(0x000C) (NeedCtorLink)
	struct FBloodSplatterTrace                         ReplicatedBloodSplatter;                                  // 0x0BF4(0x0020) (Net, RepNotify)
	float                                              CommerceMarkup;                                           // 0x0C14(0x0004) (Net)
	struct FMeleeOverTimeState                         MeleeState;                                               // 0x0C18(0x0034) (NeedCtorLink)
	struct FGoreEffect                                 ReplicatedGoreEffect;                                     // 0x0C4C(0x0024) (Net, RepNotify)
	class AWillowLightProjectileManager*               LightProjMgr;                                             // 0x0C70(0x0004) (Net, Transient)
	class AWillowLightProjectileManager*               OffHandLightProjMgr;                                      // 0x0C74(0x0004) (Net, Transient)
	class UWillowImpactDefinition*                     ExtraImpact_FirstShot;                                    // 0x0C78(0x0004) (Transient)
	class UWillowImpactDefinition*                     ExtraImpact_LastShot;                                     // 0x0C7C(0x0004) (Transient)
	float                                              OnGround;                                                 // 0x0C80(0x0004)
	float                                              CurrentPawnSpeed;                                         // 0x0C84(0x0004)
	float                                              VelocityDotProduct;                                       // 0x0C88(0x0004)
	float                                              AccelerationDotProduct;                                   // 0x0C8C(0x0004)
	struct FVector                                     DeathRagDollMomentum;                                     // 0x0C90(0x000C)
	struct FName                                       DeathHitBoneName;                                         // 0x0C9C(0x0008)
	float                                              RD_NextSlideTime;                                         // 0x0CA4(0x0004)
	float                                              RD_NextImpactTime;                                        // 0x0CA8(0x0004)
	float                                              RD_NextImpactAkEventTime;                                 // 0x0CAC(0x0004)
	int                                                SprintFootstepCount;                                      // 0x0CB0(0x0004)
	int                                                StrideFootstepCount;                                      // 0x0CB4(0x0004)
	class AActionSkill*                                MyActionSkill;                                            // 0x0CB8(0x0004) (Net, RepNotify)
	int                                                CurrentActionSkillActiveAbilityCount;                     // 0x0CBC(0x0004) (Transient)
	float                                              NextActionSkillActiveAbilityTime;                         // 0x0CC0(0x0004) (Transient)
	int                                                CurrentActionSkillCooldownAbilityCount;                   // 0x0CC4(0x0004) (Transient)
	float                                              NextActionSkillCooldownAbilityTime;                       // 0x0CC8(0x0004) (Transient)
	class UStaticMeshComponent*                        MeleeWeaponMesh;                                          // 0x0CCC(0x0004) (ExportObject, Component, EditInline)
	float                                              HitRegionHealthScaleAttribute;                            // 0x0CD0(0x0004) (Transient)
	float                                              HitRegionHealthScaleAttributeBaseValue;                   // 0x0CD4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  HitRegionHealthScaleAttributeModifierStack;               // 0x0CD8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              RevivalHealthMultiplier;                                  // 0x0CE4(0x0004) (Transient)
	float                                              RevivalHealthMultiplierBaseValue;                         // 0x0CE8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  RevivalHealthMultiplierModifierStack;                     // 0x0CEC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ForcedShotZMomentum;                                      // 0x0CF8(0x0004) (Transient)
	float                                              ForcedShotZMomentumBaseValue;                             // 0x0CFC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ForcedShotZMomentumModifierStack;                         // 0x0D00(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SecondsBeforeConsideringRagdollRemoval;                   // 0x0D0C(0x0004) (Config)
	float                                              SecondsBeforeVisibleRagdollRemoval;                       // 0x0D10(0x0004) (Config)
	float                                              SecondsBetweenRagdollRemovalAttempts;                     // 0x0D14(0x0004) (Config)
	float                                              SecondsBeforePhysicsShutsDown;                            // 0x0D18(0x0004) (Config)
	float                                              RBForceSleepTime;                                         // 0x0D1C(0x0004)
	struct FMaterialScalarFadeReplication              MatScalarFadeInfo;                                        // 0x0D20(0x0018) (Net, RepNotify)
	float                                              MatScalarFadeStartTime;                                   // 0x0D38(0x0004)
	float                                              MatScalarFadeCurValue;                                    // 0x0D3C(0x0004)
	float                                              MatScalarLastTick;                                        // 0x0D40(0x0004)
	float                                              MatScalarTickRate;                                        // 0x0D44(0x0004)
	int                                                ShieldEffectCount;                                        // 0x0D48(0x0004)
	int                                                BloodEffectCount;                                         // 0x0D4C(0x0004)
	float                                              ImpactEffectTimestamp;                                    // 0x0D50(0x0004)
	int                                                NumSuccessiveInjuries;                                    // 0x0D54(0x0004) (Transient)
	int                                                NumSuccessiveInjuriesBaseValue;                           // 0x0D58(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NumSuccessiveInjuriesModifierStack;                       // 0x0D5C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastInjuryTime;                                           // 0x0D68(0x0004)
	float                                              MostRecentShieldDamageTaken;                              // 0x0D6C(0x0004)
	FScriptInterface                                   TargetPatsy;                                              // 0x0D70(0x0008) (Transient)
	int                                                NumAICurrentlyTargeting;                                  // 0x0D78(0x0004) (Transient)
	float                                              InterpRotTime;                                            // 0x0D7C(0x0004)
	struct FRotator                                    InterpRotDiff;                                            // 0x0D80(0x000C)
	float                                              InterpRotElapsedTime;                                     // 0x0D8C(0x0004)
	float                                              InterpContRotTime;                                        // 0x0D90(0x0004)
	struct FRotator                                    InterpContRotDiff;                                        // 0x0D94(0x000C)
	float                                              InterpContRotElapsedTime;                                 // 0x0DA0(0x0004)
	float                                              InterpLocTime;                                            // 0x0DA4(0x0004)
	struct FVector                                     InterpLocDiff;                                            // 0x0DA8(0x000C)
	float                                              InterpLocElapsedTime;                                     // 0x0DB4(0x0004)
	float                                              InterpRelRotTime;                                         // 0x0DB8(0x0004)
	struct FRotator                                    InterpRelRotDiff;                                         // 0x0DBC(0x000C)
	float                                              InterpRelRotElapsedTime;                                  // 0x0DC8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0DCC(0x0004) MISSED OFFSET
	struct FQuat                                       InterpRelRotStart;                                        // 0x0DD0(0x0010)
	struct FQuat                                       InterpRelRotGoal;                                         // 0x0DE0(0x0010)
	float                                              InterpRelLocTime;                                         // 0x0DF0(0x0004)
	struct FVector                                     InterpRelLocDiff;                                         // 0x0DF4(0x000C)
	float                                              InterpRelLocElapsedTime;                                  // 0x0E00(0x0004)
	class UMissionObjectiveDefinition*                 MissionObjectiveToUpdateOnDeath;                          // 0x0E04(0x0004)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0E08(0x0004)
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                          // 0x0E0C(0x000C) (Net, RepNotify)
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                                  // 0x0E18(0x0004) (Net, RepNotify)
	int                                                NumReplicatedNouns;                                       // 0x0E1C(0x0004) (Net)
	TArray<struct FNounAttributeState>                 NounState;                                                // 0x0E20(0x000C) (NeedCtorLink)
	struct FReplicatedNounAttributeState               ReplicatedNouns[0x14];                                    // 0x0E2C(0x0010) (Net)
	float                                              DistToNavMesh;                                            // 0x0F6C(0x0004) (Transient)
	float                                              VertDistToNavMesh;                                        // 0x0F70(0x0004) (Transient)
	float                                              LastNavMeshCheck;                                         // 0x0F74(0x0004) (Transient)
	float                                              NavMeshCheckRate;                                         // 0x0F78(0x0004) (Transient)
	struct FVector                                     LastCheckNavMeshLocation;                                 // 0x0F7C(0x000C) (Transient)
	struct FBasedPosition                              NearestPositionOnNavMesh;                                 // 0x0F88(0x0034) (Transient)
	float                                              AvoidanceSpeedScale;                                      // 0x0FBC(0x0004) (Transient)
	float                                              NextCringeTime;                                           // 0x0FC0(0x0004) (Transient)
	class USpecialMove_Cringe*                         CurrentCringe;                                            // 0x0FC4(0x0004) (Transient)
	float                                              LastTurnTime;                                             // 0x0FC8(0x0004) (Transient)
	float                                              CurrentTurnTime;                                          // 0x0FCC(0x0004) (Transient)
	int                                                TurnGoalYaw;                                              // 0x0FD0(0x0004) (Transient)
	TArray<FScriptInterface>                           RBCollisionListeners;                                     // 0x0FD4(0x000C) (Transient, NeedCtorLink)
	TArray<FScriptInterface>                           RBCollisionListenersToRemove;                             // 0x0FE0(0x000C) (Transient, NeedCtorLink)
	class AWillowPawn*                                 CharmedChild;                                             // 0x0FEC(0x0004) (Transient)
	class AWillowPawn*                                 CharmedParent;                                            // 0x0FF0(0x0004) (Net, Transient)
	int                                                SimpleAnimState;                                          // 0x0FF4(0x0004) (Transient)
	int                                                RepSimpleAnimState;                                       // 0x0FF8(0x0004) (Net, Transient, RepNotify)
	TArray<struct FSimpleAnimData>                     SimpleAnimInfo;                                           // 0x0FFC(0x000C) (Transient, NeedCtorLink)
	class UStanceTypeDefinition*                       CurrentStance;                                            // 0x1008(0x0004) (Net, Transient, RepNotify)
	class UStanceTypeDefinition*                       OverrideStance;                                           // 0x100C(0x0004) (Transient)
	class UGearboxDialogNameTag*                       CurrentNameTag;                                           // 0x1010(0x0004) (Net, Transient)
	float                                              BarrelSourceTimerEnd;                                     // 0x1014(0x0004)
	float                                              PlantSourceTimerEnd;                                      // 0x1018(0x0004)
	int                                                CurrentBreathingLoopIndex;                                // 0x101C(0x0004) (Transient)
	struct FAkPlayingInfo                              BreathingLoopPlayingInfo;                                 // 0x1020(0x0008) (Transient, Component)
	int                                                GameStage;                                                // 0x1028(0x0004)
	class UEnvironmentTagDefinition*                   CurrentEnvironmentTag;                                    // 0x102C(0x0004) (Net, Transient, RepNotify)
	class UEnvironmentTagDefinition*                   CurrentAnimEnvironmentTag;                                // 0x1030(0x0004) (Transient)
	float                                              OverrideNavSize;                                          // 0x1034(0x0004)
	float                                              OverrideNavHeight;                                        // 0x1038(0x0004)
	float                                              MinStuckTime;                                             // 0x103C(0x0004) (Edit)
	float                                              MaxStuckSpeed;                                            // 0x1040(0x0004) (Edit)
	float                                              StartStuckTime;                                           // 0x1044(0x0004)
	struct FVector                                     StartStuckLoc;                                            // 0x1048(0x000C)
	class USpecialMoveDefinition*                      EmoteAnim;                                                // 0x1054(0x0004) (Transient)
	class USpecialMoveDefinition*                      ReplicatedEmoteAnim;                                      // 0x1058(0x0004) (Net, Transient, RepNotify)
	float                                              NextPlayerEventTime;                                      // 0x105C(0x0004) (Transient)
	float                                              RepMeshScale;                                             // 0x1060(0x0004) (Net, Transient, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPawn");
		return ptr;
	}


	float GetFallingDamageScale();
	void TryBlink();
	void ServerPostPlayerEvent(unsigned char PEM, class AActor* TheInstigator, class AActor* Other);
	void PostPlayerEvent(unsigned char PEM, class AActor* TheInstigator, class AActor* Other);
	void ForcePostPlayerEvent(unsigned char PEM, class AActor* TheInstigator, class AActor* Other);
	void PlayPostEnvironmentTransitionAnimation();
	float PlayPreEnvironmentTransitionAnimation();
	bool RequiresEnvironmentTransitionAnimation(class UEnvironmentTagDefinition* FromEnvironmentTag, class UEnvironmentTagDefinition* ToEnvironmentTag);
	void EnvironmentTransitionAnimFinished();
	void SetEnvironmentTag(class UEnvironmentTagDefinition* InEnvironmentTag);
	void RemoveEnvironmentTag(class UEnvironmentTagDefinition* InEnvironmentTag);
	void AddEnvironmentTag(class UEnvironmentTagDefinition* InEnvironmentTag, bool bOverwriteExistingTag);
	struct FString GetMapDisplayName();
	struct FString GetMapDisplayHeader();
	void PlayExtraImpactEffects(unsigned char BulletFromClip, struct FImpactInfo* InImpactInfo);
	void SetExtraImpactEffect(unsigned char BulletFromClip, class UWillowImpactDefinition* Definition);
	void ForceDownState();
	void SetRevivePct(float NewRevivePct);
	float GetRevivePct();
	bool MovementTransitionNodeIsIdle();
	bool PrismNodeIsActive();
	unsigned char GetDefaultRootMotionRotationMode();
	unsigned char GetDefaultRootMotionMode();
	class AWillowWeapon* FindMatchingHolsteredWeapon(unsigned char LikenessType, unsigned char GroupIndex);
	class AWillowInventory* GetLikenessInventory(unsigned char Source, unsigned char GroupIndex);
	bool ShouldRefreshLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
	void AssumeLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
	void ClientShieldTriggered();
	void ShieldTriggered();
	bool IsBeingHealed();
	void SetBeingHealed(bool bNewBeingHealed);
	bool CanPlayEmoteAnim(class USpecialMoveDefinition* NewEmoteAnim);
	void SetEmoteAnim(class USpecialMoveDefinition* NewEmoteAnim);
	void EmoteAnimTimer();
	void ReleaseLeftHandIK(const struct FName& HoldName, class UObject* IKTag);
	void HoldLeftHandIK(const struct FName& HoldName, class UObject* IKTag);
	void CheckLeftHandIK();
	float GetBulletReflectedOffSelfDamageScale();
	float GetBulletReflectedOffEnemyDamageScale();
	float GetBulletReflectedOffSelfDamageTakenScale();
	float GetEnemyReflectionChance();
	float GetSelfReflectionChance();
	void GetObstacleInfo(struct FObstacleData* Data);
	class AActor* GetObstacleActor();
	bool GetMagnetData(struct FVector* MagnetLoc, struct FVector* MagnetVel);
	void SetObstacleVelocity(struct FVector* NewVelocity);
	bool CanAvoidObstacle(struct FObstacleData* Obstacle);
	bool CanAvoidObstacles();
	void SetObstacleActive(bool bActive);
	bool IsObstacleActive();
	class APawn* GetParent();
	void Uncharm();
	void Charm(class AWillowPawn* NewCharmedParent);
	bool IsCharmed();
	float GetFireIntervalChanceModifier();
	float GetStatusEffectBaseChanceModifier(class UObject* Context);
	float GetStatusEffectChanceModifier(class UObject* Context);
	float GetStatusEffectBaseDamage(class UObject* Context);
	void NotifyRBCollisionListeners(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactSide, struct FCollisionImpactData* RigidCollisionData);
	void FinishRemovingRBCollisionListeners();
	void RemoveRBCollisionListener(const FScriptInterface& Listener);
	void AddRBCollisionListener(const FScriptInterface& Listener);
	void GetPetActors(TArray<class AActor*>* out_PetActorList);
	void ClearBodyCompositionInstance();
	FScriptInterface GetBodyInfoProvider();
	void ApplyPreviewBodyComposition();
	void ChangeInstanceDataSwitch(const struct FName& Switch, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	void NotifyUserCouldNotAffordAttemptedUse(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void ScrapeStances(TArray<class UStanceTypeDefinition*>* OutStances);
	unsigned char GetDefaultStance(class UStanceTypeDefinition* CheckStance);
	bool IsDefaultStance(class UStanceTypeDefinition* CheckStance);
	void ClientStanceUpdated();
	bool SetStance(class UStanceTypeDefinition* NewStance);
	void SetDefaultStance();
	void ClearStance();
	class UBodyClassDefinition* GetStanceBody();
	class UStanceTypeDefinition* GetStance();
	bool TryToTurn(int YawDiff, bool bMoving);
	class UTurnDefinition* GetCurrentTurnDefinition();
	bool CanTurn();
	void DoneTurning();
	float GetHeadLookMinDot();
	bool UseRootOnlyYawRotation();
	struct FVector GetAimDirection();
	struct FVector GetPivotPoint(bool bForFiring);
	bool CanUseAimOffsets();
	void AdjustRotation(float DeltaTime, bool bMoving, struct FRotator* NewRotation);
	class UBodyClassDefinition* GetCringeBody();
	void DoneCringing();
	void StopCringe();
	void StartCringe(unsigned char DamageType, bool bDOT);
	bool IsCringing(class UBodyClassDefinition* CringeBody);
	struct FBasedPosition GetNearestPositionOnNavMesh();
	float GetFlyNavMeshCheckDist();
	float GetVertDistToNavMesh();
	float GetDistToNavMesh();
	bool IsAboveNavMesh();
	void CheckNavMeshDist();
	bool CloakForcedOff();
	bool CloakForcedOn();
	bool CloakForced();
	static void StaticSetCanCloak(bool bCanCloak);
	static bool StaticCanCloak();
	void SpawnCloakParticle(class UParticleSystem* CloakPS);
	void ForceCloak(unsigned char NewCloakBehavior);
	bool ShouldCloak(unsigned char Type);
	void CheckReplicatedCloak();
	bool IsCloaked();
	bool CanCloak();
	void Uncloak();
	void Cloak();
	class UWillowDialogGlobalsDefinition* GetDialogGlobals();
	void SetDialogNameTag(class UGearboxDialogNameTag* NewName);
	void GetDialogGroups(TArray<class UGearboxDialogGroup*>* Groups);
	class UGearboxDialogNameTag* GetDialogNameTag();
	void GetOutTheWay(class APawn* OtherPawn);
	void StuckOnPawn(class APawn* OtherPawn);
	void OnInterpPawn(class UWillowSeqAct_InterpPawn* Action);
	void InterpRelativeRotation(const struct FRotator& NewRelRot, float InterpTime, bool bLinear);
	void InterpRelativeLocation(const struct FVector& NewRelLoc, float InterpTime, bool bLinear);
	void InterpControllerRotation(const struct FRotator& NewRot, float InterpTime, bool bLinear);
	void InterpRotation(const struct FRotator& NewRot, float InterpTime, bool bLinear, bool bYawOnly);
	void InterpLocation(const struct FVector& NewLoc, float InterpTime, bool bLinear, bool bNoZ);
	void NotifyActionSkillWeaponsRestricted(bool bWeaponsRestricted);
	void NotifyActionSkillFakePause(bool bPaused);
	void NotifyActionSkillWeaponSwitched(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void NotifyActionSkillOfKilledEnemy(class AWillowPawn* aTargetPawn);
	void ToggleActionSkillDebug();
	void NotifyHUDOfEnableActionSkill(class AActionSkill* Skill, bool bEnable);
	void EnableActionSkill(bool bEnable, class USkillDefinition* Skill, class AWillowPawn* TargetPawn);
	void ClientEndActionSkill();
	void EndActionSkill();
	void ActionSkillEnded();
	void ActionSkillStarted(class USkillDefinition* Skill);
	bool IsActionSkillRunning();
	void SetActionSkillSoundMode(class USoundMode* NewSoundMode);
	void SetDefaultSoundMode();
	void HitByVehicle(class AVehicle* Collider);
	void ClientSetSwitchingSeats(bool bInSwitchingSeats);
	void SetSwitchingSeats(bool bInSwitchingSeats);
	void Behavior_Killed(class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType);
	void CrushedByActor(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	void StartReplicatedMaterialScalarFade();
	void Behavior_UseMaterialScalarFadeForGoreDeath(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime, bool bDestroyActorAfterGoreEffect);
	void Behavior_MaterialScalarFade(const struct FName& ScalarName, float StartValue, float EndValue, float FadeTime);
	void Behavior_RegisterTargetable(bool bUnregister);
	int GetResetCost();
	void ResetInventory();
	unsigned char GetTransactionStatus(class AWillowInventory* Item, class AWillowPlayerController* WPC);
	bool PlayerBuyBackItem(class AWillowInventory* Item, class AWillowPlayerController* WPC);
	void PlayerBuyItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity, bool bWasItemOfTheDay);
	void PlayerSellItem(class AWillowInventory* Item, class AWillowPlayerController* WPC, int Quantity);
	struct FShopItemData GetFeaturedItem(class AWillowPlayerController* WPC);
	void GetBuyBackList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* BuyBackItems);
	void GetInventoryList(class AWillowPlayerController* WPC, TArray<struct FShopItemData>* InventoryList);
	unsigned char GetShopType();
	class UBehaviorAliasLookupDefinition* BehaviorAlias_GetLookupDefinition();
	void ServerClearStatusEffects(bool bKillImmediately);
	void Behavior_ClearStatusEffects(bool bKillImmediately);
	struct FVector GetTargetableLocation();
	void RemoveSoldInventory(class AWillowInventory* SoldItem);
	void GetWeaponList(class AWillowPlayerController* WPC, TArray<class AWillowWeapon*>* WeaponList);
	void GetItemList(class AWillowPlayerController* WPC, TArray<class AWillowItem*>* ItemList);
	void SetHandIKTarget(int Hand, class UObject* TargetRef, const struct FName& TargetAttachmentName);
	void EnableHandIK(int Hand, bool bEnableIK);
	class UWillowSkelControlHandPlacement* FindHandIKSelControl(int Hand);
	void DetachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void AttachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void MeleeMeshPreRemoveNotify(class UStaticMeshComponent* MeleeMeshComp);
	void MeleeMeshPostInitNotify(class UStaticMeshComponent* MeleeMeshComp);
	void Behavior_Fire(class UFiringModeDefinition* FiringModeDefinition, const struct FVector& Direction, const FScriptInterface& WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, const struct FName& FireSourceSocket, bool bTreatDirectionAsDestination);
	bool CanReceiveStatusEffects();
	void ReactToPrimaryStatusEffect(class UStatusEffectDefinition* StatusEffect);
	float GetBoundingSphereRadius();
	class UObject* GetAttributeContextSource();
	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
	void AttachEmitter(class AEmitter* E, const struct FName& SocketName);
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate();
	TArray<struct FName> GetDefaultStatusEffectSockets();
	class UStatusEffectsComponent* GetStatusEffectsComponent();
	class AWillowAIPawn* GetAWillowAIPawn();
	class AWillowPlayerPawn* GetAWillowPlayerPawn();
	class AWillowPawn* GetAWillowPawn();
	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
	void GetMeleeState(float* StartTime, float* LastTime, struct FVector* StartLoc, struct FRotator* StartRot);
	bool ShouldIgnoreInstigatorVelocity();
	bool HasActorAlreadyBeenHitByMelee(class AActor* HitActor);
	void AddActorToListOfHitActors(class AActor* HitActor);
	void EndMeleeOverTime();
	void BeginMeleeOverTime(class UMeleeDefinition* MeleeDefinition);
	float GetMeleeAttackerMass();
	void GetMeleeTraceSourceLocationAndRotation(struct FVector* OutTraceStart, struct FRotator* OutTraceStartRotation);
	class APawn* GetMeleeInstigator();
	class AActor* GetMeleeTraceSourceActor();
	class UFaceFXAsset* GetFaceFXAsset();
	struct FRotator GetAimRotation();
	int GetSellingPriceForInventory(class AWillowInventory* InventoryForSale, class AWillowPlayerController* WPC, int Quantity);
	unsigned char GetCurrencyTypeInventoryIsSoldIn(class AWillowInventory* InventoryForSale);
	void UpdateShieldVars();
	void GetExpInfo(int* ExpLevelValue);
	void SetPatsy(const FScriptInterface& NewPatsy);
	FScriptInterface GetPatsy();
	bool HasShieldVar();
	bool HasHomingTargetComponents();
	bool IsValidHomingTarget();
	float GetTargetingModifier();
	bool DisplayParentInfo();
	void GetAllBarInfo(TArray<struct FInfoBarData>* BarData);
	void GetMyBarInfo(TArray<struct FInfoBarData>* BarData);
	class UImpactDefinition* GetUntouchImpact();
	class UImpactDefinition* GetTouchImpact();
	bool CanSplash();
	void TraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int TraceFlags, float TouchTime);
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	void ConditionalRemoveHitRegionBehaviors(TArray<struct FInstanceDataUnion> RemovedData);
	bool RemoveInstanceData(const struct FName& DataName);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	class UInstancedDesignerAttribute* GetInstancedDesignerAttribute(class UAttributeDefinition* Definition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	class UInstancedDesignerAttribute* CreateDesignerAttribute(class UDesignerAttributeDefinition* Definition, const struct FName& DesignerAttributeName, unsigned char AttributeDataType);
	void RunMostlyDeadBehaviors();
	void MostlyKilledBy(class APawn* EventInstigator);
	void ClientSetInjuredBleedoutValues(float InInjuredBaseDelay, float InTimeToBeRevivedMultiplier, int InNumSuccessiveInjuries);
	void PassSecondWindReasonToLeviathan(class AWillowPlayerController* WPC, unsigned char Reason);
	void ClearSecondWindReason();
	void SetSecondWindReason(unsigned char Reason);
	void PreDeathAnimDone();
	bool ShouldPlayPreDeathAnimation();
	void PlaySpecialMoveOverride();
	bool ShouldDelaySecondWind();
	void InjuredDeathAnimDone();
	void Behavior_GiveInjuredPlayerSecondWind(bool bDontCountAsKill);
	void RevivePawnHealthAndShield();
	void ClearEnemyTargetQueues();
	void InjuredDeadInitRagdoll();
	void StartInjuredDeathSequence();
	void StartInjuredPreDeathSequence();
	void InjuredRespawn();
	void InjuredSuicide();
	void ServerInjuredSuicide();
	void ClientStartFade(float InFadeOpacity, float InFadeDuration, const struct FColor& InFadeColor);
	void OnCameraFade(class USeqAct_CameraFade* Action);
	void ClientOnRevived();
	void NotifyTeleported();
	void SetBeingRevived(bool bNewBeingRevived, class AWillowPawn* NewReviver);
	class UInjuredDefinition* GetInjuredDefinition();
	void SetInjuredDeadState(unsigned char InjuredDeadStateVal);
	void SetInjuredState(unsigned char InjuredStateVal);
	void KilledEnemy(class AWillowPawn* aTargetPawn);
	void SwitchToSidearm();
	void EndInjuredState();
	void GoFromInjuredToMostlyDeadClient();
	void GoFromInjuredToMostlyDead();
	void GoToInjuredAndTargetedClient();
	void GoToInjuredAndTargeted();
	void GoFromHealthToInjuredClient();
	void GoFromInjuredToHealthyClient();
	void GoFromInjuredToHealthy();
	void ClearPlayerInjuredState();
	void SetupPlayerInjuredState();
	void ResurrectAtLocation(class AActor* HoldingLoc, class AActor* TeleportLoc, unsigned char ResurrectReason, class APlayerReplicationInfo* DeadPlayerPRI);
	void PlacePlayerInLevel(bool bSkipHoldingCell);
	void ResurrectPlayer(unsigned char ResurrectReason, bool bSkipHoldingCell, class APlayerReplicationInfo* DeadPlayerPRI, class ATravelStation* DestinationStation);
	class ATeleporterDestination* GetBestPlayerPlacementPoint(bool bLevelTravel);
	void RejuvenateFromInjured();
	bool HandleHealthDepleted(class AController* InstigatedBy, class UClass* DamageType, const struct FVector& HitLocation, const FScriptInterface& DamageCauser, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void CausePlayerDeath(bool bFellIntoPlayerKillVolume);
	void OutOfDuelBounds();
	bool PlayInjured(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void DestroyInjuredInteraction();
	void SetupInjuredInteraction();
	void SetBaseEyeheight();
	void PreKilledBy(class APawn* EventInstigator);
	void HeuristicPlayDeath(class UDamageTypeDefinition* DamageType, unsigned char KillType);
	void StopDriving(class AVehicle* V);
	void StartDriving(class AVehicle* V, bool SkipAnim);
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void RootMotionModeChanged(class USkeletalMeshComponent* SkelComp);
	void SetMovementPhysics();
	bool IsHardAttached();
	void AttachActorTo(class AActor* AttachedActor, const struct FName& BoneName);
	void CheckPainSounds();
	void PlayPainSound();
	void StealAmmo(class AController* DamageInstigator, class UClass* DamageType);
	void BigBoyTakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	bool TakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, const FScriptInterface& DamageCauser, TArray<struct FName> Bones, class UDamagePipeline* Pipeline);
	struct FVector BigBoyTrace(const struct FVector& Start, const FScriptInterface& DamageCauser, struct FTraceHitInfo* HitInfo);
	void AddRadiusDamageSummary(const struct FDamageEventSummary& OtherSummary);
	void InitRadiusDamageSummary();
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, const FScriptInterface& DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline);
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, bool bIsShieldRestore);
	void TookDamageFromFriendly(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	struct FName GetTransformedKillStat();
	void FireProjectileDamagedEvents(class AController* InstigatedBy, const FScriptInterface& DamageCauser, const struct FDamageEventSummary& Damage);
	void ProcessDamageTakenSkillEvents(class UDamagePipeline* Pipeline, class AController* InstigatedBy, class UClass* DamageType);
	void ProcessDamageDealtSkillEvents(class UDamagePipeline* Pipeline, class AController* VictimController, class UClass* DamageType);
	void TookDamageFromEnemy(class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	float ModifyParentDamage(float Damage);
	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	bool PreTestAnimation(const struct FName& Sequence, class UAnimSet* AnimSet);
	class UAudioComponent* GetFaceFXAudioComponent();
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay);
	class USkeletalMeshComponent* GetFaceFXMeshComponent();
	void SetAudioCueOpenedByFaceFX(bool Opened);
	bool PlayFaceAnimation(const struct FString& FaceFXGroupName, const struct FString& FaceFXAnimName, class USoundCue* SoundCueToPlay);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PlayFootImpactEffect(class UWillowImpactDefinition* ImpactDefinition, int FootDown, bool bPlaySound, bool bReplicate);
	bool PlayWaterImpactEffects(class UWillowImpactDefinition* ImpactDefinition, bool bReplicate);
	bool DoJump(bool bUpdating);
	void PlayLanded(float ImpactVel);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void FinishAnimControl(class UInterpGroup* InInterpGroup);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void BeginAnimControl(class UInterpGroup* InInterpGroup);
	void LastMatineeAnimFinished();
	void MAT_FinishAnimControl(class UInterpGroup* InInterpGroup);
	void MAT_BeginAnimControl(class UInterpGroup* InInterpGroup);
	struct FName GetFootstepBone(int FootstepIndex);
	void TakeFallingDamage();
	bool AllowFootstepEffects(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PlayFootStepSound(int FootDown, bool bFirstPerson);
	bool CanReachOutToTarget(class AActor* Other, float FOV, float flReachRadius);
	void UpdateWeaponOnPossess(bool bVehicleTransition);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void ApplyAttributeStartingValues();
	void GetAttributeStartingValuesFromCharacterClass(class UWillowCharacterClassDefinition* WillowCharacterClass);
	void SetShieldResourcePoolDefinition(class UResourcePoolDefinition* Definition, class AResourcePoolManager** ResourcePoolManager);
	void SetHealthResourcePoolDefinition(class UResourcePoolDefinition* Definition, class AResourcePoolManager** ResourcePoolManager);
	void AddPoolItems(bool bReadiedItems, TArray<struct FItemPoolInfo>* ItemsToAdd);
	void StartCrouch(float HeightAdjust);
	void EndCrouch(float HeightAdjust);
	void ShouldCrouch(bool bCrouch);
	void TurnOff();
	struct FVector WeaponBob(float BobDamping);
	bool PoweredUp();
	void EquipItem(class AWillowEquipAbleItem* WEItem);
	void UnequipItem(class AWillowEquipAbleItem* WEItem, bool bReplace);
	class AWillowEquipAbleItem* GetEquippableItemInSlot(unsigned char ItemSlot);
	struct FVector GetItemTossVelocity(bool bWeapon);
	void TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity);
	class ADroppedPickup* TossSpecificItem(class AWillowInventory* Item, const struct FVector& TossVel);
	void DiscardInventory(bool bDestroyContents);
	void SetDefaultInventory(TArray<struct FItemPoolInfo>* NewDefaultInventory);
	void AddDefaultWeapon();
	void DropLootOnDeath(class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition);
	void AddDefaultInventory();
	void ClientStopWeaponFiring();
	bool StopWeaponFiring();
	bool BotFire(bool bFinished);
	bool StopFiring();
	void ResetFreeCamForwardOffset();
	void AdjustFreeCamForwardOffset(bool bIn);
	void ResetCameraScale();
	void AdjustCameraScale(bool bIn);
	static void UpdateAndDestroyNonVisibleActor(class AActor* TargetActor, float TimerLength, float ConfigLifeSpan, const struct FName& TimerFuncName);
	void EndRagdoll();
	void FinishDeathRagdoll();
	void StartDeathRagdoll(bool bAnimationDriven, bool bEnableContactNotification);
	void StartBlendIntoDeathRagdoll();
	void TearOffAfterDeathTimer();
	void PlayDeathAnim(class USpecialMoveDefinition* DeathAnim, const struct FName& HitBoneName, const struct FVector& HitLocation, bool bMotorizedRagdoll);
	bool CanPlayDeathAnim();
	int GetTechDeathIndexForDamageType(class UDamageTypeDefinition* DamageTypeDefinition);
	bool PlayTechDeath(class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo* HitInfo);
	bool MatchesAtLeastOneTechDeathAnim(class UDamageTypeDefinition* DamageTypeDef);
	void ApplyExtraRagdollDeathImpulsesAndStatusEffect();
	void PlayDying(class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, const struct FVector& HitLoc);
	void StopSounds();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, class UDamagePipeline* Pipeline);
	void TellOpportunityPawnIsDead(bool bKeepCorpse);
	void CheckGoToDyingState();
	void ResetHitRegionHealth(class UBodyHitRegionDefinition* HitRegion);
	void PlayHealingReaction(struct FDamageReactionData* Data);
	void PlayDamageReaction(const struct FName& HitBone, bool bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum);
	void PlayBloodSplatter(class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& Momentum, float DamageSeverityPercent);
	void PlayReplicatedDamage(class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bPlayDeath);
	void PlayHealingHit(class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void SetupImpactsForPlayHit(class APawn* SomePawn, bool bNoBlood, class UWillowImpactDefinition* WillowImpactDef, class UDamagePipeline* Pipeline, struct FVector* HitLocation, struct FVector* ShotDirection, struct FTraceHitInfo* HitInfo);
	void UpdatePlayHitInfo(bool bNoBlood, class UDamagePipeline* Pipeline, struct FVector* HitLocation, struct FVector* ShotDirection);
	void UpdatePlayHitEffectCounters();
	void ResetShieldColorToDefault();
	void SetShieldColor(const struct FColor& NewShieldColor);
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	bool CalcInjuredDeadCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool CalcInjuredCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool CalcThirdPersonCam(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void CalcFreeCam(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool CalcCameraBehind(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void ReloadWeapon(unsigned char FireModeNum);
	struct FName GetCurrentAimOffsetNodeName();
	void SetAimOffsetProfile(const struct FName& ProfileName);
	void ReattachWeapons();
	void WeaponChanged(class AWeapon* TheWeapon, bool bOffHandWeapon);
	bool RequestChangeWeaponVisibility(bool bIsVisible);
	void OnGearLikenessFadeOutEffectFinished(class UObject* EffectTarget);
	float StartGearLikenessFadeOutEffect(unsigned char LikenessOf, unsigned char GroupIndex);
	void StartGearLikenessFadeInEffect(unsigned char LikenessOf, unsigned char GroupIndex);
	void SetHolsteredGearVisibility(bool bWeaponsVisible, bool bItemsVisible);
	void SetHolsteredWeapon(int SlotIdx, class AWillowWeapon* NewWeapon, bool bRefreshComponents);
	void ReplaceHolsteredWeapon(class AWillowWeapon* OldWeapon, class AWillowWeapon* NewWeapon, bool bRefreshComponents);
	void SetUpperBodyMovementBlendState(bool bBlendEnabled);
	void UpdateAnimSets();
	void TryOffHandWeaponChanged();
	void TryWeaponChanged();
	bool ShouldAutoReadyMissionWeapon();
	void WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication);
	void WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& HitLocation);
	void PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	bool PlayingInjuredSMD();
	class USpecialMoveDefinition* GetBodyWeaponSMD(unsigned char BodyAction, class AWeapon* TheWeapon);
	void FlashLocationUpdated(class AWeapon* InWeapon, const struct FVector& InFlashLocation, bool bViaReplication, int Index);
	void FixedView(const struct FString& VisibleMeshes);
	void SetFixedView(bool Enabled, const struct FString& VisibleMeshes);
	void SetOwnerVisibility(bool bVisible);
	void SetInstanceDataOwnerVisibility(bool bVisible);
	void SetWeaponOwnerVisibility(bool bOwnerVisible);
	void SetWeaponVisibility(bool bWeaponVisible);
	void SetWeaponParticleAttachmentVisibility(bool bParticlesVisible);
	void EndViewTarget(class APlayerController* PC);
	void BecomeViewTarget(class APlayerController* PC);
	struct FVector GetPawnViewLocation();
	void SetHand(unsigned char NewWeaponHand);
	void OnShieldFull();
	void OnShieldDepleted(class AController* DamageInstigator, unsigned char DamageType);
	bool IsFullyArmored();
	unsigned char GetDamageSurfaceTypeFromHit(struct FTraceHitInfo* HitInfo);
	unsigned char GetDefaultDamageSurfaceType();
	float AdjustMomentumForSurfaceType(float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, struct FTraceHitInfo* HitInfo);
	void NotifyDamageTaken(struct FDamageEventSummary* DamageSummary);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, const struct FTraceHitInfo& HitInfo);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline, float* InDamage, float* DamageSeverityPercent, struct FVector* Momentum, struct FTraceHitInfo* HitInfo);
	void AllPawnFloors();
	void EnableProtectionTimer();
	bool ShieldAbsorbedAmmo(class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb);
	float GetIntrinsicArmor();
	bool TryFullBodyGib(float Damage, class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitLocation, const struct FVector& Momentum);
	void ReplicateDamageEffect(class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bWasHeal);
	void HealDamageOnHitRegion(class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary);
	void AddDamageToHitRegion(class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FDamageEventSummary* DamageSummary);
	void GetHitRegionHealthValues(class UBodyHitRegionDefinition* HitRegion, float* Health, float* MaxHealth);
	void SetShieldStrength(float ShieldValue);
	float GetMaxShieldStrength();
	float GetShieldStrength();
	void BeganWalking(unsigned char PreviousPhysics);
	void StoppedWalking();
	void BeganFalling(unsigned char PreviousPhysics);
	void StoppedFalling();
	void OnEquippedItemsChange();
	void BodySelectClass(class UBodyClassDefinition* InBodyClass);
	void DetachParticleSystem(class UParticleSystemComponent* PSC);
	void PlayRagDollEffect(class UPhysicalMaterial* HitMaterial, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactSide, struct FCollisionImpactData* RigidCollisionData);
	void GetAnims(TArray<class UGearboxAnimDefinition*>* OutAnims);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void InitializeScrapedStanceProviders();
	void InitializeBehaviorProviders();
	void SetupSkeletalMeshPhysics();
	void SetupSkeletalMeshPhysicsForPhysXEffects();
	void SetPawnAnimInfo();
	void SetDeathDefinition(class UBodyClassDeathDefinition* DeathDef);
	void ApplyBodyClassStartingValues();
	void DestroyShieldArmor();
	void Destroyed();
	void RemoveWaypoints();
	void SetLookAtTarget(class AActor* NewTarget, const struct FVector& NewOffset);
	void PostRenderForAlways(class APlayerController* PC, class UCanvas* Canvas, class AWillowHUD* WHUD);
	void UpdateClientFloorValue();
	struct FVector GetDefaultMeshOffset();
	void ValidateHitRegions();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	int GetNextExpLevelPoints();
	bool IsInjuredDead();
	bool IsStaggered();
	void RemoveAllStatusEffects();
	void FullyReplenishShields();
	void FullyReplenishLife();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStageForSpawnedInventory(int NewInventoryGameStage);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStageForSpawnedInventory();
	int GetGameStage();
	void SetAimAtVector(const struct FVector& NewAimAtVector);
	void SetAimAtActor(class AActor* NewAimAtActor);
	static bool IsPawnPursuitDebugEnabled();
	static void TogglePawnPursuitDebug();
	void RefreshPawnGearLikenessComponents();
	void InitializePawnMeshes();
	void BuildScriptAnimSetList();
	bool RestoreAnimSetsToDefault();
	bool IsReloading();
	bool IsSplitScreen();
	void InitializeRBPhysics();
	unsigned char GetDefaultPhysics();
	void SetDefaultPhysics();
	unsigned char GetOpinion(class UObject* Other);
};


// Class WillowGame.WillowAIPawn
// 0x02C0 (0x1064 - 0x1324)
class AWillowAIPawn : public AWillowPawn
{
public:
	struct FPointer                                    VfTable_IIMissionDirector;                                // 0x1064(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIFocusable;                                      // 0x1068(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IITimerBehavior;                                  // 0x106C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IICustomizable;                                   // 0x1070(0x0004) (Const, Native, NoExport)
	TArray<class UCylinderComponent*>                  SecondaryCylinders;                                       // 0x1074(0x000C) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	class UPrimitiveComponent*                         LastEncroachedPrimitive;                                  // 0x1080(0x0004) (ExportObject, Transient, Component, EditInline)
	class AWillowMind*                                 MyWillowMind;                                             // 0x1084(0x0004) (Transient)
	class APopulationPoint*                            MySpawnPoint;                                             // 0x1088(0x0004) (Net, Transient)
	class UWillowClanDefinition*                       ClanDef;                                                  // 0x108C(0x0004) (Net, Transient, RepNotify)
	class AWillowAIPawn*                               SpawnParent;                                              // 0x1090(0x0004) (Net, Transient)
	int                                                ExpLevel;                                                 // 0x1094(0x0004) (Net)
	int                                                GameStageForSpawnedInventory;                             // 0x1098(0x0004)
	int                                                AwesomeLevel;                                             // 0x109C(0x0004)
	float                                              ExperiencePointMultiplier;                                // 0x10A0(0x0004) (Transient)
	float                                              ExperiencePointMultiplierBaseValue;                       // 0x10A4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExperiencePointMultiplierModifierStack;                   // 0x10A8(0x000C) (Const, Transient, NeedCtorLink)
	int                                                NumLevelUps;                                              // 0x10B4(0x0004)
	struct FName                                       MountedInstanceDataName;                                  // 0x10B8(0x0008) (Transient)
	unsigned char                                      TransformType;                                            // 0x10C0(0x0001) (Net, Transient)
	unsigned char                                      bInjured;                                                 // 0x10C1(0x0001) (Net, Transient)
	unsigned char                                      bUsable[0x2];                                             // 0x10C2(0x0001) (Transient)
	unsigned char                                      bCostsToUse[0x2];                                         // 0x10C4(0x0001) (Transient)
	unsigned char                                      CostsToUseType[0x2];                                      // 0x10C6(0x0001) (Transient)
	class UAIClassDefinition*                          AIClass;                                                  // 0x10C8(0x0004) (Edit)
	unsigned long                                      bMigratedAIClass : 1;                                     // 0x10CC(0x0004) (Edit, Const, EditConst)
	unsigned long                                      bMigratedAIClass2 : 1;                                    // 0x10CC(0x0004) (Edit, Const, EditConst)
	unsigned long                                      bOverrideAutoAimRange : 1;                                // 0x10CC(0x0004) (Const)
	unsigned long                                      bOverrideAutoAimOrigin : 1;                               // 0x10CC(0x0004) (Const)
	unsigned long                                      bDefaultInventoryAdded : 1;                               // 0x10CC(0x0004)
	unsigned long                                      bDebugUsingAIInspector : 1;                               // 0x10CC(0x0004)
	unsigned long                                      DoesVehicleAllowMeToDropLoot : 1;                         // 0x10CC(0x0004) (Transient)
	unsigned long                                      bLeaping : 1;                                             // 0x10CC(0x0004)
	unsigned long                                      bDodging : 1;                                             // 0x10CC(0x0004) (Transient)
	unsigned long                                      bDodgeLeft : 1;                                           // 0x10CC(0x0004) (Transient)
	unsigned long                                      bDodgeProjectile : 1;                                     // 0x10CC(0x0004) (Transient)
	unsigned long                                      bIsCharging : 1;                                          // 0x10CC(0x0004) (Net, Transient)
	unsigned long                                      bInKnockback : 1;                                         // 0x10CC(0x0004) (Transient)
	unsigned long                                      bIsPatrolling : 1;                                        // 0x10CC(0x0004) (Transient)
	unsigned long                                      bPerchAttached : 1;                                       // 0x10CC(0x0004) (Transient)
	unsigned long                                      bSkelUpdate_SkipWhileIdle : 1;                            // 0x10CC(0x0004) (Edit)
	unsigned long                                      bCurrentlyThrottled : 1;                                  // 0x10CC(0x0004) (Transient)
	unsigned long                                      bHideInfoOnHud : 1;                                       // 0x10CC(0x0004) (Transient)
	unsigned long                                      bPlayingRotationAudio : 1;                                // 0x10CC(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bDisableServerRotation : 1;                               // 0x10CC(0x0004)
	unsigned long                                      bAwardedExperienceForKill : 1;                            // 0x10CC(0x0004) (Transient)
	unsigned long                                      bHeadLookOnHold : 1;                                      // 0x10CC(0x0004) (Net, Transient)
	float                                              AutoAimRangeOverride;                                     // 0x10D0(0x0004) (Edit, Const)
	struct FVector                                     AutoAimOriginOverride;                                    // 0x10D4(0x000C) (Edit, Const)
	class UMaterialInstanceConstant*                   DebugPawnMarkerInst;                                      // 0x10E0(0x0004) (Transient)
	class URB_BodyInstance*                            PhysicsVehicleCollisionBody;                              // 0x10E4(0x0004) (Transient)
	class URB_BodySetup*                               PhysicsVehicleCollisionBodySetup;                         // 0x10E8(0x0004) (Transient)
	class AVehicle*                                    LastRunOverByVehicle;                                     // 0x10EC(0x0004) (Transient)
	int                                                LastRunOverByWheelIndex;                                  // 0x10F0(0x0004) (Transient)
	float                                              LastRunOverByTime;                                        // 0x10F4(0x0004) (Transient)
	TArray<struct FRagdollDeathImpulseStruct>          RagdollDeathExtraImpulses;                                // 0x10F8(0x000C) (Transient, NeedCtorLink)
	class UStatusEffectDefinition*                     RagdollDeathExtraStatusEffect;                            // 0x1104(0x0004) (Transient)
	class AWillowPlayerController*                     PlayerMaster;                                             // 0x1108(0x0004)
	struct FString                                     MasteredDisplayName;                                      // 0x110C(0x000C) (Const, Localized, NeedCtorLink)
	class APlayerReplicationInfo*                      PlayerMasterPRI;                                          // 0x1118(0x0004) (Net, RepNotify)
	class AWillowPlayerController*                     ThoughtlockMaster;                                        // 0x111C(0x0004)
	float                                              EnteredVehicleTime;                                       // 0x1120(0x0004) (Transient)
	float                                              ExitedVehicleTime;                                        // 0x1124(0x0004) (Transient)
	struct FStaggerStateData                           StaggerState;                                             // 0x1128(0x0030) (Net, Transient, Component, RepNotify)
	class UWillowStaggerAnimNodeBlend*                 StaggerRecoveryBlend;                                     // 0x1158(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x115C(0x0004) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                                  // 0x1160(0x0040) (Const, Net, Native)
	float                                              AngErrorAccumulator;                                      // 0x11A0(0x0004) (Const, Native)
	class UMissionDirectivesDefinition*                MissionDirectives;                                        // 0x11A4(0x0004) (Edit, Net, EditInline, RepNotify)
	class UParticleSystemComponent*                    MissionDirectorParticle;                                  // 0x11A8(0x0004) (ExportObject, Transient, Component, EditInline)
	float                                              LeapGravity;                                              // 0x11AC(0x0004)
	float                                              LeapStartTime;                                            // 0x11B0(0x0004)
	float                                              LeapTotalTime;                                            // 0x11B4(0x0004)
	struct FVector                                     LeapStartLoc;                                             // 0x11B8(0x000C)
	struct FVector                                     LeapStartVelocity;                                        // 0x11C4(0x000C)
	float                                              NextDodgeTime;                                            // 0x11D0(0x0004) (Transient)
	class UWillowFormationComponent*                   CurrentFormation;                                         // 0x11D4(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FVector                                     CoverMantleLerpDelta;                                     // 0x11D8(0x000C)
	class UWillowCoverComponent*                       CoverComponent;                                           // 0x11E4(0x0004) (ExportObject, Component, EditInline)
	struct FWillowCoverState                           MyCoverState;                                             // 0x11E8(0x0014) (Net, RepNotify)
	class UAnimNodeSpecialMoveBlend*                   CoverBlendNode;                                           // 0x11FC(0x0004)
	TArray<class APawn*>                               PawnsUsingMe;                                             // 0x1200(0x000C) (Transient, NeedCtorLink)
	TArray<class UMissionDefinition*>                  MissionsAcceptedByPrimaryUser;                            // 0x120C(0x000C) (Transient, NeedCtorLink)
	class APerch*                                      CurrentPerch;                                             // 0x1218(0x0004) (Net, Transient)
	struct FPerchStateData                             PerchState;                                               // 0x121C(0x0030) (Net, Transient, RepNotify)
	class UProjectileDefinition*                       PerchProjectile;                                          // 0x124C(0x0004) (Transient)
	struct FDamageLocationData                         DamageLocationInfo;                                       // 0x1250(0x0010) (Net, Transient, RepNotify)
	struct FTimerBehaviorUserState                     BehaviorTimers;                                           // 0x1260(0x0024)
	float                                              ItemTossSpeed;                                            // 0x1284(0x0004) (Edit, Const)
	TArray<class AActor*>                              ItemTossTargetActors;                                     // 0x1288(0x000C) (Transient, NeedCtorLink)
	class UInteractionIconDefinition*                  InteractionIconOverride[0x2];                             // 0x1294(0x0004) (Transient)
	int                                                CostsToUseAmount[0x2];                                    // 0x129C(0x0004) (Transient)
	float                                              SkelUpdate_FullThrottleDistance;                          // 0x12A4(0x0004) (Edit)
	float                                              SkelUpdate_FullThrottleTime;                              // 0x12A8(0x0004) (Edit)
	float                                              SkelUpdate_MinThrottleDistance;                           // 0x12AC(0x0004) (Edit)
	float                                              SkelUpdate_MaxThrottleDistance;                           // 0x12B0(0x0004) (Edit)
	float                                              SkelUpdate_MinThrottleTime;                               // 0x12B4(0x0004) (Edit)
	float                                              SkelUpdate_MaxThrottleTime;                               // 0x12B8(0x0004) (Edit)
	float                                              LastThrottleCheck;                                        // 0x12BC(0x0004) (Transient)
	float                                              ThrottledDeltaTime;                                       // 0x12C0(0x0004) (Transient)
	float                                              LastUpdateTime;                                           // 0x12C4(0x0004) (Transient)
	struct FSplineAnimPathData                         SAP_Data;                                                 // 0x12C8(0x0010) (Net, RepNotify)
	class UAnimNodeSequence*                           SAP_AnimSeq;                                              // 0x12D8(0x0004)
	float                                              SAP_TotalAnimDistance;                                    // 0x12DC(0x0004)
	float                                              SAP_TotalSplineDistance;                                  // 0x12E0(0x0004)
	float                                              SAP_CurrentSplineDistance;                                // 0x12E4(0x0004)
	float                                              SAP_LastAnimTime;                                         // 0x12E8(0x0004)
	struct FRotator                                    SAP_TotalRotationOffset;                                  // 0x12EC(0x000C)
	struct FVector                                     CachedCrawlerFloorAdjust;                                 // 0x12F8(0x000C) (Transient)
	float                                              LastCrawlerFloorAdjustTime;                               // 0x1304(0x0004) (Transient)
	float                                              CachedCrawlerFloorAdjustHeight;                           // 0x1308(0x0004) (Transient)
	float                                              RevivePct;                                                // 0x130C(0x0004) (Net)
	struct FRotator                                    ServerRotation;                                           // 0x1310(0x000C) (Net)
	class UWillowClientNavigationHandle*               ClientNavigationHandle;                                   // 0x131C(0x0004)
	int                                                NameListIndex;                                            // 0x1320(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIPawn");
		return ptr;
	}


	void ApplyExtraRagdollDeathImpulsesAndStatusEffect();
	void RegisterExtraDeathImpulse(const struct FVector& Impulse, const struct FVector& Offset, const struct FName& BoneName, bool VelocityRatherThanForce, bool TransformImpulseByVelocityDirection);
	void OnPlayerClosedMissionUI(class AWillowPlayerController* ThePlayer);
	void OnPlayerOpenedMissionUI(class AWillowPlayerController* ThePlayer);
	void SetSplineAnimPath(class ASplineActor* StartSpline, const struct FName& AnimSeqName, bool bReversePath);
	void UpdateClientFloorValue();
	class UGearboxNavigationHandle* GetNavigationHandle();
	bool CanTalk();
	void ResetDefaultRotationRate();
	void UpdateLookAtTarget();
	void PlayFootStepSound(int FootDown, bool bFirstPerson);
	void ConditionalCreateDebugPawnMarkerInst(class UMaterial* ParentMaterial);
	static bool IsDebugAIRotationEnabled();
	static void ToggleDebugAIRotation();
	static bool IsDebugAIFlightEnabled();
	static void ToggleDebugAIFlight();
	void PlayTaunt();
	void CancelTauntTimer();
	void StartTauntTimer();
	void SetRevivePct(float NewRevivePct);
	float GetRevivePct();
	void ClearPlayerInjuredState();
	struct FVector GetItemTossVelocity(bool bWeapon);
	class AActor* GetClosestTossTarget();
	void OnAISetItemTossTarget(class UWillowSeqAct_AISetItemTossTarget* inAction);
	void OnTimerEvent(unsigned char EventType, const struct FBehaviorParameters& EventData);
	bool SetTimerState(unsigned char TimerId, const struct FBehaviorTimerState& TimerState);
	bool GetTimerState(unsigned char TimerId, struct FBehaviorTimerState* TimerState);
	float GetTimeSeconds();
	void GetMeleeTraceSourceLocationAndRotation(struct FVector* OutTraceStart, struct FRotator* OutTraceStartRotation);
	unsigned char TranslateToDenStat(unsigned char Type);
	void RemoveDenStat(unsigned char StatType);
	void AddDenStat(unsigned char StatType);
	class UBodyClassDefinition* GetHitLocationBody();
	void AddHitLocation(const struct FVector& NewHitLoc);
	void Uncloak();
	void Cloak();
	void Behavior_ChangeUsabilityCost(unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType);
	void SetUsable(bool bNewUsable, class UActorComponent* UsedComponent, unsigned char UsedType);
	void Behavior_ChangeUsability(unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType);
	bool IsNeutral(class UObject* anObject);
	bool IsEnemy(class UObject* anObject);
	void PlayUnprovokedAnim();
	void PlayProvokedAnim(class AActor* Provoker);
	bool HoldingCombatPerch();
	void MatchCombatPerch(class AWillowProjectile* Projectile);
	void UpdatePerchState(class APerch* PerchBase);
	void FillInPerchData(class APerch* PerchBase);
	void DropCombatPerch();
	bool HasAnyMissionsForPlayer();
	struct FVector GetMissionDirectorLocation();
	int GetAllDirectorData(TArray<struct FMissionDirectorData>* OutData);
	void ReleaseAIFromMatinee();
	void HoldAIForMatinee(bool bDemiGod);
	void LastMatineeAnimFinished();
	void MAT_FinishAIGroup();
	void MAT_BeginAIGroup(const struct FVector& StartLoc, const struct FRotator& StartRot, unsigned char AlignmentType, float LerpTime, bool bDemiGod);
	void Dismount();
	class AWillowAIPawn* GetMount();
	bool IsMounted();
	void MatchTransform(const struct FVector& StartLoc, const struct FRotator& StartRot);
	bool CanBeBaseForPawn(class APawn* aPawn);
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void GetObstacleInfo(struct FObstacleData* Data);
	bool GetMagnetData(struct FVector* MagnetLoc, struct FVector* MagnetVel);
	void SetObstacleVelocity(struct FVector* NewVelocity);
	bool CanAvoidObstacle(struct FObstacleData* Obstacle);
	bool CanAvoidObstacles();
	class APawn* GetParent();
	bool UseRootOnlyYawRotation();
	bool SetStance(class UStanceTypeDefinition* NewStance);
	void SetDefaultStance();
	unsigned char GetMoveStyle();
	bool CanUseAimOffsets();
	bool CanTurn();
	void DoneTurning();
	struct FVector GetFocusScreenOffset();
	float GetFocusRadius();
	struct FVector GetFocusLocation();
	void EndFocus(class APawn* User);
	void BeginFocus(class APawn* User);
	class UMissionDefinition* GetAcceptedMissionToPlayDismissalDialogFor();
	void PlayDismissalDialog(class APawn* PlayerLeavingMenu);
	void PlayMissionTurnedInDialog(class APawn* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn);
	void PlayLingeringDialog(class APawn* PlayerInMenu);
	void PlayOnUseDialog(class APawn* PlayerEnteringMenu);
	void OnUsersAreLingering();
	void StartLingerTimer();
	void ClearMissionsAcceptedByPrimaryUser();
	void OnNewPrimaryUser();
	class APawn* GetPrimaryUser();
	void EndUse(class APawn* User);
	void BeginUse(class APawn* User);
	void FireOnUnableToAffordBehaviors(unsigned char OnUsedOutput, class APawn* User, class UActorComponent* UsedComponent, unsigned char UsedType);
	void NotifyUserCouldNotAffordAttemptedUse(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	void FireOnUsedBehaviors(unsigned char OnUsedOutput, class APawn* User, class UActorComponent* UsedComponent, unsigned char UsedType);
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	bool IsComponentUsable(class UActorComponent* UsableComponent, unsigned char UsedType);
	void CountMyMissionsByState(class AWillowPlayerController* WPC, int* NumEligibleMissions, int* NumInProgressMissions, int* NumRedeemableMissions);
	void DeactivateMissionDirectorParticle();
	void SetMissionDirectorParticle();
	void MissionStatusChanged();
	void OnPlayerTurnedInMission(class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn);
	void OnPlayerAcceptedMission(class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted);
	int GetInProgressMissions(TArray<class UMissionDefinition*>* InProgressMissions);
	int GetEligibleMissions(TArray<class UMissionDefinition*>* EligibleMissions);
	int GetRedeemableMissions(TArray<class UMissionDefinition*>* RedeemableMissions);
	void AddMissionDirective(bool bRegisterDirector, struct FMissionDirectorData* NewDirective);
	void RegisterMissionDirector();
	bool SpecialMoveThruEdge(unsigned char Type, int Dir, const struct FVector& MoveStart, const struct FVector& MoveDest, class AActor* RelActor, int RelItem);
	void DoCoverMantleLerp();
	void MantleFinished();
	class UBodyClassDefinition* GetCoverBody();
	void SetCoverStance(class UWillowCoverStanceDefinition* Stance);
	void SetCoverSlot(struct FCoverInfo* NewCover);
	void SetCoverAction(const struct FName& Action);
	bool IsInCover();
	void FinishKnockback();
	void StopKnockback();
	void HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void CheckCharging(class AActor* ChargeActor);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void UnTouch(class AActor* Other);
	void OnShieldDepleted(class AController* DamageInstigator, unsigned char DamageType);
	void HardFlinchFinished();
	void PlayHardFlinch(const struct FVector& HitLocation, class UBodyHitRegionDefinition* HitRegion, class AController* InstigatedBy);
	void SetInjuredDialogLoop();
	void CheckInjured(const struct FVector& HitLocation, class UBodyHitRegionDefinition* HitRegion, bool bDOT, class AController* InstigatedBy);
	bool CanDoMovementDodges();
	void SetMovementDodgeTimer();
	void DoMovementDodge();
	void PlayDodgeAnimation(class UWillowAnimDefinition* DodgeAnim, const struct FName& CallbackName);
	void TryToDodge(const struct FVector& BulletLoc, class AActor* shooter, bool bProjectile);
	bool CanDodge(bool bProjectile);
	class UBodyClassDefinition* GetDodgeBody();
	void PerformDodge();
	void DoneDodging();
	float StartLeapAtActor(class AActor* Target, const struct FTrajectoryData& Options);
	float StartLeap(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapSpeed, float LeapAngle);
	struct FRotator GetLeapRotation(const struct FVector& DestLoc);
	void EndSpawnStyleLerp();
	void StartSpawnStyleLerp();
	void GetSpawnStyleLerpInfo(struct FVector* FinalLoc, float* TimeDelta);
	float GetFlyNavMeshCheckDist();
	void PlacePhysicsBody();
	void SetupRagdollPhysics();
	class UStaggerDefinition* GetStaggerSettings();
	void PlayStagger();
	void UnStagger();
	void Stagger(class APawn* StaggerInstigator);
	void VehicleCollideFlinchFinished();
	void PlayVehicleCollideFlinch();
	bool CanBeStaggered();
	void HitByVehicle(class AVehicle* Collider);
	void TriggerHitByVehicleDialog(class AVehicle* Vehicle);
	void OnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex);
	void SetVehicleRBActorEnabled(bool NewValue);
	void StopDriving(class AVehicle* V);
	void StartDriving(class AVehicle* V, bool SkipAnim);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	void SetInfoBarVisibility(bool bVisible);
	bool HideTargetInfoOnHud(class APawn* HUDOwner);
	bool IsChampion();
	bool IsBoss();
	struct FName GetTransformedKillStat();
	void GetTargetName(struct FString* TargetName);
	struct FString GetTransformedName();
	bool SuggestLeapVelocity(class AActor* Target, float flLeapSpeed, struct FVector* vecLeapVelocity);
	void PlayDying(class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, const struct FVector& HitLoc);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, class UDamagePipeline* Pipeline);
	bool CanPlayDeathAnim();
	void TraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int TraceFlags, float TouchTime);
	bool DamageCanCauseHardFlinch();
	void TookDamageFromFriendly(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	bool IsDemigodMode();
	void CrushedByActor(class AActor* Other);
	void AILevelUp();
	int GetNumLevelUps();
	bool HasStatusEffectForDamageType(unsigned char DamageType);
	unsigned char GetDefaultPhysics();
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void PostRenderForAlways(class APlayerController* PC, class UCanvas* Canvas, class AWillowHUD* WHUD);
	class UProjectileDefinition* GetCurrentProjectile();
	class AWillowGrenadeMod* GetGrenadeMod();
	void AddDefaultWeapon();
	void DiscardInventory(bool bDestroyContents);
	bool OverrideDestroyInventoryContents(bool bDestroyContents);
	void PostStartingInventoryAdded();
	void SavedInventoryAddedFromPopulationSystem();
	void AddDefaultInventory();
	void InitializeBehaviorProviders();
	void Destroyed();
	void BodySelectClass(class UBodyClassDefinition* InBodyClass);
	void ApplyBalanceDefinitionCustomizations();
	void UpdatePlayThroughMaterial();
	void UpdateClan();
	void SetupInitialDestination(class AActor* InitialDestination);
	void AttachObstacleDebugComponent();
	void PostSpawn();
	void UpdatePlayerMaster();
	void PostBeginPlay();
	void PreBeginPlay();
	void SetSecondaryCollisionEnabled(bool bEnabled);
	void ReplicatedEvent(const struct FName& VarName);
	bool AllowFallbackToDefaultCustomizations();
	void RefreshCustomizationsOnInstanceData();
	struct FName GetCustomizableName();
	void GetCustomizableInstanceDataSets(TArray<struct FPointer>* OutData);
	class UCustomizationDefinition* GetDesiredCustomizationOfType(class UClass* Type);
	void CustomizationApplied(class UCustomizationData* Data);
	bool IsInjured();
	bool IsTargetable(bool bIgnoreCloakAbility);
	bool IsStaggered();
	void RemoveAllStatusEffects();
	void FullyReplenishShields();
	void FullyReplenishLife();
	struct FVector GetMagnetismOrigin();
	float GetMagnetismRange();
	bool IsAutoAimTarget();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStageForSpawnedInventory(int NewInventoryGameStage);
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStageForSpawnedInventory();
	class AWillowAIPawn* GetAWillowAIPawn();
};


// Class WillowGame.WillowAICranePawn
// 0x0058 (0x1324 - 0x137C)
class AWillowAICranePawn : public AWillowAIPawn
{
public:
	unsigned long                                      bUseCrane : 1;                                            // 0x1324(0x0004) (Edit, Net)
	struct FName                                       CraneSplineName;                                          // 0x1328(0x0008) (Edit)
	struct FName                                       CraneSingleBoneName;                                      // 0x1330(0x0008) (Edit)
	class UWillowSkelControlSpline*                    CraneSpline;                                              // 0x1338(0x0004)
	class USkelControlSingleBone*                      CraneSingleBone;                                          // 0x133C(0x0004)
	float                                              CraneMidPointPercent;                                     // 0x1340(0x0004) (Edit)
	struct FVector                                     CraneMidPointOffset;                                      // 0x1344(0x000C) (Edit)
	struct FVector                                     CraneEndPointOffset;                                      // 0x1350(0x000C) (Edit)
	float                                              CraneMinDot;                                              // 0x135C(0x0004) (Edit)
	float                                              CraneMinDistance;                                         // 0x1360(0x0004) (Edit)
	float                                              CraneMaxDistance;                                         // 0x1364(0x0004) (Edit)
	float                                              CraneHeightScale;                                         // 0x1368(0x0004) (Edit)
	class AWillowPawn*                                 MyDummy;                                                  // 0x136C(0x0004) (Net)
	struct FVector                                     GoalLocation;                                             // 0x1370(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAICranePawn");
		return ptr;
	}


	void Behavior_Destroy();
	void DetachDummy();
	void AttachDummy();
	void FindDummy();
	bool CanBeBaseForPawn(class APawn* aPawn);
	void ApplyBodyClassStartingValues();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, class UDamagePipeline* Pipeline);
};


// Class WillowGame.WillowPlayerPawn
// 0x02DC (0x1064 - 0x1340)
class AWillowPlayerPawn : public AWillowPawn
{
public:
	struct FPointer                                    VfTable_IIProtectionTimer;                                // 0x1064(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIWeatherBehavior;                                // 0x1068(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIGFxActorMovie;                                  // 0x106C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IICustomizable;                                   // 0x1070(0x0004) (Const, Native, NoExport)
	float                                              LastCombatActionTime;                                     // 0x1074(0x0004) (Net)
	class UGearboxSkeletalMeshComponent*               Arms;                                                     // 0x1078(0x0004) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   ArmsMaterialInstance;                                     // 0x107C(0x0004)
	TArray<class UMaterialInstanceConstant*>           TeamColorForMeshMaterialInstances;                        // 0x1080(0x000C) (NeedCtorLink)
	struct FVector                                     IronsightsTranslation;                                    // 0x108C(0x000C) (Transient)
	struct FRotator                                    IronsightsRotation;                                       // 0x1098(0x000C) (Transient)
	unsigned long                                      bFirstPersonVisibilityLocked : 1;                         // 0x10A4(0x0004) (Transient)
	unsigned long                                      bInjuredIsCameraAnimPlaying : 1;                          // 0x10A4(0x0004)
	unsigned long                                      bInjuredDeadHasRagdolled : 1;                             // 0x10A4(0x0004)
	unsigned long                                      bAwaitingInjuredRespawn : 1;                              // 0x10A4(0x0004)
	unsigned long                                      bInjuredDeadCameraActive : 1;                             // 0x10A4(0x0004)
	unsigned long                                      bLowHealth : 1;                                           // 0x10A4(0x0004)
	unsigned long                                      bUpdateAfterMapCommit : 1;                                // 0x10A4(0x0004) (Edit, Const)
	unsigned long                                      bActionSkillWasRunning : 1;                               // 0x10A4(0x0004) (Transient)
	unsigned long                                      bGrabWeaponPickup : 1;                                    // 0x10A4(0x0004) (Net)
	unsigned long                                      bWasFalling : 1;                                          // 0x10A4(0x0004)
	unsigned long                                      bIsProtectionTimerActive : 1;                             // 0x10A4(0x0004)
	unsigned long                                      bBoundaryWarningOn : 1;                                   // 0x10A4(0x0004)
	unsigned long                                      bLastMenuMeshHidden : 1;                                  // 0x10A4(0x0004) (Transient)
	unsigned long                                      bAdjustCameraAnimByEyeHeight : 1;                         // 0x10A4(0x0004) (Transient)
	unsigned long                                      bViewingThirdPersonMenu : 1;                              // 0x10A4(0x0004) (Net, Transient)
	unsigned long                                      bViewingStatusMenu : 1;                                   // 0x10A4(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bIsAwaitingRespawn : 1;                                   // 0x10A4(0x0004)
	unsigned long                                      bAwaitingRespawn : 1;                                     // 0x10A4(0x0004)
	unsigned long                                      bAwaitingRespawnZoomInToPlayer : 1;                       // 0x10A4(0x0004)
	unsigned long                                      bValidControllerAndPRI : 1;                               // 0x10A4(0x0004) (Transient)
	unsigned long                                      bCreatingMenuMesh : 1;                                    // 0x10A4(0x0004) (Transient)
	unsigned long                                      bForceInjuredCrouch : 1;                                  // 0x10A4(0x0004) (Transient)
	unsigned long                                      bCanSprintWhileInjured : 1;                               // 0x10A4(0x0004) (Transient)
	unsigned long                                      bInjuredPreDeathCameraActive : 1;                         // 0x10A4(0x0004) (Transient)
	unsigned long                                      bPlayedInjuredPreDeath : 1;                               // 0x10A4(0x0004) (Transient)
	unsigned long                                      bInjuredPreDeathRecoveryCameraActive : 1;                 // 0x10A4(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bMaxHealthClipModifierActive : 1;                         // 0x10A4(0x0004) (Transient)
	unsigned long                                      bRefreshHolster : 1;                                      // 0x10A4(0x0004) (Net, RepNotify)
	int                                                LastAnimSetsArmsCount;                                    // 0x10A8(0x0004) (Transient)
	class UMaterialInstanceConstant*                   CustomizationHeadMaterialInstance;                        // 0x10AC(0x0004)
	class UMaterialInstanceConstant*                   CustomizationBodyMaterialInstance;                        // 0x10B0(0x0004)
	class UMaterialInstanceConstant*                   CustomizationArmsMaterialInstance;                        // 0x10B4(0x0004)
	class UCustomizationData*                          HeadCustomizationData;                                    // 0x10B8(0x0004)
	class UCustomizationData*                          SkinCustomizationData;                                    // 0x10BC(0x0004)
	float                                              InjuredStartTime;                                         // 0x10C0(0x0004)
	float                                              InjuredDeadCameraStartTime;                               // 0x10C4(0x0004)
	float                                              InjuredDeadCameraEndTime;                                 // 0x10C8(0x0004)
	struct FRotator                                    InjuredDeadRotation;                                      // 0x10CC(0x000C)
	struct FVector                                     InjuredDeadCameraLoc;                                     // 0x10D8(0x000C)
	struct FVector                                     InjuredDeadCameraOffset;                                  // 0x10E4(0x000C)
	float                                              InjuredViewDropCycleTime;                                 // 0x10F0(0x0004)
	float                                              InjuredViewDropStrength;                                  // 0x10F4(0x0004)
	float                                              InjuredMouseSensitivityMultiplier;                        // 0x10F8(0x0004)
	float                                              HitByVehicleTime;                                         // 0x10FC(0x0004) (Transient)
	struct FVector                                     TransitionLandmarkOffset;                                 // 0x1100(0x000C)
	class UDynamicLightEnvironmentComponent*           ArmsDynamicLightEnvironment;                              // 0x110C(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              LastKillTime;                                             // 0x1110(0x0004) (Transient)
	float                                              KillStreakScore;                                          // 0x1114(0x0004) (Transient)
	struct FExtraMuzzleEffect                          ExtraMuzzleEffect_LastShot;                               // 0x1118(0x0008) (Net, Transient)
	float                                              ShouldGetResurrected;                                     // 0x1120(0x0004) (Edit, Transient)
	float                                              ShouldGetResurrectedBaseValue;                            // 0x1124(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShouldGetResurrectedModifierStack;                        // 0x1128(0x000C) (Const, Transient, NeedCtorLink)
	float                                              PlayerFallDuration;                                       // 0x1134(0x0004)
	class UStaticMeshComponent*                        AttachedMeleeWeaponMesh;                                  // 0x1138(0x0004) (ExportObject, Component, EditInline)
	float                                              MinimumHealthMaintainedByProtectionTimer;                 // 0x113C(0x0004)
	struct FVector                                     LocationFellFrom;                                         // 0x1140(0x000C) (Transient)
	float                                              SprintExhaustion;                                         // 0x114C(0x0004) (Transient)
	float                                              FriendlyFireDamageAccepted;                               // 0x1150(0x0004) (Transient)
	float                                              FriendlyFireDamageAcceptedBaseValue;                      // 0x1154(0x0004) (Const)
	TArray<class UAttributeModifier*>                  FriendlyFireDamageAcceptedModifierStack;                  // 0x1158(0x000C) (Const, Transient, NeedCtorLink)
	float                                              FriendlyFireDamageMultiplier;                             // 0x1164(0x0004) (Transient)
	float                                              FriendlyFireDamageMultiplierBaseValue;                    // 0x1168(0x0004) (Const)
	TArray<class UAttributeModifier*>                  FriendlyFireDamageMultiplierModifierStack;                // 0x116C(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FSpeedTravelData>                    SpeedTravelInfo;                                          // 0x1178(0x000C) (Edit, Transient, NeedCtorLink)
	int                                                NumWarningZones;                                          // 0x1184(0x0004)
	struct FVector                                     ArmUpdateLocation;                                        // 0x1188(0x000C)
	struct FRotator                                    ArmUpdateRotation;                                        // 0x1194(0x000C)
	struct FVector                                     ArmsLeadingRotationHistory[0xA];                          // 0x11A0(0x000C) (Transient)
	unsigned char                                      NextArmsLeadingRotationIndex;                             // 0x1218(0x0001) (Transient)
	unsigned char                                      LastResurrectReason;                                      // 0x1219(0x0001) (Transient)
	unsigned char                                      InjuredPreDeathState;                                     // 0x121A(0x0001) (Net, RepNotify)
	unsigned char                                      UnknownData00[0x1];                                       // 0x121B(0x0001) MISSED OFFSET
	struct FVector                                     LastArmsLeadingOffset;                                    // 0x121C(0x000C) (Transient)
	class APlayerReplicationInfo*                      LastPlayerDiedPRI;                                        // 0x1228(0x0004) (Transient)
	float                                              ZoomTimeModifier;                                         // 0x122C(0x0004) (Transient)
	float                                              ZoomTimeModifierBaseValue;                                // 0x1230(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ZoomTimeModifierModifierStack;                            // 0x1234(0x000C) (Const, Transient, NeedCtorLink)
	struct FVector                                     ArmsTranslationOffsetForFocusCam;                         // 0x1240(0x000C)
	struct FRotator                                    ArmsRotationOffsetForFocusCam;                            // 0x124C(0x000C)
	struct FVector                                     ArmsTranslationOffsetForCameraAnim;                       // 0x1258(0x000C) (Transient)
	struct FRotator                                    ArmsRotationOffsetForCameraAnim;                          // 0x1264(0x000C) (Transient)
	float                                              CameraAnimEyeHeight;                                      // 0x1270(0x0004) (Transient)
	struct FInstanceDataSet                            MenuInstanceDataState;                                    // 0x1274(0x000C) (Transient, Component, NeedCtorLink)
	struct FWeatherSystemEffects                       WeatherSystem;                                            // 0x1280(0x0008) (Net, Transient, RepNotify)
	class APawnInteractionProxy*                       TradeInteractionProxy;                                    // 0x1288(0x0004)
	class AStationTeleporterDestination*               ResurrectStation;                                         // 0x128C(0x0004)
	class AActor*                                      ResurrectLocationActor;                                   // 0x1290(0x0004)
	class ATravelStation*                              AwaitingRespawnTravelStation;                             // 0x1294(0x0004)
	struct FVector                                     AwaitingRespawnResurrectLocation;                         // 0x1298(0x000C)
	int                                                AwaitingRespawnNozzleIndex;                               // 0x12A4(0x0004)
	float                                              AwaitingRespawnStartTime;                                 // 0x12A8(0x0004)
	float                                              AwaitingRespawnLerpTime;                                  // 0x12AC(0x0004)
	struct FVector                                     AwaitingRespawnStartCameraLoc;                            // 0x12B0(0x000C)
	struct FRotator                                    AwaitingRespawnStartCameraRot;                            // 0x12BC(0x000C)
	struct FVector                                     AwaitingRespawnEndCameraLoc;                              // 0x12C8(0x000C)
	struct FRotator                                    AwaitingRespawnEndCameraRot;                              // 0x12D4(0x000C)
	float                                              AwaitingRespawnUnHidePlayerTime;                          // 0x12E0(0x0004)
	float                                              AwaitingRespawnZoomStartTime;                             // 0x12E4(0x0004)
	float                                              AwaitingRespawnStartZoomIn;                               // 0x12E8(0x0004)
	struct FVector                                     AwaitingRespawnHeadLoc;                                   // 0x12EC(0x000C)
	class UWillowOnDemandPackageMarker*                LinkedOnDemandPackage;                                    // 0x12F8(0x0004) (Edit)
	class AActor*                                      TemporaryNonBlockedBy;                                    // 0x12FC(0x0004) (Transient)
	struct FAttachmentData                             AttachedToData;                                           // 0x1300(0x0028) (Net, RepNotify)
	int                                                UseInjuredDefinitionOverride;                             // 0x1328(0x0004) (Net, Transient, RepNotify)
	class UAttributeModifier*                          MaxHealthClipModifier;                                    // 0x132C(0x0004) (Transient)
	class AAnemoneInfectionState*                      AnemoneInfectionState;                                    // 0x1330(0x0004) (Transient)
	TArray<class UCoordinatedEffectDefinition*>        VisionModeEffect;                                         // 0x1334(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerPawn");
		return ptr;
	}


	void UpdateVisionModeFX();
	void RemoveVisionModeFX(class UCoordinatedEffectDefinition* EffectToRemove);
	void AddVisionModeFX(class UCoordinatedEffectDefinition* NewEffect);
	void SetAnemoneInfectionState(bool bIsInfected, bool bLargeZone, class AActor* Zone, class UAnemoneInfectionDefinition* InfectionDefinition, class AHeightFog* HeightFog);
	void ResetPawnGearLikenessComponents();
	void UpdateInjuredOverrideAnimNode();
	void ShouldCrouch(bool bCrouch);
	void OnAttachPlayerPawnToBase(class USeqAct_AttachPlayerPawnToBase* Action);
	void DoAttachPlayerToBase(class AActor* ActorToAttachTo, const struct FVector& AttachRelativeOffset, const struct FRotator& AttachRelativeRotation, const struct FName& NewBaseBoneName, unsigned char NewPhysicsMode);
	void SpawnDefaultController();
	void SetExtraMuzzleEffect(unsigned char BulletFromClip, const struct FExtraMuzzleEffect& NewEffect);
	void UnTouch(class AActor* Other);
	struct FVector GetAimDirection();
	void ServerPlayerEndUseNPC(class AWillowAIPawn* NPC);
	void ServerPlayerBeginUseNPC(class AWillowAIPawn* NPC);
	void Behavior_Destroy();
	void StartCrouch(float HeightAdjust);
	void PlayPostEnvironmentTransitionAnimation();
	float PlayPreEnvironmentTransitionAnimation();
	void Behavior_Killed(class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType);
	void SetDefaultStance();
	void SetRevivePct(float NewRevivePct);
	float GetRevivePct();
	bool PlayInjured(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void SetUpTradeInteraction();
	void DestroyTradeInteraction();
	void ServerSetViewingThirdPersonMenu(bool bNewViewingThirdPersonMenu, bool bIsStatusMenu);
	void OnSetViewingStatusMenu();
	void SetViewingThirdPersonMenu(bool bNewViewingThirdPersonMenu, bool bIsStatusMenu);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void DestroyWeatherSystem();
	void CreateWeatherSystem(class UParticleSystem* NewWeatherSystemTemplate, class UParticleSystem* NewScreenEffectsTemplate);
	void GFx_NotifyMovieDestroy(class UGearboxGFxMovie* Movie);
	void GFx_NotifyMovieCreate(class UGearboxGFxMovie* Movie);
	class AActor* GFx_GetMovieActor();
	void ResetShieldPrimeCachedValues(class AWillowShield* Shield);
	void ShieldTriggered();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void ClimbLadder(class ALadderVolume* L);
	void EndClimbLadder(class ALadderVolume* OldLadder);
	bool CanGrabLadder();
	class UWillowGFxThirdPersonMovie* GetThirdPersonMovie();
	void SetMenuMeshVisibility(bool bVisible, bool bInspecting);
	void SetInstanceDataMenuState(bool bVisible, bool bInspecting);
	void InitializePawnMeshes();
	void GetPetActors(TArray<class AActor*>* out_PetActorList);
	void PlayUIAkEvent(class UAkEvent* Event);
	void SetAllegiance(class UPawnAllegiance* NewAllegiance);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, class UDamagePipeline* Pipeline);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	float GetMinimumHealthMaintainedByProtectionTimer();
	void EnableProtectionTimer();
	bool IsProtectionTimerActive();
	void CheckPhaseWalkExit();
	class AWillowPlayerController* GetPlayerController();
	void ServerIncrementEnterVehicleStat(const struct FName& SpecificVehicleStatName);
	void IncrementEnterVehicleStat(const struct FName& SpecificVehicleStatName);
	void StartDriving(class AVehicle* V, bool SkipAnim);
	void GetTargetName(struct FString* TargetName);
	void UpdatePreferredColors();
	void DumpAnimSets(const struct FString& EventStr);
	void PlayLanded(float ImpactVel);
	void OnPlayArmAnimation(class UWillowSeqAct_PlayArmAnimation* inAction);
	void StopWeaponRecoilAnim(bool bStopPrimaryHand, bool bStopOffHand);
	void StopFirstPersonAnimations(float BlendOutTime);
	void StopFirstPersonWeaponSMD(unsigned char ActionType, bool bInterrupted, class AWeapon* TheWeapon);
	float PlayFirstPersonWeaponSMD(unsigned char ActionType, float PlayRateScale, float Duration, class AWeapon* TheWeapon, class USpecialMoveDefinition** PlayedSMD);
	class USpecialMoveDefinition* GetFirstPersonBodyWeaponSMD(unsigned char BodyAction, class AWeapon* TheWeapon);
	float PlayArmAnimation(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bOverride, class UAnimSet* ReqAnimSet);
	void WeaponChanged(class AWeapon* TheWeapon, bool bOffHandWeapon);
	void ComputeIronsightsTransformOffset();
	void ResetArmsLeadingRotationHistory();
	void UpdateAnimSets();
	bool RestoreAnimSetsToDefault();
	void TurnOffBoundaryWarning();
	void TurnOnBoundaryWarning();
	void ToggleBoundaryWarningOnHUD(bool bEnable);
	void OnMarkExitedRegion(class UWillowSeqAct_MarkExitedRegion* inAction);
	void ServerTellPassengersToUnlockAchievement(unsigned char UnlockType, unsigned char OriginRegion, unsigned char DestinationRegion, float TravelTime);
	void OnMarkEnteredRegion(class UWillowSeqAct_MarkEnteredRegion* inAction);
	void ProcessFallDistance(const struct FVector& FallDistance);
	void Falling();
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void ProtectionTimerElapsed();
	bool DoJump(bool bUpdating);
	bool CanJump();
	bool CanContinueSprinting();
	bool IsOnGroundOrShortFall();
	bool CanSprint();
	bool DoSprint(bool bIsUpdating);
	bool CanStuckJump();
	bool HideTargetInfoOnHud(class APawn* HUDOwner);
	bool GetTargetableIsHidden();
	void DetachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void AttachMeleeWeaponMesh(bool bApplyToThirdPerson, bool bApplyToFirstPerson);
	void SetWeaponSnagFailsafeTimer(float Value);
	void OnWeaponSnag();
	void SetBaseEyeheight();
	void AdjustCameraAnimByEyeHeight(bool bEnabled, float InCameraAnimEyeHeight);
	bool GetCameraInfoFromViewModel(struct FVector* out_DeltaLoc, struct FRotator* out_DeltaRot);
	bool CalcThirdPersonMenuCam(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void TraceCameraLocation(class AActor* TraceActor, const struct FVector& TraceStart, struct FVector* CameraLocation);
	bool CalcInjuredPreDeathRecoveryCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool CalcInjuredPreDeathCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool CalcInjuredDeadCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void GetInjuredDeadCameraValues(bool bPreDeath, struct FVector* ViewLocation, float* CameraDistance, float* DigistructDelay);
	bool CalcInjuredCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void ShowDuelClip();
	void OutOfDuelBounds();
	void AcceptDuelChallenge(class AWillowPlayerPawn* Challenger);
	void IssueDuelChallenge(class AWillowPlayerPawn* Competitor);
	bool HasBeenIssuedDuelChallenge(class AWillowPlayerPawn* Challenger, class AWillowVersusDuelInfo** DuelInfo);
	bool HasChallengeCoolDown(class AWillowPlayerPawn* Challenger);
	bool HasActiveDuel(class AWillowVersusDuelInfo** DuelInfo);
	bool IsDuelingEnabled();
	bool CanChallengeToDuel(class AWillowPlayerPawn* Competitor);
	void ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	struct FLinearColor GetLinearColor(const struct FColor& C);
	void SetTeamColorForMesh(class USkeletalMeshComponent* TheMesh, const struct FLinearColor& PrimaryColor, const struct FLinearColor& SecondaryColor, const struct FLinearColor& TertiaryColor);
	void SetTeamColor(const struct FLinearColor& PrimaryColor, const struct FLinearColor& SecondaryColor, const struct FLinearColor& TertiaryColor);
	class AWillowPlayerPawn* GetAWillowPlayerPawn();
	void CheckLowHealthState();
	void SetArmPosition();
	void ShowAndUnlockFirstPerson();
	void HideAndLockFirstPerson();
	void RaiseFirstPersonHands();
	void LowerFirstPersonHands();
	void ToggleFirstPersonWeaponVisibility();
	void SetFirstPersonVisibility(bool bVisible);
	void SetWeaponVisibility(bool bWeaponVisible);
	void SetOwnerVisibility(bool bVisible);
	void OnNativeApplyBodyClassStartingValuesHook();
	void ApplyBodyClassStartingValues();
	void PlayDamageCameraShake(int Damage, const struct FVector& HitDir);
	void ClientSetAwaitingRespawnValues(const struct FVector& InAwaitingRespawnStartCameraLoc, const struct FRotator& InAwaitingRespawnStartCameraRot, const struct FVector& InAwaitingRespawnEndCameraLoc, const struct FVector& InAwaitingRespawnResurrectLocation);
	void AwaitingRespawnBeginState(const struct FName& PreviousStateName);
	void DeRezzedGearFinished();
	void DeRezGear();
	void RezGear();
	bool CalcAwaitingRespawnCam(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void AwaitingRespawnSetFirstPerson();
	void AwaitingRespawnSetBehindView();
	void AwaitingRespawnDisplayRespawnCost();
	void AwaitingRespawnActivateNozzle();
	void PreDeathRecoveryDone();
	void StartPreDeathRecovery();
	void PreDeathAnimDone();
	void ForceInjuredDeadState(unsigned char KilledReason);
	void InjuredDeadTermRagdoll();
	void InjuredDeadInitRagdoll();
	void StartInjuredDeathSequence();
	void StartInjuredPreDeathSequence();
	void GetInjuredDeadCameraView(struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void EndInjuredDeadCamera();
	void EndInjuredCamera();
	void SetShadowCasting(bool Value);
	void CheckShouldBeAutoRevived();
	void ServerNotifyIWentDown();
	void SetInjuredDeadState(unsigned char InjuredDeadStateVal);
	void SetInjuredState(unsigned char InjuredStateVal);
	void AddKillStreakScore();
	void KilledEnemy(class AWillowPawn* aTargetPawn);
	void ProcessInjuredViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void ClearPlayerInjuredState();
	void SetupPlayerInjuredState();
	static void SpawnTeleportEffect(const struct FVector& TeleportEffectLocation, const struct FRotator& TeleportEffectRotation, bool bReplicated);
	void SpawnTeleportEffectAtCurrentLocation();
	void ClientShowRespawnDialog(int AmountCharged, unsigned char ResurrectReason, class APlayerReplicationInfo* DeadPlayerPRI);
	void ShowRespawnDialog();
	void NotifyTeleported();
	void MarkClientDLEsForUpdate();
	void MarkDLEsForUpdate();
	void ResurrectAtLocation(class AActor* HoldingLoc, class AActor* TeleportLoc, unsigned char ResurrectReason, class APlayerReplicationInfo* DeadPlayerPRI);
	void HitByVehicle(class AVehicle* Collider);
	bool OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	void PlacePlayerInLevel(bool bSkipHoldingCell);
	void ResurrectPlayer(unsigned char ResurrectReason, bool bSkipHoldingCell, class APlayerReplicationInfo* DeadPlayerPRI, class ATravelStation* DestinationStation);
	class AActor* GetBestPlayerStartPoint();
	class ATeleporterDestination* GetBestPlayerPlacementPoint(bool bLevelTravel);
	void CrushedByActor(class AActor* Other);
	void CrushedBy(class APawn* OtherPawn);
	void ConditionalEndDuelOnHealthDepleted(class AController* InstigatedBy);
	bool HandleHealthDepleted(class AController* InstigatedBy, class UClass* DamageType, const struct FVector& HitLocation, const FScriptInterface& DamageCauser, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void ProcessDamageTakenSkillEvents(class UDamagePipeline* Pipeline, class AController* InstigatedBy, class UClass* DamageType);
	void ProcessDamageDealtSkillEvents(class UDamagePipeline* Pipeline, class AController* VictimController, class UClass* DamageType);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline, float* InDamage, float* DamageSeverityPercent, struct FVector* Momentum, struct FTraceHitInfo* HitInfo);
	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	bool IsDemigodMode();
	void ReplicatedEvent(const struct FName& VarName);
	int GetNextExpLevelPoints();
	bool IsVulnerableToFriendlyFire();
	bool AllowFallbackToDefaultCustomizations();
	void RefreshCustomizationsOnInstanceData();
	struct FName GetCustomizableName();
	void GetCustomizableInstanceDataSets(TArray<struct FPointer>* OutData);
	class UCustomizationDefinition* GetDesiredCustomizationOfType(class UClass* Type);
	void CustomizationApplied(class UCustomizationData* Data);
	bool CanReceiveStatusEffects();
	void ReactToPrimaryStatusEffect(class UStatusEffectDefinition* StatusEffect);
	bool ShieldAbsorbedAmmo(class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb);
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	int GetGameStage();
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	bool InitRagdoll();
	void OnNoLongerTargetedByAI(class AWillowMind* AIMind);
	void OnTargetedByAI(class AWillowMind* AIMind);
};


// Class WillowGame.WillowPawnInteractionDefinition
// 0x000C (0x0070 - 0x007C)
class UWillowPawnInteractionDefinition : public UPawnInteractionDefinition
{
public:
	unsigned char                                      HUDIcon;                                                  // 0x0070(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	class UInteractionIconDefinition*                  HUDIconDef;                                               // 0x0074(0x0004) (Edit)
	class UInteractionIconDefinition*                  HUDIconDefSecondary;                                      // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPawnInteractionDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowPersonalTeleporter
// 0x0028 (0x019C - 0x01C4)
class AWillowPersonalTeleporter : public ATeleporterDestination
{
public:
	TArray<class APlayerController*>                   TeleportedPlayers;                                        // 0x019C(0x000C) (Edit, NeedCtorLink)
	class UPersonalTeleporterDefinition*               Definition;                                               // 0x01A8(0x0004) (Edit, Net)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x01AC(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    TeleporterParticleSystem;                                 // 0x01B0(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       LevelName;                                                // 0x01B4(0x0008)
	unsigned long                                      bActive : 1;                                              // 0x01BC(0x0004) (Net, RepNotify)
	unsigned long                                      bReturnTeleporter : 1;                                    // 0x01BC(0x0004)
	unsigned long                                      bPlacedInCommons : 1;                                     // 0x01BC(0x0004)
	class UAudioComponent*                             TeleporterAudio;                                          // 0x01C0(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPersonalTeleporter");
		return ptr;
	}


	void Destroyed();
	void StopAmbientSound();
	void PlayAmbientSound();
	void ReleaseHeldLevel();
	bool HoldLevel();
	void DeactivateTeleporter();
	void ActivateTeleporter();
	void PlayerLeftGame(class APlayerController* PC);
	void PlayerEnteredGame(class APlayerController* PC);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void CreateExitPoints();
	bool SnapToGround(class AActor* A);
	void IntializeParticleSystem();
	bool InitializeFromDefinition(class UPersonalTeleporterDefinition* PersonalTeleporterDefinition);
	bool InitializeTeleporter(class UPersonalTeleporterDefinition* TeleporterDefinition, bool bReturnPortal);
	void SpawnReturnTeleporter();
	bool PlaceTeleporter(class UPersonalTeleporterDefinition* TeleporterDefinition, class APawn* Creator);
	void ActivateTeleporterPlacedEvent();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowPickup
// 0x00AC (0x01C4 - 0x0270)
class AWillowPickup : public ADroppedPickup
{
public:
	struct FPointer                                    VfTable_IIMission;                                        // 0x01C4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMissionDirector;                                // 0x01C8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIFocusable;                                      // 0x01CC(0x0004) (Const, Native, NoExport)
	class UParticleSystemComponent*                    PickupParticleComponent;                                  // 0x01D0(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystem*                             PickupParticles;                                          // 0x01D4(0x0004) (Net, Transient, RepNotify)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01D8(0x0008) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                                  // 0x01E0(0x0040) (Const, Net, Native)
	float                                              AngErrorAccumulator;                                      // 0x0220(0x0004) (Const, Native)
	unsigned long                                      bPickupable : 1;                                          // 0x0224(0x0004) (Net, RepNotify)
	unsigned long                                      bPickupAtRest : 1;                                        // 0x0224(0x0004) (Net, RepNotify)
	unsigned long                                      bIsPickupAttachedToSomething : 1;                         // 0x0224(0x0004)
	unsigned long                                      bIsPopulationSystemAwareOfPickup : 1;                     // 0x0224(0x0004)
	unsigned long                                      bCanBeSavedAcrossLevelTransition : 1;                     // 0x0224(0x0004)
	unsigned long                                      bForceRBToSleep : 1;                                      // 0x0224(0x0004) (Transient)
	unsigned long                                      bIsMissionItem : 1;                                       // 0x0224(0x0004) (Net, RepNotify)
	unsigned long                                      bIsMissionDirector : 1;                                   // 0x0224(0x0004)
	unsigned long                                      bHasPickupParticleOffset : 1;                             // 0x0224(0x0004)
	unsigned long                                      bCostsToPickUp : 1;                                       // 0x0224(0x0004) (Net, Transient)
	unsigned char                                      LifeSpanType;                                             // 0x0228(0x0001)
	unsigned char                                      CostsToPickUpType;                                        // 0x0229(0x0001) (Net, Transient)
	unsigned char                                      UnknownData01[0x2];                                       // 0x022A(0x0002) MISSED OFFSET
	float                                              VeryShortLivedDropLifeSpan;                               // 0x022C(0x0004)
	float                                              ShortLivedDropLifeSpan;                                   // 0x0230(0x0004)
	float                                              LongLivedDropLifeSpan;                                    // 0x0234(0x0004)
	float                                              PickupShrinkDuration;                                     // 0x0238(0x0004)
	float                                              MaxRBAwakeTime;                                           // 0x023C(0x0004)
	int                                                ImpactEffectPlayCount;                                    // 0x0240(0x0004) (Transient)
	float                                              LastImpactEffectTime;                                     // 0x0244(0x0004) (Transient)
	int                                                MaxImpactEffectPlayCount;                                 // 0x0248(0x0004) (Transient)
	float                                              ImpactEffectDelay;                                        // 0x024C(0x0004) (Transient)
	class UAkRtpc*                                     ImpactVelocityAkRtpc;                                     // 0x0250(0x0004) (Transient)
	class UParticleSystemComponent*                    MissionDirectorParticle;                                  // 0x0254(0x0004) (ExportObject, Transient, Component, EditInline)
	int                                                InventoryRarityLevel;                                     // 0x0258(0x0004) (Net)
	float                                              AlwaysRelevantDistanceSquared;                            // 0x025C(0x0004) (Const)
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                                  // 0x0260(0x0004) (Edit, ExportObject, Component, EditInline)
	class UInteractionIconDefinition*                  InteractionIconOverride;                                  // 0x0264(0x0004) (Net, Transient)
	int                                                CostsToPickUpAmount;                                      // 0x0268(0x0004) (Net, Transient)
	class AActor*                                      PickedUpByActor;                                          // 0x026C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPickup");
		return ptr;
	}


	void OnPlayerClosedMissionUI(class AWillowPlayerController* ThePlayer);
	void OnPlayerOpenedMissionUI(class AWillowPlayerController* ThePlayer);
	void SetInteractionIcon(class UEngineInteractionIconDefinition* Icon);
	bool CanSplash();
	bool HasAnyMissionsForPlayer();
	struct FVector GetMissionDirectorLocation();
	int GetAllDirectorData(TArray<struct FMissionDirectorData>* OutData);
	struct FVector GetFocusScreenOffset();
	float GetFocusRadius();
	struct FVector GetFocusLocation();
	void EndFocus(class APawn* User);
	void BeginFocus(class APawn* User);
	void BeginShrinking();
	void PickedUpBy(class APawn* P);
	void GiveTo(class APawn* P, bool bReady);
	static class AWillowPickup* CreatePickupFromMemento(const struct FPickupMemento& Memento, class AWillowInventory* InventoryThisPickupIsFor);
	void ConvertFixedToRigidBody();
	void ConvertRigidBodyToFixed();
	void FailedPickup();
	struct FPickupMemento GetMemento();
	void AdjustPickupPhysicsAndCollisionForBeingDropped();
	void AdjustPickupPhysicsAndCollisionForBeingAttached();
	void AttachPickupToWorldBody(const FScriptInterface& AttachmentBase, const struct FName& AttachmentPointName);
	class APickupableMeshActor* GetPickupableMeshActor();
	bool Pickupable_IsEnabled();
	void SetSaveRotation(const struct FRotator& NewRotation);
	struct FRotator GetSaveRotation();
	void Behavior_Destroy();
	void SetMissionMaterialParameter();
	void SetPickupability(bool bNewPickupability);
	void Behavior_ChangeUsabilityCost(unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType);
	void Behavior_ChangeUsability(unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType);
	void DestroyPickupParticles();
	void SpawnPickupParticles();
	struct FVector GetPickupParticleOffset();
	void SetInteractParticles(class UParticleSystem* PSys);
	void TryToSetInteractParticles(bool bTurnParticlesOn);
	void PickupAtRest();
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void CheckForRigidBodySleepState();
	void MaxRBAwakeTimer();
	void StartRigidBodyTimers();
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void EnableRagdollCollision();
	void InitializePickupForRBPhysics();
	void InventoryAssociated();
	void UpdateTouchRadiusForAutomaticallyPickedUpInventory();
	void InitializeRBPhysics();
	bool CanBeGrabbedByTheAI();
	bool ShouldSaveInPopulationSystem();
	void ShrinkPickupBeforeDestruction();
	void InitializeDropLifespan();
	void DeactivateMissionDirectorParticle();
	void SetMissionDirectorParticle();
	void MissionStatusChanged();
	void OnPlayerTurnedInMission(class AWillowPlayerController* PlayerTurningIn, class UMissionDefinition* MissionTurnedIn);
	void OnPlayerAcceptedMission(class AWillowPlayerController* PlayerAccepting, class UMissionDefinition* MissionAccepted);
	int GetEligibleMissions(TArray<class UMissionDefinition*>* EligibleMissions);
	int GetInProgressMissions(TArray<class UMissionDefinition*>* InProgressMissions);
	int GetRedeemableMissions(TArray<class UMissionDefinition*>* RedeemableMissions);
	void AddMissionDirective(bool bRegisterDirector, struct FMissionDirectorData* NewDirective);
	void RegisterMissionDirector();
	bool DenyPickupAttempt(class APlayerController* PC);
	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
	void CheckRemoveWaypoint(class UMissionDefinition* Mission, unsigned char NewStatus);
	void SetPickupStatusFromMissionTracker(class AMissionTracker* Tracker);
	void InitializeFromInventory(class AWillowInventory* InInv, class APawn* InInstigator, bool bEnablePickup);
	void WaitingForDefinitionForRegisterMissionDirector();
	void ReplicatedEvent(const struct FName& VarName);
	void Destroyed();
	void PostBeginPlay();
};


// Class WillowGame.WillowPlayerInput
// 0x014C (0x017C - 0x02C8)
class UWillowPlayerInput : public UPlayerInput
{
public:
	unsigned long                                      bAlwaysPlayForceFeedback : 1;                             // 0x017C(0x0004) (Config)
	unsigned long                                      bDebugBindCommandsEnabled : 1;                            // 0x017C(0x0004) (Config)
	unsigned long                                      bHoldDuck : 1;                                            // 0x017C(0x0004)
	unsigned long                                      bBindCommandConsumedInputEvent : 1;                       // 0x017C(0x0004)
	unsigned long                                      bCanSprint : 1;                                           // 0x017C(0x0004)
	unsigned long                                      bReviveHeld : 1;                                          // 0x017C(0x0004)
	unsigned long                                      bUpdateInputContext : 1;                                  // 0x017C(0x0004)
	unsigned long                                      bApplyControllerViewAccel : 1;                            // 0x017C(0x0004)
	unsigned long                                      bTryToSprint : 1;                                         // 0x017C(0x0004) (Transient)
	struct FName                                       DebugBindOverrideKeyName;                                 // 0x0180(0x0008) (Config)
	float                                              ButtonHoldEventTime;                                      // 0x0188(0x0004) (Config)
	float                                              LastDuckTime;                                             // 0x018C(0x0004)
	unsigned char                                      ForcedDoubleClick;                                        // 0x0190(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0191(0x0003) MISSED OFFSET
	float                                              RunWalkTransitionThreshold;                               // 0x0194(0x0004) (Config)
	float                                              TimeSinceLastMovement;                                    // 0x0198(0x0004)
	struct FName                                       CurrentInputContextName;                                  // 0x019C(0x0008)
	TArray<class UInputContextDefinition*>             CurrentInputContexts;                                     // 0x01A4(0x000C) (NeedCtorLink)
	TArray<struct FInputAxisData>                      Axes;                                                     // 0x01B0(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x01BC(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.NameToAxisStatePtr
	TArray<struct FDeviceLookAxisData>                 DeviceLookAxes;                                           // 0x01F8(0x000C) (NeedCtorLink)
	TArray<struct FInputButtonData>                    Buttons;                                                  // 0x0204(0x000C) (Native)
	unsigned char                                      UnknownData02[0x3C];                                      // 0x0210(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.NameToButtonStatePtr
	TArray<struct FName>                               LatentButtons;                                            // 0x024C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x3C];                                      // 0x0258(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowPlayerInput.InputActionToAvailabilityMap
	TArray<class UInputActionDefinition*>              PreSwitchAvailableActions;                                // 0x0294(0x000C) (Transient, NeedCtorLink)
	float                                              ControllerSensitivityX;                                   // 0x02A0(0x0004)
	float                                              ControllerSensitivityY;                                   // 0x02A4(0x0004)
	int                                                ControllerPresetIndex;                                    // 0x02A8(0x0004)
	TArray<struct FKeyRebindingData>                   KeyRebindings;                                            // 0x02AC(0x000C) (NeedCtorLink)
	TArray<struct FKeyRebindingData>                   ControllerRebindings;                                     // 0x02B8(0x000C) (NeedCtorLink)
	int                                                EndCrouchOnNextForwardMovement;                           // 0x02C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerInput");
		return ptr;
	}


	void ReleasedEndDuck();
	void PressedEndDuck();
	void ToggleViewAccel();
	void SetControllerSensitivityY(int Sensitivity);
	void SetControllerSensitivityX(int Sensitivity);
	void SetControllerSensitivity(int Sensitivity);
	unsigned char CheckForDoubleClickMove(float DeltaTime);
	void Jump();
	void DuckReleased();
	void DuckPressed();
	void SprintReleased();
	void SprintPressed();
	void TradePressed();
	void ReviveReleased();
	void RevivePressed();
	void PlayerInput(float DeltaTime);
	bool IsReviveHeld();
	bool InputAllowsSprint();
	void SetCurrentContextType(const struct FName& NewContextName);
	void SetInputContext(const struct FName& NewContextName, bool bForceUpdate);
	void PostChangeInputContext();
	void PreChangeInputContext();
	void UpdateLatentButtons();
	void PostProcessInput(float DeltaTime);
	void PreProcessInput(float DeltaTime);
	void InitInputSystem();
	void ProcessDeviceLookAxes(float DeltaTime, float InCurrentFOV, float InDefaultFOV, bool bZoomed);
	bool IsActionAvailable(class UInputActionDefinition* Action);
	struct FName DecodeButton(const struct FName& InButtonName);
	void SetControllerRebindings(const struct FString& InControllerRebindingString);
	void SetKeyRebindings(const struct FString& InKeyRebindingString);
	void WriteColumnText(class AHUD* HUD, const struct FString& Text, int ColumnSize, int* Counter, float* SavedX, float* SavedY, float* MaxY);
	void ReleasePressedButtons();
	bool ResetButtonState(const struct FName& ActionName);
	struct FName GetKeyForAction(const struct FName& ActionName, bool bOnlyKeyboardMouse, bool bNoRemapping);
	void SetupInputDevices();
};


// Class WillowGame.WillowPlayerPawnDataManager
// 0x0030 (0x003C - 0x006C)
class UWillowPlayerPawnDataManager : public UObject
{
public:
	TArray<struct FName>                               LoadedOnDemandPackageNames;                               // 0x003C(0x000C) (NeedCtorLink)
	TArray<class UObjectReferencer*>                   LoadedOnDemandPackageReferencers;                         // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FString>                             PackagesUnloadedDuringGC;                                 // 0x0054(0x000C) (NeedCtorLink)
	TArray<class AWillowPlayerController*>             WillowPlayerControllersAwaitingPackages;                  // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerPawnDataManager");
		return ptr;
	}


	void ClearReferencers();
	void ReferenceHasBeenApplied(class UObject* ReferencedObject);
	void SendRequiredOnDemandPackagesToClient(class AWillowPlayerController* Client);
	bool InformClientsPackageUnloaded(const struct FString& PackageName);
	void UnloadDataPackage(const struct FString& PackageName, class AWillowPlayerController* PlayerContext);
	bool InformClientsPackageLoaded(const struct FString& PackageName);
	void LoadDataPackageAsyncNoCallback(const struct FString& PawnDataPath, class AWillowPlayerController* PlayerContext);
	void LoadDataPackageAsync(const struct FString& PawnDataPath, const struct FPointer& Request);
	bool LoadDataPackage(const struct FString& PackageName, class AWillowPlayerController* PlayerContext);
	class UObject* FindAlreadyLoadedObject(const struct FString& ObjectPath);
	void LoadVSSVehicleDefinitionAsync(const struct FString& VSSVehicleDefinitionPath, class AWillowPlayerController* PlayerContext, class UObject* Payload, class UObject* Instigator, int IntParam, float FloatParam, const struct FName& CallbackCustomEventName);
	class UVehicleSpawnStationVehicleDefinition* LoadVSSVehicleDefinition(const struct FString& VSSVehicleDefinitionPath, class AWillowPlayerController* PlayerContext);
	void LoadSkillTreeDefinitionAsync(const struct FString& SkillTreeDefinitionPath, class AWillowPlayerController* PlayerContext, class UObject* Payload, class UObject* Instigator, int IntParam, float FloatParam, const struct FName& CallbackCustomEventName);
	class USkillTreeDefinition* LoadSkillTreeDefinition(const struct FString& SkillTreeDataPath, class AWillowPlayerController* PlayerContext);
	void LoadPlayerPawnDataAsync(const struct FString& PawnDataPath, class AWillowPlayerController* PlayerContext, class UObject* Payload, class UObject* Instigator, int IntParam, float FloatParam, const struct FName& CallbackCustomEventName);
	class AWillowPlayerPawn* LoadPlayerPawnData(const struct FString& PawnDataPath, class AWillowPlayerController* PlayerContext);
};


// Class WillowGame.WillowPlayerReplicationInfo
// 0x050C (0x0254 - 0x0760)
class AWillowPlayerReplicationInfo : public APlayerReplicationInfo
{
public:
	struct FPointer                                    VfTable_IINounAttributeProvider;                          // 0x0254(0x0004) (Const, Native, NoExport)
	int                                                ExpLevel;                                                 // 0x0258(0x0004) (Net, RepNotify)
	int                                                ExpPointsNextLevelAt;                                     // 0x025C(0x0004) (Net, Transient)
	int                                                ExpPointsNextLevelAtBaseValue;                            // 0x0260(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExpPointsNextLevelAtModifierStack;                        // 0x0264(0x000C) (Const, Transient, NeedCtorLink)
	int                                                LevelUpCount;                                             // 0x0270(0x0004) (Net, RepNotify)
	int                                                GeneralSkillPoints;                                       // 0x0274(0x0004) (Net, RepNotify)
	int                                                SpecialistSkillPoints;                                    // 0x0278(0x0004) (Net)
	int                                                bClassModIsBuffingTeam;                                   // 0x027C(0x0004)
	int                                                bClassModIsBuffingTeamHealth;                             // 0x0280(0x0004) (Net, RepNotify)
	int                                                bClassModIsBuffingTeamShields;                            // 0x0284(0x0004) (Net, RepNotify)
	int                                                bClassModIsBuffingTeamGuns;                               // 0x0288(0x0004) (Net, RepNotify)
	int                                                bClassModIsBuffingTeamAmmo;                               // 0x028C(0x0004) (Net, RepNotify)
	int                                                bClassModIsBuffingTeamActionSkill;                        // 0x0290(0x0004) (Net, RepNotify)
	struct FCurrencyState                              Currency[0xD];                                            // 0x0294(0x0014) (Net, RepNotify)
	TArray<struct FScriptDelegate>                     CurrencyChangedDelegates;                                 // 0x0398(0x000C) (NeedCtorLink)
	struct FResourcePoolReference                      HealthPool;                                               // 0x03A4(0x000C) (Net, RepRetry)
	struct FResourcePoolReference                      ShieldArmor;                                              // 0x03B0(0x000C) (Net, RepRetry)
	struct FVector                                     PawnLocation;                                             // 0x03BC(0x000C) (Net)
	class UPawnAllegiance*                             PawnAllegiance;                                           // 0x03C8(0x0004) (Net)
	class AWillowPlayerReplicationInfo*                VehicleBuddy;                                             // 0x03CC(0x0004) (Net)
	unsigned char                                      InjuredState;                                             // 0x03D0(0x0001) (Net)
	unsigned char                                      InjuredDeadState;                                         // 0x03D1(0x0001) (Net)
	unsigned char                                      bGFxMenuOpen;                                             // 0x03D2(0x0001) (Net)
	unsigned char                                      NumTrackedSkillSlotsInUse;                                // 0x03D3(0x0001) (Net, Transient)
	float                                              InjuredRemainingPct;                                      // 0x03D4(0x0004) (Net)
	float                                              RevivePct;                                                // 0x03D8(0x0004) (Net)
	unsigned long                                      bDuelingEnabled : 1;                                      // 0x03DC(0x0004) (Net)
	unsigned long                                      bTrainingDisabled : 1;                                    // 0x03DC(0x0004)
	unsigned long                                      bLobbyReady : 1;                                          // 0x03DC(0x0004) (Net)
	unsigned long                                      bTookDamageDuringLastDuel : 1;                            // 0x03DC(0x0004)
	unsigned long                                      bSaveGameLoaded : 1;                                      // 0x03DC(0x0004) (Net)
	unsigned long                                      bIsSaving : 1;                                            // 0x03DC(0x0004) (Net)
	unsigned long                                      bIsPartyLeader : 1;                                       // 0x03DC(0x0004) (Net)
	unsigned long                                      bHasSetProfileSettings : 1;                               // 0x03DC(0x0004) (Transient)
	unsigned long                                      bIsGuest : 1;                                             // 0x03DC(0x0004) (Net)
	unsigned long                                      bHideOnHUDIfEnemy : 1;                                    // 0x03DC(0x0004) (Net)
	unsigned long                                      bHasConfirmedCharacter : 1;                               // 0x03DC(0x0004) (Net, Transient)
	class UPlayerNameIdentifierDefinition*             CharacterNameIdDef;                                       // 0x03E0(0x0004) (Net, RepNotify)
	class UItemNamePartDefinition*                     ClassModNamePart;                                         // 0x03E4(0x0004) (Net)
	int                                                HighestCompletedPlayThrough;                              // 0x03E8(0x0004) (Net)
	int                                                NumReplicatedNouns;                                       // 0x03EC(0x0004) (Net)
	TArray<struct FNounAttributeState>                 NounState;                                                // 0x03F0(0x000C) (NeedCtorLink)
	struct FReplicatedNounAttributeState               ReplicatedNouns[0x14];                                    // 0x03FC(0x0010) (Net)
	struct FColor                                      PrimaryColor;                                             // 0x053C(0x0004) (Net, RepNotify)
	struct FColor                                      SecondaryColor;                                           // 0x0540(0x0004) (Net, RepNotify)
	struct FColor                                      TertiaryColor;                                            // 0x0544(0x0004) (Net, RepNotify)
	class UCustomizationDefinition*                    LocalCustomizations[0x5];                                 // 0x0548(0x0004)
	class UCustomizationDefinition*                    RemoteCustomizations[0x5];                                // 0x055C(0x0004) (Net, RepNotify)
	struct FReplicatedStandInGear                      StandInGear;                                              // 0x0570(0x0154) (Net, RepNotify)
	struct FTrackedSkillState                          TrackedSkills[0x11];                                      // 0x06C4(0x0008) (Net, Transient)
	class AController*                                 InitializeFor;                                            // 0x074C(0x0004) (Transient)
	int                                                NumOverpowerLevelsUnlocked;                               // 0x0750(0x0004) (Net)
	struct FScriptDelegate                             __OnCurrencyChanged__Delegate;                            // 0x0754(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerReplicationInfo");
		return ptr;
	}


	void ServerMigrateUniqueId(const struct FUniqueNetId& NewNetId);
	void RefreshStandInGear();
	void ServerSetStandInGear(const struct FWeaponDefinitionData& Weapon1Data, const struct FWeaponDefinitionData& Weapon2Data, const struct FItemDefinitionData& ShieldData, const struct FItemDefinitionData& GrenadeModData, const struct FItemDefinitionData& ClassModData);
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void OnPlayerJoinLeave();
	void Destroyed();
	bool IsRemotePlayer();
	class AWillowPlayerController* GetPrimaryPlayerPC();
	void ServerUpdatePRIRemoteCustomizationArray(class UCustomizationDefinition* NewCustomization);
	void ClientInitiateCustomizationRequest(class UCustomizationDefinition* NewCustomization);
	void ServerInitiateCustomizationRequest(class UCustomizationDefinition* NewCustomization);
	void InitiateCustomizationRequest(class UCustomizationDefinition* NewCustomization);
	void OnLevelUpCountIncremented();
	struct FString GetTrackedSkillDebugInfo(int TrackedSkillIndex);
	static void DisplayDebugTrackedSkills(class AHUD* HUD, float* out_YL, float* out_YPos);
	static void DisplayDebugAllPlayerNouns(class AHUD* HUD, float* out_YL, float* out_YPos);
	void NotifySaveStatus(bool inSaving);
	bool ServerSetPlayerNameAsCharName(class AWillowPlayerController* PC, const struct FString& NewPreferredName);
	bool IsInvalidName();
	void NotifyCurrencyDelegates();
	void UnregisterCurrencyChangedDelegate(const struct FScriptDelegate& CurrencyChangedDelegate);
	void RegisterCurrencyChangedDelegate(const struct FScriptDelegate& CurrencyChangedDelegate);
	void OnCurrencyChanged(const struct FCurrencyState& ChangedCurrency);
	void AddCurrencyOnHand(unsigned char FormOfCurrency, int AddValue);
	void SetCurrencyOnHand(unsigned char FormOfCurrency, int NewValue);
	int GetCurrencyOnHand(unsigned char FormOfCurrency);
	void GetAllCurrencyOnHand(int* Values);
	void InitializeAllCurrencyOnHand(int NewValues);
	void ServerDetermineViralAchievementSpread();
	void HandlePlayerJoinWithValidName();
	struct FString GetClassModName();
	void NotifyPlayerExpLevelUpdated();
	void NotifyPlayerCharacterClassUpdated();
	void NotifyPrimaryPlayerOfNewCharacterSelection();
	void SetUniqueId(const struct FUniqueNetId& PlayerUniqueId);
	void NotifyPlayerUidUpdated();
	void NotifyPlayerNameUpdated();
	void RunOnceClientInitialize();
	void ClientInitialize(class AController* C);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowPointLight
// 0x001C (0x01F8 - 0x0214)
class UWillowPointLight : public UPointLightComponent
{
public:
	unsigned long                                      bCheckFrameRate : 1;                                      // 0x01F8(0x0004)
	float                                              HighDetailFrameTime;                                      // 0x01FC(0x0004) (Edit)
	float                                              Lifetime;                                                 // 0x0200(0x0004)
	int                                                TimeShiftIndex;                                           // 0x0204(0x0004)
	TArray<struct FLightValues>                        TimeShift;                                                // 0x0208(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPointLight");
		return ptr;
	}


	void ResetLight();
};


// Class WillowGame.WillowPopulationDefinition
// 0x0008 (0x0054 - 0x005C)
class UWillowPopulationDefinition : public UPopulationDefinition
{
public:
	class UAIDefinition*                               AIDef;                                                    // 0x0054(0x0004) (Edit, Const)
	class UWillowClanDefinition*                       ClanDefinition;                                           // 0x0058(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowPopulationMaster
// 0x0020 (0x0088 - 0x00A8)
class UWillowPopulationMaster : public UPopulationMaster
{
public:
	struct FVehicleSpawnStationSlot                    VehicleSpawnStationSlots[0x2];                            // 0x0088(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationMaster");
		return ptr;
	}


	void UpdateGRI();
	void RemoveSpawnedActor(class AActor* TheActor, bool bKeepBody, bool bActorDied);
	class UVehicleSpawnStationVehicleDefinition* GetVehicleDefinitionFromVehicleSpawnStation(int StationSlot);
	int GetPooledVehicleIndexFromVehicleSpawnStation(int StationSlot, class UVehicleSpawnStationVehicleDefinition* VehicleDef);
	class AWillowVehicle* GetVehicleFromVehicleSpawnStation(int StationSlot);
	void DespawnVehicleFromVehicleSpawnStation(int StationSlot);
	bool SpawnVehicleFromVehicleSpawnStation(int StationSlot, class UVehicleSpawnStationVehicleDefinition* SpawnVehicleDef, const struct FVector& VehicleLocation, const struct FRotator& VehicleRotation);
	class AActor* SpawnActorFromOpportunity(class UPopulationFactory* TheFactory, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int Rarity, int OpportunityIdx, int PopOppFlags, bool bCanSave, bool bForceSpawn);
};


// Class WillowGame.WillowPopulationOpportunityPoint
// 0x0009 (0x021C - 0x0225)
class AWillowPopulationOpportunityPoint : public APopulationOpportunityPoint
{
public:
	int                                                MissionObjectiveBit;                                      // 0x021C(0x0004) (Edit, EditConst, DuplicateTransient)
	class UChallengeDefinition*                        AssociatedChallenge;                                      // 0x0220(0x0004) (Edit, Const)
	unsigned char                                      NumberInChallengeGroup;                                   // 0x0224(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationOpportunityPoint");
		return ptr;
	}

};


// Class WillowGame.WillowPopulationPoint
// 0x0074 (0x01C8 - 0x023C)
class AWillowPopulationPoint : public APopulationPoint
{
public:
	struct FPointer                                    VfTable_ISpecialMoveInterface;                            // 0x01C8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x01CC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x01D0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IISimpleAnimPlayer;                               // 0x01D4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x01D8(0x0004) (Const, Native, NoExport)
	class UWillowPopulationPointDefinition*            PointDef;                                                 // 0x01DC(0x0004) (Edit, Const, Net)
	class USkeletalMeshComponent*                      PointSkelMesh;                                            // 0x01E0(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	struct FInstanceDataSet                            InstanceState;                                            // 0x01E4(0x000C) (Component, NeedCtorLink)
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                              // 0x01F0(0x0010) (Net, Transient, RepNotify)
	class USpecialMoveComponent*                       SMComponent;                                              // 0x0200(0x0004) (ExportObject, Transient, Component, EditInline)
	unsigned long                                      bEditStretchy : 1;                                        // 0x0204(0x0004) (Edit, Transient)
	unsigned long                                      bMarkPointInvalidForCombat : 1;                           // 0x0204(0x0004) (Edit, Const)
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;                 // 0x0204(0x0004) (Edit, Const)
	class AActor*                                      StretchyActor;                                            // 0x0208(0x0004) (Edit, Const)
	struct FVector                                     StretchyOffset;                                           // 0x020C(0x000C) (Edit, Const)
	unsigned char                                      StretchyType;                                             // 0x0218(0x0001) (Edit, Const)
	unsigned char                                      NumberInChallengeGroup;                                   // 0x0219(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x021A(0x0002) MISSED OFFSET
	float                                              StretchyGravity;                                          // 0x021C(0x0004) (Edit, Const)
	int                                                SimpleAnimState;                                          // 0x0220(0x0004) (Transient)
	TArray<struct FSimpleAnimData>                     SimpleAnimInfo;                                           // 0x0224(0x000C) (Transient, NeedCtorLink)
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                                  // 0x0230(0x0004) (ExportObject, Transient, Component, EditInline)
	class AVolume*                                     CombatVolume;                                             // 0x0234(0x0004) (Edit, Const)
	class UChallengeDefinition*                        AssociatedChallenge;                                      // 0x0238(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationPoint");
		return ptr;
	}


	void ClearBodyCompositionInstance();
	FScriptInterface GetBodyInfoProvider();
	void ApplyPreviewBodyComposition();
	void ChangeInstanceDataSwitch(const struct FName& Switch, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	void ServerSpecialMove_StopAny();
	void ServerSpecialMove_Stop(class USpecialMoveDefinition* OldSMD);
	void ServerSpecialMove_Queue(class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, const struct FName& CallbackName, class UObject* CallbackObject, class UObject* Data);
	void ServerSpecialMove_Play(class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, const struct FName& CallbackName, class UObject* CallbackObject, class UObject* Data);
	void SetReplicatedSMData(struct FSpecialMoveData* NewSMData);
	unsigned char GetDefaultRootMotionRotationMode();
	unsigned char GetDefaultRootMotionMode();
	class USkeletalMeshComponent* GetSkelMesh();
	class USpecialMoveComponent* GetSMComponent();
	class AActor* GetActor();
	bool CanSpawnFromFactory(class UPopulationFactory* Factory, int GameStage, int Rarity);
	struct FVector GetStretchyOffset(int MeshIndex, int AnimIndex, float Percent);
	void ApplyOffsetToComponents(const struct FVector& Offset);
	void ActorSpawned(class AActor* SpawnedActor);
	struct FVector GetSpawnLocation();
	void PostBeginPlay();
	void InitializeRBPhys();
};


// Class WillowGame.WillowPopulationPoint_Dynamic
// 0x0000 (0x023C - 0x023C)
class AWillowPopulationPoint_Dynamic : public AWillowPopulationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationPoint_Dynamic");
		return ptr;
	}

};


// Class WillowGame.WillowPopulationPointDefinition
// 0x0070 (0x003C - 0x00AC)
class UWillowPopulationPointDefinition : public UGBXDefinition
{
public:
	struct FPointer                                    VfTable_IIBodyInfoProvider;                               // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIAnimProvider;                                   // 0x0040(0x0004) (Const, Native, NoExport)
	TArray<struct FSpawnAnimData>                      AnimMap;                                                  // 0x0044(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bOptimizeMemory : 1;                                      // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bRemoveRootBoneScaling : 1;                               // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bDynamicLightEnvironment : 1;                             // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bCastShadows : 1;                                         // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;                      // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bDynamic : 1;                                             // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bSynthesizeSHLight : 1;                                   // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bShadowFromEnvironment : 1;                               // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                        // 0x0050(0x0004) (Edit, Const)
	struct FBodyCompositionData                        BodyComposition;                                          // 0x0054(0x0014) (Const, Component, DuplicateTransient, NeedCtorLink)
	float                                              LightingBoundsScale;                                      // 0x0068(0x0004) (Edit, Const)
	int                                                NumVolumeVisibilitySamples;                               // 0x006C(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutExponent;                                 // 0x0070(0x0004) (Edit, Const)
	float                                              ModShadowFadeoutTime;                                     // 0x0074(0x0004) (Edit, Const)
	struct FLinearColor                                AmbientGlow;                                              // 0x0078(0x0010) (Edit, Const)
	struct FVector                                     AmbientShadowSourceDirection;                             // 0x0088(0x000C) (Edit, Const)
	struct FLinearColor                                AmbientShadowColor;                                       // 0x0094(0x0010) (Edit, Const)
	float                                              DominantShadowTransitionStartDistance;                    // 0x00A4(0x0004) (Edit, Const)
	float                                              DominantShadowTransitionEndDistance;                      // 0x00A8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationPointDefinition");
		return ptr;
	}


	void GetAnims(TArray<class UGearboxAnimDefinition*>* OutAnims);
	class USpecialMove_PopulationPoint* GetPointAnim(class UPopulationBodyTag* Key, class USpecialMove_Spawned* SpawnAnim);
};


// Class WillowGame.WillowPopulationPointEditorComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowPopulationPointEditorComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationPointEditorComponent");
		return ptr;
	}

};


// Class WillowGame.WillowPreviewComponent
// 0x0004 (0x06AC - 0x06B0)
class UWillowPreviewComponent : public USkeletalMeshComponent
{
public:
	class AWillowPawn*                                 CurrentPawn;                                              // 0x06AC(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPreviewComponent");
		return ptr;
	}

};


// Class WillowGame.PerchPreviewComponent
// 0x0008 (0x06B0 - 0x06B8)
class UPerchPreviewComponent : public UWillowPreviewComponent
{
public:
	class UPerchDefinition*                            PerchDef;                                                 // 0x06B0(0x0004) (Transient)
	unsigned long                                      bCyclePreviewAnim : 1;                                    // 0x06B4(0x0004) (Edit, EditorOnly)
	unsigned long                                      bCyclePreviewIndex : 1;                                   // 0x06B4(0x0004) (Edit, EditorOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PerchPreviewComponent");
		return ptr;
	}

};


// Class WillowGame.PhysicsJumpPreviewComponent
// 0x0008 (0x06B0 - 0x06B8)
class UPhysicsJumpPreviewComponent : public UWillowPreviewComponent
{
public:
	class APhysicsJumpNode*                            JumpNode;                                                 // 0x06B0(0x0004) (Transient)
	unsigned long                                      bCyclePreviewAnim : 1;                                    // 0x06B4(0x0004) (Edit, Transient, EditorOnly)
	unsigned long                                      bCyclePreviewIndex : 1;                                   // 0x06B4(0x0004) (Edit, Transient, EditorOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PhysicsJumpPreviewComponent");
		return ptr;
	}

};


// Class WillowGame.WillowPopulationPointPreviewComponent
// 0x0008 (0x06B0 - 0x06B8)
class UWillowPopulationPointPreviewComponent : public UWillowPreviewComponent
{
public:
	class UWillowPopulationPointDefinition*            PointDef;                                                 // 0x06B0(0x0004) (Transient)
	unsigned long                                      bCyclePreviewAnim : 1;                                    // 0x06B4(0x0004) (Edit, Transient, EditorOnly)
	unsigned long                                      bCyclePreviewMesh : 1;                                    // 0x06B4(0x0004) (Edit, Transient, EditorOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationPointPreviewComponent");
		return ptr;
	}

};


// Class WillowGame.WillowProfileSettings
// 0x0000 (0x0098 - 0x0098)
class UWillowProfileSettings : public UGearboxProfileSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowProfileSettings");
		return ptr;
	}


	bool IsSetToDefaults();
};


// Class WillowGame.WillowProjectile
// 0x02AC (0x01F4 - 0x04A0)
class AWillowProjectile : public AProjectile
{
public:
	struct FPointer                                    VfTable_IICounterBehavior;                                // 0x01F4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IITimerBehavior;                                  // 0x01F8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIKilledBehavior;                                 // 0x01FC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIProjectileBehavior;                             // 0x0200(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IITargetable;                                     // 0x0204(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x0208(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x020C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIAttachableActor;                                // 0x0210(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x0214(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x0218(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDrunkenProjectile;                              // 0x021C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIGearLikenessConsumer;                           // 0x0220(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDynamicObstacle;                                // 0x0224(0x0004) (Const, Native, NoExport)
	class UProjectileDefinition*                       Definition;                                               // 0x0228(0x0004) (Net, RepNotify)
	class UWillowDamageTypeDefinition*                 MyDamageTypeDefinition;                                   // 0x022C(0x0004) (Net, RepNotify)
	class UExplosionDefinition*                        MyExplosionDefinition;                                    // 0x0230(0x0004) (Net, RepNotify)
	class AWillowInventory*                            GearLikenessActor;                                        // 0x0234(0x0004) (Net, RepNotify)
	class UPawnAllegiance*                             Allegiance;                                               // 0x0238(0x0004) (Net, RepNotify)
	FScriptInterface                                   AllegianceParent;                                         // 0x023C(0x0008) (Transient)
	TArray<FScriptInterface>                           AllegianceChildren;                                       // 0x0244(0x000C) (Transient, NeedCtorLink)
	float                                              LastRBImpactEffectTime;                                   // 0x0250(0x0004) (Transient)
	class UMeshComponent*                              MyMeshClone;                                              // 0x0254(0x0004) (ExportObject, Component, EditInline)
	struct FTimerBehaviorUserState                     ProjectileTimers;                                         // 0x0258(0x0024)
	struct FCounterBehaviorUserState                   ProjectileCounters;                                       // 0x027C(0x0010)
	TArray<struct FName>                               ActiveBehaviorSets;                                       // 0x028C(0x000C) (NeedCtorLink)
	unsigned long                                      bIsProjectileDisabled : 1;                                // 0x0298(0x0004)
	unsigned long                                      bDamageReentrantFlag : 1;                                 // 0x0298(0x0004)
	unsigned long                                      bIsProjectileAttached : 1;                                // 0x0298(0x0004)
	unsigned long                                      bSuppressExplosionFX : 1;                                 // 0x0298(0x0004) (Edit)
	unsigned long                                      bAutoAimTarget : 1;                                       // 0x0298(0x0004) (Edit)
	unsigned long                                      bWaitForEffects : 1;                                      // 0x0298(0x0004) (Edit)
	unsigned long                                      bExploded : 1;                                            // 0x0298(0x0004) (Net, RepNotify)
	unsigned long                                      bWideCheck : 1;                                           // 0x0298(0x0004) (Net)
	unsigned long                                      bCheckProjectileLight : 1;                                // 0x0298(0x0004)
	unsigned long                                      bDLEInitialized : 1;                                      // 0x0298(0x0004) (Transient)
	unsigned long                                      bIsHoming : 1;                                            // 0x0298(0x0004) (Net, RepNotify)
	unsigned long                                      RetryFindHomingTarget : 1;                                // 0x0298(0x0004) (Transient)
	unsigned long                                      RetryNotInstigator : 1;                                   // 0x0298(0x0004) (Transient)
	unsigned long                                      RetryIgnoreFOVZTest : 1;                                  // 0x0298(0x0004) (Transient)
	unsigned long                                      RetryBestForwardTarget : 1;                               // 0x0298(0x0004) (Transient)
	unsigned long                                      RetryUniqueHomingTarget : 1;                              // 0x0298(0x0004) (Transient)
	unsigned long                                      bWithinCurrentlyPursuedNodeAlertRadius : 1;               // 0x0298(0x0004)
	unsigned long                                      bTakenDamage : 1;                                         // 0x0298(0x0004)
	unsigned long                                      bOvercharged : 1;                                         // 0x0298(0x0004) (Net, RepNotify)
	unsigned long                                      bCauseRadiusDamageToInstigator : 1;                       // 0x0298(0x0004)
	unsigned long                                      bIsStickyGrenade : 1;                                     // 0x0298(0x0004)
	unsigned long                                      bIsChildOfSticky : 1;                                     // 0x0298(0x0004)
	unsigned long                                      bBeingHealed : 1;                                         // 0x0298(0x0004) (Transient)
	unsigned long                                      WantsToLevelOffTrajectory : 1;                            // 0x0298(0x0004) (Transient)
	unsigned long                                      bActiveObstacle : 1;                                      // 0x0298(0x0004) (Transient)
	unsigned long                                      ReceiveWeaponFire : 1;                                    // 0x0298(0x0004) (Edit)
	unsigned long                                      IsWeaponFire : 1;                                         // 0x0298(0x0004) (Edit)
	struct FVector                                     AttachmentNormal;                                         // 0x029C(0x000C)
	class UParticleSystemComponent*                    ProjEffects;                                              // 0x02A8(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    OverchargedEffect;                                        // 0x02AC(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             EffectiveInFlightEffects;                                 // 0x02B0(0x0004) (Net)
	unsigned char                                      AutoAimProfile;                                           // 0x02B4(0x0001) (Edit)
	unsigned char                                      HomingTargetType;                                         // 0x02B5(0x0001)
	unsigned char                                      PayloadType;                                              // 0x02B6(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x02B7(0x0001) MISSED OFFSET
	float                                              AccelRate;                                                // 0x02B8(0x0004) (Edit)
	int                                                ExpLevel;                                                 // 0x02BC(0x0004) (Net, RepNotify)
	int                                                FiringOwnerStatsID;                                       // 0x02C0(0x0004)
	int                                                FiringWeaponStatsID;                                      // 0x02C4(0x0004)
	int                                                FiringWeaponMode;                                         // 0x02C8(0x0004)
	float                                              CheckRadius;                                              // 0x02CC(0x0004)
	class UClass*                                      ProjectileLightClass;                                     // 0x02D0(0x0004)
	class UPointLightComponent*                        ProjectileLight;                                          // 0x02D4(0x0004) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x02D8(0x0004) (Edit, ExportObject, Component, EditInline)
	class AActor*                                      HomingActor;                                              // 0x02DC(0x0004) (Net)
	struct FVector                                     HomingLocation;                                           // 0x02E0(0x000C) (Net)
	struct FRotator                                    HomingRotationOffset;                                     // 0x02EC(0x000C)
	struct FVector                                     LastHomingPollLocation;                                   // 0x02F8(0x000C)
	int                                                HomingTargetComponentIndex;                               // 0x0304(0x0004) (Net)
	float                                              RetryTargetSearchRange;                                   // 0x0308(0x0004) (Transient)
	float                                              RetryTargetSearchFOVAngle;                                // 0x030C(0x0004) (Transient)
	float                                              NextRetryFindHomingTargetTime;                            // 0x0310(0x0004) (Transient)
	float                                              RetryFindTargetDelay;                                     // 0x0314(0x0004)
	float                                              CustomGravityScaling;                                     // 0x0318(0x0004) (Net)
	struct FPointer                                    CurrentlyPursuedNode;                                     // 0x031C(0x0004) (Const, Native)
	struct FInstanceDataSet                            InstanceDataState;                                        // 0x0320(0x000C) (Component, NeedCtorLink)
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                              // 0x032C(0x0010) (Net, Transient, RepNotify)
	TArray<struct FHitActorData>                       HitActors;                                                // 0x033C(0x000C) (Component, NeedCtorLink)
	class UBulletListenerComponent*                    BulletListenerComponent;                                  // 0x0348(0x0004) (ExportObject, Component, EditInline)
	float                                              LastHomingRadius;                                         // 0x034C(0x0004)
	struct FVector                                     InitialRBImpulse;                                         // 0x0350(0x000C) (Net, RepNotify)
	struct FVector                                     Wave_LastOffset;                                          // 0x035C(0x000C) (Net)
	struct FWaveMotionData                             ProjectileWaveMotion;                                     // 0x0368(0x0028) (Net)
	class AActor*                                      ExtraNonBlockingActor;                                    // 0x0390(0x0004)
	class AProximityActor*                             ProxActor;                                                // 0x0394(0x0004)
	float                                              BaseStatusEffectChanceModifier;                           // 0x0398(0x0004) (Transient)
	float                                              BaseStatusEffectChanceModifierBaseValue;                  // 0x039C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BaseStatusEffectChanceModifierModifierStack;              // 0x03A0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectChanceModifier;                               // 0x03AC(0x0004) (Transient)
	float                                              StatusEffectChanceModifierBaseValue;                      // 0x03B0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  StatusEffectChanceModifierModifierStack;                  // 0x03B4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectSpreadTimeIntervalModifier;                   // 0x03C0(0x0004) (Transient)
	float                                              StatusEffectSpreadTimeIntervalModifierBaseValue;          // 0x03C4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  StatusEffectSpreadTimeIntervalModifierModifierStack;      // 0x03C8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectDamage;                                       // 0x03D4(0x0004) (Transient)
	float                                              StatusEffectDamageBaseValue;                              // 0x03D8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  StatusEffectDamageModifierStack;                          // 0x03DC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              InstigatorSelfDamageScale;                                // 0x03E8(0x0004) (Transient)
	float                                              InstigatorSelfDamageScaleBaseValue;                       // 0x03EC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  InstigatorSelfDamageScaleModifierStack;                   // 0x03F0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              OverrideStatusEffectBaseChance;                           // 0x03FC(0x0004)
	float                                              OverrideStatusEffectChance;                               // 0x0400(0x0004)
	float                                              OverrideStatusEffectDamage;                               // 0x0404(0x0004)
	float                                              OverrideInstigatorSelfDamageScale;                        // 0x0408(0x0004)
	float                                              CreatedTime;                                              // 0x040C(0x0004)
	float                                              SpeedMultiplier;                                          // 0x0410(0x0004) (Transient)
	float                                              SpeedMultiplierBaseValue;                                 // 0x0414(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SpeedMultiplierModifierStack;                             // 0x0418(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SecondsBeforeConsideringRemoval;                          // 0x0424(0x0004) (Config)
	float                                              SecondsBetweenRemovalAttempts;                            // 0x0428(0x0004) (Config)
	class AActor*                                      StickyIsAttachedTo;                                       // 0x042C(0x0004)
	float                                              CollisionRadiusBeforeSticky;                              // 0x0430(0x0004)
	float                                              FuseTime;                                                 // 0x0434(0x0004) (Net, Transient)
	float                                              FuseTimeBaseValue;                                        // 0x0438(0x0004) (Const)
	TArray<class UAttributeModifier*>                  FuseTimeModifierStack;                                    // 0x043C(0x000C) (Const, Transient, NeedCtorLink)
	int                                                NumberOfChildProjectiles;                                 // 0x0448(0x0004) (Net, Transient)
	int                                                NumberOfChildProjectilesBaseValue;                        // 0x044C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NumberOfChildProjectilesModifierStack;                    // 0x0450(0x000C) (Const, Transient, NeedCtorLink)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x045C(0x0004)
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                          // 0x0460(0x000C) (Net, RepNotify)
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                                  // 0x046C(0x0004) (Net, RepNotify)
	class AWillowLightProjectileManager*               LightProjMgr;                                             // 0x0470(0x0004) (Transient)
	int                                                DrunkenRandomNumberSeed;                                  // 0x0474(0x0004) (Net, Transient, RepNotify)
	class UMovementComponent*                          MovementComponent;                                        // 0x0478(0x0004) (ExportObject, Component, EditInline)
	float                                              DesiredWorldZForLeveling;                                 // 0x047C(0x0004) (Transient)
	float                                              LevelingTurnSpeed;                                        // 0x0480(0x0004) (Transient)
	class UClass*                                      TakingDamageFromType;                                     // 0x0484(0x0004) (Transient)
	FScriptInterface                                   TakingDamageFromDamageCauser;                             // 0x0488(0x0008) (Transient)
	class AController*                                 TakingDamageFromInstigator;                               // 0x0490(0x0004) (Transient)
	struct FVector                                     BehaviorHitNormal;                                        // 0x0494(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowProjectile");
		return ptr;
	}


	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
	void CheckAIAvoidance();
	void GetObstacleInfo(struct FObstacleData* Data);
	class AActor* GetObstacleActor();
	bool GetMagnetData(struct FVector* MagnetLoc, struct FVector* MagnetVel);
	void SetObstacleVelocity(struct FVector* NewVelocity);
	bool CanAvoidObstacle(struct FObstacleData* Obstacle);
	bool CanAvoidObstacles();
	void SetObstacleActive(bool bActive);
	bool IsObstacleActive();
	bool ShouldRefreshLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
	void AssumeLikenessOf(unsigned char Source, unsigned char GroupIndex, class UGearLikenessMeshComponent* MeshComp);
	void SetTargetLocation(const struct FVector& NewTargetLocation);
	void SetHomingTarget(class AActor* NewTarget, int NewTargetComponentIndex);
	void FindHomingTarget(unsigned char TargetType, float TargetSearchRange, float TargetSearchFOVAngle, bool bNotInstigator, bool bIgnoreFOVZTest, bool bBestForwardTarget, bool bRetryIfTargetNotFound, bool bUniqueTarget);
	void SetPatsy(const FScriptInterface& NewPatsy);
	FScriptInterface GetPatsy();
	bool IsBeingHealed();
	void SetBeingHealed(bool bNewBeingHealed);
	void SetDrunkenRandomNumberSeed(int RandomNumberSeed);
	float GetTerminalVelocity();
	bool IsLevelingNow();
	void Behavior_TagPayloadType(unsigned char InPayloadType);
	void Behavior_LevelOffTrajectory(float ZHeight, float TurnSpeed);
	void Behavior_SetExplosionDefinition(class UExplosionDefinition* MyExplosionDef);
	void Behavior_SetDamageTypeDefinition(class UWillowDamageTypeDefinition* DamageTypeDef);
	void Behavior_SetStickyGrenade();
	void OnKilledEnemy(class UObject* KilledObject);
	void OnKilledFriendly(class UObject* KilledObject);
	void OnKilledNeutral(class UObject* KilledObject);
	void OnDamagedNeutral(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage);
	void OnDamagedFriendly(class UObject* DamageTaker, float DamageAmount);
	void OnDamagedEnemy(class UObject* DamageTaker, bool bWasCrit, float HealthDamage, float ShieldDamage);
	void SetSpeed(float NewSpeed);
	void ClearBodyCompositionInstance();
	FScriptInterface GetBodyInfoProvider();
	void ApplyPreviewBodyComposition();
	void ChangeInstanceDataSwitch(const struct FName& Switch, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	float GetInstigatorSelfDamageScale();
	float GetFireIntervalChanceModifier();
	float GetStatusEffectBaseChanceModifier(class UObject* Context);
	float GetStatusEffectChanceModifier(class UObject* Context);
	float GetStatusEffectBaseDamage(class UObject* Context);
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStage();
	static int GetPlayerProjectileLevel(class AWillowPlayerController* PC);
	void SetMorphNodeWeight(class UMorphNodeWeight* Node, float NewWeight, float WeightBlendTime);
	class UProjectileDefinition* GetProjectileDefinition();
	void InitializeRBPhysics();
	void Behavior_RegisterTargetable(bool bUnregister);
	void TraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int TraceFlags, float TouchTime);
	void SetInfoBarVisibility(bool bVisible);
	bool HideTargetInfoOnHud(class APawn* HUDOwner);
	bool IsChampion();
	bool IsBoss();
	void GetTargetName(struct FString* TargetName);
	bool DoesTargetableTakeDamage();
	void GetExpInfo(int* ExpLevelValue);
	bool DisplayParentInfo();
	void GetAllBarInfo(TArray<struct FInfoBarData>* BarData);
	class AActor* GetTargetableActor();
	void Behavior_SetCanTarget(unsigned char ChangeStatus);
	int ShowSelfAsTarget(bool bControllersOnly);
	struct FVector GetDamageVector();
	class UMeshComponent* GetRigidBodyMesh();
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	void Behavior_Killed(class AActor* Killer, class UDamageTypeDefinition* TechFilter, unsigned char DeathType);
	void Behavior_CauseRadiusDamage(float Radius, float DamageAmount, bool bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, const struct FVector& Offset, const FScriptInterface& DamageCauser, bool bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray<class AActor*>* ActorsHurt);
	void Behavior_CauseDamage(class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, const FScriptInterface& DamageCauser, float BarrelSourceTime, float PlantSourceTime);
	void SetProximity(float ProximityRadius, float ProximityHeight);
	void SetHomingRotationOffset(const struct FRotator& RotationOffset);
	struct FVector GetHomingTargetLocation();
	unsigned char GetHomingTargetByType();
	void WasAttachedToActor(const struct FVector& InAttachmentNormal);
	class AActor* GetAttachedToActor();
	struct FVector GetAttachmentNormal();
	void AttachToActor(class AActor* ActorToAttachTo, const struct FVector& HitNormal, const struct FVector& HitLocation, const struct FName& BoneName);
	bool IsAttached();
	void DetonateProjectile();
	void Detonate();
	static float GetNextDetonationDelta();
	static void ResetDetonationDelta();
	bool SetVelocity(const struct FVector& ProjectileVelocity);
	bool GetVelocity(struct FVector* ProjectileVelocity);
	bool SetTimerState(unsigned char TimerId, const struct FBehaviorTimerState& TimerState);
	bool GetTimerState(unsigned char TimerId, struct FBehaviorTimerState* TimerState);
	float GetTimeSeconds();
	bool SetCounterState(unsigned char CounterId, const struct FBehaviorCounterState& CounterState);
	bool GetCounterState(unsigned char CounterId, struct FBehaviorCounterState* CounterState);
	float EvaluateAttributeInitialization(const struct FAttributeInitializationData& InitData);
	class UMeshComponent* GetMesh();
	class UAnimNode* FindAnimNode(const struct FName& NodeName);
	void SetRotationRate(const struct FRotator& NewRotationRate);
	float GetCollisionRadius();
	class ATemporalField* IsInTemporalField();
	class AActor* GetHomingTarget(class AWillowProjectile* Seeker, class AController* InstigatedBy);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void InitStats(class AWillowWeapon* InstigatorWeapon);
	void MyOnParticleSystemFinished(class UParticleSystemComponent* PSC);
	void Destroyed();
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	void HideProjectile();
	void TornOff();
	void ShutDown();
	void UnregisterBehaviorConsumerTimer();
	void DisableProjectile();
	bool GetImpactInfoForTouch(class AActor* TouchedActor, const struct FVector& TouchLocation, const struct FVector& TouchNormal, struct FImpactInfo* ImpactData);
	void ApplyOverchargedEffect();
	void SpawnFlightEffects();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SpawnClientExplosion();
	void TryAwardExperience(class AController* InstigatedBy, class UClass* DamageType);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DmgRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, const FScriptInterface& DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	void HandleOnHitEvents(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal, const struct FVector& HitLocation, unsigned char DamageSurfaceType, int BoneIndex, bool bIsProximityTouch);
	void SetDamageSurfaceTypeImpactDataAndBoneIndex(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal, struct FBehaviorParameters* EventData, unsigned char* DamageSurfaceType, struct FImpactInfo* ImpactData, int* BoneIndex);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void DoHitWall(const struct FVector& HitNormal, class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation);
	void HitWall(const struct FVector& HitNormal, class AActor* Other, class UPrimitiveComponent* OtherComp);
	bool AttemptReflection(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ProximityTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool StopsProjectile(class AProjectile* P);
	void ProcessTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HandleTouch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal, bool bIsProximityTouch);
	bool ShouldIgnoreTouchFrom(class AActor* TouchedActor, class UPrimitiveComponent* TouchedComponent, bool bIsProximityTouch, unsigned char* bTurnTouchIntoHitWall);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool IsBlockedByWillowInteractiveObject(class AActor* Other);
	void AvoidCollision(struct FVector* Accel);
	void DrawHomingDebugTracer(const struct FColor& LineColor);
	struct FVector GetCircularHomingAcceleration(const struct FVector& TargetLoc);
	void OnCounterEvent(unsigned char EventType, const struct FBehaviorParameters& EventData);
	void OnTimerEvent(unsigned char EventType, const struct FBehaviorParameters& EventData);
	void SetInitialState();
	void CreateProjectileLight();
	void InitWithVelocity(const struct FVector& StartingVelocity);
	void InitWithWaveMotion(const struct FVector& Direction, const struct FWaveMotionData& CustomProjectileWaveMotion);
	void SetVelocityAndAcceleration(const struct FVector& Direction);
	void Init(const struct FVector& Direction);
	void InitializeExplosion(class UExplosionDefinition* InExplosionDefinition);
	void InitializeDamageType(class UWillowDamageTypeDefinition* inDamageTypeDefinition);
	void UpdateAndDestroyNonVisibleActorInTimer();
	void DoOnSpawn();
	void RefreshGearLikenessComponents();
	class AWillowInventory* GetGearLiknessActor();
	void SetGearLikenessActor(class AWillowInventory* LikenessActor, bool bRefreshLikeness);
	class UObject* ProjectileGetBehaviorContext(struct FBehaviorContextData* ContextData);
	void InitializeFromDefinition(class UProjectileDefinition* InDefinition, int InExpLevel, class UWillowDamageTypeDefinition* CustomDamageTypeDefinition, bool bSkipOnSpawn, class UParticleSystem* CustomInFlightEffect, class UExplosionDefinition* CustomExplosionDefinition);
	void ReplicatedEvent(const struct FName& VarName);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	class AController* GetInstigatingController();
	void PostBeginPlay();
	bool GetHitDataForActor(class AActor* HitActor, struct FHitActorData* HitData);
	void AddHitActor(class AActor* HitActor, const struct FTraceHitInfo& HitInfo, const struct FVector& HitLocation, const struct FVector& HitNormal);
	static bool IsHomingDebugEnabled();
	static void ToggleHomingDebug();
	static void CalcTrajectoryByTime(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapTime, float LeapGravity, struct FVector* OutVelocity);
	static void CalcTrajectoryAtActor(class AActor* Source, class AActor* Target, const struct FTrajectoryData& Data, bool bCanDebug, float* OutTime, float* OutGravity, struct FVector* OutVelocity);
	static void CalcTrajectory(const struct FVector& StartLoc, const struct FVector& EndLoc, float LeapSpeed, float LeapAngle, float* OutTime, float* OutGravity, struct FVector* OutVelocity);
	static struct FVector GetTrajectoryOffset(float OffsetTime, float TotalTime, float Gravity, const struct FVector& StartVelocity);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	bool IsTargetableProxy();
	unsigned char GetAutoAimProfile();
	float GetMagnetismRange();
	struct FVector GetMagnetismOrigin();
	bool IsAutoAimTarget();
	float GetTargetingModifier();
	bool HasHomingTargetComponents();
	bool IsValidHomingTarget();
	bool IsTargetable(bool bIgnoreCloakAbility);
	bool GetTargetableIsHidden();
	bool CanSnapZoom();
	struct FVector GetSnapLocation();
	struct FVector GetTargetableLocation();
	unsigned char GetOpinion(class UObject* Other);
	void SetAllegiance(class UPawnAllegiance* NewAllegiance);
	class UPawnAllegiance* GetDefaultAllegiance();
	class UPawnAllegiance* GetObjectAllegiance();
	bool IsSameAllegiance(class UObject* anObject);
	bool IsNeutral(class UObject* anObject);
	bool IsFriendly(class UObject* anObject);
	bool IsEnemy(class UObject* anObject);
};


// Class WillowGame.WillowServerSideProjectile
// 0x0024 (0x04A0 - 0x04C4)
class AWillowServerSideProjectile : public AWillowProjectile
{
public:
	struct FVector                                     ServerLocation;                                           // 0x04A0(0x000C) (Net)
	struct FVector                                     ServerVelocity;                                           // 0x04AC(0x000C) (Net)
	struct FVector                                     ServerAcceleration;                                       // 0x04B8(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowServerSideProjectile");
		return ptr;
	}

};


// Class WillowGame.WillowPursuitGrid
// 0x0014 (0x003C - 0x0050)
class UWillowPursuitGrid : public UObject
{
public:
	TArray<struct FPursuitNode>                        PursuitNodes;                                             // 0x003C(0x000C) (NeedCtorLink)
	struct FName                                       GridName;                                                 // 0x0048(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPursuitGrid");
		return ptr;
	}


	void InitializeFromDefinition(class UWillowPursuitGridDefinition* GridDef);
};


// Class WillowGame.WillowPursuitGridDefinition
// 0x0014 (0x003C - 0x0050)
class UWillowPursuitGridDefinition : public UGBXDefinition
{
public:
	TArray<struct FPursuitNodeData>                    PursuitNodes;                                             // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	struct FName                                       GridName;                                                 // 0x0048(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPursuitGridDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowRegionDefinition
// 0x0004 (0x003C - 0x0040)
class UWillowRegionDefinition : public URegionDefinition
{
public:
	class UDownloadableExpansionDefinition*            DlcExpansion;                                             // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowRegionDefinition");
		return ptr;
	}


	static void SetAwesomeLevelOverride(int NewAwesomeLevelOverride);
	static void SetGameStageOverride(int NewGameStageOverride);
	bool GetDefaultRegionGameStage(int* MinGameStage, int* MaxGameStage, int* AwesomeLevel, int* GameStageIncreaseOverPlayerLevel);
	bool TestRegionGameStage(bool bDefaultGameStage, int* GameStage, int* AwesomeLevel);
	bool GetRegionGameStage(bool bDefaultGameStage, int* GameStage, int* AwesomeLevel);
};


// Class WillowGame.WillowReplicatedAmbientSound
// 0x0024 (0x0188 - 0x01AC)
class AWillowReplicatedAmbientSound : public AActor
{
public:
	class UAkEvent*                                    AkEvent;                                                  // 0x0188(0x0004) (Edit)
	TArray<class AWillowReplicatedAmbientSoundSource*> AdditionalSources;                                        // 0x018C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bEnabled : 1;                                             // 0x0198(0x0004) (Edit, Net)
	unsigned long                                      bUseSeamlessStop : 1;                                     // 0x0198(0x0004) (Edit, Const)
	unsigned long                                      bRegistered : 1;                                          // 0x0198(0x0004) (Transient)
	class UAkEvent*                                    StopAkEvent;                                              // 0x019C(0x0004) (Edit, Const)
	struct FAkPlayingInfo                              SeamlessPlayingInfo;                                      // 0x01A0(0x0008) (Component)
	class AWwiseSoundGroup*                            Group;                                                    // 0x01A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowReplicatedAmbientSound");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class WillowGame.WillowReplicatedAmbientSoundRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowReplicatedAmbientSoundRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowReplicatedAmbientSoundRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.WillowReplicatedAmbientSoundSource
// 0x0000 (0x0188 - 0x0188)
class AWillowReplicatedAmbientSoundSource : public ANote
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowReplicatedAmbientSoundSource");
		return ptr;
	}

};


// Class WillowGame.WillowSavedMove
// 0x0004 (0x00E8 - 0x00EC)
class UWillowSavedMove : public USavedMove
{
public:
	unsigned long                                      bSprint : 1;                                              // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSavedMove");
		return ptr;
	}


	static unsigned char SetFlags(unsigned char Flags, class APlayerController* PC);
	unsigned char CompressedFlags();
	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, unsigned char InDoubleClick, unsigned char InAnalogPct);
	bool CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta);
	void Clear();
};


// Class WillowGame.WillowScout
// 0x0000 (0x0724 - 0x0724)
class AWillowScout : public AScout
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScout");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ElevatorFinished
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_ElevatorFinished : public USequenceAction
{
public:
	class AWillowElevator*                             Elevator;                                                 // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ElevatorFinished");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_MissionSmokeTest
// 0x0018 (0x00B4 - 0x00CC)
class UWillowSeqAct_MissionSmokeTest : public USeqAct_Latent
{
public:
	TArray<struct FString>                             SaveGameList;                                             // 0x00B4(0x000C) (NeedCtorLink)
	int                                                CurrentSavegame;                                          // 0x00C0(0x0004)
	unsigned char                                      TestStatus;                                               // 0x00C4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	float                                              LatentFloat;                                              // 0x00C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_MissionSmokeTest");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_MoveElevator
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_MoveElevator : public USequenceAction
{
public:
	class AWillowElevator*                             Elevator;                                                 // 0x00A4(0x0004)
	unsigned char                                      Usage;                                                    // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                CallFloor;                                                // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_MoveElevator");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_ElevatorUsed
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_ElevatorUsed : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_ElevatorUsed");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControlSpline
// 0x0024 (0x009C - 0x00C0)
class UWillowSkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                             // 0x009C(0x0004) (Edit)
	unsigned char                                      SplineBoneAxis;                                           // 0x00A0(0x0001) (Edit)
	unsigned char                                      BoneRotMode;                                              // 0x00A1(0x0001) (Edit)
	unsigned char                                      EndSplineLocationSpace;                                   // 0x00A2(0x0001) (Edit)
	unsigned char                                      StartSplineLocationSpace;                                 // 0x00A3(0x0001) (Edit)
	unsigned long                                      bInvertSplineBoneAxis : 1;                                // 0x00A4(0x0004) (Edit)
	struct FVector                                     EndSplineOffset;                                          // 0x00A8(0x000C) (Edit)
	struct FVector                                     StartSplineOffset;                                        // 0x00B4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControlSpline");
		return ptr;
	}

};


// Class WillowGame.WillowSpectatorPoint
// 0x0000 (0x0288 - 0x0288)
class AWillowSpectatorPoint : public ACameraActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSpectatorPoint");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
};


// Class WillowGame.WillowStaggerAnimNodeBlend
// 0x0047 (0x00C5 - 0x010C)
class UWillowStaggerAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	int                                                StaggerNodeIndex;                                         // 0x00C8(0x0004)
	float                                              StaggerNodeWeight;                                        // 0x00CC(0x0004)
	float                                              StaggerNodeWeightTarget;                                  // 0x00D0(0x0004)
	float                                              BlendTimeToGo;                                            // 0x00D4(0x0004)
	struct FReferencePointComparisonData               AltCondition;                                             // 0x00D8(0x0018) (Edit, Const)
	unsigned long                                      bMirrorStaggerDef : 1;                                    // 0x00F0(0x0004) (Edit, Const)
	unsigned long                                      bMirrorStaggerAlt : 1;                                    // 0x00F0(0x0004) (Edit, Const)
	struct FRotator                                    AdditionalRotationDef;                                    // 0x00F4(0x000C) (Edit, Const)
	struct FRotator                                    AdditionalRotationAlt;                                    // 0x0100(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowStaggerAnimNodeBlend");
		return ptr;
	}


	bool EndStaggerBlend();
	bool StartStaggerBlend();
	bool PlayStaggerAnimation();
	bool StopStaggerAnimation();
};


// Class WillowGame.WillowSystemSettings
// 0x0034 (0x003C - 0x0070)
class UWillowSystemSettings : public UObject
{
public:
	TArray<struct FSystemOption>                       SystemOptions;                                            // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FResolution>                         SupportedResolutions;                                     // 0x0048(0x000C) (NeedCtorLink)
	int                                                QueuedResolution;                                         // 0x0054(0x0004) (Transient)
	int                                                ResolutionTimeout;                                        // 0x0058(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ResolutionDlg;                                            // 0x005C(0x0004) (Transient)
	class UWillowPauseTicker*                          ResolutionTicker;                                         // 0x0060(0x0004) (Transient)
	int                                                QueuedWindowMode;                                         // 0x0064(0x0004) (Transient)
	int                                                QueuedVSyncMode;                                          // 0x0068(0x0004) (Transient)
	int                                                PreviousVSyncMode;                                        // 0x006C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSystemSettings");
		return ptr;
	}


	void UpdateViewDistance();
	void ResetResolution();
	bool ConfirmResolution_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void UpdateResolutionTimer();
	void UpdateResolution();
	struct FString GetWindowModeString(bool bAllowedQueued);
	void Options_VSyncModeDirty(int Value);
	void Options_WindowModeDirty(int Value);
	void Options_ResolutionDirty(int Value);
	void UpdateSystemOption(const struct FName& SettingName, int Value);
	void UpdateTextureFade(int Value);
	void LoadSystemSettings(bool bSkipResolutionUpdate);
};


// Class WillowGame.WillowTacticalMapVolume
// 0x0008 (0x01BC - 0x01C4)
class AWillowTacticalMapVolume : public AVolume
{
public:
	float                                              UnrealUnitsPerPixel;                                      // 0x01BC(0x0004) (Config, GlobalConfig)
	float                                              NorthOffsetInDegreesClockwise;                            // 0x01C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTacticalMapVolume");
		return ptr;
	}

};


// Class WillowGame.WillowTradeManager
// 0x04CC (0x0188 - 0x0654)
class AWillowTradeManager : public AActor
{
public:
	unsigned char                                      Status;                                                   // 0x0188(0x0001) (Net, RepNotify)
	unsigned char                                      Stance;                                                   // 0x0189(0x0001)
	unsigned char                                      PartnerStance;                                            // 0x018A(0x0001) (Net)
	unsigned char                                      UnresolvedFlags;                                          // 0x018B(0x0001)
	int                                                TransactionHash;                                          // 0x018C(0x0004)
	class AWillowTradeManager*                         Partner;                                                  // 0x0190(0x0004)
	class AWillowPlayerController*                     PartnerWPC;                                               // 0x0194(0x0004)
	class AWillowPlayerReplicationInfo*                PartnerPRI;                                               // 0x0198(0x0004) (Net, RepNotify)
	int                                                MaxPartnerReceivableInventory;                            // 0x019C(0x0004) (Net)
	int                                                PartnerCashOffered;                                       // 0x01A0(0x0004) (Net)
	struct FTradeSlot                                  PartnerInvOffered[0x4];                                   // 0x01A4(0x0094) (Net, RepNotify)
	int                                                MyCashOffered;                                            // 0x03F4(0x0004)
	struct FTradeSlot                                  MyInvOffered[0x4];                                        // 0x03F8(0x0094)
	class AWillowVersusDuelInfo*                       DuelInfo;                                                 // 0x0648(0x0004)
	unsigned long                                      bInitialized : 1;                                         // 0x064C(0x0004)
	unsigned long                                      bAccepted : 1;                                            // 0x064C(0x0004)
	int                                                MaxMyReceivableInventory;                                 // 0x0650(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTradeManager");
		return ptr;
	}


	void OnPartnerInvChanged();
	int FindInventorySlot(class AWillowInventory* WInv, bool bPartner);
	bool CanDrop(class AWillowInventory* Inv);
	void OnUIClosed();
	bool IsForTrade(class AInventory* Inv);
	bool IsPendingItemSale(const struct FItemDefinitionData& DefinitionData);
	bool IsPendingWeaponSale(const struct FWeaponDefinitionData& DefinitionData);
	bool IsResolving();
	void UpdateInventoryOffered(class AWillowInventory* Inv, int Slot, int Quantity);
	void UpdatePartnerInventoryRefs();
	void DuelFinished(class AWillowVersusDuelInfo* FinishedDuel);
	bool IsDueling();
	bool IsTradeInitialized();
	void UpdateCashOffered(int NewCashValue);
	void UpdateStance(unsigned char NewStance);
	void CancelTrade();
	void RejectPendingRequest();
	void AcceptPendingRequest();
	void SharedInit(class AWillowPlayerController* NewPartner);
	void InitAsRequestee(class AWillowPlayerController* NewPartner);
	void InitAsRequester(class AWillowPlayerController* NewPartner);
	bool FindAndRemoveInv(const struct FTradeSlot& Slot);
	bool InventoryMatch(class AWillowInventory* Inv, const struct FTradeSlot& Slot);
	class UHUDWidget_Trading* GetTradingWidget();
	void OnAccepted();
	void OnInitialized();
	void CheckAcceptance();
	void CheckInitialization();
	void LogCurrentTrade();
	struct FString GetInvDesc(int Slot, bool FromPartner);
	struct FString GetInvDescSub(const struct FTradeSlot& Slot);
	int GetInvHash(const struct FTradeSlot& Slot);
	void DoUpdateStance(unsigned char NewStance, int NewTransactionHash);
	void DoUpdateCashOffered(int NewCashValue);
	class AWillowPlayerController* GetWPC();
	int CalcTransactionHash();
	void TradeParametersUpdated();
	void BreakTradeBond(unsigned char SelfStatus, unsigned char PartnerStatus);
	bool IsTradeHalfValid();
	void BeginDuel();
	void ResolveDuel();
	bool SetAssideDuelAssets();
	bool HashCheck();
	void CheckTradeComplete();
	void ResolveDuelWin();
	void ResolveDuelDraw();
	void ResolveDuelLoss();
	void ResolveTrade();
	void PerformTransaction();
	void TerminateTrade(unsigned char Reason);
	void KillTrade(unsigned char SelfReason, unsigned char PartnerReason);
	void InvalidateStance();
	void ServerTradeComplete();
	void ClientResolveTrade(unsigned char UnresolvedTradeSlots);
	void ServerOfferItem(const struct FItemDefinitionData& ItemDef, int Slot, int Quantity);
	void ServerOfferWeapon(const struct FWeaponDefinitionData& WeaponDef, int Slot);
	void ServerEmptyInvSlot(int Slot);
	void ClientStanceReset(int Hash);
	void ServerUpdateCashOffered(int NewCashValue);
	void ForceCancelTrade();
	void ServerCancelTrade();
	void ServerUpdateStance(unsigned char NewStance, int NewTransactionHash);
	void ServerAcceptPendingRequest();
	void ServerRejectPendingRequest();
	void Destroyed();
	void ReplicatedEvent(const struct FName& VarName);
	bool CanRetractOffer();
	bool CanStartOffer();
};


// Class WillowGame.WillowTrigger
// 0x001C (0x0194 - 0x01B0)
class AWillowTrigger : public ATrigger
{
public:
	struct FPointer                                    VfTable_IIUsable;                                         // 0x0194(0x0004) (Const, Native, NoExport)
	unsigned char                                      HUDIcon;                                                  // 0x0198(0x0001) (Deprecated)
	unsigned char                                      CostsToUseType;                                           // 0x0199(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x019A(0x0002) MISSED OFFSET
	class UInteractionIconDefinition*                  HUDIconDef;                                               // 0x019C(0x0004) (Edit)
	class UParticleSystemComponent*                    ParticleHighlight;                                        // 0x01A0(0x0004) (Edit, ExportObject, Component, EditInline)
	class USpriteComponent*                            TriggerSprite;                                            // 0x01A4(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bCostsToUse : 1;                                          // 0x01A8(0x0004) (Edit)
	int                                                CostsToUseAmount;                                         // 0x01AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTrigger");
		return ptr;
	}


	void NotifyUserCouldNotAffordAttemptedUse(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void PostBeginPlay();
};


// Class WillowGame.WillowWaypoint
// 0x0028 (0x01B0 - 0x01D8)
class AWillowWaypoint : public AWillowTrigger
{
public:
	struct FPointer                                    VfTable_IIMission;                                        // 0x01B0(0x0004) (Const, Native, NoExport)
	struct FMissionObjectiveWaypointData               WaypointInfo;                                             // 0x01B4(0x0010) (Edit, NeedCtorLink)
	int                                                AreaRadius;                                               // 0x01C4(0x0004) (Edit, Const)
	unsigned long                                      bUpdateObjectiveOnPlayerTouch : 1;                        // 0x01C8(0x0004) (Edit, Const)
	unsigned long                                      bEnabled : 1;                                             // 0x01C8(0x0004)
	TArray<class AVolume*>                             TouchVolumes;                                             // 0x01CC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowWaypoint");
		return ptr;
	}


	void MissionReactionObjectiveComplete(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* CompletedObjective);
	void MissionReactionObjectiveCleared(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* ClearedObjective);
	void MissionReactionObjectiveUpdated(class AMissionTracker* Tracker, class UMissionObjectiveDefinition* UpdatedObjective);
	void MissionReactionObjectiveSetChanged(class AMissionTracker* Tracker, class UMissionObjectiveSetDefinition* NewSet, class UMissionObjectiveSetDefinition* PreviousSet);
	void MissionReactionLevelLoad(class AMissionTracker* Tracker, class UMissionDefinition* Mission);
	void MissionReactionStatusChanged(class AMissionTracker* Tracker, class UMissionDefinition* Mission, unsigned char NewStatus);
	void ClearWaypoint();
	void ProcessPlayerTouch();
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
};


// Class WillowGame.WillowUIInteraction
// 0x0AA8 (0x0174 - 0x0C1C)
class UWillowUIInteraction : public UUIInteraction
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x0174(0x0004) (Const, Native, NoExport)
	TArray<struct FString>                             ExpandedMissions;                                         // 0x0178(0x000C) (NeedCtorLink)
	struct FtMenuData                                  BlankEntry;                                               // 0x0184(0x0098) (Const, NeedCtorLink)
	struct FMenuHeaderData                             BlankMenuHeader;                                          // 0x021C(0x0040) (Const, NeedCtorLink)
	TArray<struct FtMenuData>                          CurrentMenu;                                              // 0x025C(0x000C) (NeedCtorLink)
	struct FString                                     MenuURL;                                                  // 0x0268(0x000C) (NeedCtorLink)
	struct FString                                     MenuTitle;                                                // 0x0274(0x000C) (NeedCtorLink)
	unsigned char                                      HintFontSize;                                             // 0x0280(0x0001)
	unsigned char                                      MemDetailsSortStyle;                                      // 0x0281(0x0001)
	unsigned char                                      NetChannelSortStyle;                                      // 0x0282(0x0001)
	unsigned char                                      GearBuilderSortMode;                                      // 0x0283(0x0001) (Config)
	unsigned char                                      AttributeSortMode;                                        // 0x0284(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0285(0x0003) MISSED OFFSET
	struct FString                                     MenuHint;                                                 // 0x0288(0x000C) (NeedCtorLink)
	struct FString                                     MenuItemDetail;                                           // 0x0294(0x000C) (NeedCtorLink)
	struct FString                                     MenuDescriptionBoxStr;                                    // 0x02A0(0x000C) (NeedCtorLink)
	TArray<struct FMenuHeaderData>                     MenuHeaders;                                              // 0x02AC(0x000C) (NeedCtorLink)
	int                                                ActiveMenu;                                               // 0x02B8(0x0004)
	TArray<struct FString>                             DebugConsoleHeaders;                                      // 0x02BC(0x000C) (Config, NeedCtorLink)
	TArray<struct FDebugConsoleCommand>                DebugConsoleCommands;                                     // 0x02C8(0x000C) (Config, NeedCtorLink)
	TArray<struct FMenuHeaderData>                     SubMenuHeaders;                                           // 0x02D4(0x000C) (NeedCtorLink)
	int                                                ActiveSubMenu;                                            // 0x02E0(0x0004)
	TArray<struct FString>                             MenuStack;                                                // 0x02E4(0x000C) (NeedCtorLink)
	TArray<struct FtMenuData>                          WillowMenu;                                               // 0x02F0(0x000C) (NeedCtorLink)
	struct FtMenuLayout                                StatusMenuLayout;                                         // 0x02FC(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                MemoryMenuLayout;                                         // 0x0374(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                NetworkMenuLayout;                                        // 0x03EC(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                MissionMenuLayout;                                        // 0x0464(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                SkillMenuLayout;                                          // 0x04DC(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                GearBuilderMenuLayout;                                    // 0x0554(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                CommerceMenuLayout;                                       // 0x05CC(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                ChallengeMenuLayout;                                      // 0x0644(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                CurrentMenuLayout;                                        // 0x06BC(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                TeleportingMenuLayout;                                    // 0x0734(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                SharedInspectorMenuLayout;                                // 0x07AC(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                CustomizationMenuLayout;                                  // 0x0824(0x0078) (NeedCtorLink)
	struct FtMenuLayout                                DLCMenuLayout;                                            // 0x089C(0x0078) (NeedCtorLink)
	float                                              UIScaleX;                                                 // 0x0914(0x0004)
	float                                              UIScaleY;                                                 // 0x0918(0x0004)
	int                                                Menu_Top;                                                 // 0x091C(0x0004)
	int                                                Menu_At;                                                  // 0x0920(0x0004)
	int                                                Menu_IPP;                                                 // 0x0924(0x0004)
	class AWillowPlayerController*                     OwnerPC;                                                  // 0x0928(0x0004)
	struct FColor                                      BrightWhite;                                              // 0x092C(0x0004) (Const)
	struct FColor                                      DarkGrey;                                                 // 0x0930(0x0004) (Const)
	struct FColor                                      MediumGrey;                                               // 0x0934(0x0004) (Const)
	struct FColor                                      LightGrey;                                                // 0x0938(0x0004) (Const)
	struct FColor                                      Yellow;                                                   // 0x093C(0x0004) (Const)
	unsigned long                                      bOpened : 1;                                              // 0x0940(0x0004)
	unsigned long                                      bAutoGatherNetworkData : 1;                               // 0x0940(0x0004) (Transient)
	unsigned long                                      bCollapseChannelsByClass : 1;                             // 0x0940(0x0004) (Transient)
	unsigned long                                      bServerCPUSaturatedThisFrame : 1;                         // 0x0940(0x0004) (Transient)
	unsigned long                                      bOnlyShowRegisteredChallenges : 1;                        // 0x0940(0x0004) (Transient)
	unsigned long                                      bDisplayDetailedAttributes : 1;                           // 0x0940(0x0004)
	float                                              TimeUntilMenuRefresh;                                     // 0x0944(0x0004)
	float                                              NextHorizontalInputAxisTime;                              // 0x0948(0x0004)
	float                                              NextHorizontalInputAxisInterval;                          // 0x094C(0x0004)
	float                                              NextVerticalInputAxisTime;                                // 0x0950(0x0004)
	float                                              NextVerticalInputAxisInterval;                            // 0x0954(0x0004)
	int                                                LastWeaponIndex;                                          // 0x0958(0x0004)
	int                                                LastMerchantWeaponIndex;                                  // 0x095C(0x0004)
	int                                                LastItemIndex;                                            // 0x0960(0x0004)
	int                                                BlockUIInputSemaphore;                                    // 0x0964(0x0004)
	TArray<struct FName>                               SortedTravelStationList;                                  // 0x0968(0x000C) (NeedCtorLink)
	TArray<struct FNetworkChannelData>                 NetworkChannels;                                          // 0x0974(0x000C) (Transient, NeedCtorLink)
	float                                              NovodexMemoryEstimationFactor;                            // 0x0980(0x0004) (Config)
	TArray<struct FString>                             WeaponBalanceDefinitions;                                 // 0x0984(0x000C) (NeedCtorLink)
	TArray<struct FItemBuilderData>                    ItemBuilder;                                              // 0x0990(0x000C) (Config, NeedCtorLink)
	TArray<struct FItemBuilderBalanceDefinition>       ItemBuilderBalanceDefinitions;                            // 0x099C(0x000C) (Transient, NeedCtorLink)
	int                                                DebugPlayerIdentifiersAdded;                              // 0x09A8(0x0004) (Transient)
	TArray<struct FString>                             ItemTabNames;                                             // 0x09AC(0x000C) (Config, NeedCtorLink)
	struct FItemSettings                               ItemParts;                                                // 0x09B8(0x011C) (Transient, NeedCtorLink)
	struct FWeaponSettings                             WeaponParts;                                              // 0x0AD4(0x0114) (Transient, NeedCtorLink)
	int                                                ExpLevel;                                                 // 0x0BE8(0x0004) (Transient)
	int                                                GameStage;                                                // 0x0BEC(0x0004) (Transient)
	int                                                AwesomeLevel;                                             // 0x0BF0(0x0004) (Transient)
	TArray<class UChallengeConditionDefinition*>       BrokenChallengeConditions;                                // 0x0BF4(0x000C) (NeedCtorLink)
	TArray<struct FGearBuilderCustomizationUsageData>  CustomizationBalanceDefinitionsByUsage;                   // 0x0C00(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              PotentialCustomizationUsagesToFilterBy;                   // 0x0C0C(0x000C) (NeedCtorLink)
	int                                                CurrentCustomizationUsageFilterIndex;                     // 0x0C18(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowUIInteraction");
		return ptr;
	}


	void HandleClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void CloseMenu(bool bOnGameSessionEnded);
	void CloseStatusMenu(class AWillowPlayerController* PC);
	void RunStatusMenu(class AWillowPlayerController* PC);
	void Initialized();
	void AddNetworkSubmenuHeaders();
	void CalcActorClassStats();
	void SortNetworkUsageData();
	void FillChannelData(class UChannel* Chan);
	void GenerateNetworkChannelUsageNative();
	void GenerateMemoryUsageDataNative();
	void ExportMemoryUsageDataNative();
	void LogMemoryUsageDataNative();
	void SortMemoryUsageData();
	struct FString FormatFloatAsString(float Number, int FloatPrecision);
	struct FString FormatNumberAsString(int Number);
	void SyncContentBrowser(const struct FString& ObjPath);
	bool InputKey(int ControllerId, const struct FName& Key, unsigned char Event, float AmountDepressed, bool bGamepad);
	bool InputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	void AddNetworkSnapshotSubmenuScreen(const struct FtMenuData& MenuEntryTemplate);
	void AddMemorySnapshotSubmenuScreen(const struct FtMenuData& MenuEntryTemplate);
	void AddMemorySnapshotSummaryScreen(const struct FtMenuData& MenuEntryTemplate);
	struct FString GetMemorySnapshotTimestamp();
	void AddMemorySubmenuHeaders();
	void IncrementInstanceDataSwitch(const struct FName& InstanceDataSwitchName, int NewSwitchValue);
	void GetBodyCompositionFromScript(const FScriptInterface& BodyInfoProvider, struct FBodyCompositionData* BodyComposition);
	int GetNumberOfConfigurationsForRemainingWeaponParts(class UWeaponBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int StartingFromWeaponPartType);
	int GetNumberOfConfigurationsForWeaponManufacturer(class UWeaponBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer);
	int GetNumberOfConfigurationsForWeaponBalanceDefinition(class UWeaponBalanceDefinition* BalanceDefinition);
	void GetWeightedWeaponPartList(class UWeaponBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int WeaponPartType, TArray<struct FGearBuilderWeightedWeaponPart>* WeightedParts);
	class UManufacturerDefinition* GetSoleManufacturerForWeapon(class UWeaponBalanceDefinition* BalanceDefinition);
	int GetNumberOfConfigurationsForRemainingItemParts(class UInventoryBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int StartingFromItemPartType);
	int GetNumberOfConfigurationsForItemManufacturer(class UInventoryBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer);
	int GetNumberOfConfigurationsForItemBalanceDefinition(class UInventoryBalanceDefinition* BalanceDefinition);
	void GetWeightedItemPartList(class UInventoryBalanceDefinition* BalanceDefinition, class UManufacturerDefinition* Manufacturer, int ItemPartType, TArray<struct FGearBuilderWeightedInventoryPart>* WeightedParts);
	void GenerateListOfPossibleItemsToBuild(class UClass* DesiredInventoryClass, TArray<struct FString>* BalanceDefNames);
	void GenerateListOfPossibleWeaponsToBuild();
	void GenerateListOfPossibleCustomizationsToBuild();
	void TickImp(float DeltaTime);
	bool ShouldProcessUIInput();
	void BlockUIInput(bool bBlock);
	void ClearUIInputBlocks();
	void CreateAttributeMenu(bool bNotFilter, unsigned char SortMode, bool Detailed, TArray<struct FString>* Filter);
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStage();
};


// Class WillowGame.WillowVehicleBase
// 0x0050 (0x0828 - 0x0878)
class AWillowVehicleBase : public ASVehicle
{
public:
	struct FPointer                                    VfTable_IIResourcePoolProvider;                           // 0x0828(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyPawn;                                       // 0x082C(0x0004) (Const, Native, NoExport)
	float                                              CustomGravityZ;                                           // 0x0830(0x0004) (Edit)
	unsigned char                                      SightOriginType;                                          // 0x0834(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0835(0x0003) MISSED OFFSET
	struct FVector                                     SightOffset;                                              // 0x0838(0x000C) (Edit)
	struct FName                                       SightSocket;                                              // 0x0844(0x0008) (Edit)
	unsigned long                                      bLookingBack : 1;                                         // 0x084C(0x0004)
	unsigned long                                      bDisableReloadMessages : 1;                               // 0x084C(0x0004) (Net)
	unsigned long                                      TurretMovingNow : 1;                                      // 0x084C(0x0004) (Transient)
	float                                              LookingYaw;                                               // 0x0850(0x0004)
	float                                              LookingYawSpeed;                                          // 0x0854(0x0004) (Edit)
	class AWillowLightProjectileManager*               LightProjMgr;                                             // 0x0858(0x0004) (Transient)
	int                                                WeaponAmmo;                                               // 0x085C(0x0004) (Net)
	int                                                MaxWeaponAmmo;                                            // 0x0860(0x0004) (Net)
	struct FString                                     WeaponTypeScaleformName;                                  // 0x0864(0x000C) (Net, NeedCtorLink)
	class USwfMovie*                                   WeaponTypeScaleformDLCClip;                               // 0x0870(0x0004) (Net)
	class USpecialMove_Vehicle*                        ExitAnimationInUse;                                       // 0x0874(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleBase");
		return ptr;
	}


	void Destroyed_HandleDriver();
	void TeleportVehicleToStation(class ATravelStation* DestinationStation);
	void TeleportVehicleToLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	bool NoFailSetPawnLocation(class APawn* aPawn, const struct FVector& NewLocation);
	void UnsitAnimFinished();
	bool TeleportExitingDriver(class APawn* ExitingDriver, const struct FVector& OldLocation, const struct FVector& ExitLocation);
	bool FindAutoExitGearbox(class APawn* ExitingDriver, class AWillowVehicle* TheVehicle, class UWillowVehicleSeatDefinition* TheSeatDef, const struct FVector& DriverOldLocation, int RecursionLevel);
	bool PlaceExitingDriver(class APawn* ExitingDriver);
	bool ExitAnimIsSafeToUse(class AWillowVehicle* TheVehicleItself, class APawn* ExitingPawn, int MySeatIndex, class USpecialMove_Vehicle* ExitSeq, struct FVector* ExitPosition);
	bool GetExitLocationForAnim(class AWillowVehicle* TheVehicle, class UAnimSequence* Seq, class APawn* P, bool Mirrored, int SeatIndex, struct FVector* Loc, struct FVector* MeshSpaceLoc);
	bool ExitLocationIsSafeToUse(const struct FVector& WorldSpaceExitLocation, class AWillowVehicle* TheVehicle, class APawn* ExitingPawn, int RecursionLevel, bool SkipSnapToFloor, const struct FName& DebugName, struct FVector* AdjustedExitLocation);
	void ResurrectVehicle(unsigned char ResurrectReason);
	class AWillowVehicle* GetWillowVehicle();
	void ClientUnsitDriver(class AWillowPawn* WillowP, int SeatIndex);
	struct FVector GetDefaultExitLocation(class APawn* ExitingDriver);
	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
	bool IsOccupantAllowedToTakeDamage(class AWillowPawn* Occupant, int OccupantSeatNdx);
	bool CanBeBaseForPawn(class APawn* aPawn);
	class APawn* GetPawnToTeleport();
	void ProcessViewRotationInVehicle(class UPassengerCameraDefinition* Camera, const struct FRotator& VehicleRotation, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void ComputeViewPitchRange(class UPassengerCameraDefinition* Camera, const struct FRotator& VehicleRotation, const struct FRotator& ViewRotation, float* out_ViewPitchHorizontal, float* out_ViewPitchMin, float* out_ViewPitchMax);
	class AWillowAIPawn* GetAWillowAIPawn();
	class AWillowPlayerPawn* GetAWillowPlayerPawn();
	class AWillowPawn* GetAWillowPawn();
	struct FResourcePoolReference GetResourcePoolForResourceDefinition(class UResourceDefinition* Resource, bool bCreatePoolIfOneDoesntExist);
	void VehicleAdjustInput(float* aTurn, float* aLookUp, float* aForward, float* aStrafe);
	void VehicleNoLookBack();
	void VehicleLookBack();
	struct FVector GetExitAnimEndPosition(class UAnimSequence* Seq);
	void AttachDriver(class APawn* P, bool SkipAnim);
	bool DriverLeave(bool bForceLeave, bool SkipPawnPlacement);
	bool DriverAllowedToLeave();
	bool DriverEnter(class APawn* P, bool SkipAnim);
	void UnPossessed();
	bool NeedToTurn(const struct FVector& targ);
	float GetDamageScaling();
	bool BotFire(bool bFinished);
	unsigned char ChooseFireMode();
	void Suicide();
	void ServerChangeSeat(int RequestedSeat);
	void AdjacentSeat(int Direction, class AController* C);
	void OnTurretStatusChange(bool bTurretIsMoving);
	bool IsTargetable(bool bIgnoreCloakAbility);
	bool GetVehicleAndSeatIndex(class AWillowVehicle** WVehicle, int* SeatIndex);
	void TickReplicatedAmmoCount();
};


// Class WillowGame.WillowVehicle
// 0x049C (0x0878 - 0x0D14)
class AWillowVehicle : public AWillowVehicleBase
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x0878(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDamageSurface;                                  // 0x087C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIUsable;                                         // 0x0880(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x0884(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIStatusEffectTarget;                             // 0x0888(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIHealable;                                       // 0x088C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIDamageable;                                     // 0x0890(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyInfoProvider;                               // 0x0894(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x0898(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x089C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IICustomizable;                                   // 0x08A0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x08A4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIHitRegionConsumer;                              // 0x08A8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_ISpecialMoveInterface;                            // 0x08AC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMapDisplayInfo;                                 // 0x08B0(0x0004) (Const, Native, NoExport)
	int                                                ExpLevel;                                                 // 0x08B4(0x0004) (Net)
	int                                                GameStage;                                                // 0x08B8(0x0004)
	int                                                AwesomeLevel;                                             // 0x08BC(0x0004)
	float                                              ExperiencePointMultiplier;                                // 0x08C0(0x0004) (Edit, Transient)
	float                                              ExperiencePointMultiplierBaseValue;                       // 0x08C4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExperiencePointMultiplierModifierStack;                   // 0x08C8(0x000C) (Const, Transient, NeedCtorLink)
	unsigned long                                      bIsInvulnerable : 1;                                      // 0x08D4(0x0004) (Edit)
	unsigned long                                      bIsAIInvulnerable : 1;                                    // 0x08D4(0x0004) (Edit)
	unsigned long                                      bInDriverLeave : 1;                                       // 0x08D4(0x0004) (Transient)
	unsigned long                                      bAICanUse : 1;                                            // 0x08D4(0x0004) (Edit, Const)
	unsigned long                                      bAIClaimed : 1;                                           // 0x08D4(0x0004) (Transient)
	unsigned long                                      bTeamLocked : 1;                                          // 0x08D4(0x0004) (Net)
	unsigned long                                      bKeyVehicle : 1;                                          // 0x08D4(0x0004)
	unsigned long                                      bEjectPassengersWhenFlipped : 1;                          // 0x08D4(0x0004) (Edit)
	unsigned long                                      bDestroyVehicleWhenFlippedAndAIControlled : 1;            // 0x08D4(0x0004) (Edit)
	unsigned long                                      bMustBeUpright : 1;                                       // 0x08D4(0x0004) (Edit)
	unsigned long                                      bNeverReset : 1;                                          // 0x08D4(0x0004)
	unsigned long                                      bEjectKilledBodies : 1;                                   // 0x08D4(0x0004)
	unsigned long                                      bReducedFallingCollisionDamage : 1;                       // 0x08D4(0x0004)
	unsigned long                                      bTakingRadiusDamage : 1;                                  // 0x08D4(0x0004)
	unsigned long                                      bNoTeleportEffects : 1;                                   // 0x08D4(0x0004) (Transient)
	unsigned long                                      bInitialDamageReplicated : 1;                             // 0x08D4(0x0004) (Net)
	unsigned long                                      bDamageSmoking : 1;                                       // 0x08D4(0x0004)
	unsigned long                                      bHeavyDamageSmoking : 1;                                  // 0x08D4(0x0004)
	unsigned long                                      UseSimplifiedAIEngineRtpcModel : 1;                       // 0x08D4(0x0004) (Edit, Const)
	unsigned long                                      bPlayingSpawnEffect : 1;                                  // 0x08D4(0x0004) (Net)
	unsigned long                                      bShowDamageDebug : 1;                                     // 0x08D4(0x0004)
	unsigned long                                      bStealthVehicle : 1;                                      // 0x08D4(0x0004)
	unsigned long                                      bHandbrakeEffects : 1;                                    // 0x08D4(0x0004) (Net, RepNotify)
	unsigned long                                      bHoldingCam : 1;                                          // 0x08D4(0x0004)
	unsigned long                                      bReverseCam : 1;                                          // 0x08D4(0x0004)
	unsigned long                                      AfterburnerEngaged : 1;                                   // 0x08D4(0x0004) (Net, RepNotify)
	unsigned long                                      bInitialized : 1;                                         // 0x08D4(0x0004) (Transient)
	unsigned long                                      bHeadlightsOn : 1;                                        // 0x08D4(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bBraking : 1;                                             // 0x08D4(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bReversing : 1;                                           // 0x08D4(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bThrottling : 1;                                          // 0x08D4(0x0004) (Transient)
	unsigned long                                      bIsStationaryTurret : 1;                                  // 0x08D4(0x0004) (Edit)
	unsigned long                                      bSpawning : 1;                                            // 0x08D8(0x0004) (Net, RepNotify)
	unsigned long                                      bDespawned : 1;                                           // 0x08D8(0x0004) (Net, RepNotify)
	unsigned long                                      bDisableSeatSwap : 1;                                     // 0x08D8(0x0004) (Edit)
	unsigned long                                      bFrontalCollision : 1;                                    // 0x08D8(0x0004) (Const)
	unsigned long                                      bFrontalCollisionWithFixed : 1;                           // 0x08D8(0x0004) (Const)
	unsigned long                                      bScrapeActive : 1;                                        // 0x08D8(0x0004) (Transient)
	unsigned long                                      bScrapeCurrent : 1;                                       // 0x08D8(0x0004) (Transient)
	unsigned long                                      bIsAvailableForUse : 1;                                   // 0x08D8(0x0004) (Transient)
	unsigned long                                      bCostsToUse : 1;                                          // 0x08D8(0x0004) (Transient)
	unsigned long                                      bResurrecting : 1;                                        // 0x08D8(0x0004) (Transient)
	unsigned long                                      bSuspendBaseRestrictions : 1;                             // 0x08D8(0x0004) (Transient)
	float                                              MinRBImpactDamageForce;                                   // 0x08DC(0x0004) (Edit, Const)
	float                                              ImpactDamage;                                             // 0x08E0(0x0004)
	float                                              RunOverDamage;                                            // 0x08E4(0x0004)
	float                                              FeedbackDamage;                                           // 0x08E8(0x0004)
	float                                              LastRBImpactDamage;                                       // 0x08EC(0x0004) (Transient)
	float                                              HangTime;                                                 // 0x08F0(0x0004) (Transient)
	struct FVector                                     DebugPursuitPoint;                                        // 0x08F4(0x000C) (Transient)
	unsigned char                                      VehicleFOVState;                                          // 0x0900(0x0001) (Transient)
	unsigned char                                      Team;                                                     // 0x0901(0x0001) (Net, RepNotify)
	unsigned char                                      TurretFiringMode;                                         // 0x0902(0x0001)
	unsigned char                                      VehicleDeathStatus;                                       // 0x0903(0x0001) (Net, RepNotify)
	unsigned char                                      VehicleDamagePct;                                         // 0x0904(0x0001) (Net, RepNotify)
	unsigned char                                      LastBarrelIndex;                                          // 0x0905(0x0001)
	unsigned char                                      CostsToUseType;                                           // 0x0906(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0907(0x0001) MISSED OFFSET
	float                                              VehicleDesiredFOV;                                        // 0x0908(0x0004) (Transient)
	struct FName                                       HoodLeftSocketName;                                       // 0x090C(0x0008) (Edit, Const)
	struct FName                                       HoodRightSocketName;                                      // 0x0914(0x0008) (Edit, Const)
	int                                                ActorSpawnCost;                                           // 0x091C(0x0004) (Edit)
	class UHitRegionHelper*                            MyHitRegionHelper;                                        // 0x0920(0x0004)
	class UWillowVehicleControlDefinition*             CachedControlDef;                                         // 0x0924(0x0004)
	float                                              MaxInvertedGroundTime;                                    // 0x0928(0x0004) (Edit)
	float                                              FirstInvertedGroundCollisionTime;                         // 0x092C(0x0004) (Transient)
	float                                              LastInvertedGroundCollisionTime;                          // 0x0930(0x0004) (Transient)
	float                                              VehicleLostTime;                                          // 0x0934(0x0004)
	float                                              TeamUseTime;                                              // 0x0938(0x0004)
	float                                              PlayerStartTime;                                          // 0x093C(0x0004)
	float                                              RespawnTime;                                              // 0x0940(0x0004)
	float                                              InitialSpawnDelay;                                        // 0x0944(0x0004)
	float                                              ObjectiveGetOutDist;                                      // 0x0948(0x0004)
	class UAkEvent*                                    LockedOnAkEvent;                                          // 0x094C(0x0004) (Edit)
	class UClass*                                      RanOverDamageType;                                        // 0x0950(0x0004)
	class UClass*                                      RanIntoDamageType;                                        // 0x0954(0x0004)
	float                                              MinRunOverSpeed;                                          // 0x0958(0x0004)
	int                                                StolenAnnouncementIndex;                                  // 0x095C(0x0004)
	float                                              LastRunOverWarningTime;                                   // 0x0960(0x0004)
	float                                              MinRunOverWarningAim;                                     // 0x0964(0x0004)
	class AWillowVehicle*                              NextVehicle;                                              // 0x0968(0x0004)
	class AWillowVehicleFactory*                       ParentFactory;                                            // 0x096C(0x0004)
	class AWillowMind*                                 Reservation;                                              // 0x0970(0x0004)
	float                                              ResetTime;                                                // 0x0974(0x0004)
	float                                              TeamBeaconMaxDist;                                        // 0x0978(0x0004)
	float                                              TeamBeaconPlayerInfoMaxDist;                              // 0x097C(0x0004)
	float                                              WaterDamage;                                              // 0x0980(0x0004) (Edit)
	float                                              AccumulatedWaterDamage;                                   // 0x0984(0x0004)
	class UClass*                                      VehicleDrowningDamType;                                   // 0x0988(0x0004)
	struct FRotator                                    WeaponRotation;                                           // 0x098C(0x000C) (Net, RepNotify)
	class AWillowVehicleWeapon*                        AttachedWeapon;                                           // 0x0998(0x0004) (Net, RepNotify)
	struct FVector                                     TurretFlashLocation;                                      // 0x099C(0x000C) (Net, RepNotify)
	int                                                TurretFlashCount;                                         // 0x09A8(0x0004) (Net, RepNotify)
	struct FRotator                                    TurretWeaponRotation;                                     // 0x09AC(0x000C) (Net, RepNotify)
	class AWillowWeapon*                               TurretAttachedWeapon;                                     // 0x09B8(0x0004) (Net, RepNotify)
	class UStatusEffectsComponent*                     StatusEffectComp;                                         // 0x09BC(0x0004) (ExportObject, Component, EditInline)
	float                                              YawDampingVelMin;                                         // 0x09C0(0x0004) (Edit, Const)
	float                                              YawDampingVelMax;                                         // 0x09C4(0x0004) (Edit, Const)
	float                                              YawDampingAngPow;                                         // 0x09C8(0x0004) (Edit, Const)
	TArray<struct FVehicleSeatInstance>                Seats;                                                    // 0x09CC(0x000C) (Component, NeedCtorLink)
	int                                                DebugLastSeatNdx;                                         // 0x09D8(0x0004)
	TArray<struct FVirtualSeatStruct>                  VirtualSeats;                                             // 0x09DC(0x000C) (NeedCtorLink)
	TArray<struct FVehicleEffect>                      VehicleEffects;                                           // 0x09E8(0x000C) (Edit, Component, NeedCtorLink)
	TArray<struct FFDamageMorphTargets>                DamageMorphTargets;                                       // 0x09F4(0x000C) (NeedCtorLink)
	int                                                OldVehicleHealth;                                         // 0x0A00(0x0004)
	class USpecialMoveComponent*                       SMComponent;                                              // 0x0A04(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FReplicatedSpecialMoveData                  ReplicatedSMData;                                         // 0x0A08(0x0014) (Net, RepNotify)
	float                                              LastCheckedAnimSetsTime;                                  // 0x0A1C(0x0004) (Transient)
	float                                              LastRefreshedIdleAnimsTime;                               // 0x0A20(0x0004) (Transient)
	float                                              DamageSmokeThreshhold;                                    // 0x0A24(0x0004) (Edit)
	float                                              HeavyDamageSmokeThreshhold;                               // 0x0A28(0x0004) (Edit)
	float                                              MaxFireEffectDistance;                                    // 0x0A2C(0x0004) (Edit)
	float                                              LastJumpOutCheck;                                         // 0x0A30(0x0004)
	class UExplosionDefinition*                        ExplosionDefintion;                                       // 0x0A34(0x0004) (Edit)
	float                                              ExplosionRadius;                                          // 0x0A38(0x0004) (Edit)
	float                                              ExplosionDamage;                                          // 0x0A3C(0x0004) (Edit)
	float                                              ExplosionMomentum;                                        // 0x0A40(0x0004) (Edit)
	class UAkEvent*                                    HeavySuspensionShiftAkEvent;                              // 0x0A44(0x0004) (Edit)
	class UAkEvent*                                    LightSuspensionShiftAkEvent;                              // 0x0A48(0x0004) (Edit)
	float                                              LightSuspensionShiftThreshold;                            // 0x0A4C(0x0004) (Edit)
	float                                              HeavySuspensionShiftThreshold;                            // 0x0A50(0x0004) (Edit)
	float                                              LightSuspensionRefireRate;                                // 0x0A54(0x0004) (Edit)
	TArray<struct FSuspensionSound>                    SuspensionSounds;                                         // 0x0A58(0x000C) (Transient, Component, NeedCtorLink)
	struct FAkPlayingInfo                              HeavySuspensionPlayingInfo;                               // 0x0A64(0x0008) (Transient, Component)
	class UAkEvent*                                    TireLongAkEvent;                                          // 0x0A6C(0x0004) (Edit)
	class UAkEvent*                                    TireLatAkEvent;                                           // 0x0A70(0x0004) (Edit)
	class UAkRtpc*                                     TireLongAkRtpc;                                           // 0x0A74(0x0004) (Edit)
	class UAkRtpc*                                     TireLatAkRtpc;                                            // 0x0A78(0x0004) (Edit)
	float                                              TireNoiseCutoffSpeed;                                     // 0x0A7C(0x0004) (Edit)
	float                                              TireSlideCutoffRatio;                                     // 0x0A80(0x0004) (Edit)
	float                                              TireNoiseSmoothingSpeed;                                  // 0x0A84(0x0004) (Edit)
	float                                              TireSlideDecayRate;                                       // 0x0A88(0x0004) (Edit)
	struct FAkPlayingInfo                              TireLongPlayingInfo;                                      // 0x0A8C(0x0008) (Component)
	struct FAkPlayingInfo                              TireLatPlayingInfo;                                       // 0x0A94(0x0008) (Component)
	float                                              TireNoiseSmoothedValue;                                   // 0x0A9C(0x0004)
	class UAkSwitch*                                   LastTireMaterialAkSwitch;                                 // 0x0AA0(0x0004)
	float                                              LastTireLatRtpcValue;                                     // 0x0AA4(0x0004)
	class UAkEvent*                                    VehicleScrapeAkEvent;                                     // 0x0AA8(0x0004) (Edit, Const)
	class UAkRtpc*                                     VehicleScrapeAkRtpc;                                      // 0x0AAC(0x0004) (Edit, Const)
	float                                              VehicleScrapeRtpcDecayRate;                               // 0x0AB0(0x0004) (Edit, Const)
	struct FAkPlayingInfo                              VehicleScrapeAkPlayingInfo;                               // 0x0AB4(0x0008) (Transient, Component)
	float                                              LastVehicleScrapeAkRtpcValue;                             // 0x0ABC(0x0004) (Transient)
	class UAkEvent*                                    VehicleCollisionAkEvent;                                  // 0x0AC0(0x0004) (Edit, Const)
	class UAkRtpc*                                     VehicleImpactForceAkRtpc;                                 // 0x0AC4(0x0004) (Edit, Const)
	float                                              MinRBCollisionForceSound;                                 // 0x0AC8(0x0004) (Edit, Const)
	struct FAkPlayingInfo                              VehicleImpactAkPlayingInfo;                               // 0x0ACC(0x0008) (Transient, Component)
	float                                              LastImpactAkEventTime;                                    // 0x0AD4(0x0004) (Transient)
	float                                              LastImpactAkRtpcValue;                                    // 0x0AD8(0x0004) (Transient)
	class UAkEvent*                                    EngineStartAkEvent;                                       // 0x0ADC(0x0004) (Edit, Const)
	class UAkEvent*                                    EngineStopAkEvent;                                        // 0x0AE0(0x0004) (Edit, Const)
	class UAkRtpc*                                     EngineRpmAkRtpc;                                          // 0x0AE4(0x0004) (Edit, Const)
	class UAkRtpc*                                     EngineLoadAkRtpc;                                         // 0x0AE8(0x0004) (Edit, Const)
	class UAkRtpc*                                     EngineThrottleAkRtpc;                                     // 0x0AEC(0x0004) (Edit, Const)
	float                                              EngineRpmDecayRate;                                       // 0x0AF0(0x0004) (Edit, Const)
	float                                              EngineRpmIncreaseRate;                                    // 0x0AF4(0x0004) (Edit, Const)
	float                                              EngineRpmDecelRate;                                       // 0x0AF8(0x0004) (Edit, Const)
	float                                              EngineLoadIncreaseRate;                                   // 0x0AFC(0x0004) (Edit, Const)
	float                                              EngineLoadDecayRate;                                      // 0x0B00(0x0004) (Edit, Const)
	struct FAkPlayingInfo                              EngineAkPlayingInfo;                                      // 0x0B04(0x0008) (Transient, Component)
	float                                              LastRpmRtpcValue;                                         // 0x0B0C(0x0004) (Transient)
	float                                              LastLoadRtpcValue;                                        // 0x0B10(0x0004) (Transient)
	float                                              LastEffectiveSpeed;                                       // 0x0B14(0x0004) (Transient)
	float                                              DecelTimeStamp;                                           // 0x0B18(0x0004) (Transient)
	float                                              AfterburnerBelowThresholdTime;                            // 0x0B1C(0x0004) (Transient)
	struct FVector                                     TeamBeaconOffset;                                         // 0x0B20(0x000C)
	float                                              SpawnRadius;                                              // 0x0B2C(0x0004) (Edit)
	class UTexture2D*                                  LockedTexture;                                            // 0x0B30(0x0004)
	struct FVector                                     CachedPlayerWeaponAimPoint;                               // 0x0B34(0x000C) (Transient)
	struct FName                                       PlayerControllerNameForLastCachedAimPoint;                // 0x0B40(0x0008) (Transient)
	float                                              FullSteerThreshold;                                       // 0x0B48(0x0004) (Edit)
	float                                              AISteerChangeThreshold;                                   // 0x0B4C(0x0004) (Edit)
	float                                              ReverseAngle;                                             // 0x0B50(0x0004)
	float                                              SlopeMinDriveLimit;                                       // 0x0B54(0x0004) (Edit)
	float                                              SlopeMaxDriveLimit;                                       // 0x0B58(0x0004) (Edit)
	float                                              ReverseAngleDegrees;                                      // 0x0B5C(0x0004) (Edit)
	struct FVector                                     ImpulseMultiplier;                                        // 0x0B60(0x000C) (Edit)
	float                                              KillswitchBrakes;                                         // 0x0B6C(0x0004) (Edit)
	float                                              AICollisionBackupDistance;                                // 0x0B70(0x0004) (Edit)
	struct FVector                                     AICollisionTraceExtent;                                   // 0x0B74(0x000C) (Edit)
	float                                              HandbrakeLatVelCutoff;                                    // 0x0B80(0x0004) (Edit)
	float                                              WheelParticleCurrentScale;                                // 0x0B84(0x0004) (Transient)
	float                                              CurrentCamDist;                                           // 0x0B88(0x0004)
	float                                              DesiredCamDist;                                           // 0x0B8C(0x0004)
	struct FVector                                     SmoothedCamRotZ;                                          // 0x0B90(0x000C)
	float                                              ReleaseCamTime;                                           // 0x0B9C(0x0004)
	float                                              ReverseCamTime;                                           // 0x0BA0(0x0004)
	float                                              AfterburnerThreshold;                                     // 0x0BA4(0x0004)
	float                                              AfterburnerActivationTime;                                // 0x0BA8(0x0004)
	float                                              AfterburnerTorqueBonus;                                   // 0x0BAC(0x0004)
	struct FResourcePoolReference                      AfterburnerPool;                                          // 0x0BB0(0x000C) (Net, RepRetry)
	float                                              SpeedMultiplierAIOnly;                                    // 0x0BBC(0x0004) (Transient)
	float                                              SpeedMultiplierAIOnlyBaseValue;                           // 0x0BC0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SpeedMultiplierAIOnlyModifierStack;                       // 0x0BC4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SpeedMultiplierAll;                                       // 0x0BD0(0x0004) (Transient)
	float                                              SpeedMultiplierAllBaseValue;                              // 0x0BD4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  SpeedMultiplierAllModifierStack;                          // 0x0BD8(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class UWillowPursuitGrid*>                  PursuitGrids;                                             // 0x0BE4(0x000C) (NeedCtorLink)
	class UParticleSystemComponent*                    SkidEffect;                                               // 0x0BF0(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    AtRestEffect;                                             // 0x0BF4(0x0004) (ExportObject, Component, EditInline)
	float                                              LockedForwardVel;                                         // 0x0BF8(0x0004)
	struct FIndexPair                                  SwapPair;                                                 // 0x0BFC(0x0008) (Net, RepNotify)
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                                  // 0x0C04(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              LastMakeNoiseTime;                                        // 0x0C08(0x0004)
	class AResourcePoolManager*                        ResourcePoolManager;                                      // 0x0C0C(0x0004) (Net)
	float                                              DriverThreshold;                                          // 0x0C10(0x0004) (Edit)
	int                                                UpdateWheelContactNum;                                    // 0x0C14(0x0004)
	float                                              UpdateWheelContactTime;                                   // 0x0C18(0x0004)
	float                                              UpdateWheelContactInterval;                               // 0x0C1C(0x0004) (Edit)
	class UVSSUIDefinition*                            VSSUIDef;                                                 // 0x0C20(0x0004) (Net, Transient)
	class UVehicleHandlingDefinition*                  HandlingDef;                                              // 0x0C24(0x0004) (Edit)
	class UChassisDefinition*                          ChassisDef;                                               // 0x0C28(0x0004) (Edit)
	class UVehicleClassDefinition*                     VehicleDef;                                               // 0x0C2C(0x0004) (Edit)
	class UVehicleSpawnStationVehicleDefinition*       VSSVehicleDef;                                            // 0x0C30(0x0004) (Edit)
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                              // 0x0C34(0x0010) (Net, Transient, RepNotify)
	struct FReplicatedCoordinatedEffect                ReplicatedCFX;                                            // 0x0C44(0x0008) (Net, Transient, RepNotify)
	struct FInstanceDataSet                            InstanceDataState;                                        // 0x0C4C(0x000C) (Component, NeedCtorLink)
	class UMaterialInstance*                           VehicleMaterial;                                          // 0x0C58(0x0004)
	class UMaterialInstance*                           VehicleMaterialParent;                                    // 0x0C5C(0x0004) (Net, RepNotify)
	float                                              LastCheckedHeadlightsTime;                                // 0x0C60(0x0004) (Transient)
	class AWillowVehicleCombatArea*                    LastVehicleCombatArea;                                    // 0x0C64(0x0004) (Transient)
	float                                              LastCombatAreaCheckTime;                                  // 0x0C68(0x0004) (Transient)
	float                                              CombatAreaCheckInterval;                                  // 0x0C6C(0x0004) (Const)
	struct FVector                                     VelocityBeforeRBCollision;                                // 0x0C70(0x000C)
	float                                              MeleeImpulse;                                             // 0x0C7C(0x0004) (Edit)
	float                                              LastFrontalCollisionWithFixedTime;                        // 0x0C80(0x0004)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0C84(0x0004)
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                          // 0x0C88(0x000C) (Net, RepNotify)
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                                  // 0x0C94(0x0004) (Net, RepNotify)
	float                                              HitRegionHealthScaleAttribute;                            // 0x0C98(0x0004) (Transient)
	float                                              HitRegionHealthScaleAttributeBaseValue;                   // 0x0C9C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  HitRegionHealthScaleAttributeModifierStack;               // 0x0CA0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ImpactEffectReFireDelay;                                  // 0x0CAC(0x0004) (Edit)
	float                                              ImpactEffectThreshold;                                    // 0x0CB0(0x0004) (Edit)
	class UWillowImpactDefinition*                     ImpactEffectDefinition;                                   // 0x0CB4(0x0004) (Edit)
	float                                              LastImpactEffectTime;                                     // 0x0CB8(0x0004) (Transient)
	class UParticleSystemComponent*                    ScrapeEffectComponent;                                    // 0x0CBC(0x0004) (ExportObject, Component, EditInline)
	struct FPhysEffectInfo                             ScrapeEffectInfo;                                         // 0x0CC0(0x0014) (Edit)
	class UParticleSystem*                             DefaultWheelParticleSystem;                               // 0x0CD4(0x0004) (Edit)
	float                                              MinParticleSlipVelocity;                                  // 0x0CD8(0x0004) (Edit)
	float                                              LastScrapeTime;                                           // 0x0CDC(0x0004) (Transient)
	float                                              TotalSlip;                                                // 0x0CE0(0x0004) (Transient)
	float                                              LastSlideActive;                                          // 0x0CE4(0x0004) (Transient)
	TArray<struct FItemPoolInfo>                       ItemPoolList;                                             // 0x0CE8(0x000C) (Edit, Const, NeedCtorLink)
	int                                                CostsToUseAmount;                                         // 0x0CF4(0x0004) (Transient)
	class UCustomizationDefinition*                    CachedCustomization;                                      // 0x0CF8(0x0004) (Net, Transient, RepNotify)
	float                                              StrafeSteeringValue;                                      // 0x0CFC(0x0004)
	float                                              PreviousSteeringTime;                                     // 0x0D00(0x0004)
	float                                              TimeSelfLastDamagedByCollision;                           // 0x0D04(0x0004) (Transient)
	int                                                LastKnownNumberOfPlayers;                                 // 0x0D08(0x0004) (Transient)
	int                                                LastKnownMaxPlayerExpLevel;                               // 0x0D0C(0x0004) (Transient)
	float                                              TimeBetweenBalanceChecks;                                 // 0x0D10(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicle");
		return ptr;
	}


	void CrushedByActor(class AActor* Other);
	class APawn* GetOccupantWhoCanPickup(const FScriptInterface& Pickup, class AController** OutController);
	void ClientInitiateCustomizationRequest(class UCustomizationDefinition* NewCustomization);
	void InitiateCustomizationRequest(class UCustomizationDefinition* NewCustomization);
	struct FString GetMapDisplayName();
	struct FString GetMapDisplayHeader();
	bool HandleHealthDepleted(class AController* InstigatedBy, class UClass* DamageType, const struct FVector& HitLocation, const FScriptInterface& DamageCauser, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void Behavior_ChangeUsabilityCost(unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType);
	void Behavior_ChangeUsability(unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType);
	void OnDefaultFOVChanged();
	float GetAfterburnerVehicleFOV();
	float GetDefaultVehicleFOV();
	float GetFlexibleVehicleFOV(float InFOV);
	void SetSimObject(class USVehicleSimBase* NewSimObject);
	void ServerSpecialMove_StopAny();
	void ServerSpecialMove_Stop(class USpecialMoveDefinition* OldSMD);
	void ServerSpecialMove_Queue(class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, const struct FName& CallbackName, class UObject* CallbackObject, class UObject* Data);
	void ServerSpecialMove_Play(class USpecialMoveDefinition* NewSMD, float PlayRateScale, float Duration, const struct FName& CallbackName, class UObject* CallbackObject, class UObject* Data);
	void SetReplicatedSMData(struct FSpecialMoveData* NewSMData);
	unsigned char GetDefaultRootMotionRotationMode();
	unsigned char GetDefaultRootMotionMode();
	class USkeletalMeshComponent* GetSkelMesh();
	class USpecialMoveComponent* GetSMComponent();
	class AActor* GetActor();
	void PlayUIAkEvent(class UAkEvent* Event);
	bool ShieldAbsorbedAmmo(class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef, float* DamagePercentToAbsorb);
	float GetIntrinsicArmor();
	void OnShieldDepleted(class AController* DamageInstigator, unsigned char DamageType);
	void SetShieldStrength(float ShieldValue);
	float GetMaxShieldStrength();
	float GetShieldStrength();
	void NotifyDamageTaken(struct FDamageEventSummary* DamageSummary);
	void SetHidden(bool bNewHidden);
	void FreezeForCinematicMode();
	bool OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	void ResurrectVehicle(unsigned char ResurrectReason);
	class AWillowVehicle* GetWillowVehicle();
	void SetVehicleDespawned(bool bInDespawned, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void OnNoLongerTargetedByAI(class AWillowMind* AIMind);
	void OnTargetedByAI(class AWillowMind* AIMind);
	void PancakeOther(class APawn* Other);
	void GetExpInfo(int* ExpLevelValue);
	bool GetVehicleAndSeatIndex(class AWillowVehicle** WVehicle, int* SeatIndex);
	void Behavior_RegisterTargetable(bool bUnregister);
	void SetVehicleSpawning(bool bInSpawning);
	void ServerSetVehicleSpawning(bool bInSpawning);
	void SetVehicleMaterial(class UMaterialInstance* MatInst);
	void ServerSetVehicleMaterial(class UMaterialInstance* MatInst);
	void ServerNotifyAltFireTriggered();
	void ServerNotifyTargetLockSuccessful(class AActor* NewLockOnTarget);
	void RouteCallToServerForAltFireTrigger();
	void RouteCallToServerForTargetLockSuccess(class AActor* NewLockOnTarget);
	void ServerStopFireTurret(unsigned char FireModeNum);
	void StopAltFireTurret();
	void StartAltFireTurret();
	void StopFireTurret();
	void ServerStartFireTurret(unsigned char FireModeNum);
	void StartFireTurret();
	void ServerClearStatusEffects(bool bKillImmediately);
	void Behavior_ClearStatusEffects(bool bKillImmediately);
	void ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	class UImpactDefinition* GetUntouchImpact();
	class UImpactDefinition* GetTouchImpact();
	bool CanSplash();
	void FadeInTireNoise();
	void SetCanTargetCheat(bool bCanTargetIn);
	bool CanTarget();
	void SetCanTarget(bool bCanTargetIn);
	void ResetDebugData();
	class APawn* DebugGetNextDriverOrPassenger();
	struct FResourcePoolReference GetResourcePoolForResourceDefinition(class UResourceDefinition* Resource, bool bCreatePoolIfOneDoesntExist);
	void SetupSeatPawnViewLimits(int SeatIndex);
	void VehicleAdjustInput(float* aTurn, float* aLookUp, float* aForward, float* aStrafe);
	void GetTargetName(struct FString* TargetName);
	struct FVector GetTargetableLocation();
	bool DisplayParentInfo();
	void GetAllBarInfo(TArray<struct FInfoBarData>* BarData);
	bool IsAutoAimTarget();
	bool IsInvulnerable();
	void UpdateEngineSound(bool bStopSound);
	void StopEngineSound();
	void StartEngineSound();
	void NotifyUserCouldNotAffordAttemptedUse(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void SetInteractionIcon(class UInteractionIconDefinition* Icon, unsigned char UsedType);
	bool UseObject(class APawn* User, class UPrimitiveComponent* UsedComponent, unsigned char UsedType);
	void ApplyCameraYawDamping(float* aTurn);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	bool GetSeatLocationAndRotation(int SeatIndex, struct FVector* SeatLocation, struct FRotator* SeatRotation);
	struct FVector GetHijackLocation(int SeatIndex);
	unsigned char GetSide(const struct FVector& WorldLoc, int SeatIndex);
	void KillAfterburnerEffects();
	void AfterburnerEffects(float DeltaTime, bool AfterburnerIsOn);
	class APlayerController* ControllerToPlayEffects();
	void AfterburnerShakeTimer();
	void AfterburnerOff();
	void ServerAfterburnerOff();
	void AfterburnerOn();
	void ServerAfterburnerOn();
	void ValidateAfterburner();
	void Turbo();
	bool CanDeactivateAfterburner();
	bool CanActivateAfterburner();
	void TickPursuitNodes(float DeltaTime);
	class AWillowWeapon* GetCharacterWeapon(class AController* CharController);
	void DrawReverseConeDebug(const struct FVector& vecForward);
	void SetInputs(float InForward, float InStrafe, float InUp);
	void SetAIInputs(float InForward, const struct FVector& DesiredSteeringDirection, float InUp);
	void SpawnTracer(int nSeat, const struct FVector& EffectLocation, const struct FVector& HitLocation);
	void DamageDamage(int Index);
	void DamageDebug();
	void DrawHUD(class AHUD* H);
	void OnExitVehicle(class UWillowSeqAct_ExitVehicle* Action);
	void GetSVehicleDebug(TArray<struct FString>* DebugInfo);
	void MorphTargetDestroyed(int MorphNodeIndex);
	void SetMorphTarget(const struct FString& Cmd);
	void SetInitialMorph();
	void ApplyMorphHeal(int Amount);
	void ApplyMorphDamage(const struct FVector& HitLocation, int Damage);
	void InitializeMorphs();
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* Collision);
	void ApplyCollisionDamageFrom(class AActor* DamageCauser, class UPrimitiveComponent* OtherComponent, float DamageToApply);
	void ApplyCollisionDamageTo(class AActor* ActorToReceiveDamage, unsigned char CollisionEnum, class UPrimitiveComponent* OtherComponent, const struct FVector& inVelocity, bool bRunOverDamage);
	void TookDamageFromEnemy(class AController* InstigatedBy, class UCharacterClassDefinition* MyCharacterClass, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	struct FString GetHumanReadableName();
	int FindSeatIndexForPawn(class APawn* inPawn);
	void SitAnimFinished();
	void ClientCheckForSitAnimFinished();
	void UnsitDriver(class AWillowPawn* WillowP, class AWillowVehicleBase* VehicleOrWeaponPawn, int SeatIndex);
	void ClientUnsitDriver(class AWillowPawn* WillowP, int SeatIndex);
	void SitDriver(class AWillowPawn* WillowP, int SeatIndex, unsigned char Side, bool SkipAnim);
	void DetachDriver(class APawn* P);
	void AttachDriver(class APawn* P, bool SkipAnim);
	void PlayTeleportOutOfVehicleEffect(class AWillowPawn* WP);
	void PlayTeleportEffectAtLocation(class AWillowPawn* WP, const struct FVector& TeleportLocation);
	void PlayTeleportIntoVehicleEffect(class AWillowPawn* WP);
	void CheckVehicleDamage();
	void DropItemPoolItems();
	float AdjustFOVAngle(float VFOVAngle);
	void VehicleCalcCamera(float DeltaTime, int SeatIndex, bool bPivotOnly, struct FVector* out_CamLoc, struct FRotator* out_CamRot);
	bool CalcCamera(float DeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void VehicleWeaponHitLocationEffects(int SeatIndex, const struct FVector& HitLocation);
	void VehicleAdjustFlashLocation(int SeatIndex, unsigned char FireModeNum, const struct FVector& NewLocation, bool bClear);
	void VehicleAdjustFlashCount(int SeatIndex, unsigned char FireModeNum, bool bClear);
	void VehicleWeaponImpactEffects(const struct FVector& HitLocation, int SeatIndex);
	void VehicleWeaponFireEffects(const struct FVector& HitLocation, int SeatIndex);
	void VehicleWeaponStoppedFiring(bool bViaReplication, int SeatIndex);
	void WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication);
	void VehicleWeaponFired(bool bViaReplication, const struct FVector& HitLocation, int SeatIndex);
	class APlayerController* GetPlayerController(int SeatIndex);
	void WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& HitLocation);
	void GetWeaponViewAxes(class AWillowWeapon* WhichWeapon, struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis);
	bool OverrideEndFire(unsigned char FireModeNum);
	bool OverrideBeginFire(unsigned char FireModeNum);
	struct FRotator GetWeaponAim(class AWillowVehicleWeapon* VWeapon, bool bUseSeatPivotPoint);
	bool IsValidVehicleWeaponAimTraceHitActor(class AActor* HitActor);
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	struct FVector GetPhysicalFireStartLoc(class AWillowWeapon* ForWeapon);
	struct FVector GetEffectLocation(int SeatIndex);
	bool GetBarrelLocationAndRotation(int SeatIndex, struct FVector* SocketLocation, struct FRotator* SocketRotation);
	void ClearFlashLocation(class AWeapon* Who);
	void SetFlashLocation(class AWeapon* Who, unsigned char FireModeNum, const struct FVector& NewLoc);
	void IncrementFlashCount(class AWeapon* Who, unsigned char FireModeNum);
	void ClearFlashCount(class AWeapon* Who);
	void UnPossessed();
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void InitializeTurrets();
	class UMeshComponent* GetGunMeshFromInstanceData(int SeatIndex);
	void PreCacheSeatNames();
	void ClientInitializeSeats();
	class AWillowVehicleWeapon* SpawnWeaponForSeat(int SeatIndex);
	void ReinitializeSeats();
	void InitializeSeats();
	bool ImportantVehicle();
	bool IsArtillery();
	class AActor* GetHomingTarget(class AWillowProjectile* Seeker, class AController* InstigatedBy);
	bool IsFullyArmored();
	unsigned char GetDamageSurfaceTypeFromHit(struct FTraceHitInfo* HitInfo);
	unsigned char GetDefaultDamageSurfaceType();
	float AdjustMomentumForSurfaceType(float RawMomentum, class AController* DamageInstigator, class UDamageTypeDefinition* DamageTypeDefinition, const struct FTraceHitInfo& HitInfo);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline, float* InDamage, float* DamageSeverityPercent, struct FVector* Momentum, struct FTraceHitInfo* HitInfo);
	void TookDamageFromFriendly(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	void TakeDamage(float RawDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, bool bIsShieldRestore);
	void SetReservation(class AController* C);
	bool StopsProjectile(class AProjectile* P);
	bool SpokenFor(class AController* C);
	bool ChangedReservation(class APawn* P);
	float ReservationCostMultiplier(class APawn* P);
	unsigned char GetTeamNum();
	bool OpenPositionFor(class APawn* P);
	bool IndependentVehicle();
	void CheckReset();
	bool ApplySeatRuleSet(int SeatIndex, class AWillowMind* WMind);
	void PassengerLeave(int SeatIndex);
	bool DriverLeave(bool bForceLeave, bool SkipPawnPlacement);
	void SetupHandIKForPawn(class AWillowPawn* WPawn, int SeatIndex);
	void UpdateVirtualSeatMapping(int RealSeat);
	bool PassengerEnter(class APawn* P, int SeatIndex, bool SkipAnim);
	int GetFirstAvailableHijackSeat(class APawn* Attacker);
	int GetFirstAvailableSeatFor(class AController* C);
	void DriverLeft();
	void ActivateWeapon(int WeaponSeatIndex);
	bool DriverEnter(class APawn* P, bool SkipAnim);
	void SetVehicleBlockingMeshCollision(class APawn* DriverPawn);
	class AWillowVehicle* GetMoveTargetFor(class APawn* P);
	int NumPassengers();
	void UpdateControllerOnPossess(bool bVehicleTransition);
	void PlayHorn();
	bool TooCloseToAttack(class AActor* Other);
	void LockOnWarning(class AWillowProjectile* IncomingMissile);
	void SendLockOnMessage(int Switch);
	void ShootMissile(class AProjectile* P);
	void IncomingMissile(class AProjectile* P);
	bool Dodge(unsigned char DoubleClickMove);
	void TeamChanged();
	void SetTeamNum(unsigned char T);
	void PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void VehicleLocked(class APawn* P);
	bool TryToHijack(class APawn* P, int SeatIndex, bool SkipAnim);
	bool CanDrive(class APawn* P);
	bool TryToRide(class APawn* P, bool SkipAnim, int PreferredSeat);
	void DeactivateVehicle(bool PlayDeSpawnEffect);
	void BlowupVehicle();
	bool IsSafeFromBoundaryTurrets();
	bool IsOnTheGround();
	void ServerUnlockAchievementForAllPassengers(unsigned char Achievement);
	unsigned char LeviathanConvertDeathStatus();
	void ProcessLeviathanVehicleDeathEvent();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, class UDamagePipeline* Pipeline);
	void DiedEx(bool ForceResurrectPlayerOccupants, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, bool bInstaKill, bool bKilledByKillVolume, class UDamagePipeline* Pipeline);
	void TornOff();
	bool ChangeSeat(class AController* ControllerToMove, int RequestedSeat);
	bool HasPriority(class AController* first, class AController* Second);
	void ServerChangeSeat(int RequestedSeat);
	void SwitchSeats();
	int GetAdjacentSeatIndex(int Direction, class AController* C);
	class AController* GetControllerForSeatPosition(unsigned char SeatPosition);
	class AController* GetControllerForSeatIndex(int SeatIndex);
	int GetSeatIndexForController(class AController* ControllerToMove);
	bool AnySeatAvailable();
	bool HijackSeatAvailable(int SeatIndex, unsigned char Side);
	void DrivingStatusChanged();
	void EjectPassengers(bool KillThemAsWell, bool ForceResurrectKilledPlayers, bool bInstaKill, bool bKilledByKillVolume, class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitLocation);
	void ProcessOneEjectedPassenger(class APawn* OnePassenger, bool KillHimAsWell, bool ForceResurrectKilledPlayers, bool bInstaKill, bool bKilledByKillVolume, class AController* Killer, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FVector& HitLocation);
	void EjectPassengerPosition(unsigned char PositionToEject, bool bSkipExitAnim);
	bool SeatHasOccupant(int SeatIndex);
	int GetTotalOccupants();
	bool HasAIOccupants();
	bool HasPlayerOccupants();
	bool HasOccupiedTurret();
	bool HasAnySeatAvailableFor(class AController* C, int SeatIndex);
	bool SeatAvailableFor(class AController* C, int SeatIndex);
	bool Occupied();
	void ActivateHeadLight(bool bActivated);
	void ActivateReverseLight(bool bActivated);
	void ActivateBrakeLight(bool bActivated);
	void AttachGun(int SeatIndex);
	void ReplicatedEvent(const struct FName& VarName);
	void WeaponRotationChanged(int SeatIndex);
	void Destroyed();
	bool IsOccupantAllowedToTakeDamage(class AWillowPawn* Occupant, int OccupantSeatNdx);
	bool CanBeBaseForPawn(class APawn* aPawn);
	void DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, const FScriptInterface& DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, const FScriptInterface& DamageCauser, float DamageFalloffExponent, class UDamagePipeline* Pipeline);
	void TakeWaterDamage(float DeltaTime);
	void RanInto(class AActor* Other);
	void ShutOffVehicleEffectsOnDeath();
	void VehicleEvent(const struct FName& EventTag);
	void UpdateVehicleEffect(const struct FName& EventTag);
	void TriggerVehicleEffect(const struct FName& EventTag);
	void SetVehicleEffectparams(const struct FName& TriggerName, class UParticleSystemComponent* PSC);
	void InitializeEffects();
	bool FastVehicle();
	void JumpOutCheck();
	void EjectDriver();
	void SelfDestruct();
	void StopDeSpawnEffect(class UObject* Target);
	void StopSpawnEffect(class UObject* Target);
	void NotifyFinishTeleport();
	void RefreshCrewIdleAnimations();
	void NotifyBeginTeleport();
	bool PlayDeSpawnEffect();
	void PlaySpawnEffect();
	float GetChargePower();
	void Attach(class AActor* Other);
	void FilterActorAttachmentRequest(class AActor* Other);
	void UnwrapToSimObj();
	void UnwrapSimpleSettings();
	bool NodeIsOnFavoredSide(bool TargetOnRight, bool IsTargetInFront, bool FacingSame, bool NodeOnLeft);
	int FindGrid(class UWillowPursuitGridDefinition* GridDef);
	void ReserveBestNode(class AActor* ReservationRequester, bool TargetIsOnRight, bool IsTargetInFront, bool FacingSame, class UWillowPursuitGridDefinition* GridDef, const struct FName& PreferredNodeType, int* GridIndex, int* NodeIndex);
	void RecalculateAttributeInitializedState();
	void OnExpLevelChange();
	void BalanceVehicleForPlayerUse();
	void SetHealthResourcePoolDefinition(class UResourcePoolDefinition* Definition, class AResourcePoolManager** InResourcePoolManager);
	void PostBeginPlay();
	void InitializeBehaviorConsumer();
	void SetDefaultInventory(TArray<class UItemPoolDefinition*>* NewDefaultInventory);
	void SetDefaultInventoryWithProbability(TArray<struct FItemPoolInfo>* NewDefaultInventory);
	void CheckForCollision();
	bool CanReceiveStatusEffects();
	void ReactToPrimaryStatusEffect(class UStatusEffectDefinition* StatusEffect);
	class UObject* GetAttributeContextSource();
	float GetBoundingSphereRadius();
	void GetHitRegions(TArray<class UBodyHitRegionDefinition*>* Regions, class UBodyHitRegionDefinition** DefaultRegion);
	void AttachEmitter(class AEmitter* E, const struct FName& SocketName);
	class UParticleSystem* GetDefaultStatusEffectsParticleSystemTemplate();
	TArray<struct FName> GetDefaultStatusEffectSockets();
	class UStatusEffectsComponent* GetStatusEffectsComponent();
	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStage();
	bool CanEnterVehicle(class APawn* P);
	bool HasHomingTargetComponents();
	bool IsValidHomingTarget();
	bool IsTargetable(bool bIgnoreCloakAbility);
	static bool IsCollisionDebugEnabled();
	static void ToggleCollisionDebug();
	static bool IsReverseConeDebugEnabled();
	static void ToggleReverseConeDebug();
	static bool IsVehiclePatrolDebugEnabled();
	static void ToggleVehiclePatrolDebug();
	static bool IsVehiclePursuitDebugEnabled();
	static void ToggleVehiclePursuitDebug();
	void InitializeRBPhys();
	void TerminateRBPhys();
	int GetBarrelIndex(int SeatIndex);
	struct FVector GetSeatPivotPoint(int SeatIndex);
	void ForceWeaponRotation(int SeatIndex, const struct FRotator& NewRotation);
	class AWillowVehicleWeapon* SeatAttachedWeapon(int SeatIndex, class AWillowVehicleWeapon* NewAttachedWeapon, bool bReadValue);
	int SeatFiringMode(int SeatIndex, int NewFireMode, bool bReadValue);
	int SeatFlashCount(int SeatIndex, int NewCount, bool bReadValue);
	struct FVector SeatFlashLocation(int SeatIndex, const struct FVector& NewLoc, bool bReadValue);
	struct FRotator SeatWeaponRotation(int SeatIndex, const struct FRotator& NewRot, bool bReadValue);
	void PlayHit(class APawn* SomePawn, const struct FVector& HitLocation, class UClass* inDamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	bool WasSpawnedFromASpawnStation();
	class UWillowVehicleSeatDefinition* GetSeatDefinition(int InSeatIndex);
	void RemoveCrewAnimSetFromOccupant(class AWillowPawn* WillowP);
	void AddCrewAnimSetToOccupant(class AWillowPawn* WillowP);
	bool IsChampion();
	void ResetHitRegionHealth(class UBodyHitRegionDefinition* HitRegion);
	void PlayHealingReaction(struct FDamageReactionData* Data);
	void PlayDamageReaction(const struct FName& HitBone, bool bDeath, struct FDamageReactionData* Data, struct FVector* HitLocation, struct FVector* HitMomentum);
	void GetHitRegionHealthValues(class UBodyHitRegionDefinition* HitRegion, float* outHealth, float* outMaxHealth);
	void ReplicateDamageEffect(class UBodyHitRegionDefinition* HitRegion, int GoreDataIndex, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, bool bWasHeal);
	void AddDamageToHitRegion(class AController* InstigatedBy, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UBodyHitRegionDefinition* HitRegion, const struct FVector& HitLocation, const struct FVector& HitMomentum, struct FDamageEventSummary* DamageSummary);
	void HealDamageOnHitRegion(class AController* InstigatedBy, class UBodyHitRegionDefinition* HitRegion, struct FDamageEventSummary* DamageSummary);
	class UBodyHitRegionDefinition* GetHitRegionForTakenDamage(class AController* InstigatedBy, const struct FTraceHitInfo& HitInfo);
	void ClearBodyCompositionInstance();
	FScriptInterface GetBodyInfoProvider();
	void ApplyPreviewBodyComposition();
	void ChangeInstanceDataSwitch(const struct FName& Switch, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	bool IsInsideCombatArea(class AWillowVehicleCombatArea* TheCombatArea);
	bool AllowFallbackToDefaultCustomizations();
	void RefreshCustomizationsOnInstanceData();
	struct FName GetCustomizableName();
	class UCustomizationDefinition* GetDesiredCustomizationOfType(class UClass* Type);
	void CustomizationApplied(class UCustomizationData* Data);
	void GetCustomizableInstanceDataSets(TArray<struct FPointer>* OutData);
	void RemoveAllStatusEffects();
	void FullyReplenishShields();
	void FullyReplenishLife();
	void SearchForBaseBelow(float HeightBelow, class AActor** NewBase, struct FVector* HitNormal);
};


// Class WillowGame.WillowVehicle_ChopperVehicle
// 0x004C (0x0D14 - 0x0D60)
class AWillowVehicle_ChopperVehicle : public AWillowVehicle
{
public:
	TArray<int>                                        GroundEffectIndices;                                      // 0x0D14(0x000C) (NeedCtorLink)
	float                                              MaxGroundEffectDist;                                      // 0x0D20(0x0004)
	struct FName                                       GroundEffectDistParameterName;                            // 0x0D24(0x0008)
	class UParticleSystem*                             WaterGroundEffect;                                        // 0x0D2C(0x0004)
	float                                              FullAirSpeed;                                             // 0x0D30(0x0004) (Edit)
	TArray<int>                                        ContrailEffectIndices;                                    // 0x0D34(0x000C) (NeedCtorLink)
	struct FName                                       ContrailColorParameterName;                               // 0x0D40(0x0008)
	unsigned long                                      bAutoLand : 1;                                            // 0x0D48(0x0004)
	unsigned long                                      bFreelanceStart : 1;                                      // 0x0D48(0x0004)
	float                                              PushForce;                                                // 0x0D4C(0x0004)
	struct FString                                     RadarLockMessage;                                         // 0x0D50(0x000C) (Const, Localized, NeedCtorLink)
	float                                              LastRadarLockWarnTime;                                    // 0x0D5C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicle_ChopperVehicle");
		return ptr;
	}


	void SetInputs(float InForward, float InStrafe, float InUp);
	bool ShouldClamp();
	void ResetTurningSpeed();
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	bool Dodge(unsigned char DoubleClickMove);
	bool FastVehicle();
	bool RecommendLongRangedAttack();
	void SetDriving(bool bNewDriving);
};


// Class WillowGame.WillowVehicle_FlyingVehicle
// 0x004C (0x0D14 - 0x0D60)
class AWillowVehicle_FlyingVehicle : public AWillowVehicle
{
public:
	float                                              FlyingSpeed;                                              // 0x0D14(0x0004) (Edit)
	struct FVector                                     AirTransFriction;                                         // 0x0D18(0x000C) (Edit)
	float                                              AirRotFriction;                                           // 0x0D24(0x0004) (Edit)
	struct FVector                                     ForceScalar;                                              // 0x0D28(0x000C) (Edit)
	float                                              TorqueScalar;                                             // 0x0D34(0x0004) (Edit)
	float                                              TiltScalar;                                               // 0x0D38(0x0004) (Edit)
	float                                              MoveTiltAmount;                                           // 0x0D3C(0x0004) (Edit)
	float                                              HeightMin;                                                // 0x0D40(0x0004) (Edit)
	float                                              HeightMax;                                                // 0x0D44(0x0004) (Edit)
	float                                              HeightDesiredMin;                                         // 0x0D48(0x0004) (Edit)
	float                                              HeightDesiredMax;                                         // 0x0D4C(0x0004) (Edit)
	float                                              DyingGravity;                                             // 0x0D50(0x0004) (Edit)
	float                                              TraceLookAheadVelocityScalar;                             // 0x0D54(0x0004) (Edit)
	float                                              TraceStartHeight;                                         // 0x0D58(0x0004) (Edit)
	float                                              TurretConeAngle;                                          // 0x0D5C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicle_FlyingVehicle");
		return ptr;
	}


	void ApplyCameraYawDamping(float* aTurn);
	struct FImpactInfo TraceThroughTriggers(const struct FVector& EndTrace, const struct FVector& StartTrace);
	float SuggestRiseInput(float LookAheadVelocityScalar, float TestHeight);
	float GetRiseInput(float LookAheadScale, float TestHeight);
	void SetAIInputs(float InForward, const struct FVector& DesiredSteeringDirection, float InRise);
	void SetInputs(float InForward, float InStrafe, float InUp);
	void UnwrapToSimObj();
};


// Class WillowGame.WillowVehicle_Tank
// 0x0018 (0x0D14 - 0x0D2C)
class AWillowVehicle_Tank : public AWillowVehicle
{
public:
	unsigned long                                      bUseSensors : 1;                                          // 0x0D14(0x0004) (Edit)
	unsigned long                                      bSteerToFaceDirection : 1;                                // 0x0D14(0x0004)
	TArray<struct FTankSensor>                         Sensors;                                                  // 0x0D18(0x000C) (Edit, NeedCtorLink)
	float                                              TimeBetweenSensorTests;                                   // 0x0D24(0x0004) (Edit)
	float                                              SensorCheckTime;                                          // 0x0D28(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicle_Tank");
		return ptr;
	}


	void SetAIInputs(float InForward, const struct FVector& DesiredSteeringDirection, float InRise);
	void CheckForCollision();
};


// Class WillowGame.WillowVehicle_WheeledVehicle
// 0x000C (0x0D14 - 0x0D20)
class AWillowVehicle_WheeledVehicle : public AWillowVehicle
{
public:
	float                                              DriftingTimeStamp;                                        // 0x0D14(0x0004) (Transient)
	class UParticleSystem*                             BeamTemplate;                                             // 0x0D18(0x0004)
	class UNxForceFieldRadialComponent*                TemplateFF;                                               // 0x0D1C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicle_WheeledVehicle");
		return ptr;
	}


	int GetWheelIndexFromBoneName(const struct FName& BoneName);
	void UnwrapToSimObj();
	void ProcessViewRotationInVehicle(class UPassengerCameraDefinition* Camera, const struct FRotator& VehicleRotation, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void ServerNoHandbrake();
	void ServerHandBrake();
	void NoHandbrake();
	void Handbrake();
	void PostBeginPlay();
	void PreBeginPlay();
};


// Class WillowGame.WillowWeaponPawn
// 0x0014 (0x0878 - 0x088C)
class AWillowWeaponPawn : public AWillowVehicleBase
{
public:
	class AWillowVehicleWeapon*                        MyVehicleWeapon;                                          // 0x0878(0x0004) (Net, RepNotify)
	class AWillowVehicle*                              MyVehicle;                                                // 0x087C(0x0004) (Net, RepNotify)
	int                                                MySeatIndex;                                              // 0x0880(0x0004) (Net, RepNotify)
	unsigned long                                      DriverIsAttached : 1;                                     // 0x0884(0x0004)
	unsigned long                                      SeatIndexReceived : 1;                                    // 0x0884(0x0004)
	unsigned long                                      bInDriverLeave : 1;                                       // 0x0884(0x0004) (Transient)
	float                                              FixViewTime;                                              // 0x0888(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowWeaponPawn");
		return ptr;
	}


	struct FVector GetAimDirection();
	struct FVector GetPivotPoint();
	void SetAllegiance(class UPawnAllegiance* NewAllegiance);
	bool OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	class AWillowVehicle* GetWillowVehicle();
	void ClientUnsitDriver(class AWillowPawn* WillowP, int SeatIndex);
	bool GetVehicleAndSeatIndex(class AWillowVehicle** WVehicle, int* SeatIndex);
	void ServerNotifyAltFireTriggered();
	void ServerNotifyTargetLockSuccessful(class AActor* NewLockOnTarget);
	void StopFireTurret();
	void StartFireTurret();
	class APawn* GetPawnToTeleport();
	void ProcessViewRotationForAttachedRiders(float DeltaTime, struct FRotator* out_ViewRotation);
	void ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void VehicleAdjustInput(float* aTurn, float* aLookUp, float* aForward, float* aStrafe);
	void GetExpInfo(int* ExpLevelValue);
	bool DisplayParentInfo();
	void GetAllBarInfo(TArray<struct FInfoBarData>* BarData);
	bool IsDead();
	void TakeDamage(float RawDamage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	void SitAnimFinished();
	void ClientCheckForSitAnimFinished();
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	bool IndependentVehicle();
	void DetachDriver(class APawn* P);
	void AttachDriver(class APawn* P, bool SkipAnim);
	void WaitingForReplicatedData();
	void SetBaseEyeheight();
	struct FVector GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc);
	float GetCollisionRadius();
	bool DoJump(bool bUpdating);
	void SetMovementPhysics();
	void BaseChange();
	void JumpOffPawn();
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const struct FTraceHitInfo& HitInfo);
	void DropToGround();
	void ServerChangeSeat(int RequestedSeat);
	void SwitchSeats();
	bool IsOccupantAllowedToTakeDamage(class AWillowPawn* Occupant, int OccupantSeatNdx);
	void DoAttachedRiderSetup(class AController* C);
	bool DriverLeave(bool bForceLeave, bool SkipPawnPlacement);
	void PossessWeaponPawnForAttachedRiderExit();
	void ClientPossessAttachedRiderOnEntry(class APawn* RiderPawn);
	void ServerPossessAttachedRiderOnEntry(class AController* C);
	void DriverLeft();
	bool DriverEnter(class APawn* P, bool SkipAnim);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void ClearFlashLocation(class AWeapon* Who);
	void SetFlashLocation(class AWeapon* Who, unsigned char FireModeNum, const struct FVector& NewLoc);
	void ClearFlashCount(class AWeapon* Who);
	void IncrementFlashCount(class AWeapon* Who, unsigned char FireModeNum);
	void GetWeaponFacingDir(struct FVector* OutFacingDir);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void SetVehicleData(class AWillowVehicle* InMyVehicle, class AWillowVehicleWeapon* InVehicleWeapon, int InSeatIndex);
	bool IsAttachedRiderSeat();
	class AController* GetDriverController();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowVehicleCombatArea
// 0x0010 (0x0188 - 0x0198)
class AWillowVehicleCombatArea : public AActor
{
public:
	float                                              CombatRadius;                                             // 0x0188(0x0004) (Edit)
	float                                              CombatDisplayHeight;                                      // 0x018C(0x0004) (Edit)
	unsigned long                                      bDisplayCombatRadius : 1;                                 // 0x0190(0x0004) (Edit)
	class AWillowVehicleCombatArea*                    NextVehicleCombatArea;                                    // 0x0194(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleCombatArea");
		return ptr;
	}


	void Destroyed();
	void PostBeginPlay();
	bool IsActorInside(class AActor* TestActor);
	void RemoveFromList();
	void AddToList();
};


// Class WillowGame.WillowVehicleCombatAreaRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowVehicleCombatAreaRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleCombatAreaRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.WillowVehicleControlDefinition
// 0x0002 (0x003C - 0x003E)
class UWillowVehicleControlDefinition : public UGBXDefinition
{
public:
	unsigned char                                      CameraSetting;                                            // 0x003C(0x0001) (Edit)
	unsigned char                                      SteeringSetting;                                          // 0x003D(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleControlDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowVehicleFactory
// 0x0038 (0x0244 - 0x027C)
class AWillowVehicleFactory : public ANavigationPoint
{
public:
	class UClass*                                      VehicleClass;                                             // 0x0244(0x0004) (Edit)
	class AWillowVehicle*                              VehicleArchetype;                                         // 0x0248(0x0004) (Edit)
	class AWillowVehicle*                              ChildVehicle;                                             // 0x024C(0x0004)
	float                                              RespawnProgress;                                          // 0x0250(0x0004)
	float                                              RespawnRateModifier;                                      // 0x0254(0x0004)
	unsigned long                                      bStartNeutral : 1;                                        // 0x0258(0x0004) (Edit)
	unsigned long                                      bHasLockedVehicle : 1;                                    // 0x0258(0x0004) (Net)
	unsigned long                                      IsActive : 1;                                             // 0x0258(0x0004) (Edit)
	int                                                TeamNum;                                                  // 0x025C(0x0004)
	struct FVector                                     HUDLocation;                                              // 0x0260(0x000C)
	class UMaterialInstanceConstant*                   HUDMaterialInstance;                                      // 0x026C(0x0004) (Transient)
	TArray<struct FRotator>                            InitialGunRotations;                                      // 0x0270(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleFactory");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void SpawnVehicle();
	void PreSpawn();
	unsigned char GetTeamNum();
	void VehicleDestroyed(class AWillowVehicle* V);
	void TarydiumBoost(float Quantity);
	void Deactivate();
	void Activate(unsigned char T);
	void SetHUDLocation(const struct FVector& NewHUDLocation);
	void SetInitialState();
	void PostBeginPlay();
};


// Class WillowGame.WillowVehicleSeatDefinition
// 0x0120 (0x003C - 0x015C)
class UWillowVehicleSeatDefinition : public UGBXDefinition
{
public:
	unsigned long                                      bDoNotUseThisSeat : 1;                                    // 0x003C(0x0004) (Edit)
	unsigned long                                      AimTowardCameraLookSpot : 1;                              // 0x003C(0x0004) (Edit)
	unsigned long                                      bHideOccupant : 1;                                        // 0x003C(0x0004) (Edit)
	unsigned long                                      TransferVehicleDamageToSeat : 1;                          // 0x003C(0x0004) (Edit)
	unsigned long                                      TransferVehicleDamageToSeat_AI : 1;                       // 0x003C(0x0004) (Edit)
	unsigned long                                      DisplayHealthBarForPassenger : 1;                         // 0x003C(0x0004) (Edit)
	unsigned long                                      bHijackSeat : 1;                                          // 0x003C(0x0004) (Edit)
	unsigned long                                      bAIOnly : 1;                                              // 0x003C(0x0004) (Edit)
	unsigned long                                      IsAttachedRiderSeat : 1;                                  // 0x003C(0x0004) (Edit)
	unsigned long                                      ForceOccupantCrouch : 1;                                  // 0x003C(0x0004) (Edit)
	unsigned long                                      DeadPawnsDropLootFromThisSeat : 1;                        // 0x003C(0x0004) (Edit, Const)
	struct FName                                       VirtualSeatKey;                                           // 0x0040(0x0008) (Edit)
	class UInteractionIconDefinition*                  InteractIcon;                                             // 0x0048(0x0004) (Edit)
	class ULocalizedStringDefinition*                  SeatInteractTextDefinition;                               // 0x004C(0x0004) (Edit)
	float                                              PlayerInteractionLeftMinAngle;                            // 0x0050(0x0004) (Edit)
	float                                              PlayerInteractionRightMaxAngle;                           // 0x0054(0x0004) (Edit)
	struct FName                                       SeatAnchor;                                               // 0x0058(0x0008) (Edit)
	class UPassengerCameraDefinition*                  CameraDef;                                                // 0x0060(0x0004) (Edit)
	float                                              OccupantCullDistance;                                     // 0x0064(0x0004) (Edit)
	struct FRotator                                    ViewLimitLowerLeft;                                       // 0x0068(0x000C) (Edit)
	struct FRotator                                    ViewLimitUpperRight;                                      // 0x0074(0x000C) (Edit)
	class UInventoryBalanceDefinition*                 WeaponBalanceDefinition;                                  // 0x0080(0x0004) (Edit)
	struct FName                                       GunAttachmentSocket;                                      // 0x0084(0x0008) (Edit)
	float                                              MaxFinalAimAdjustment;                                    // 0x008C(0x0004) (Edit)
	TArray<struct FName>                               GunSocket;                                                // 0x0090(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               GunPivotPoints;                                           // 0x009C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               TurretControls;                                           // 0x00A8(0x000C) (Edit, NeedCtorLink)
	struct FName                                       WeaponFireSwitch;                                         // 0x00B4(0x0008) (Edit)
	struct FString                                     TurretVarPrefix;                                          // 0x00BC(0x000C) (Edit, NeedCtorLink)
	class USpecialMoveDefinition*                      WeaponFireSMD;                                            // 0x00C8(0x0004) (Edit)
	int                                                NextSeatIndex;                                            // 0x00CC(0x0004) (Edit)
	TArray<class USpecialMove_Vehicle*>                Anim_SeatSwap;                                            // 0x00D0(0x000C) (Edit, NeedCtorLink)
	class USpecialMove_Vehicle*                        Anim_EnterLeft;                                           // 0x00DC(0x0004) (Edit)
	class USpecialMove_Vehicle*                        Anim_EnterRight;                                          // 0x00E0(0x0004) (Edit)
	class USpecialMove_Vehicle*                        Anim_EnterFront;                                          // 0x00E4(0x0004) (Edit)
	class USpecialMove_Vehicle*                        Anim_EnterBack;                                           // 0x00E8(0x0004) (Edit)
	class USpecialMove_Vehicle*                        Anim_Idle;                                                // 0x00EC(0x0004) (Edit)
	class USpecialMove_Vehicle*                        Anim_Hijack;                                              // 0x00F0(0x0004) (Edit)
	class USpecialMove_Vehicle*                        Anim_Exit1;                                               // 0x00F4(0x0004) (Edit)
	class USpecialMove_Vehicle*                        Anim_Exit2;                                               // 0x00F8(0x0004) (Edit)
	struct FName                                       LeftHandPlacementName;                                    // 0x00FC(0x0008) (Edit)
	struct FName                                       RightHandPlacementName;                                   // 0x0104(0x0008) (Edit)
	float                                              GrenadeThrowHeight;                                       // 0x010C(0x0004) (Edit)
	class UAIDefinition*                               SeatAIDef;                                                // 0x0110(0x0004) (Edit, Const)
	unsigned char                                      HijackSide;                                               // 0x0114(0x0001) (Edit)
	unsigned char                                      AISeatPos;                                                // 0x0115(0x0001) (Edit)
	unsigned char                                      DamageRules;                                              // 0x0116(0x0001) (Edit)
	unsigned char                                      PreferredExitSide;                                        // 0x0117(0x0001) (Edit)
	unsigned char                                      DontResetWeaponFireSwitchPerShot;                         // 0x0118(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	struct FName                                       HijackAimSocket;                                          // 0x011C(0x0008) (Edit)
	float                                              DamageTransferFactor;                                     // 0x0124(0x0004) (Edit)
	float                                              DamageTransferFactor_AI;                                  // 0x0128(0x0004) (Edit)
	TArray<struct FRagdollDeathImpulseStruct>          ExtraDeathImpulsesDuringRagdoll;                          // 0x012C(0x000C) (Edit, Const, NeedCtorLink)
	class UStatusEffectDefinition*                     StatusEffectToApplyOnKillEjection;                        // 0x0138(0x0004) (Edit, Const)
	int                                                HUD_SeatIndexForWeapon;                                   // 0x013C(0x0004) (Edit)
	struct FVector                                     EjectRandMin;                                             // 0x0140(0x000C) (Edit)
	struct FVector                                     EjectRandMax;                                             // 0x014C(0x000C) (Edit)
	class UForceFeedbackWaveform*                      ControllerRumbleWhenRotating;                             // 0x0158(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleSeatDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowVehicleSimCar
// 0x006C (0x00C8 - 0x0134)
class UWillowVehicleSimCar : public USVehicleSimCar
{
public:
	struct FInterpCurveFloat                           TorqueVSpeedCurve;                                        // 0x00C8(0x0010) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           DefaultTorqueVSpeedCurve;                                 // 0x00D8(0x0010) (Transient, NeedCtorLink)
	float                                              TotalSpinVel;                                             // 0x00E8(0x0004)
	float                                              LSDFactor;                                                // 0x00EC(0x0004) (Edit)
	float                                              ThrottleSpeed;                                            // 0x00F0(0x0004) (Edit)
	float                                              SlopeMinDriveLimit;                                       // 0x00F4(0x0004) (Edit)
	float                                              SlopeMaxDriveLimit;                                       // 0x00F8(0x0004) (Edit)
	float                                              MinRPM;                                                   // 0x00FC(0x0004)
	float                                              MaxRPM;                                                   // 0x0100(0x0004)
	float                                              ActualThrottle;                                           // 0x0104(0x0004)
	unsigned long                                      bForceThrottle : 1;                                       // 0x0108(0x0004)
	unsigned long                                      bHasForcedThrottle : 1;                                   // 0x0108(0x0004)
	float                                              LastLerpVal;                                              // 0x010C(0x0004)
	float                                              WheelSmoothingSpeed;                                      // 0x0110(0x0004)
	float                                              FrontalCollisionGripFactor;                               // 0x0114(0x0004) (Edit)
	float                                              InAirUprightTorqueFactor;                                 // 0x0118(0x0004) (Edit)
	float                                              InAirUprightMaxTorque;                                    // 0x011C(0x0004) (Edit)
	TArray<struct FPhysicalMaterialTireModel>          PhysicalMaterialTireModels;                               // 0x0120(0x000C) (Edit, NeedCtorLink)
	float                                              CachedMaxTorqueCurveSpeed;                                // 0x012C(0x0004) (Transient)
	float                                              CachedSpeedCapMultiplier;                                 // 0x0130(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleSimCar");
		return ptr;
	}


	void ResetTorqueCurve();
	void StretchTorqueCurve(float Multiplier);
};


// Class WillowGame.WillowVehicleSimChopper
// 0x00BC (0x0094 - 0x0150)
class UWillowVehicleSimChopper : public USVehicleSimBase
{
public:
	float                                              MaxThrustForce;                                           // 0x0094(0x0004) (Edit)
	float                                              MaxReverseForce;                                          // 0x0098(0x0004) (Edit)
	float                                              LongDamping;                                              // 0x009C(0x0004) (Edit)
	float                                              MaxStrafeForce;                                           // 0x00A0(0x0004) (Edit)
	float                                              LatDamping;                                               // 0x00A4(0x0004) (Edit)
	float                                              DirectionChangeForce;                                     // 0x00A8(0x0004) (Edit)
	float                                              MaxRiseForce;                                             // 0x00AC(0x0004) (Edit)
	float                                              UpDamping;                                                // 0x00B0(0x0004) (Edit)
	float                                              TurnTorqueFactor;                                         // 0x00B4(0x0004) (Edit)
	float                                              TurnTorqueMax;                                            // 0x00B8(0x0004) (Edit)
	float                                              TurnDamping;                                              // 0x00BC(0x0004) (Edit)
	float                                              MaxYawRate;                                               // 0x00C0(0x0004) (Edit)
	float                                              PitchTorqueFactor;                                        // 0x00C4(0x0004) (Edit)
	float                                              PitchTorqueMax;                                           // 0x00C8(0x0004) (Edit)
	float                                              PitchDamping;                                             // 0x00CC(0x0004) (Edit)
	float                                              RollTorqueTurnFactor;                                     // 0x00D0(0x0004) (Edit)
	float                                              RollTorqueStrafeFactor;                                   // 0x00D4(0x0004) (Edit)
	float                                              RollTorqueMax;                                            // 0x00D8(0x0004) (Edit)
	float                                              RollDamping;                                              // 0x00DC(0x0004) (Edit)
	float                                              StopThreshold;                                            // 0x00E0(0x0004) (Edit)
	float                                              MaxRandForce;                                             // 0x00E4(0x0004) (Edit)
	float                                              RandForceInterval;                                        // 0x00E8(0x0004) (Edit)
	unsigned long                                      bAllowZThrust : 1;                                        // 0x00EC(0x0004) (Edit)
	unsigned long                                      bFullThrustOnDirectionChange : 1;                         // 0x00EC(0x0004) (Edit)
	unsigned long                                      bShouldCutThrustMaxOnImpact : 1;                          // 0x00EC(0x0004) (Edit)
	unsigned long                                      bRecentlyHit : 1;                                         // 0x00EC(0x0004)
	unsigned long                                      bStrafeAffectsTurnDamping : 1;                            // 0x00EC(0x0004)
	unsigned long                                      bHeadingInitialized : 1;                                  // 0x00EC(0x0004)
	unsigned long                                      bStabilizeStops : 1;                                      // 0x00EC(0x0004) (Edit)
	unsigned long                                      bAutoHover : 1;                                           // 0x00EC(0x0004) (Edit)
	float                                              StrafeTurnDamping;                                        // 0x00F0(0x0004)
	float                                              TargetHeading;                                            // 0x00F4(0x0004)
	float                                              TargetPitch;                                              // 0x00F8(0x0004)
	float                                              PitchViewCorrelation;                                     // 0x00FC(0x0004)
	struct FVector                                     RandForce;                                                // 0x0100(0x000C)
	struct FVector                                     RandTorque;                                               // 0x010C(0x000C)
	float                                              AccumulatedTime;                                          // 0x0118(0x0004)
	float                                              StabilizationForceMultiplier;                             // 0x011C(0x0004) (Edit)
	float                                              CurrentStabilizationMultiplier;                           // 0x0120(0x0004)
	struct FVector                                     OldVelocity;                                              // 0x0124(0x000C)
	float                                              StoppedBrakeTorque;                                       // 0x0130(0x0004)
	float                                              HardLimitAirSpeedScale;                                   // 0x0134(0x0004)
	float                                              MaxVelocityWhenAdjustingHover;                            // 0x0138(0x0004) (Edit)
	float                                              HoverDeadZone;                                            // 0x013C(0x0004) (Edit)
	float                                              RiseAdjustmentInterval;                                   // 0x0140(0x0004) (Edit)
	float                                              DesiredHoverHeight;                                       // 0x0144(0x0004)
	float                                              PreviousZVel;                                             // 0x0148(0x0004)
	float                                              AdjustedRise;                                             // 0x014C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleSimChopper");
		return ptr;
	}

};


// Class WillowGame.WillowVehicleSimFly
// 0x0008 (0x0094 - 0x009C)
class UWillowVehicleSimFly : public USVehicleSimBase
{
public:
	float                                              RiseSpeed;                                                // 0x0094(0x0004) (Edit)
	float                                              MoveSpeed;                                                // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleSimFly");
		return ptr;
	}

};


// Class WillowGame.WillowVehicleSimHover
// 0x002C (0x00C8 - 0x00F4)
class UWillowVehicleSimHover : public USVehicleSimCar
{
public:
	class AWillowVehicle_FlyingVehicle*                FlyingVehicle;                                            // 0x00C8(0x0004)
	struct FVector                                     AirTransFriction;                                         // 0x00CC(0x000C) (Edit)
	float                                              AirRotFriction;                                           // 0x00D8(0x0004) (Edit)
	struct FVector                                     ForceScalar;                                              // 0x00DC(0x000C) (Edit)
	float                                              TorqueScalar;                                             // 0x00E8(0x0004) (Edit)
	float                                              TiltScalar;                                               // 0x00EC(0x0004) (Edit)
	float                                              MoveTiltAmount;                                           // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleSimHover");
		return ptr;
	}

};


// Class WillowGame.WillowVehicleSimTank
// 0x000C (0x00F8 - 0x0104)
class UWillowVehicleSimTank : public USVehicleSimTank
{
public:
	unsigned long                                      bDoStoppedTurns : 1;                                      // 0x00F8(0x0004) (Edit)
	float                                              SteeringThresholdForStoppedTurns;                         // 0x00FC(0x0004) (Edit)
	float                                              EngineDampingOnStoppedTurns;                              // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleSimTank");
		return ptr;
	}

};


// Class WillowGame.WillowWaterSMActor
// 0x0000 (0x0190 - 0x0190)
class AWillowWaterSMActor : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowWaterSMActor");
		return ptr;
	}

};


// Class WillowGame.WillowWeapon
// 0x05B4 (0x09AC - 0x0F60)
class AWillowWeapon : public AWeapon
{
public:
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x09AC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIMissionInventory;                               // 0x09B0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x09B4(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIItemCardable;                                   // 0x09B8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IINounAttributeProvider;                          // 0x09BC(0x0004) (Const, Native, NoExport)
	int                                                NextFiringPatternIndex;                                   // 0x09C0(0x0004)
	int                                                StoredAmmo;                                               // 0x09C4(0x0004) (Net)
	struct FResourcePoolReference                      AmmoPool;                                                 // 0x09C8(0x000C) (Net, RepRetry)
	int                                                AmmoNotInClip;                                            // 0x09D4(0x0004) (Edit, Net)
	unsigned long                                      bUpdateAmmoNotInClip : 1;                                 // 0x09D8(0x0004)
	unsigned long                                      bAmmoRefilledDuringReload : 1;                            // 0x09D8(0x0004) (Transient)
	unsigned long                                      bItemNameGenerated : 1;                                   // 0x09D8(0x0004)
	unsigned long                                      bUseOverheatBehavior : 1;                                 // 0x09D8(0x0004)
	unsigned long                                      bBurstDelayActive : 1;                                    // 0x09D8(0x0004) (Transient)
	unsigned long                                      bDisplayWeaponShotDebug : 1;                              // 0x09D8(0x0004)
	unsigned long                                      bDisableFireViewShake : 1;                                // 0x09D8(0x0004)
	unsigned long                                      bDisableWeaponSpread : 1;                                 // 0x09D8(0x0004)
	unsigned long                                      bHoldToZoom : 1;                                          // 0x09D8(0x0004) (Edit)
	unsigned long                                      bFadeOnZoomBegin : 1;                                     // 0x09D8(0x0004)
	unsigned long                                      bFadeOnZoomEnd : 1;                                       // 0x09D8(0x0004)
	unsigned long                                      bDeRezzed : 1;                                            // 0x09D8(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bReplicateFiringSounds : 1;                               // 0x09D8(0x0004) (Transient)
	unsigned long                                      bSwappingWeaponAfterPutDown : 1;                          // 0x09D8(0x0004) (Transient)
	unsigned long                                      bMuzzleFlashPSCLoops : 1;                                 // 0x09D8(0x0004) (Edit)
	unsigned long                                      bSelectRandomPartsOnInitialization : 1;                   // 0x09D8(0x0004)
	unsigned long                                      bInitAnimationsOnAttach : 1;                              // 0x09D8(0x0004) (Transient)
	unsigned long                                      bContinuousBeamIsFiring : 1;                              // 0x09D8(0x0004)
	unsigned long                                      bCrosshairEnabled : 1;                                    // 0x09D8(0x0004)
	unsigned long                                      bSuppressCrosshair : 1;                                   // 0x09D8(0x0004)
	unsigned long                                      bIsBlockedAfterBusy : 1;                                  // 0x09D8(0x0004) (Transient)
	unsigned long                                      bUseRealTimeForZoom : 1;                                  // 0x09D8(0x0004) (Transient)
	unsigned long                                      bAttachedToInstigator : 1;                                // 0x09D8(0x0004) (Transient)
	unsigned long                                      bHolsteredOnBody : 1;                                     // 0x09D8(0x0004) (Transient)
	unsigned long                                      bActivatedDuringVehicleTransition : 1;                    // 0x09D8(0x0004) (Transient)
	unsigned long                                      bOnlyPlayFirstPersonAnimOnNextEquip : 1;                  // 0x09D8(0x0004) (Transient)
	unsigned long                                      bManualReload : 1;                                        // 0x09D8(0x0004) (Transient)
	int                                                ShotCost;                                                 // 0x09DC(0x0004) (Edit, Net, Transient)
	int                                                ShotCostBaseValue;                                        // 0x09E0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ShotCostModifierStack;                                    // 0x09E4(0x000C) (Const, Transient, NeedCtorLink)
	int                                                AdditionalRicochets;                                      // 0x09F0(0x0004) (Net, Transient)
	int                                                AdditionalRicochetsBaseValue;                             // 0x09F4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  AdditionalRicochetsModifierStack;                         // 0x09F8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastFireTime;                                             // 0x0A04(0x0004)
	int                                                ClipSize;                                                 // 0x0A08(0x0004) (Net, Transient)
	int                                                ClipSizeBaseValue;                                        // 0x0A0C(0x0004) (Const, Net)
	TArray<class UAttributeModifier*>                  ClipSizeModifierStack;                                    // 0x0A10(0x000C) (Const, Transient, NeedCtorLink)
	int                                                LastReloadCnt;                                            // 0x0A1C(0x0004)
	int                                                LastClipSize;                                             // 0x0A20(0x0004)
	int                                                AmmoLeftInClipDuringReload;                               // 0x0A24(0x0004) (Transient)
	int                                                ReloadCnt;                                                // 0x0A28(0x0004)
	int                                                CurrentBurstShotCount;                                    // 0x0A2C(0x0004)
	float                                              ReloadTime;                                               // 0x0A30(0x0004) (Edit, Net, Transient)
	float                                              ReloadTimeBaseValue;                                      // 0x0A34(0x0004) (Const, Net)
	TArray<class UAttributeModifier*>                  ReloadTimeModifierStack;                                  // 0x0A38(0x000C) (Const, Transient, NeedCtorLink)
	unsigned char                                      ReplicatedReloadState;                                    // 0x0A44(0x0001) (Net, Transient, RepNotify)
	unsigned char                                      bUseWeaponMelee;                                          // 0x0A45(0x0001)
	unsigned char                                      ZoomState;                                                // 0x0A46(0x0001)
	unsigned char                                      BodyVariation;                                            // 0x0A47(0x0001) (Transient)
	unsigned char                                      PutDownAnimState;                                         // 0x0A48(0x0001) (Net, Transient, RepNotify)
	unsigned char                                      MagazineSpinState;                                        // 0x0A49(0x0001) (Net, Transient, RepNotify)
	unsigned char                                      LastProcessedMagazineSpinState;                           // 0x0A4A(0x0001) (Transient)
	unsigned char                                      BarrelSpinState;                                          // 0x0A4B(0x0001) (Net, Transient, RepNotify)
	unsigned char                                      LastProcessedBarrelSpinState;                             // 0x0A4C(0x0001) (Transient)
	unsigned char                                      VisibleAmmoState;                                         // 0x0A4D(0x0001) (Transient)
	unsigned char                                      QuickSelectSlot;                                          // 0x0A4E(0x0001) (Net, RepNotify)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0A4F(0x0001) MISSED OFFSET
	class USpecialMoveDefinition*                      Playing1stPersonReloadSMD;                                // 0x0A50(0x0004) (Transient)
	class USpecialMoveDefinition*                      Playing3rdPersonReloadSMD;                                // 0x0A54(0x0004) (Transient)
	struct FString                                     GeneratedItemName;                                        // 0x0A58(0x000C) (NeedCtorLink)
	float                                              OverheatRegenDelay;                                       // 0x0A64(0x0004) (Net, Transient)
	float                                              OverheatRegenDelayBaseValue;                              // 0x0A68(0x0004) (Const)
	TArray<class UAttributeModifier*>                  OverheatRegenDelayModifierStack;                          // 0x0A6C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              FireRegenDelay;                                           // 0x0A78(0x0004) (Net, Transient)
	float                                              FireRegenDelayBaseValue;                                  // 0x0A7C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  FireRegenDelayModifierStack;                              // 0x0A80(0x000C) (Const, Transient, NeedCtorLink)
	float                                              RegenRate;                                                // 0x0A8C(0x0004) (Net, Transient)
	float                                              RegenRateBaseValue;                                       // 0x0A90(0x0004) (Const)
	TArray<class UAttributeModifier*>                  RegenRateModifierStack;                                   // 0x0A94(0x000C) (Const, Transient, NeedCtorLink)
	float                                              RegenAmount;                                              // 0x0AA0(0x0004) (Transient)
	int                                                OverheatAmmo;                                             // 0x0AA4(0x0004) (Net)
	float                                              AmmoRegenStartTime;                                       // 0x0AA8(0x0004)
	float                                              MeleeDamage;                                              // 0x0AAC(0x0004) (Edit, Transient)
	float                                              MeleeDamageBaseValue;                                     // 0x0AB0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MeleeDamageModifierStack;                                 // 0x0AB4(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NormalizedInstantHitDamage;                               // 0x0AC0(0x0004) (Net, Transient)
	float                                              NormalizedInstantHitDamageBaseValue;                      // 0x0AC4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NormalizedInstantHitDamageModifierStack;                  // 0x0AC8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              NormalizedMeleeDamage;                                    // 0x0AD4(0x0004) (Net, Transient)
	float                                              NormalizedMeleeDamageBaseValue;                           // 0x0AD8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  NormalizedMeleeDamageModifierStack;                       // 0x0ADC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BurstInterval;                                            // 0x0AE8(0x0004) (Net, Transient)
	float                                              BurstIntervalBaseValue;                                   // 0x0AEC(0x0004) (Const, Net)
	TArray<class UAttributeModifier*>                  BurstIntervalModifierStack;                               // 0x0AF0(0x000C) (Const, Transient, NeedCtorLink)
	int                                                AutomaticBurstCount;                                      // 0x0AFC(0x0004) (Net, Transient)
	int                                                AutomaticBurstCountBaseValue;                             // 0x0B00(0x0004) (Const)
	TArray<class UAttributeModifier*>                  AutomaticBurstCountModifierStack;                         // 0x0B04(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BurstShotAccuracyImpulseScale;                            // 0x0B10(0x0004) (Net, Transient)
	float                                              BurstShotAccuracyImpulseScaleBaseValue;                   // 0x0B14(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BurstShotAccuracyImpulseScaleModifierStack;               // 0x0B18(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LastAutomaticBurstTime;                                   // 0x0B24(0x0004) (Transient)
	struct FInstanceDataSet                            InstanceDataState;                                        // 0x0B28(0x000C) (Transient, Component, NeedCtorLink)
	TArray<class AWeaponShotDebug*>                    WeaponShotDebugHistory;                                   // 0x0B34(0x000C) (Transient, NeedCtorLink)
	float                                              BaseStatusEffectChanceModifier;                           // 0x0B40(0x0004) (Net, Transient)
	float                                              BaseStatusEffectChanceModifierBaseValue;                  // 0x0B44(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BaseStatusEffectChanceModifierModifierStack;              // 0x0B48(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectChanceModifier;                               // 0x0B54(0x0004) (Net, Transient)
	float                                              StatusEffectChanceModifierBaseValue;                      // 0x0B58(0x0004) (Const)
	TArray<class UAttributeModifier*>                  StatusEffectChanceModifierModifierStack;                  // 0x0B5C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectSpreadTimeIntervalModifier;                   // 0x0B68(0x0004) (Transient)
	float                                              StatusEffectSpreadTimeIntervalModifierBaseValue;          // 0x0B6C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  StatusEffectSpreadTimeIntervalModifierModifierStack;      // 0x0B70(0x000C) (Const, Transient, NeedCtorLink)
	float                                              StatusEffectDamage;                                       // 0x0B7C(0x0004) (Net, Transient)
	float                                              StatusEffectDamageBaseValue;                              // 0x0B80(0x0004) (Const, Net)
	TArray<class UAttributeModifier*>                  StatusEffectDamageModifierStack;                          // 0x0B84(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ZoomedEndFOV;                                             // 0x0B90(0x0004) (Edit, Net, Transient)
	float                                              ZoomedEndFOVBaseValue;                                    // 0x0B94(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ZoomedEndFOVModifierStack;                                // 0x0B98(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ZoomedFOV;                                                // 0x0BA4(0x0004)
	float                                              ZoomedRate;                                               // 0x0BA8(0x0004) (Edit, Net, Transient)
	float                                              ZoomedRateBaseValue;                                      // 0x0BAC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ZoomedRateModifierStack;                                  // 0x0BB0(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ZoomFadeTime;                                             // 0x0BBC(0x0004)
	float                                              ZoomStartTime;                                            // 0x0BC0(0x0004)
	class UMaterialInstance*                           WeaponMaterial;                                           // 0x0BC4(0x0004)
	class UMaterialInstance*                           SightFXCrosshairMaterial;                                 // 0x0BC8(0x0004)
	class USkeletalMeshComponent*                      ThirdPersonMesh;                                          // 0x0BCC(0x0004) (ExportObject, Component, EditInline)
	int                                                CurrentSlot;                                              // 0x0BD0(0x0004)
	TArray<struct FExtraWeaponSlot>                    ExtraSlots;                                               // 0x0BD4(0x000C) (Component, NeedCtorLink)
	struct FVector                                     CachedMuzzleLocation;                                     // 0x0BE0(0x000C) (Transient)
	int                                                CachedMuzzleLocationFrameNumber;                          // 0x0BEC(0x0004) (Transient)
	class USkeletalMeshComponent*                      CachedMuzzleLocationMesh;                                 // 0x0BF0(0x0004) (ExportObject, Transient, Component, EditInline)
	class UWillowAnimNodeSlot*                         WeaponAnimNodeSlot;                                       // 0x0BF4(0x0004) (Transient)
	class UWillowAnimNodeSlot*                         ArmAnimNodeSlot;                                          // 0x0BF8(0x0004) (Transient)
	class UAkEvent*                                    BulletWhipAkEvent;                                        // 0x0BFC(0x0004) (Transient)
	struct FImpactResponseParameters                   MyWeaponImpactResponseParameters;                         // 0x0C00(0x004C) (Transient, NeedCtorLink)
	float                                              MagazineSpinUpDuration;                                   // 0x0C4C(0x0004) (Net, Transient)
	float                                              MagazineSpinUpDurationBaseValue;                          // 0x0C50(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MagazineSpinUpDurationModifierStack;                      // 0x0C54(0x000C) (Const, Transient, NeedCtorLink)
	float                                              MagazineSpinDownDuration;                                 // 0x0C60(0x0004) (Net, Transient)
	float                                              MagazineSpinDownDurationBaseValue;                        // 0x0C64(0x0004) (Const)
	TArray<class UAttributeModifier*>                  MagazineSpinDownDurationModifierStack;                    // 0x0C68(0x000C) (Const, Transient, NeedCtorLink)
	float                                              MagazineSpinUpPercent;                                    // 0x0C74(0x0004) (Net, Transient)
	float                                              BodyFlapsExpandDuration;                                  // 0x0C78(0x0004) (Net, Transient)
	float                                              BodyFlapsExpandDurationBaseValue;                         // 0x0C7C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BodyFlapsExpandDurationModifierStack;                     // 0x0C80(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BodyFlapsCollapseDuration;                                // 0x0C8C(0x0004) (Net, Transient)
	float                                              BodyFlapsCollapseDurationBaseValue;                       // 0x0C90(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BodyFlapsCollapseDurationModifierStack;                   // 0x0C94(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BarrelFlapsExpandDuration;                                // 0x0CA0(0x0004) (Net, Transient)
	float                                              BarrelFlapsExpandDurationBaseValue;                       // 0x0CA4(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BarrelFlapsExpandDurationModifierStack;                   // 0x0CA8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BarrelFlapsCollapseDuration;                              // 0x0CB4(0x0004) (Net, Transient)
	float                                              BarrelFlapsCollapseDurationBaseValue;                     // 0x0CB8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BarrelFlapsCollapseDurationModifierStack;                 // 0x0CBC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BaseGlowScale;                                            // 0x0CC8(0x0004) (Transient)
	float                                              FinalGlowScale;                                           // 0x0CCC(0x0004) (Transient)
	class UWeaponGlowEffectDefinition*                 GlowEffect;                                               // 0x0CD0(0x0004) (Transient)
	float                                              GlowEffectStartTime;                                      // 0x0CD4(0x0004) (Transient)
	float                                              GlowImpulseScale;                                         // 0x0CD8(0x0004) (Transient)
	float                                              GlowImpulseDecayStartTime;                                // 0x0CDC(0x0004) (Transient)
	class UParticleSystemComponent*                    FirstPersonMuzzleFlash;                                   // 0x0CE0(0x0004) (ExportObject, Component, EditInline)
	TArray<class UParticleSystemComponent*>            FirstPersonAltMuzzleFlashes;                              // 0x0CE4(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	class UParticleSystemComponent*                    ThirdPersonMuzzleFlash;                                   // 0x0CF0(0x0004) (ExportObject, Component, EditInline)
	TArray<class UParticleSystemComponent*>            ThirdPersonAltMuzzleFlashes;                              // 0x0CF4(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	int                                                NumberOfMuzzleFlashes;                                    // 0x0D00(0x0004) (Edit, Transient)
	int                                                CurrentMuzzleFlashIndex;                                  // 0x0D04(0x0004) (Edit, Transient)
	class UParticleSystemComponent*                    FirstPersonShellCasing;                                   // 0x0D08(0x0004) (ExportObject, Component, EditInline)
	class UWillowPointLight*                           MuzzleFlashLight;                                         // 0x0D0C(0x0004) (ExportObject, Component, EditInline)
	class UWillowPointLight*                           ThirdPersonMuzzleFlashLight;                              // 0x0D10(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    TracerParameterTemplate;                                  // 0x0D14(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             MuzzleFlashPSTemplate;                                    // 0x0D18(0x0004) (Transient)
	float                                              CurrentRating;                                            // 0x0D1C(0x0004)
	int                                                OwnerStatsID;                                             // 0x0D20(0x0004)
	int                                                WeaponStatsID;                                            // 0x0D24(0x0004)
	float                                              ExtraShotChance;                                          // 0x0D28(0x0004) (Net, Transient)
	float                                              ExtraShotChanceBaseValue;                                 // 0x0D2C(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExtraShotChanceModifierStack;                             // 0x0D30(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ExtraShotDelay;                                           // 0x0D3C(0x0004) (Net, Transient)
	float                                              ExtraShotDelayBaseValue;                                  // 0x0D40(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ExtraShotDelayModifierStack;                              // 0x0D44(0x000C) (Const, Transient, NeedCtorLink)
	struct FLockOnTargetStateStruct                    LockOnTargetState;                                        // 0x0D50(0x0010) (Transient)
	float                                              BarrelSpinUpDuration;                                     // 0x0D60(0x0004) (Net, Transient)
	float                                              BarrelSpinUpDurationBaseValue;                            // 0x0D64(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BarrelSpinUpDurationModifierStack;                        // 0x0D68(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BarrelSpinDownDuration;                                   // 0x0D74(0x0004) (Net, Transient)
	float                                              BarrelSpinDownDurationBaseValue;                          // 0x0D78(0x0004) (Const)
	TArray<class UAttributeModifier*>                  BarrelSpinDownDurationModifierStack;                      // 0x0D7C(0x000C) (Const, Transient, NeedCtorLink)
	float                                              BarrelSpinUpPercent;                                      // 0x0D88(0x0004) (Net, Transient)
	struct FColor                                      WeaponColor;                                              // 0x0D8C(0x0004) (Edit)
	float                                              AimError;                                                 // 0x0D90(0x0004) (Edit, Net, Transient)
	float                                              AimErrorBaseValue;                                        // 0x0D94(0x0004) (Const)
	TArray<class UAttributeModifier*>                  AimErrorModifierStack;                                    // 0x0D98(0x000C) (Const, Transient, NeedCtorLink)
	float                                              PerShotAccuracyImpulse;                                   // 0x0DA4(0x0004) (Edit, Net, Transient)
	float                                              PerShotAccuracyImpulseBaseValue;                          // 0x0DA8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  PerShotAccuracyImpulseModifierStack;                      // 0x0DAC(0x000C) (Const, Transient, NeedCtorLink)
	int                                                ProjectilesPerShot;                                       // 0x0DB8(0x0004) (Edit, Net, Transient)
	int                                                ProjectilesPerShotBaseValue;                              // 0x0DBC(0x0004) (Const, Net)
	TArray<class UAttributeModifier*>                  ProjectilesPerShotModifierStack;                          // 0x0DC0(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             ExternalAttributeModifiers;                               // 0x0DCC(0x000C) (NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             WeaponAttributeModifiers;                                 // 0x0DD8(0x000C) (NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             ZoomExternalAttributeModifiers;                           // 0x0DE4(0x000C) (NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             ZoomWeaponAttributeModifiers;                             // 0x0DF0(0x000C) (NeedCtorLink)
	TArray<struct FModifierValuePresentationData>      WeaponCardModifierStats;                                  // 0x0DFC(0x000C) (Const, Transient, NeedCtorLink)
	struct FReplicatedInventoryCardData                ReplicatedWeaponCardModifierValues[0x5];                  // 0x0E08(0x0008) (Const, Net, Transient)
	struct FWeaponDefinitionData                       DefinitionData;                                           // 0x0E30(0x0044) (Edit, Net, RepNotify)
	class UWeaponPartListCollectionDefinition*         PartListCollection;                                       // 0x0E74(0x0004) (Transient)
	TArray<struct FWeaponBoneControllerInstance>       WeaponPartBoneControllers;                                // 0x0E78(0x000C) (Transient, NeedCtorLink)
	int                                                ReloadCntOnLastVisibleAmmoBoneUpdate;                     // 0x0E84(0x0004) (Transient)
	TArray<unsigned char>                              VisibleAmmoBoneIndices;                                   // 0x0E88(0x000C) (Transient, NeedCtorLink)
	struct FName                                       LeftHandGripAnimWeapon;                                   // 0x0E94(0x0008)
	class AWillowWeapon*                               LastComparedWeapon;                                       // 0x0E9C(0x0004)
	struct FName                                       StoredPreviousStateName;                                  // 0x0EA0(0x0008)
	TArray<struct FShellCasingImpact>                  ShellCasingImpacts;                                       // 0x0EA8(0x000C) (NeedCtorLink)
	float                                              ProjectileSpeedMultiplier;                                // 0x0EB4(0x0004) (Transient)
	float                                              ProjectileSpeedMultiplierBaseValue;                       // 0x0EB8(0x0004) (Const)
	TArray<class UAttributeModifier*>                  ProjectileSpeedMultiplierModifierStack;                   // 0x0EBC(0x000C) (Const, Transient, NeedCtorLink)
	float                                              UpdateMipTimer;                                           // 0x0EC8(0x0004) (Transient)
	float                                              WantsMissedShotNotifications;                             // 0x0ECC(0x0004) (Transient)
	float                                              WantsMissedShotNotificationsBaseValue;                    // 0x0ED0(0x0004) (Const)
	TArray<class UAttributeModifier*>                  WantsMissedShotNotificationsModifierStack;                // 0x0ED4(0x000C) (Const, Transient, NeedCtorLink)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0EE0(0x0004)
	TArray<struct FNounAttributeState>                 NounState;                                                // 0x0EE4(0x000C) (Transient, NeedCtorLink)
	float                                              TotalAutomaticFiringTime;                                 // 0x0EF0(0x0004) (Transient)
	struct FImpactInfo                                 LastLocalHitTraceInfo;                                    // 0x0EF4(0x005C) (Transient, Component)
	struct FString                                     CrosshairFrameOverride;                                   // 0x0F50(0x000C) (Transient, NeedCtorLink)
	float                                              ReplicatedZoomedEndFOVBaseValue;                          // 0x0F5C(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowWeapon");
		return ptr;
	}


	bool GetCanHolster();
	struct FName GetBodyWeaponHoldName();
	void ForcePutDownInactiveWeapon();
	struct FString GetCrosshairFrame();
	bool IsUsefulToThisPlayer(class APlayerController* C);
	static bool CheckDefMatch(bool bShortCheck, bool bUniqueIDCheck, struct FWeaponDefinitionData* Def, struct FWeaponDefinitionData* OtherDef);
	static bool SerialNumberMatchesDef(bool bShortCheck, bool bUniqueIDCheck, struct FInventorySerialNumber* SerialNumber, struct FWeaponDefinitionData* Def);
	static class AWillowWeapon* CreateWeaponFromSerialNumber(class UObject* InAdditionalQueryInterfaceSource, struct FInventorySerialNumber* SerialNumber);
	static bool UnpackSerialNumber(struct FInventorySerialNumber* SerialNumber, struct FWeaponDefinitionData* Def);
	static struct FInventorySerialNumber PackSerialNumber(struct FWeaponDefinitionData* Def);
	struct FInventorySerialNumber CreateSerialNumber();
	void AddGlowScaleImpulse(float ScaleImpulse);
	void StopAnyGlowEffect();
	void StopGlowEffect(class UWeaponGlowEffectDefinition* Effect);
	void PlayGlowEffect(class UWeaponGlowEffectDefinition* Effect);
	float GetLockOnStartTime();
	float GetLockOnRequiredTime();
	bool LockOnInProgress();
	void ForceZoomDebug();
	class UImpactDefinition* GetTraceImpact();
	void ServerNotifyTargetLockSuccessful(class AActor* NewLockOnTarget);
	void NotifyTargetLockSuccessful(class AActor* NewLockOnTarget);
	static void DefinitionFromHashString(const struct FString& HashString, struct FWeaponDefinitionData* WeaponData);
	struct FString GetHashString();
	static void OverrideRecoilAnimScaleDebug(float AnimScale);
	float GetCurrentZoomedRecoilAnimScale();
	float GetCurrentRecoilAnimScale(bool bIgnoreZoom);
	static class AWillowWeapon* CreateWeaponFromDef(const struct FWeaponDefinitionData& NewWeaponDef, class AWillowPawn* PlayerOwner, bool bForceSelectNameParts);
	bool DoesDamageType(unsigned char DamageType);
	bool IsDamageCauser(unsigned char DamageCauserType);
	bool IsMissionWeapon();
	bool CanBeSaved();
	int GetControllerPlayerExpLevelRequiredToUse(class AController* OtherController);
	bool CanInventoryBeSoldOrStoredByOwner();
	bool CanInventoryBeDroppedByOwner();
	void HitRegionConsumerPlayHit(const struct FImpactInfo& Impact);
	void PlayImpactEffects(const struct FVector& FireLocation, const struct FVector& HitLocation);
	float GetFireIntervalChanceModifier();
	float GetStatusEffectBaseChanceModifier(class UObject* Context);
	float GetStatusEffectChanceModifier(class UObject* Context);
	float GetStatusEffectBaseDamage(class UObject* Context);
	bool CanBeUsedBy(class APawn* Other);
	static class AWillowWeapon* CreateWeaponFromMemento(const struct FWeaponMemento& Memento, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class UObject* InAdditionalQueryInterfaceSource);
	struct FWeaponMemento GetMemento();
	struct FString GetModelName();
	bool GetSocketLocationOnOwnerOrWeapon(const struct FName& SocketName, struct FVector* SourceLocation);
	void Behavior_Fire(class UFiringModeDefinition* FiringModeDefinition, const struct FVector& Direction, const FScriptInterface& WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, const struct FName& FireSourceSocket, bool bTreatDirectionAsDestination);
	class UImpactDefinition* GetDroppedImpactDefinition();
	void FinishedWeaponAction();
	void Behavior_ChangeVisibility(bool bVisible);
	void Behavior_ToggleVisibility();
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	void SpawnTracerAtLocation(const struct FVector& EffectLocation, const struct FVector& HitLocation);
	void SpawnTracer(const struct FVector& HitLocation);
	struct FVector GetTracerStartLocation();
	bool CanCompareUIStat(class UAttributePresentationDefinition* Attrib, class UAttributePresentationDefinition* CompareAttrib, class AWillowWeapon* CompareItem);
	int CompareUIStat(int StatIdx, class AWillowInventory* CompareTo);
	float GetAIRangeValue(struct FAIRange* Range);
	float GetAIBurstLength();
	float GetAIFireDelay();
	float GetBarrelRotationsPerSecondAtFullFireRate();
	unsigned char GetBarrelSpinMode();
	float GetFireSpeed();
	void NotifyWeaponBoneControlStoppedFiring();
	void NotifyWeaponBoneControlFiredShot();
	void NotifyWeaponBoneControl(const struct FName& BoneControlName, unsigned char WeaponEventType, unsigned char WeaponPartType);
	void StopAnimation(unsigned char AnimType, float fDesiredDuration);
	float PlayAnimation(unsigned char AnimType, const struct FName& Sequence, float fDesiredDuration, bool bLoop, float BlendInTime, float BlendOutTime);
	void StopFirstPersonBodyAnimation(unsigned char ActionType, bool bInterrupted);
	float PlayFirstPersonBodyAnimation(unsigned char ActionType, float PlayRateScale, float Duration, class USpecialMoveDefinition** PlayedSMD);
	struct FString GetTemplateString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
	void ChangeParticleAttachmentVisibilityInternal(bool bIsVisible);
	void ChangeParticleAttachmentVisibility(bool bIsVisible);
	void ChangeAltMuzzleFlashesVisibility(bool bIsVisible, TArray<class UParticleSystemComponent*>* MuzzleFlashes);
	void ChangeThirdPersonVisibility(bool bIsVisible);
	void ToggleThirdPersonVisibility();
	void ChangeFirstPersonVisibility(bool bIsVisible);
	void ToggleFirstPersonVisibility();
	void ChangeVisibility(bool bIsVisible);
	float GetDamageRadius();
	void RefireDelayAfterBusy();
	void OwnerEnteredVehicle();
	void Destroyed();
	void BeginReload(unsigned char FireModeNum);
	void BeginManualReload(unsigned char FireModeNum);
	void ServerStartReload(unsigned char FireModeNum);
	void StartReload(unsigned char FireModeNum);
	void TimeWeaponReload();
	void StopReloadAnim();
	void PlayReloadAnim();
	unsigned char GetReplicatedReloadState();
	void SetReplicatedReloadState(unsigned char ReloadState);
	int SelectAnimationData(TArray<struct FConditionalAnimationData>* Animations);
	struct FName SelectAnimation(TArray<struct FConditionalAnimationData>* Animations, class UAnimSet** ReqAnimSet);
	void AmmoReloaded();
	void ReloadDone();
	void StopWeaponAnimation();
	class UWillowAnimNodeSlot* GetWeaponAnimNodeSlot(unsigned char AnimationType);
	class UWillowAnimNodeSlot* GetWillowAnimNodeSlot(class USkeletalMeshComponent* SKMesh, bool bOffHandSlot);
	void StopReloading();
	bool NeedToReload();
	void DisassociateAmmoPool();
	void ItemRemovedFromInvManager();
	void ClientSoldTo(bool bSoldAll);
	void LoadedWeapon(int AmmoCnt);
	void AssociateAmmoPool();
	void UpdateStatsOnWeaponPickup(class APawn* NewOwner);
	void AnnouncePickup(class APawn* Other);
	void GivenTo(class APawn* NewOwner, bool bReady, bool bDoNotActivate);
	void RemoveFromShop();
	void RefireCheckTimer();
	void GetZoomSocketBone(struct FVector* BoneLocation, struct FRotator* BoneRotation);
	void GetZoomSocket(struct FVector* SocketLocation, struct FRotator* SocketRotation);
	class USkeletalMeshSocket* GetIronsightsSocket(const struct FName& SocketName);
	struct FVector GetEffectLocation();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	void UninitializeAfterPutDown();
	void UpdateLastReloadCnt();
	void TryPutDownEx();
	bool TryPutDown();
	void Unreadied();
	class AController* GetResourcePoolContext();
	void ClientSetReloadCounts(int InLastReloadCnt, int InReloadCnt);
	void InitializeWeaponAfterBringUp();
	void InitializeAmmoAfterBringUp();
	void BurstDelayComplete();
	bool ShouldRefire();
	void TickMagazineSpinUp(float DeltaSeconds);
	void TickBarrelSpinUp(float DeltaSeconds);
	float GetBurstInterval();
	float GetFireInterval(unsigned char FireModeNum);
	void RefillClip();
	struct FRotator GetAdjustedAim(const struct FVector& StartFireLoc);
	struct FRotator AddSpread(const struct FRotator& BaseAim);
	void AddRegeneratedAmmo(int Amount);
	void ExtraFireAmmunition();
	void SharedFireAmmunition();
	void FireAmmunition();
	void AddAccuracyImpulse(float Impulse);
	void ClientVehicleTransitionWeaponSet(bool bOnlyPlayFirstPersonEquipAnim);
	void VehicleTransitionWeaponSet(bool bOnlyPlayFirstPersonEquipAnim);
	bool ClientWeaponSetWaitForAmmoPool();
	void ClientWeaponSet(bool bOptionalSet, bool bDoNotActivate);
	bool ForceWeaponToBeEquipped();
	void SendToFiringState(unsigned char FireModeNum);
	bool CanPerformAction();
	void CheckZoomState();
	void ForceUnzoom(bool bClearInput);
	void ClientStartZoom();
	void StopZoom(bool bSuppressFade);
	void StartZoom();
	float GetZoomTime();
	void ClientStopZoom(bool bSupressFade);
	void SetZoomStartTime(float ZoomDuration);
	void AdjustZoomBasisTime(bool bUseRealTime);
	float GetZoomBasisTime();
	void EndFire(unsigned char FireModeNum);
	void ClientEndFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
	void ServerSetZoomState(unsigned char NewZoomState);
	void DisplayScope(bool bDisplay);
	bool IsScoped();
	void AdjustMuzzleFlashForZoomState(unsigned char NewZoomState);
	void SetZoomState(unsigned char NewZoomState);
	void SetViewDistanceScaleWeaponZoomFactor(float ZoomFactor);
	void TickZoom(float DeltaTime);
	float AdjustFOVAngle(float VFOVAngle);
	bool IsZoomedIn(bool bTransitionCounts);
	bool bZoomed();
	void RemoveAllZoomWeaponAttributeEffects();
	void RemoveAllZoomExternalAttributeEffects();
	void ApplyAllZoomWeaponAttributeEffects();
	void ApplyAllZoomExternalAttributeEffects();
	void UpdateFiredStats(int NoShots);
	unsigned char GetDamageSurfaceTypeFromImpact(struct FImpactInfo* Impact);
	void ProcessInstantHitBullet(unsigned char FiringMode, const struct FImpactInfo& Impact, float BulletDamage, class UFiringModeDefinition* FiringModeDefinition, class APawn* InstigatorOverride, bool bOvercharged, class UWillowDamagePipeline** PipelineObject);
	void CustomFire();
	void ExecuteProjectileFiredConstructEvent(class UObject* InInstigator, class UObject* InProjectile, struct FBehaviorConsumerHandle* InConsumerHandle);
	void ConditionalSetGearLikenessOnProjectile(class AWillowProjectile* SpawnedProjectile);
	class AProjectile* ProjectileDefinitionFire(class UFiringModeDefinition* FireModeDef);
	void FiringModeDefinitionFire(class UFiringModeDefinition* FiringModeDefinition);
	void InstantFire();
	bool ShouldBulletRicochetTowardsEnemy();
	bool IsOvercharged();
	class UFiringModeDefinition* GetFiringModeDefinition();
	void ClearSavedFireData();
	void SaveFireData(const struct FVector& AimPosition, const struct FRotator& AimDirection, const struct FRotator& AimAdjustment, const struct FRotator& SpreadAimAdjustment, float ShotDistance);
	struct FVector InstantFireEndTrace(const struct FVector& StartTrace);
	struct FVector InstantFireStartTrace();
	void ClientWeaponEmpty();
	void WeaponEmpty();
	void PlayDryFireSound(bool bTryingToFire);
	bool DenyPickupQuery(const FScriptInterface& Pickup);
	void UpdateVisibleAmmoBones();
	void SetVisibleAmmoState(unsigned char NewState);
	bool ShouldAutoReloadWhileFiring();
	bool HasSpareAmmo();
	bool HasAnyAmmo();
	bool HasActiveAmmo(unsigned char FireModeNum, int Amount);
	bool HasAmmo(unsigned char FireModeNum, int Amount);
	int AddAmmo(int Amount);
	void ConsumeAmmo(unsigned char FireModeNum);
	bool ReadyToFire(bool bFinished);
	unsigned char BestMode();
	bool ShouldFireWithoutTarget();
	bool FireOnRelease();
	void FireHack(unsigned char Mode);
	bool CanHeal(class AActor* Other);
	float GetWeaponRating();
	float GetZoomFOVEffect();
	float GetZoomEffect();
	unsigned char GetHand();
	void SetHand(unsigned char NewWeaponHand);
	bool CanThrow();
	void GetViewAxes(struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis);
	void DumpAnimSets(const struct FString& EventStr);
	void DetachWeapon();
	void DetachMuzzleFlash();
	void AttachMuzzleFlash();
	void CreateAltMuzzleFlashes(class UParticleSystemComponent* MuzzleFlashTemplate, TArray<class UParticleSystemComponent*>* MuzzleFlashes);
	void AttachAltMuzzleFlashes(class USkeletalMeshComponent* ParentComp, TArray<class UParticleSystemComponent*>* MuzzleFlashes);
	void DetachAltMuzzleFlashes(class USkeletalMeshComponent* ParentComp, TArray<class UParticleSystemComponent*>* MuzzleFlashes);
	void ClearAltMuzzleFlashes(class USkeletalMeshComponent* ParentComp, TArray<class UParticleSystemComponent*>* MuzzleFlashes);
	void AttachShellCasingComponent();
	class UParticleSystem* GetShellCasingPSCTemplate();
	struct FRotator GetOffHandShellCasingRotOffset();
	struct FVector GetScopedShellCasingOffset();
	struct FName GetShellCasingSocket();
	void UpdateForegroundFOV();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName);
	void PlayWeaponEquip(bool bPlay3rdPerson, bool bPlay1stPerson);
	void NotifyPawnWeaponChanged();
	void TimeWeaponEquipping();
	float GetEquipTime();
	float RaiseFirstPersonWeapon();
	float LowerFirstPersonWeapon();
	void StopWeaponPutDownAnim(bool bStop3rdPerson, bool bStop1stPerson);
	void PlayWeaponPutDown(bool bSwappingWeapons);
	void TimeWeaponPutDown();
	float GetPutDownTime();
	void TryTimeWeaponPutDown();
	void StopMuzzleFlash();
	void CauseMuzzleFlash(class USkeletalMeshComponent* WeaponMesh, class UParticleSystemComponent* MuzzleFlash, class UWillowPointLight** FlashLight);
	void MuzzleFlashTimer();
	void PlayStopSpinningUpSound();
	void PlayStartSpinningUpSound();
	void MagazineSpinStateChanged(unsigned char NewState);
	void BarrelSpinStateChanged(unsigned char NewState);
	void PlayStoppedFiringSound();
	void PlayFiringSound();
	void ShakeView();
	void PlayRezEffect();
	void DeRezEffectFinished();
	float PlayDeRezEffect();
	void StopFireEffects(unsigned char FireModeNum);
	void PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation);
	struct FRotator GetWeaponMuzzleRotation(class USkeletalMeshComponent* WeaponMesh);
	struct FVector GetWeaponMuzzleLocation(class USkeletalMeshComponent* WeaponMesh);
	static struct FString GenerateHumanReadableNameFromDefinitionParts(bool bIncludeManufacturer, bool bIncludeModelName, bool bIncludePrefixTitle, struct FWeaponDefinitionData* DefData);
	struct FString GetInventoryCardString(bool bIncludeManufacturer, bool bIncludeModelName, bool bIncludePrefixTitle);
	static struct FString GenerateHumanReadableNameFromDefinition(struct FWeaponDefinitionData* DefData);
	struct FString GenerateHumanReadableName();
	struct FString GetShortHumanReadableName();
	struct FString GetHumanReadableName();
	class UInventoryCardPresentationDefinition* GetPresentationDefinition();
	struct FString FormatFunStatsText(TArray<struct FModifierValuePresentationData>* BottomStats);
	struct FString GenerateFunStatsText();
	void GetInventoryStatTextData(TArray<struct FModifierValuePresentationData>* Stats);
	void GetInventoryStatNumberData(class AWillowInventory* CompareAgainstThing, class AWillowPlayerController* WPCContext, TArray<struct FTopStatData>* Stats);
	void CacheWeaponCard();
	int GetAmmoCount();
	int GetMaxAmmo();
	void DrawZoomDebug(class AHUD* H);
	bool IsCrosshairEnabled(bool bForScope);
	void SetCrosshairEnabled(bool bNewCrosshairEnabled);
	float GetMultiProjectileDamage();
	void ComputeValueOfParts();
	static bool IsAllPartsDebugEnabled();
	static void ToggleAllPartsDebug();
	class UWeaponNamePartDefinition* SelectNamePartFromList(TArray<class UWeaponNamePartDefinition*>* NameList);
	void ChooseRandomNameParts();
	void ChooseRandomParts(class UObject* ContextSource);
	void ChoosePartListCollection();
	void RemoveAllExternalAttributeEffects();
	void ApplyNamePartWeaponAttributeEffects();
	void ApplyAllWeaponAttributeEffects(bool bIncludeNameParts);
	void ApplyAllExternalAttributeEffects();
	void ApplyAnimThresholdAttributeValues();
	bool ClientInitializeFromWeaponTypeDefinition();
	static int StaticCalculateWeaponRarityLevel(struct FWeaponDefinitionData* InDefinitionData);
	static class UWillowDamageTypeDefinition* StaticGetWeaponDamageType(struct FWeaponDefinitionData* InDefinitionData);
	static bool StaticIsTechWeapon(struct FWeaponDefinitionData* InDefinitionData);
	class UDamageTypeDefinition* GetDamageTypeDefinitionForFiringMode(class UFiringModeDefinition* FiringMode);
	void CalculatePartDependentWeaponBaseValues();
	void CalculateWeaponBaseValues();
	void RecomputeAttributeBaseValues();
	void RecomputeNormalizedDamageValues();
	void StoreExplosionInstanceData(class UExplosionDefinition* ExplosionDef, const struct FName& InstanceDataName);
	void AdjustWeaponForBeingInBackpack();
	void InitializeInternal(bool bForceSelectNameParts);
	void InitializeFromDefinitionData(const struct FWeaponDefinitionData& NewDefinitionData, class UObject* InAdditionalQueryInterfaceSource, bool bForceSelectNameParts);
	void InitializeInventory(class UBaseBalanceDefinition* InBalanceDef, class UManufacturerDefinition* InManufacturer, int InGradeIndex, class UObject* InAdditionalQueryInterfaceSource);
	void CheckWeaponAgainstEquippedWeaponsBeingSwapped();
	void CheckWeaponAgainstBackpackInventoryBeingEquipped();
	void ReplicatedEvent(const struct FName& VarName);
	void SetElementalFrame();
	void ChangeAltMuzzleFlashOwnerVisibility(bool bInOwnerNoSee, TArray<class UParticleSystemComponent*>* MuzzleFlashes);
	void ChangeFirstPersonOwnerVisibility(bool bInOwnerNoSee);
	void ChangeThirdPersonOwnerVisibility(bool bInOwnerNoSee);
	void ChangeOwnerVisibility(bool bIsFirstPerson);
	void DetachThirdPersonMesh();
	void StopLoopingSounds();
	void RemoteDetachWeapon();
	void DetachFirstPersonMesh();
	void AttachThirdPersonMeshToComponent(class USkeletalMeshComponent* SkeletalMesh, bool bOwnerNoSee, bool bOffHandWeapon);
	void AttachFirstPersonMeshToRemotePlayer(class USkeletalMeshComponent* MeshCpnt, bool bOffHandWeapon);
	class UMeshComponent* ClonePrimaryMesh();
	void CloneAppearance(class AActor* CloneOwner, class USkeletalMeshComponent* ClonedPrimaryMeshComponent, TArray<class UPrimitiveComponent*>* ClonedComponentsAttachedToPrimaryMesh, class UMaterialInstance** ClonedMeshMaterial);
	void PreRemoveNotify(class UMeshComponent* Mesh);
	void PostInitNotify(class UMeshComponent* Mesh);
	void AttachMeshToPickup(class AActor* Pickup);
	void InitVisibleAmmoBones();
	void InitEffects();
	void InitPartParticles();
	void EnableAnimations(bool InEnabled);
	void InitMeshAnimation(class USkeletalMeshComponent* Component, bool bIsFirstPersonComponent);
	struct FVector GetExtraSlotLocation();
	float GetExtraSlotModifier();
	void InitExtraMeshes();
	void InitMeshAnimations();
	void InitAltMuzzleFlashes();
	void InitMeshes();
	void HideBonesInMesh(class USkeletalMeshComponent* InMesh);
	static class UMeshComponent* InitConstructPreview(class UMeshComponent* Existing, class UWillowInventoryDefinition* InvDefinition);
	static class UMaterialInstance* BuildWeaponMaterial(class AActor* MaterialOwner, class USkeletalMeshComponent* FallbackMeshComp, struct FWeaponDefinitionData* InDefinitionData);
	static class USkeletalMesh* BuildCompositeMesh(class USkeletalMeshComponent* WeaponMeshComp, struct FWeaponDefinitionData* InDefinitionData);
	void AddWeaponBoneControllers(class USkeletalMeshComponent* Component, bool bIsFirstPerson);
	class AWillowInventory* CreateClone();
	struct FRotator GetDroppedPickupRotation();
	class ADroppedPickup* DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity, bool bForceNoRBPhysics, bool bTorque, const struct FVector& Torque);
	unsigned char GetHolsteredGearLikenessType();
	unsigned char GetHolsteredWeaponSizeType();
	struct FName GetEquippedStat();
	void OnAbortReload(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnZoomOut(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnZoomIn(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnUnequip(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnEquip(class UObject* EventInstigator, TArray<class UBehaviorProviderDefinition*>* Providers);
	void OnCreate(TArray<class UBehaviorProviderDefinition*>* Providers);
	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void DeactivateAttributeSlotSkill();
	void ActivateAttributeSlotSkill();
	bool IsPuttingDown();
	bool IsEquipping();
	static void AllParts(bool bIncludeNameParts, struct FWeaponDefinitionData* DefData, class UWeaponPartDefinition** Part);
	static bool IsZoomSocketsDebugEnabled();
	static void ToggleZoomSocketsDebug();
	static bool IsZoomDebugEnabled();
	static void ToggleZoomDebug();
};


// Class WillowGame.WillowBuzzaxeWeapon
// 0x000D (0x0F60 - 0x0F6D)
class AWillowBuzzaxeWeapon : public AWillowWeapon
{
public:
	struct FPointer                                    VfTable_IIWeaponThrow;                                    // 0x0F60(0x0004) (Const, Native, NoExport)
	struct FName                                       BodyWeaponHoldNameOverride;                               // 0x0F64(0x0008) (Net, Transient, RepNotify)
	unsigned char                                      PreviousActiveWeaponSlot;                                 // 0x0F6C(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowBuzzaxeWeapon");
		return ptr;
	}


	void EquipPreviousWeapon();
	void BuzzaxeIsDown();
	bool GetCanHolster();
	void Destroyed();
	struct FName GetBodyWeaponHoldName();
	void Behavior_WeaponThrow();
	class AProjectile* ProjectileDefinitionFire(class UFiringModeDefinition* FireModeDef);
	void ConditionalSetGearLikenessOnProjectile(class AWillowProjectile* SpawnedProjectile);
	void DetachWeapon();
	void StartFire(unsigned char FireModeNum);
	void Activate(bool bEquipInOffHand);
	bool HasSpareAmmo();
	void ReplicatedEvent(const struct FName& VarName);
	void InitVisibleAmmoBones();
	void AssociateAmmoPool();
	void DetachMuzzleFlash();
	void AttachMuzzleFlash();
	bool IsCrosshairEnabled(bool bForScope);
	float GetZoomFOVEffect();
	void GetZoomSocket(struct FVector* SocketLocation, struct FRotator* SocketRotation);
};


// Class WillowGame.WillowTurretWeapon
// 0x0024 (0x0F60 - 0x0F84)
class AWillowTurretWeapon : public AWillowWeapon
{
public:
	TArray<struct FName>                               FireTriggerTags;                                          // 0x0F60(0x000C) (NeedCtorLink)
	TArray<struct FName>                               AltFireTriggerTags;                                       // 0x0F6C(0x000C) (NeedCtorLink)
	float                                              AimTraceRange;                                            // 0x0F78(0x0004)
	struct FName                                       TurretWeaponSocketName;                                   // 0x0F7C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTurretWeapon");
		return ptr;
	}


	bool HasSpareAmmo();
	void DetachMuzzleFlash();
	void AttachMuzzleFlash();
	void Behavior_ChangeVisibility(bool bVisible);
	void Behavior_ToggleVisibility();
	void ChangeVisibility(bool bIsVisible);
	float PlayAnimation(unsigned char AnimType, const struct FName& Sequence, float fDesiredDuration, bool bLoop, float BlendInTime, float BlendOutTime);
	float PlayFirstPersonBodyAnimation(unsigned char ActionType, float PlayRateScale, float Duration, class USpecialMoveDefinition** PlayedSMD);
	struct FVector InstantFireStartTrace();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	void AttachThirdPersonMeshToComponent(class USkeletalMeshComponent* SkeletalMesh, bool bOwnerNoSee, bool bOffHandWeapon);
	void DetachFirstPersonMesh();
	void DetachThirdPersonMesh();
	void InitMeshes();
	void PostBeginPlay();
};


// Class WillowGame.WillowVehicleWeapon
// 0x0034 (0x0F60 - 0x0F94)
class AWillowVehicleWeapon : public AWillowWeapon
{
public:
	int                                                SeatIndex;                                                // 0x0F60(0x0004) (Net, RepNotify)
	class AWillowVehicle*                              MyVehicle;                                                // 0x0F64(0x0004) (Net, RepNotify)
	TArray<struct FName>                               FireTriggerTags;                                          // 0x0F68(0x000C) (NeedCtorLink)
	TArray<struct FName>                               AltFireTriggerTags;                                       // 0x0F74(0x000C) (NeedCtorLink)
	struct FColor                                      GoodAimColor;                                             // 0x0F80(0x0004)
	struct FColor                                      BadAimColor;                                              // 0x0F84(0x0004)
	float                                              AimTraceRange;                                            // 0x0F88(0x0004)
	unsigned long                                      bWeaponOperated : 1;                                      // 0x0F8C(0x0004) (Net, RepNotify)
	class APawn*                                       CrosshairOwner;                                           // 0x0F90(0x0004) (Net, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicleWeapon");
		return ptr;
	}


	void ClearFlashLocation();
	void ClearFlashCount();
	float GetBurstInterval();
	float GetFireInterval(unsigned char FireModeNum);
	void WeaponPlayAkEvent(class UAkEvent* Event, bool bReplicate);
	bool CanBeUsedBy(class APawn* Other);
	void ServerOnAltFireTriggered();
	void RouteCallToServerForAltFireTrigger();
	void StartZoom();
	float PlayAnimation(unsigned char AnimType, const struct FName& Sequence, float fDesiredDuration, bool bLoop, float BlendInTime, float BlendOutTime);
	float PlayFirstPersonBodyAnimation(unsigned char ActionType, float PlayRateScale, float Duration, class USpecialMoveDefinition** PlayedSMD);
	void ExecuteProjectileFiredConstructEvent(class UObject* InInstigator, class UObject* InProjectile, struct FBehaviorConsumerHandle* InConsumerHandle);
	class AProjectile* ProjectileDefinitionFire(class UFiringModeDefinition* FireModeDef);
	class AProjectile* ProjectileFire();
	void AdjustFiredProjectileVelocity(class AProjectile* Proj);
	void ClientStopZoom(bool bSupressFade);
	struct FVector InstantFireEndTrace(const struct FVector& StartTrace);
	struct FVector GetTracerStartLocation();
	struct FVector InstantFireStartTrace();
	bool IsCrosshairEnabled(bool bForScope);
	struct FRotator GetAdjustedAim(const struct FVector& StartFireLoc);
	void AddAccuracyImpulse(float Impulse);
	void NotifyTargetLockSuccessful(class AActor* NewLockOnTarget);
	void EndFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	void NotifyWeaponNotBeingOperated();
	void NotifyWeaponBeingOperated();
	void PutDownWeapon();
	void Activate(bool bEquipInOffHand);
	void DetachWeapon();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName);
	unsigned char GetHand();
	void SetHand(unsigned char NewWeaponHand);
	static struct FName GetFireTriggerTag(int BarrelIndex, int FireMode);
	bool IsAimCorrect();
	struct FVector GetDesiredAimPoint();
	bool ClientWeaponSetWaitForAmmoPool();
	class AController* GetResourcePoolContext();
	void AssociateAmmoPool();
	int AddAmmo(int Amount);
	void InitializeWeaponAfterBringUp();
	bool HasSpareAmmo();
	int GetAmmoCount();
	void PostBeginPlay();
	void RefreshCrosshairForPlayer();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowWorldSoundManager
// 0x0044 (0x019C - 0x01E0)
class AWillowWorldSoundManager : public AWorldSoundManager
{
public:
	class UAkComponent*                                MusicComponent;                                           // 0x019C(0x0004) (ExportObject, Transient, Component, EditInline)
	class UAkEvent*                                    CurrentMusicStartAkEvent;                                 // 0x01A0(0x0004) (Transient)
	class UAkEvent*                                    CurrentMusicStopAkEvent;                                  // 0x01A4(0x0004) (Transient)
	class UAkState*                                    CurrentAmbientAkState;                                    // 0x01A8(0x0004) (Transient)
	class UAkState*                                    CurrentCombatAkState;                                     // 0x01AC(0x0004) (Transient)
	class UAkState*                                    CurrentBossAkState;                                       // 0x01B0(0x0004) (Transient)
	unsigned char                                      CurrentMusicState;                                        // 0x01B4(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01B5(0x0003) MISSED OFFSET
	class UAkState*                                    CurrentCustomCombatMusicAkState;                          // 0x01B8(0x0004) (Transient)
	class UAkState*                                    CurrentCustomAmbientMusicAkState;                         // 0x01BC(0x0004) (Transient)
	unsigned long                                      bInCombatMusicVolumeTransition : 1;                       // 0x01C0(0x0004) (Transient)
	float                                              CombatMusicTransitionValue;                               // 0x01C4(0x0004) (Transient)
	float                                              CombatMusicTransitionStartValue;                          // 0x01C8(0x0004) (Transient)
	float                                              CombatMusicTransitionTargetValue;                         // 0x01CC(0x0004) (Transient)
	float                                              CombatMusicTransitionStartTime;                           // 0x01D0(0x0004) (Transient)
	float                                              CombatMusicTransitionEndTime;                             // 0x01D4(0x0004) (Transient)
	float                                              LastTransitionDuration;                                   // 0x01D8(0x0004) (Transient)
	class UAkRtpc*                                     CombatMusicRtpc;                                          // 0x01DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowWorldSoundManager");
		return ptr;
	}


	bool IsLevelMusicPlaying();
	static void StaticSetCustomAmbientMusicAkState(class UAkState* CustomAmbientMusicAkState);
	static void StaticSetBossAkState(class UAkState* BossAkState);
	static void StaticConfigureLevelMusic(class UAkEvent* StartMusicAkEvent, class UAkEvent* StopMusicAkEvent, class UAkState* AmbientAkState, class UAkState* CombatAkState);
};


// Class WillowGame.WorldBody
// 0x0090 (0x003C - 0x00CC)
class UWorldBody : public UObject
{
public:
	struct FPointer                                    VfTable_IIWorldBody;                                      // 0x003C(0x0004) (Const, Native, NoExport)
	class APawn*                                       Instigator;                                               // 0x0040(0x0004)
	struct FVector                                     Location;                                                 // 0x0044(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0050(0x000C)
	struct FVector                                     Velocity;                                                 // 0x005C(0x000C)
	class UObject*                                     WorldBodyAttachmentProxy;                                 // 0x0068(0x0004)
	struct FImpactInfo                                 AttachmentProxyImpactInfo;                                // 0x006C(0x005C) (Component)
	class UObject*                                     AdditionalQueryInterfaceSource;                           // 0x00C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WorldBody");
		return ptr;
	}


	void Behavior_CauseRadiusDamage(float Radius, float DamageAmount, bool bFullDamage, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, const struct FVector& Offset, const FScriptInterface& DamageCauser, bool bSkipTraceTest, class UObject* HitObject, float BarrelSourceTime, float PlantSourceTime, TArray<class AActor*>* ActorsHurt);
	void Behavior_CauseDamage(class AActor* Target, float DamageAmount, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, bool bCanDamageFriendlies, const FScriptInterface& DamageCauser, float BarrelSourceTime, float PlantSourceTime);
	void ShutDown();
	void InitializeFromImpact(class APawn* InInstigator, const struct FImpactInfo& InAttachmentProxyImpactInfo, class UObject* InAdditionalQueryInterfaceSource);
	void Initialize(class APawn* InInstigator, const struct FVector& InLocation, const struct FRotator& InRotation, const struct FVector& inVelocity, class UObject* InWorldBodyAttachmentProxy, class UObject* InAdditionalQueryInterfaceSource);
	bool WorldBodyAttachComponent(class UActorComponent* Attachment, const struct FVector& AttachmentRelativeLocation, const struct FRotator& AttachmentRelativeRotation, const struct FName& AttachmentPointName);
	bool WorldBodyAttachActor(class AActor* Attachment, const struct FVector& AttachmentRelativeLocation, const struct FRotator& AttachmentRelativeRotation, const struct FName& AttachmentPointName);
	bool WorldBodyAttachTo(const FScriptInterface& OtherWorldBody, const struct FVector& AttachmentRelativeLocation, const struct FRotator& AttachmentRelativeRotation, const struct FName& AttachmentPointName);
	FScriptInterface GetWorldBodyAttachmentBase();
	struct FName GetWorldBodyAttachmentBoneForComponent(class UActorComponent* AttachedComponent);
	bool GetWorldBodyAttachmentLocationAndRotation(const struct FName& AttachmentPointName, struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetWorldBodyAttachmentRotation(const struct FName& AttachmentPointName, struct FRotator* OutRotation);
	bool GetWorldBodyAttachmentLocation(const struct FName& AttachmentPointName, struct FVector* OutLocation);
	struct FVector GetWorldBodyVelocity();
	struct FRotator GetWorldBodyRotation();
	struct FVector GetWorldBodyLocation();
};


// Class WillowGame.WorldDiscoveryArea
// 0x0064 (0x0188 - 0x01EC)
class AWorldDiscoveryArea : public AActor
{
public:
	struct FPointer                                    VfTable_IIBalancedActor;                                  // 0x0188(0x0004) (Const, Native, NoExport)
	unsigned long                                      bForFogOfWarOnly : 1;                                     // 0x018C(0x0004) (Edit)
	unsigned long                                      bUseCustomName : 1;                                       // 0x018C(0x0004) (Edit, Const)
	unsigned long                                      bWorldAreaVolume : 1;                                     // 0x018C(0x0004) (Edit)
	unsigned long                                      bWorldAreaRadius : 1;                                     // 0x018C(0x0004) (Edit)
	struct FName                                       DefaultWorldAreaShortName;                                // 0x0190(0x0008) (Edit, Transient, EditConst, DuplicateTransient)
	struct FName                                       CustomName;                                               // 0x0198(0x0008) (Edit, Const)
	TArray<class AVolume*>                             DetectionVolumes;                                         // 0x01A0(0x000C) (Edit, NeedCtorLink)
	float                                              DetectionRadius;                                          // 0x01AC(0x0004) (Edit)
	float                                              DetectionHeight;                                          // 0x01B0(0x0004) (Edit)
	struct FString                                     WorldAreaDisplayName;                                     // 0x01B4(0x000C) (Edit, NeedCtorLink)
	class UAkEvent*                                    DiscoveryAkEvent;                                         // 0x01C0(0x0004) (Edit)
	class URegionDefinition*                           BalanceToRegionDef;                                       // 0x01C4(0x0004) (Edit, Const)
	struct FAttributeInitializationData                ExperienceRewardMultiplier;                               // 0x01C8(0x0010) (Edit, Const)
	int                                                GameStage;                                                // 0x01D8(0x0004) (Transient)
	TArray<class APlayerController*>                   PlayersDetected;                                          // 0x01DC(0x000C) (Transient, NeedCtorLink)
	float                                              NextDetectionTime;                                        // 0x01E8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WorldDiscoveryArea");
		return ptr;
	}


	struct FName GetBalancedActorTypeIdentifier();
	void SetExpLevel(int NewExpLevel);
	void SetAwesomeLevel(int NewAwesomeLevel);
	void SetGameStage(int NewGameStage);
	int GetExpLevelForEquip();
	int GetExpLevel();
	int GetAwesomeLevel();
	int GetGameStage();
	int GetExperienceReward(class AWillowPlayerController* DiscoveringPlayer);
	struct FName GetWorldAreaShortName();
};


// Class WillowGame.WorldDiscoveryAreaRenderingComponent
// 0x0000 (0x0210 - 0x0210)
class UWorldDiscoveryAreaRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WorldDiscoveryAreaRenderingComponent");
		return ptr;
	}

};


// Class WillowGame.AnimNotify_CustomEvent
// 0x0008 (0x003C - 0x0044)
class UAnimNotify_CustomEvent : public UAnimNotify
{
public:
	struct FName                                       CustomEventName;                                          // 0x003C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AnimNotify_CustomEvent");
		return ptr;
	}

};


// Class WillowGame.AnimNotify_DialogEvent
// 0x0008 (0x003C - 0x0044)
class UAnimNotify_DialogEvent : public UAnimNotify
{
public:
	class UGearboxDialogEventTag*                      EventTag;                                                 // 0x003C(0x0004) (Edit, Const)
	class UGearboxDialogGroup*                         Group;                                                    // 0x0040(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AnimNotify_DialogEvent");
		return ptr;
	}

};


// Class WillowGame.AnimNotify_EnableHandIK
// 0x0008 (0x003C - 0x0044)
class UAnimNotify_EnableHandIK : public UAnimNotify
{
public:
	int                                                Hand;                                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bEnableIK : 1;                                            // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AnimNotify_EnableHandIK");
		return ptr;
	}

};


// Class WillowGame.AnimNotify_EnableHeadLookAt
// 0x000C (0x003C - 0x0048)
class UAnimNotify_EnableHeadLookAt : public UAnimNotify
{
public:
	struct FName                                       HeadControlName;                                          // 0x003C(0x0008) (Edit)
	unsigned long                                      bEnable : 1;                                              // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AnimNotify_EnableHeadLookAt");
		return ptr;
	}

};


// Class WillowGame.AnimNotify_UseBehavior
// 0x0011 (0x003C - 0x004D)
class UAnimNotify_UseBehavior : public UAnimNotify
{
public:
	TArray<class UBehaviorBase*>                       Behaviors;                                                // 0x003C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	unsigned long                                      bRunOnServer : 1;                                         // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bRunOnClient : 1;                                         // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bRunIfLocalPlayer : 1;                                    // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bPassInstigatorAsSelfContext : 1;                         // 0x0048(0x0004) (Edit, Const)
	unsigned char                                      InstigatorContextForBehavior;                             // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AnimNotify_UseBehavior");
		return ptr;
	}


	bool PreTestNotify(class AWillowPawn* anOwner);
};


// Class WillowGame.IWeaponBoneController
// 0x0000 (0x003C - 0x003C)
class UIWeaponBoneController : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IWeaponBoneController");
		return ptr;
	}


	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval);
	void EndFire(float SpinDownDuration);
	void BeginFire(float SpinUpDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};


// Class WillowGame.SkelControlHandModifier
// 0x0048 (0x009C - 0x00E4)
class USkelControlHandModifier : public USkelControlBase
{
public:
	class UAnimSequence*                               HandAnimSeq;                                              // 0x009C(0x0004)
	struct FName                                       CurrentSequenceName;                                      // 0x00A0(0x0008)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00A8(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.SkelControlHandModifier.ActiveBoneMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkelControlHandModifier");
		return ptr;
	}

};


// Class WillowGame.SkelControlLeftHandGripWeapon
// 0x0008 (0x0104 - 0x010C)
class USkelControlLeftHandGripWeapon : public USkelControlLimb
{
public:
	unsigned long                                      bEditWeaponHoldIKInfo : 1;                                // 0x0104(0x0004) (Edit, Transient, EditorOnly)
	class UBodyClassDefinition*                        CachedBodyClass;                                          // 0x0108(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkelControlLeftHandGripWeapon");
		return ptr;
	}

};


// Class WillowGame.StanceExpressionEvaluator
// 0x0005 (0x003C - 0x0041)
class UStanceExpressionEvaluator : public UExpressionEvaluator
{
public:
	class UStanceTypeDefinition*                       Stance;                                                   // 0x003C(0x0004) (Edit, Const)
	unsigned char                                      Option;                                                   // 0x0040(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StanceExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.WillowAnimBlendByPosture
// 0x0008 (0x00E4 - 0x00EC)
class UWillowAnimBlendByPosture : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x00E4(0x0004) (Edit)
	unsigned long                                      bMakeCrouched : 1;                                        // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimBlendByPosture");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNode_AddCameraBone
// 0x0038 (0x00D8 - 0x0110)
class UWillowAnimNode_AddCameraBone : public UAnimNodeBlend
{
public:
	struct FName                                       BoneName;                                                 // 0x00D8(0x0008) (Edit, Const)
	float                                              BlendWeight;                                              // 0x00E0(0x0004) (Edit)
	TArray<unsigned char>                              LocalToCompReqBones;                                      // 0x00E4(0x000C) (Const, Transient, NeedCtorLink)
	struct FBoneAtom                                   CachedRefBoneCompSpaceTransform;                          // 0x00F0(0x0020) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_AddCameraBone");
		return ptr;
	}


	void SetBlendTarget(float BlendTarget, float BlendTime);
};


// Class WillowGame.WillowAnimNode_AimState
// 0x0014 (0x00E4 - 0x00F8)
class UWillowAnimNode_AimState : public UAnimNodeBlendList
{
public:
	TArray<struct FAimAnimTransitionData>              TransitionAnims;                                          // 0x00E4(0x000C) (Edit, Const, NeedCtorLink)
	int                                                CurrentModeChildIndex;                                    // 0x00F0(0x0004) (Transient)
	float                                              TransitionBlendOutTime;                                   // 0x00F4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_AimState");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNode_ClimbLadder
// 0x0000 (0x00D4 - 0x00D4)
class UWillowAnimNode_ClimbLadder : public UAnimNodeScaleRateBySpeed
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_ClimbLadder");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNode_Condition
// 0x0010 (0x00D8 - 0x00E8)
class UWillowAnimNode_Condition : public UAnimNodeBlend
{
public:
	float                                              BlendTime;                                                // 0x00D8(0x0004) (Edit, Const)
	float                                              CheckRate;                                                // 0x00DC(0x0004) (Edit, Const)
	class UFlagDefinition*                             FlagCondition;                                            // 0x00E0(0x0004) (Edit, Const)
	float                                              LastCheckTime;                                            // 0x00E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_Condition");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNode_MovementTransition
// 0x0030 (0x00E4 - 0x0114)
class UWillowAnimNode_MovementTransition : public UAnimNodeBlendList
{
public:
	float                                              LaunchBlendTime;                                          // 0x00E4(0x0004) (Edit)
	float                                              PostLaunchBlendTime;                                      // 0x00E8(0x0004) (Edit)
	float                                              StoppingBlendTime;                                        // 0x00EC(0x0004) (Edit)
	float                                              PostStopBlendTime;                                        // 0x00F0(0x0004) (Edit)
	struct FName                                       LaunchAnimName;                                           // 0x00F4(0x0008) (Edit)
	struct FName                                       StopAnimName;                                             // 0x00FC(0x0008) (Edit)
	float                                              LaunchDelayTime;                                          // 0x0104(0x0004) (Edit)
	unsigned char                                      MoveState;                                                // 0x0108(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	unsigned long                                      bWantsToMove : 1;                                         // 0x010C(0x0004) (Transient)
	float                                              CurrentLaunchDelayTime;                                   // 0x0110(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_MovementTransition");
		return ptr;
	}


	bool NodeIsIdle();
};


// Class WillowGame.WillowAnimNode_Prism
// 0x002F (0x00C5 - 0x00F4)
class UWillowAnimNode_Prism : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	TArray<struct FPrismDataContainer>                 PrismData;                                                // 0x00C8(0x000C) (Edit, NeedCtorLink)
	float                                              BlendTime;                                                // 0x00D4(0x0004) (Edit)
	float                                              MeshOffsetTurnThreshold;                                  // 0x00D8(0x0004) (Edit, Const)
	float                                              MeshOffsetTurn;                                           // 0x00DC(0x0004) (Edit, Const)
	unsigned long                                      MeshOffsetTurnOnlyWhenStopped : 1;                        // 0x00E0(0x0004) (Edit, Const)
	unsigned long                                      bBlendDown : 1;                                           // 0x00E0(0x0004) (Transient)
	int                                                PreviousGroup;                                            // 0x00E4(0x0004) (Transient)
	int                                                CurrentGroup;                                             // 0x00E8(0x0004) (Transient)
	float                                              CurrentBlendValue;                                        // 0x00EC(0x0004) (Transient)
	float                                              EditorSliderValue;                                        // 0x00F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_Prism");
		return ptr;
	}


	bool NodeIsActive();
};


// Class WillowGame.WillowAnimNode_WeaponHold
// 0x0004 (0x00E4 - 0x00E8)
class UWillowAnimNode_WeaponHold : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x00E4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_WeaponHold");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNode_WeaponRecoil
// 0x0008 (0x010C - 0x0114)
class UWillowAnimNode_WeaponRecoil : public UAnimNodeSpecialMoveBlend
{
public:
	unsigned long                                      bOffHandWeapon : 1;                                       // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      bComputeBaseRecoilScaleOnNextTick : 1;                    // 0x010C(0x0004) (Transient)
	float                                              BaseRecoilScale;                                          // 0x0110(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_WeaponRecoil");
		return ptr;
	}


	float PlayData(const struct FName& AnimNameOverride, float PlayRateScale, float BlendInOverride, float BlendOutOverride, struct FSpecialMoveData* SMData);
};


// Class WillowGame.WillowAnimNodeAimOffset
// 0x0030 (0x0110 - 0x0140)
class UWillowAnimNodeAimOffset : public UAnimNodeAimOffset
{
public:
	float                                              AimSpeed;                                                 // 0x0110(0x0004) (Edit)
	unsigned long                                      bWrapYaw : 1;                                             // 0x0114(0x0004) (Edit, Const)
	unsigned long                                      bWrapPitch : 1;                                           // 0x0114(0x0004) (Edit, Const)
	unsigned long                                      bArbitraryOrientation : 1;                                // 0x0114(0x0004) (Edit, Const)
	unsigned long                                      bUseLikeHeadLookAt : 1;                                   // 0x0114(0x0004) (Edit, Const)
	unsigned long                                      bLimitRange : 1;                                          // 0x0114(0x0004) (Edit, Const)
	unsigned long                                      bMigrated : 1;                                            // 0x0114(0x0004)
	unsigned long                                      bIsInterpolatingAim : 1;                                  // 0x0114(0x0004) (Transient)
	struct FName                                       PivotOverrideSocket;                                      // 0x0118(0x0008) (Edit, Const)
	float                                              YawRange;                                                 // 0x0120(0x0004) (Edit, Const)
	float                                              PitchRangeUp;                                             // 0x0124(0x0004) (Edit, Const)
	float                                              PitchRangeDown;                                           // 0x0128(0x0004) (Edit, Const)
	float                                              YawLimitPct;                                              // 0x012C(0x0004) (Edit, Const)
	float                                              PitchLimitPct;                                            // 0x0130(0x0004) (Edit, Const)
	struct FRotator                                    AngleRange;                                               // 0x0134(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeAimOffset");
		return ptr;
	}


	bool GetTargetLocation(struct FVector* TargetLoc);
	bool GetPivotPoint(struct FVector* PivotPoint);
	struct FVector2D InterpAim(float DeltaTime);
	struct FVector2D GetDesiredAim();
	struct FRotator GetCurrentAim();
	void DebugAimOffset(const struct FVector2D& DesiredAim);
	static bool IsAimNodeDebugEnabled();
	static void ToggleAimNodeDebug();
};


// Class WillowGame.WillowAnimNodeAimOffset_BoundaryTurret
// 0x0000 (0x0140 - 0x0140)
class UWillowAnimNodeAimOffset_BoundaryTurret : public UWillowAnimNodeAimOffset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeAimOffset_BoundaryTurret");
		return ptr;
	}


	struct FVector2D GetDesiredAim();
};


// Class WillowGame.WillowAnimNodeBlendByAimState
// 0x0008 (0x00E4 - 0x00EC)
class UWillowAnimNodeBlendByAimState : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x00E4(0x0004) (Edit)
	unsigned long                                      bCurrentAimAtTarget : 1;                                  // 0x00E8(0x0004)
	unsigned long                                      bEditorAimAtTarget : 1;                                   // 0x00E8(0x0004) (EditorOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendByAimState");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendByRotationSpeed
// 0x0014 (0x00E4 - 0x00F8)
class UWillowAnimNodeBlendByRotationSpeed : public UAnimNodeBlendList
{
public:
	unsigned long                                      NoSpeedScaling : 1;                                       // 0x00E4(0x0004) (Edit)
	unsigned long                                      bCallPlayAnimOnSwitch : 1;                                // 0x00E4(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x00E8(0x0004) (Edit)
	float                                              ThresholdRate;                                            // 0x00EC(0x0004) (Edit)
	float                                              ReferenceSpeed;                                           // 0x00F0(0x0004) (Edit)
	float                                              PreviewRotationRate;                                      // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendByRotationSpeed");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendByStance
// 0x0044 (0x00E4 - 0x0128)
class UWillowAnimNodeBlendByStance : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x00E4(0x0004) (Edit, Const)
	TArray<float>                                      ReferencesSpeeds;                                         // 0x00E8(0x000C) (Edit, Const, NeedCtorLink)
	TArray<unsigned char>                              DefaultStances;                                           // 0x00F4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UStanceTypeDefinition*>               ChildStanceTypes;                                         // 0x0100(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bCatchUnspecifiedStances : 1;                             // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      bApplyRateScale : 1;                                      // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      bCached : 1;                                              // 0x010C(0x0004) (Transient)
	float                                              Scale;                                                    // 0x0110(0x0004) (Transient)
	float                                              DiagScale;                                                // 0x0114(0x0004) (Transient)
	class UStanceTypeDefinition*                       CurrentStanceType;                                        // 0x0118(0x0004) (Transient)
	TArray<class USkelControlBase*>                    CachedSkelControls;                                       // 0x011C(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendByStance");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendDirectional
// 0x0017 (0x00C5 - 0x00DC)
class UWillowAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	float                                              DirDegreesPerSecond;                                      // 0x00C8(0x0004) (Edit)
	int                                                SingleAnimAtOrAboveLOD;                                   // 0x00CC(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x00D0(0x0004) (Edit)
	unsigned long                                      bUseAcceleration : 1;                                     // 0x00D4(0x0004) (Edit)
	unsigned long                                      bUseControllerLookDirection : 1;                          // 0x00D4(0x0004) (Edit)
	float                                              DirAngle;                                                 // 0x00D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendDirectional");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendInjured
// 0x0008 (0x00E4 - 0x00EC)
class UWillowAnimNodeBlendInjured : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x00E4(0x0004) (Edit)
	unsigned long                                      bMakeInjured : 1;                                         // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendInjured");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendList
// 0x000C (0x00E4 - 0x00F0)
class UWillowAnimNodeBlendList : public UAnimNodeBlendList
{
public:
	TArray<float>                                      ChildBlendInTime;                                         // 0x00E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendList");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNode_Falling
// 0x0014 (0x00F0 - 0x0104)
class UWillowAnimNode_Falling : public UWillowAnimNodeBlendList
{
public:
	float                                              DelayBeforeStartFalling;                                  // 0x00F0(0x0004) (Edit)
	float                                              MinStartFallingVelocity;                                  // 0x00F4(0x0004) (Edit)
	float                                              InterruptEndFallMovementSpeed;                            // 0x00F8(0x0004) (Edit)
	float                                              StartFallingTime;                                         // 0x00FC(0x0004) (Transient)
	float                                              StuckFallingTimer;                                        // 0x0100(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_Falling");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendSwitch
// 0x0028 (0x00E4 - 0x010C)
class UWillowAnimNodeBlendSwitch : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x00E4(0x0004) (Edit)
	TArray<struct FName>                               ChildSwitches;                                            // 0x00E8(0x000C) (Edit, NeedCtorLink)
	struct FName                                       CurrentSwitch;                                            // 0x00F4(0x0008)
	struct FName                                       DesiredSwitch;                                            // 0x00FC(0x0008)
	struct FName                                       DefaultSwitch;                                            // 0x0104(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendSwitch");
		return ptr;
	}


	void SetCurrentSwitch(const struct FName& NewSwitch);
};


// Class WillowGame.WillowAnimNodeBlendThirdPersonMenu
// 0x0008 (0x00E4 - 0x00EC)
class UWillowAnimNodeBlendThirdPersonMenu : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                                // 0x00E4(0x0004) (Edit)
	unsigned long                                      bMakeThirdPerson : 1;                                     // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendThirdPersonMenu");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendTurning
// 0x0020 (0x00E4 - 0x0104)
class UWillowAnimNodeBlendTurning : public UAnimNodeBlendList
{
public:
	float                                              TurnTransitionDelay;                                      // 0x00E4(0x0004) (Edit)
	float                                              BlendUpTime;                                              // 0x00E8(0x0004) (Edit)
	float                                              BlendDownTime;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      fTurning : 1;                                             // 0x00F0(0x0004)
	int                                                PrevAngle;                                                // 0x00F4(0x0004)
	int                                                PrevDeltaAngle;                                           // 0x00F8(0x0004)
	int                                                DeltaAngle;                                               // 0x00FC(0x0004)
	float                                              CurrentTurnTransitionDelay;                               // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendTurning");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendVehicleDirectional
// 0x000F (0x00C5 - 0x00D4)
class UWillowAnimNodeBlendVehicleDirectional : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	float                                              DirDegreesPerSecond;                                      // 0x00C8(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x00CC(0x0004) (Edit)
	float                                              DirAngle;                                                 // 0x00D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendVehicleDirectional");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeBlendWheeledPawn
// 0x0037 (0x00C5 - 0x00FC)
class UWillowAnimNodeBlendWheeledPawn : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	struct FDirChangeRateRange                         DirChangeRateMin;                                         // 0x00C8(0x0008) (Edit)
	struct FDirChangeRateRange                         DirChangeRateMax;                                         // 0x00D0(0x0008) (Edit)
	float                                              BlendTime;                                                // 0x00D8(0x0004) (Edit)
	float                                              ReferenceSpeed;                                           // 0x00DC(0x0004) (Edit)
	float                                              SpeedUpRate;                                              // 0x00E0(0x0004) (Edit)
	float                                              SpeedDownRate;                                            // 0x00E4(0x0004) (Edit)
	float                                              BrakeRate;                                                // 0x00E8(0x0004) (Edit)
	float                                              IdleBlendTime;                                            // 0x00EC(0x0004) (Edit)
	unsigned long                                      bUseBaseRotation : 1;                                     // 0x00F0(0x0004) (Edit)
	unsigned long                                      bIsIdle : 1;                                              // 0x00F0(0x0004)
	unsigned long                                      bOneFrameMovementAdded : 1;                               // 0x00F0(0x0004)
	float                                              DirAngle;                                                 // 0x00F4(0x0004)
	float                                              CurSpeed;                                                 // 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeBlendWheeledPawn");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNodeFeatherBlend
// 0x0028 (0x00D8 - 0x0100)
class UWillowAnimNodeFeatherBlend : public UAnimNodeBlend
{
public:
	TArray<struct FFeatherBoneBlendTarget>             BoneBlendTargets;                                         // 0x00D8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bForceLocalSpaceBlend : 1;                                // 0x00E4(0x0004) (Edit, Const)
	TArray<float>                                      Child2PerBoneWeight;                                      // 0x00E8(0x000C) (Transient, NeedCtorLink)
	TArray<unsigned char>                              LocalToCompReqBones;                                      // 0x00F4(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeFeatherBlend");
		return ptr;
	}


	void SetBlendTarget(float BlendTarget, float BlendTime);
};


// Class WillowGame.WillowAnimNodeSequence
// 0x0010 (0x0114 - 0x0124)
class UWillowAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned long                                      bAutoStart : 1;                                           // 0x0114(0x0004) (Edit)
	unsigned long                                      bLoopLastSequence : 1;                                    // 0x0114(0x0004)
	TArray<struct FName>                               SeqStack;                                                 // 0x0118(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeSequence");
		return ptr;
	}


	void OnInit();
	void PlayAnimationSet(TArray<struct FName> Sequences, float SeqRate, bool bLoopLast);
	void PlayAnimation(const struct FName& Sequence, float SeqRate, bool bSeqLoop);
};


// Class WillowGame.WillowAnimNodeSequenceAdditiveBlend
// 0x0014 (0x0114 - 0x0128)
class UWillowAnimNodeSequenceAdditiveBlend : public UAnimNodeSequence
{
public:
	unsigned long                                      bAutoGenerateAdditiveSeqName : 1;                         // 0x0114(0x0004) (Edit, Const)
	struct FName                                       AddAnimSeqName;                                           // 0x0118(0x0008) (Edit, Const)
	class UAnimSequence*                               AddAnimSeq;                                               // 0x0120(0x0004) (Const, Transient)
	int                                                AddAnimLinkupIndex;                                       // 0x0124(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeSequenceAdditiveBlend");
		return ptr;
	}


	void SetAddAnim(const struct FName& Sequence);
	void SetAnim(const struct FName& Sequence);
};


// Class WillowGame.WillowAnimNodeSlot
// 0x0000 (0x00EC - 0x00EC)
class UWillowAnimNodeSlot : public UAnimNodeSlot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNodeSlot");
		return ptr;
	}


	void StopCustomAnimationOnLastFrame();
};


// Class WillowGame.WillowAnimTree
// 0x0018 (0x0130 - 0x0148)
class UWillowAnimTree : public UAnimTree
{
public:
	TArray<struct FName>                               SimpleAnimNames;                                          // 0x0130(0x000C) (Const, NeedCtorLink)
	class USkeletalMeshComponent*                      PreviewWeapon;                                            // 0x013C(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       LeftHandAnimation;                                        // 0x0140(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimTree");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_EyelidLook
// 0x0034 (0x00CC - 0x0100)
class UWillowSkelControl_EyelidLook : public USkelControlSingleBone
{
public:
	float                                              OriginalHorizAngle;                                       // 0x00CC(0x0004)
	float                                              OriginalVertAngle;                                        // 0x00D0(0x0004)
	struct FName                                       EyeBoneName;                                              // 0x00D4(0x0008) (Edit)
	int                                                EyeMaterialIndex;                                         // 0x00DC(0x0004) (Edit)
	float                                              vertMax;                                                  // 0x00E0(0x0004) (Edit)
	float                                              vertMin;                                                  // 0x00E4(0x0004) (Edit)
	float                                              horizMax;                                                 // 0x00E8(0x0004) (Edit)
	float                                              horizMin;                                                 // 0x00EC(0x0004) (Edit)
	float                                              maxOpenValue;                                             // 0x00F0(0x0004) (Edit)
	float                                              minOpenValue;                                             // 0x00F4(0x0004) (Edit)
	float                                              ClosedValue;                                              // 0x00F8(0x0004) (Edit)
	unsigned long                                      EyeLidMoveable : 1;                                       // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_EyelidLook");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_LowerEyelidLook
// 0x0000 (0x0100 - 0x0100)
class UWillowSkelControl_LowerEyelidLook : public UWillowSkelControl_EyelidLook
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_LowerEyelidLook");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_UpperEyelidLook
// 0x0014 (0x0100 - 0x0114)
class UWillowSkelControl_UpperEyelidLook : public UWillowSkelControl_EyelidLook
{
public:
	struct FVector                                     LookAtOffset;                                             // 0x0100(0x000C)
	unsigned long                                      EyeMoveable : 1;                                          // 0x010C(0x0004) (Edit)
	float                                              EyeInterpSpeed;                                           // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_UpperEyelidLook");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_FootPlacement
// 0x0028 (0x0128 - 0x0150)
class UWillowSkelControl_FootPlacement : public USkelControlFootPlacement
{
public:
	struct FVector                                     LastOffset;                                               // 0x0128(0x000C) (Transient)
	struct FVector                                     CachedFloor;                                              // 0x0134(0x000C) (Transient)
	class AWillowPawn*                                 CachedPawn;                                               // 0x0140(0x0004) (Transient)
	float                                              InterpSpeed;                                              // 0x0144(0x0004) (Edit, Const)
	float                                              ExpensiveDistanceFactor;                                  // 0x0148(0x0004) (Edit, Const)
	unsigned long                                      bMoreAccurateAndMoreExpensive : 1;                        // 0x014C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_FootPlacement");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_LookAtActor
// 0x0018 (0x0138 - 0x0150)
class UWillowSkelControl_LookAtActor : public USkelControlLookAt
{
public:
	struct FVector                                     AdditionalOffset;                                         // 0x0138(0x000C) (Edit)
	float                                              OutOfRangeBlendTime;                                      // 0x0144(0x0004) (Edit)
	unsigned long                                      bOutOfRange : 1;                                          // 0x0148(0x0004) (Transient)
	unsigned long                                      bInitialized : 1;                                         // 0x0148(0x0004) (Transient)
	class AWillowAIPawn*                               MyAIPawn;                                                 // 0x014C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_LookAtActor");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_RotateFlapFromFiring
// 0x0020 (0x00CC - 0x00EC)
class UWillowSkelControl_RotateFlapFromFiring : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                           // 0x00CC(0x0004) (Const, Native, NoExport)
	struct FRotator                                    RotationExtent;                                           // 0x00D0(0x000C) (Edit, Const)
	unsigned long                                      bPaused : 1;                                              // 0x00DC(0x0004) (Transient)
	float                                              BlendPercent;                                             // 0x00E0(0x0004) (Transient)
	float                                              BlendPercentRate;                                         // 0x00E4(0x0004) (Transient)
	float                                              BlendPercentRateDelay;                                    // 0x00E8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_RotateFlapFromFiring");
		return ptr;
	}


	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float ExpandPercentPerImpulse, float CollapseDuration, float FireInterval);
	void EndFire(float CollapseDuration);
	void BeginFire(float ExpandDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};


// Class WillowGame.WillowSkelControl_RotateWeaponBoneFromFiring
// 0x0030 (0x00CC - 0x00FC)
class UWillowSkelControl_RotateWeaponBoneFromFiring : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                           // 0x00CC(0x0004) (Const, Native, NoExport)
	unsigned long                                      bAdjustMaxRotationByFireInterval : 1;                     // 0x00D0(0x0004) (Edit, Const)
	unsigned long                                      bPaused : 1;                                              // 0x00D0(0x0004) (Transient)
	int                                                NumberOfShotsPerRotation;                                 // 0x00D4(0x0004) (Edit, Const)
	float                                              MaxRotationsPerSecond;                                    // 0x00D8(0x0004) (Edit, Const)
	float                                              MinRotationsPerSecond;                                    // 0x00DC(0x0004) (Edit, Const)
	struct FRotator                                    RotationExtent;                                           // 0x00E0(0x000C) (Edit, Const)
	float                                              CurrentMaxRotationsPerSecond;                             // 0x00EC(0x0004) (Transient)
	float                                              BlendPercent;                                             // 0x00F0(0x0004) (Transient)
	float                                              BlendPercentRate;                                         // 0x00F4(0x0004) (Transient)
	float                                              BlendPercentRateDelay;                                    // 0x00F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_RotateWeaponBoneFromFiring");
		return ptr;
	}


	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval);
	void EndFire(float SpinDownDuration);
	void BeginFire(float SpinUpDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};


// Class WillowGame.WillowSkelControl_RotationRate
// 0x000C (0x00CC - 0x00D8)
class UWillowSkelControl_RotationRate : public USkelControlSingleBone
{
public:
	struct FRotator                                    RotationRate;                                             // 0x00CC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_RotationRate");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_RotationRateBySpeed
// 0x0028 (0x00D8 - 0x0100)
class UWillowSkelControl_RotationRateBySpeed : public UWillowSkelControl_RotationRate
{
public:
	unsigned long                                      bUseBaseSkelComponentOwner : 1;                           // 0x00D8(0x0004) (Edit)
	unsigned char                                      SpeedComponent;                                           // 0x00DC(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	float                                              MinSpeed;                                                 // 0x00E0(0x0004) (Edit, Const)
	float                                              MaxSpeed;                                                 // 0x00E4(0x0004) (Edit, Const)
	struct FRotator                                    MinRotationRate;                                          // 0x00E8(0x000C) (Edit, Const)
	struct FRotator                                    MaxRotationRate;                                          // 0x00F4(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_RotationRateBySpeed");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_TurretConstrained
// 0x0064 (0x00CC - 0x0130)
class UWillowSkelControl_TurretConstrained : public USkelControlSingleBone
{
public:
	unsigned long                                      bConstrainPitch : 1;                                      // 0x00CC(0x0004) (Edit)
	unsigned long                                      bConstrainYaw : 1;                                        // 0x00CC(0x0004) (Edit)
	unsigned long                                      bConstrainRoll : 1;                                       // 0x00CC(0x0004) (Edit)
	unsigned long                                      bInvertPitch : 1;                                         // 0x00CC(0x0004) (Edit)
	unsigned long                                      bInvertYaw : 1;                                           // 0x00CC(0x0004) (Edit)
	unsigned long                                      bInvertRoll : 1;                                          // 0x00CC(0x0004) (Edit)
	unsigned long                                      bFixedWhenFiring : 1;                                     // 0x00CC(0x0004) (Edit)
	unsigned long                                      bResetWhenUnattended : 1;                                 // 0x00CC(0x0004) (Edit)
	unsigned long                                      bIsInMotion : 1;                                          // 0x00CC(0x0004)
	struct FTurretConstraintData                       MaxAngle;                                                 // 0x00D0(0x000C) (Edit)
	struct FTurretConstraintData                       MinAngle;                                                 // 0x00DC(0x000C) (Edit)
	float                                              LagDegreesPerSecondYaw;                                   // 0x00E8(0x0004) (Edit)
	float                                              LagDegreesPerSecondPitch;                                 // 0x00EC(0x0004) (Edit)
	float                                              LagDegreesPerSecondRoll;                                  // 0x00F0(0x0004) (Edit)
	struct FRotator                                    DesiredBoneRotation;                                      // 0x00F4(0x000C) (Edit)
	int                                                AssociatedSeatIndex;                                      // 0x0100(0x0004)
	struct FRotator                                    DefaultRotation;                                          // 0x0104(0x000C) (Edit)
	struct FName                                       VirtualSeatKey;                                           // 0x0110(0x0008)
	struct FRotator                                    ConstrainedBoneRotation;                                  // 0x0118(0x000C) (Transient)
	struct FScriptDelegate                             __OnTurretStatusChange__Delegate;                         // 0x0124(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_TurretConstrained");
		return ptr;
	}


	void OnTurretStatusChange(bool bIsMoving);
};


// Class WillowGame.WillowSkelControlHandPlacement
// 0x000C (0x0104 - 0x0110)
class UWillowSkelControlHandPlacement : public USkelControlLimb
{
public:
	class UObject*                                     TargetRef;                                                // 0x0104(0x0004) (Transient)
	struct FName                                       TargetAttachmentName;                                     // 0x0108(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControlHandPlacement");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControlLerpSingleBone
// 0x003C (0x00CC - 0x0108)
class UWillowSkelControlLerpSingleBone : public USkelControlSingleBone
{
public:
	struct FPointer                                    VfTable_IIWeaponBoneController;                           // 0x00CC(0x0004) (Const, Native, NoExport)
	struct FRotator                                    RotationExtent;                                           // 0x00D0(0x000C) (Edit)
	unsigned long                                      bAdjustRotationRateByFireInterval : 1;                    // 0x00DC(0x0004) (Edit)
	float                                              RotationRate;                                             // 0x00E0(0x0004) (Edit)
	float                                              IncrementSize;                                            // 0x00E4(0x0004) (Edit)
	struct FRotator                                    StartRotation;                                            // 0x00E8(0x000C) (Transient)
	struct FRotator                                    DestinationRotation;                                      // 0x00F4(0x000C) (Transient)
	float                                              RemainingRotations;                                       // 0x0100(0x0004) (Transient)
	float                                              CurrentRotationRate;                                      // 0x0104(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControlLerpSingleBone");
		return ptr;
	}


	void UnPause();
	void Pause();
	void Stop();
	void SpinImpulseOnFire(float SpinUpPercentPerImpulse, float SpinDownDuration, float FireInterval);
	void EndFire(float SpinDownDuration);
	void BeginFire(float SpinUpDuration, float FireInterval);
	void IncrementWeaponBoneControl(float FireInterval);
	struct FName GetControlName();
};


// Class WillowGame.SeqAct_AllPlayersInMesh
// 0x0010 (0x00A4 - 0x00B4)
class USeqAct_AllPlayersInMesh : public USequenceAction
{
public:
	TArray<class ADynamicSMActor*>                     Meshes;                                                   // 0x00A4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bAllActorsInMesh : 1;                                     // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_AllPlayersInMesh");
		return ptr;
	}


	bool AllPlayersInMesh();
	bool MeshEncompassesActor(class APlayerController* CurActor, class ADynamicSMActor* CurMesh);
	bool PlayerIsInAMesh(class APlayerController* PC);
};


// Class WillowGame.SeqAct_AttachPlayerPawnToBase
// 0x0025 (0x00A4 - 0x00C9)
class USeqAct_AttachPlayerPawnToBase : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                              // 0x00A4(0x0004) (Edit)
	unsigned long                                      bHardAttach : 1;                                          // 0x00A4(0x0004) (Edit)
	unsigned long                                      bUseRelativeOffset : 1;                                   // 0x00A4(0x0004) (Edit)
	unsigned long                                      bUseRelativeRotation : 1;                                 // 0x00A4(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x00A8(0x0008) (Edit)
	struct FVector                                     RelativeOffset;                                           // 0x00B0(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x00BC(0x000C) (Edit)
	unsigned char                                      PhysicsMode;                                              // 0x00C8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_AttachPlayerPawnToBase");
		return ptr;
	}

};


// Class WillowGame.SeqAct_ConditionallyLoadCommons
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_ConditionallyLoadCommons : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_ConditionallyLoadCommons");
		return ptr;
	}

};


// Class WillowGame.SeqAct_DiscardInventory
// 0x0004 (0x00A4 - 0x00A8)
class USeqAct_DiscardInventory : public USequenceAction
{
public:
	unsigned long                                      bSpawnPickupsForOldInventory : 1;                         // 0x00A4(0x0004) (Edit, Const)
	unsigned long                                      bRepopulateInventory : 1;                                 // 0x00A4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_DiscardInventory");
		return ptr;
	}


	void OnActivated(class AWillowPawn* WPawn);
};


// Class WillowGame.SeqAct_DiscoverLevelChallengeObject
// 0x0008 (0x00A4 - 0x00AC)
class USeqAct_DiscoverLevelChallengeObject : public USequenceAction
{
public:
	class UObject*                                     LevelChallengeObject;                                     // 0x00A4(0x0004) (Edit)
	unsigned long                                      bIgnoreNumbering : 1;                                     // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_DiscoverLevelChallengeObject");
		return ptr;
	}

};


// Class WillowGame.SeqAct_DisplayTrainingDefinitionMessage
// 0x0004 (0x00A4 - 0x00A8)
class USeqAct_DisplayTrainingDefinitionMessage : public USequenceAction
{
public:
	float                                              Duration;                                                 // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_DisplayTrainingDefinitionMessage");
		return ptr;
	}

};


// Class WillowGame.SeqAct_DisplayTrainingMessage
// 0x0030 (0x00A4 - 0x00D4)
class USeqAct_DisplayTrainingMessage : public USequenceAction
{
public:
	struct FString                                     Key;                                                      // 0x00A4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     TitleKey;                                                 // 0x00B0(0x000C) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x00BC(0x0004) (Edit)
	struct FString                                     HUDInitializationFrame;                                   // 0x00C0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      PausesGame : 1;                                           // 0x00CC(0x0004) (Edit)
	unsigned long                                      bMandatory : 1;                                           // 0x00CC(0x0004) (Edit)
	float                                              PauseContinueDelay;                                       // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_DisplayTrainingMessage");
		return ptr;
	}

};


// Class WillowGame.SeqAct_DisplayWillowHUDMessage
// 0x0014 (0x00A4 - 0x00B8)
class USeqAct_DisplayWillowHUDMessage : public USequenceAction
{
public:
	unsigned char                                      MessageType;                                              // 0x00A4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	struct FString                                     MarkupString;                                             // 0x00A8(0x000C) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x00B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_DisplayWillowHUDMessage");
		return ptr;
	}

};


// Class WillowGame.SeqAct_ExecuteSkill
// 0x0008 (0x00A4 - 0x00AC)
class USeqAct_ExecuteSkill : public USequenceAction
{
public:
	unsigned long                                      bAllowMultipleInstancesOfSkill : 1;                       // 0x00A4(0x0004) (Edit)
	unsigned long                                      bIsSkillActive : 1;                                       // 0x00A4(0x0004)
	class USkillDefinition*                            SkillEffect;                                              // 0x00A8(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_ExecuteSkill");
		return ptr;
	}


	bool ExecuteSkill(class AController* SkillInstigator, class USkillDefinition* Definition, unsigned char SequenceInput);
};


// Class WillowGame.SeqAct_GetAttributeValue
// 0x0008 (0x00A4 - 0x00AC)
class USeqAct_GetAttributeValue : public USequenceAction
{
public:
	class UAttributeDefinition*                        AttributeDef;                                             // 0x00A4(0x0004) (Edit)
	float                                              ResultValue;                                              // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_GetAttributeValue");
		return ptr;
	}

};


// Class WillowGame.SeqAct_LoadingMovie
// 0x0018 (0x00A4 - 0x00BC)
class USeqAct_LoadingMovie : public USequenceAction
{
public:
	struct FString                                     MovieName;                                                // 0x00A4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bShowMovie : 1;                                           // 0x00B0(0x0004) (Edit)
	unsigned long                                      bPauseAfterHide : 1;                                      // 0x00B0(0x0004) (Edit)
	float                                              PauseDuration;                                            // 0x00B4(0x0004) (Edit)
	float                                              KeepPlayingDuration;                                      // 0x00B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_LoadingMovie");
		return ptr;
	}

};


// Class WillowGame.SeqAct_MathBase
// 0x0001 (0x00A4 - 0x00A5)
class USeqAct_MathBase : public USequenceAction
{
public:
	unsigned char                                      Operation;                                                // 0x00A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_MathBase");
		return ptr;
	}

};


// Class WillowGame.SeqAct_MathFloat
// 0x000F (0x00A5 - 0x00B4)
class USeqAct_MathFloat : public USeqAct_MathBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	float                                              ValueA;                                                   // 0x00A8(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00AC(0x0004) (Edit)
	float                                              Result;                                                   // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_MathFloat");
		return ptr;
	}

};


// Class WillowGame.SeqAct_MathInteger
// 0x000F (0x00A5 - 0x00B4)
class USeqAct_MathInteger : public USeqAct_MathBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	int                                                ValueA;                                                   // 0x00A8(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00AC(0x0004) (Edit)
	int                                                Result;                                                   // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_MathInteger");
		return ptr;
	}

};


// Class WillowGame.SeqAct_ModifyHUDElement
// 0x000C (0x00A4 - 0x00B0)
class USeqAct_ModifyHUDElement : public USequenceAction
{
public:
	unsigned char                                      HUDElement;                                               // 0x00A4(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	unsigned long                                      bDisplayOnHUD : 1;                                        // 0x00A8(0x0004) (Edit, Const)
	class UResourcePoolDefinition*                     ResPoolDefinition;                                        // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_ModifyHUDElement");
		return ptr;
	}

};


// Class WillowGame.SeqAct_PlayBinkMovie
// 0x0010 (0x00B4 - 0x00C4)
class USeqAct_PlayBinkMovie : public USeqAct_Latent
{
public:
	struct FString                                     BinkMovieName;                                            // 0x00B4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      PlayStreamed : 1;                                         // 0x00C0(0x0004) (Edit)
	unsigned long                                      BlockUntilFinished : 1;                                   // 0x00C0(0x0004) (Edit)
	unsigned long                                      LoopPlayback : 1;                                         // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_PlayBinkMovie");
		return ptr;
	}

};


// Class WillowGame.SeqAct_PossessForPlayer
// 0x0004 (0x00A4 - 0x00A8)
class USeqAct_PossessForPlayer : public USequenceAction
{
public:
	unsigned long                                      bDestroyOldPawn : 1;                                      // 0x00A4(0x0004) (Edit)
	unsigned long                                      bHideOldPawn : 1;                                         // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_PossessForPlayer");
		return ptr;
	}

};


// Class WillowGame.SeqAct_PrimaryPlayerBusyDelay
// 0x0004 (0x00B4 - 0x00B8)
class USeqAct_PrimaryPlayerBusyDelay : public USeqAct_Latent
{
public:
	class AWillowPlayerController*                     PrimaryPlayer;                                            // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_PrimaryPlayerBusyDelay");
		return ptr;
	}


	bool Update(float DeltaTime);
};


// Class WillowGame.SeqAct_ProceduralSwitch
// 0x000C (0x00A4 - 0x00B0)
class USeqAct_ProceduralSwitch : public USequenceAction
{
public:
	TArray<unsigned char>                              Possibilities;                                            // 0x00A4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_ProceduralSwitch");
		return ptr;
	}

};


// Class WillowGame.SeqAct_ProceduralSwitchNumeric
// 0x000C (0x00A4 - 0x00B0)
class USeqAct_ProceduralSwitchNumeric : public USequenceAction
{
public:
	TArray<float>                                      Possibilities;                                            // 0x00A4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_ProceduralSwitchNumeric");
		return ptr;
	}

};


// Class WillowGame.SeqAct_SetChallengeCompleted
// 0x0004 (0x00A4 - 0x00A8)
class USeqAct_SetChallengeCompleted : public USequenceAction
{
public:
	class UChallengeDefinition*                        ChallengeDef;                                             // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_SetChallengeCompleted");
		return ptr;
	}

};


// Class WillowGame.SeqAct_SetShadowParent
// 0x0000 (0x00A4 - 0x00A4)
class USeqAct_SetShadowParent : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_SetShadowParent");
		return ptr;
	}

};


// Class WillowGame.SeqAct_TimedMessage
// 0x0004 (0x00C4 - 0x00C8)
class USeqAct_TimedMessage : public USeqAct_Log
{
public:
	float                                              MessageTime;                                              // 0x00C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_TimedMessage");
		return ptr;
	}

};


// Class WillowGame.SeqCond_HasValidSaveGame
// 0x0000 (0x008C - 0x008C)
class USeqCond_HasValidSaveGame : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqCond_HasValidSaveGame");
		return ptr;
	}

};


// Class WillowGame.SeqCond_IsPlayerCharacterClass
// 0x0000 (0x008C - 0x008C)
class USeqCond_IsPlayerCharacterClass : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqCond_IsPlayerCharacterClass");
		return ptr;
	}

};


// Class WillowGame.SeqEvent_WorldDiscoveryArea
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_WorldDiscoveryArea : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqEvent_WorldDiscoveryArea");
		return ptr;
	}

};


// Class WillowGame.SeqVar_OverpowerLevel
// 0x0000 (0x005C - 0x005C)
class USeqVar_OverpowerLevel : public USeqVar_Int
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqVar_OverpowerLevel");
		return ptr;
	}

};


// Class WillowGame.SeqVar_PrimaryLocalPlayer
// 0x0000 (0x0068 - 0x0068)
class USeqVar_PrimaryLocalPlayer : public USeqVar_Object
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqVar_PrimaryLocalPlayer");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ActivateInstancedBehaviorSequences
// 0x0014 (0x00A4 - 0x00B8)
class UWillowSeqAct_ActivateInstancedBehaviorSequences : public USequenceAction
{
public:
	class UMissionDefinition*                          Mission;                                                  // 0x00A4(0x0004) (Edit)
	class UMissionObjectiveDefinition*                 MissionObjective;                                         // 0x00A8(0x0004) (Edit)
	struct FName                                       SequenceName;                                             // 0x00AC(0x0008) (Edit)
	unsigned long                                      bCustomObjComment : 1;                                    // 0x00B4(0x0004) (EditorOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ActivateInstancedBehaviorSequences");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_AIScripted
// 0x0012 (0x00B4 - 0x00C6)
class UWillowSeqAct_AIScripted : public USeqAct_Latent
{
public:
	class AActor*                                      LookAt;                                                   // 0x00B4(0x0004) (Edit)
	TArray<class AActor*>                              Destination;                                              // 0x00B8(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      Stance;                                                   // 0x00C4(0x0001) (Edit)
	unsigned char                                      FocusStyle;                                               // 0x00C5(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AIScripted");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_AIScriptedAnim
// 0x000C (0x00B4 - 0x00C0)
class UWillowSeqAct_AIScriptedAnim : public USeqAct_Latent
{
public:
	class UWillowAnimDefinition*                       Anim;                                                     // 0x00B4(0x0004) (Edit, Const)
	class UWillowAnimDefinition*                       EditInlineAnim;                                           // 0x00B8(0x0004) (Edit, Const, EditInline)
	unsigned long                                      bHoldAI : 1;                                              // 0x00BC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AIScriptedAnim");
		return ptr;
	}


	class UWillowAnimDefinition* GetAnim();
};


// Class WillowGame.WillowSeqAct_CompleteMission
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_CompleteMission : public USequenceAction
{
public:
	class UMissionDefinition*                          AssociatedMission;                                        // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_CompleteMission");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ConfigureBossMusic
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_ConfigureBossMusic : public USequenceAction
{
public:
	class UAkState*                                    BossAkState;                                              // 0x00A4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ConfigureBossMusic");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ConfigureCustomAmbientMusic
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_ConfigureCustomAmbientMusic : public USequenceAction
{
public:
	class UAkState*                                    AmbientMusicAkState;                                      // 0x00A4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ConfigureCustomAmbientMusic");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ConfigureLevelMusic
// 0x0010 (0x00A4 - 0x00B4)
class UWillowSeqAct_ConfigureLevelMusic : public USequenceAction
{
public:
	class UAkEvent*                                    MusicStartAkEvent;                                        // 0x00A4(0x0004) (Edit, Const)
	class UAkEvent*                                    MusicStopAkEvent;                                         // 0x00A8(0x0004) (Edit, Const)
	class UAkState*                                    AmbientAkState;                                           // 0x00AC(0x0004) (Edit, Const)
	class UAkState*                                    CombatAkState;                                            // 0x00B0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ConfigureLevelMusic");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_CoordinateOperations
// 0x0018 (0x00A4 - 0x00BC)
class UWillowSeqAct_CoordinateOperations : public USequenceAction
{
public:
	TArray<class USequenceOp*>                         AllOperations;                                            // 0x00A4(0x000C) (NeedCtorLink)
	TArray<class USequenceOp*>                         OperationsRemaining;                                      // 0x00B0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_CoordinateOperations");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_DayNightCycle
// 0x0000 (0x0178 - 0x0178)
class UWillowSeqAct_DayNightCycle : public USeqAct_Interp
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_DayNightCycle");
		return ptr;
	}


	static bool TogglePauseDayCycle();
	static void SetTimeOfDay(float NewTimeOfDay);
};


// Class WillowGame.WillowSeqAct_DisableCombatMusicLogic
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_DisableCombatMusicLogic : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_DisableCombatMusicLogic");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_EnableCombatMusicLogic
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_EnableCombatMusicLogic : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_EnableCombatMusicLogic");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_GiveMission
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_GiveMission : public USequenceAction
{
public:
	class UMissionDefinition*                          AssociatedMission;                                        // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_GiveMission");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_InterpMenu
// 0x001C (0x0178 - 0x0194)
class UWillowSeqAct_InterpMenu : public USeqAct_Interp
{
public:
	float                                              IdleTime;                                                 // 0x0178(0x0004) (Edit, Const)
	float                                              ControllerSensitivityScale;                               // 0x017C(0x0004) (Edit, Const)
	float                                              MouseSensitivityScale;                                    // 0x0180(0x0004) (Edit, Const)
	float                                              AutoPlayRate;                                             // 0x0184(0x0004) (Edit, Const)
	float                                              ManualPlayRate;                                           // 0x0188(0x0004) (Edit, Const)
	float                                              InputDelta;                                               // 0x018C(0x0004)
	float                                              InputTime;                                                // 0x0190(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_InterpMenu");
		return ptr;
	}


	void InputAxis(class AWillowPlayerController* WPC, float Delta, bool bGamepad);
};


// Class WillowGame.WillowSeqAct_InterpPawn
// 0x000C (0x00B4 - 0x00C0)
class UWillowSeqAct_InterpPawn : public USeqAct_Latent
{
public:
	unsigned long                                      bLinear : 1;                                              // 0x00B4(0x0004) (Edit, Const)
	float                                              InterpSpeed;                                              // 0x00B8(0x0004) (Edit, Const)
	class AActor*                                      Goal;                                                     // 0x00BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_InterpPawn");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_MissionCustomEvent
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_MissionCustomEvent : public USequenceAction
{
public:
	class UMissionDefinition*                          AssociatedMission;                                        // 0x00A4(0x0004) (Edit)
	struct FName                                       EventName;                                                // 0x00A8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_MissionCustomEvent");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_PrepareMapChangeFromDefinition
// 0x000C (0x00CC - 0x00D8)
class UWillowSeqAct_PrepareMapChangeFromDefinition : public USeqAct_PrepareMapChange
{
public:
	struct FName                                       DefaultMap;                                               // 0x00CC(0x0008) (Edit)
	unsigned long                                      bAllowVehicles : 1;                                       // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_PrepareMapChangeFromDefinition");
		return ptr;
	}


	static struct FName GetPersistentMap();
	static void SetPersistentMap(const struct FName& MapToLoad);
};


// Class WillowGame.WillowSeqAct_PrepareSavedMapChange
// 0x0000 (0x00CC - 0x00CC)
class UWillowSeqAct_PrepareSavedMapChange : public USeqAct_PrepareMapChange
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_PrepareSavedMapChange");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_QueryTeleporterStatus
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_QueryTeleporterStatus : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_QueryTeleporterStatus");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ReleaseTeleporterHeldLevel
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ReleaseTeleporterHeldLevel : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ReleaseTeleporterHeldLevel");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ResurrectPlayer
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ResurrectPlayer : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ResurrectPlayer");
		return ptr;
	}


	void OnActivated(class AWillowPlayerController* aWPC);
};


// Class WillowGame.WillowSeqAct_RunCustomEvent
// 0x0010 (0x00A4 - 0x00B4)
class UWillowSeqAct_RunCustomEvent : public USequenceAction
{
public:
	struct FName                                       CustomEventName;                                          // 0x00A4(0x0008) (Edit)
	class UObject*                                     EventInstigator;                                          // 0x00AC(0x0004)
	class UObject*                                     OtherEventParticipant;                                    // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_RunCustomEvent");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_SetAIFlag
// 0x0008 (0x00A4 - 0x00AC)
class UWillowSeqAct_SetAIFlag : public USequenceAction
{
public:
	class UFlagDefinition*                             FlagDefinition;                                           // 0x00A4(0x0004) (Edit)
	unsigned long                                      bFlagState : 1;                                           // 0x00A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_SetAIFlag");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_SetInteractionProxyState
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_SetInteractionProxyState : public USequenceAction
{
public:
	unsigned long                                      bPassEventsToKismet : 1;                                  // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_SetInteractionProxyState");
		return ptr;
	}


	void OnActivated(class AWillowMind* aWMind);
};


// Class WillowGame.WillowSeqAct_SetLockout
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_SetLockout : public USequenceAction
{
public:
	class ULockoutDefinition*                          LockoutDef;                                               // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_SetLockout");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_SetLookAtActor
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_SetLookAtActor : public USequenceAction
{
public:
	struct FVector                                     Offset;                                                   // 0x00A4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_SetLookAtActor");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ToggleCinematicModeAffectsAll
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ToggleCinematicModeAffectsAll : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ToggleCinematicModeAffectsAll");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_TogglePostRenderFor
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_TogglePostRenderFor : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_TogglePostRenderFor");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ToggleRestrictions
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_ToggleRestrictions : public USequenceAction
{
public:
	unsigned long                                      bToggleWeapons : 1;                                       // 0x00A4(0x0004) (Edit)
	unsigned long                                      bToggleTeleporters : 1;                                   // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ToggleRestrictions");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_TravelStationTeleport
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_TravelStationTeleport : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_TravelStationTeleport");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_TurnOffCombatMusic
// 0x0008 (0x00A4 - 0x00AC)
class UWillowSeqAct_TurnOffCombatMusic : public USequenceAction
{
public:
	float                                              FadeOutTime;                                              // 0x00A4(0x0004) (Edit)
	unsigned long                                      bEnableAmbientMusic : 1;                                  // 0x00A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_TurnOffCombatMusic");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_WaypointObjective
// 0x0018 (0x00A4 - 0x00BC)
class UWillowSeqAct_WaypointObjective : public USequenceAction
{
public:
	unsigned long                                      bRemoveObjective : 1;                                     // 0x00A4(0x0004) (Edit)
	struct FMissionObjectiveWaypointData               WaypointInfo;                                             // 0x00A8(0x0010) (Edit, NeedCtorLink)
	class UMissionObjectiveDefinition*                 WaypointObjective;                                        // 0x00B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_WaypointObjective");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_AnyPlayerHasMarketingUnlock
// 0x0004 (0x008C - 0x0090)
class UWillowSeqCond_AnyPlayerHasMarketingUnlock : public USequenceCondition
{
public:
	class UMarketingUnlockDefinition*                  MarketingUnlockDef;                                       // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_AnyPlayerHasMarketingUnlock");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_CheckLockout
// 0x0004 (0x008C - 0x0090)
class UWillowSeqCond_CheckLockout : public USequenceCondition
{
public:
	class ULockoutDefinition*                          LockoutDef;                                               // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_CheckLockout");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_GoStraightToMainMenu
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_GoStraightToMainMenu : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_GoStraightToMainMenu");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_IsCombatMusicPlaying
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_IsCombatMusicPlaying : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_IsCombatMusicPlaying");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_IsPlayerServer
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_IsPlayerServer : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_IsPlayerServer");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_MultiplePlayersInGame
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_MultiplePlayersInGame : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_MultiplePlayersInGame");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_ShouldStartNewGameCinematics
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_ShouldStartNewGameCinematics : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_ShouldStartNewGameCinematics");
		return ptr;
	}

};


// Class WillowGame.WillowSeqCond_SplitScreen
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_SplitScreen : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_SplitScreen");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_CombatMusicStarted
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_CombatMusicStarted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_CombatMusicStarted");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_CustomEvent
// 0x0008 (0x00C4 - 0x00CC)
class UWillowSeqEvent_CustomEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                                // 0x00C4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_CustomEvent");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_FastTravel
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_FastTravel : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_FastTravel");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_MissionRemoteEvent
// 0x000C (0x00C4 - 0x00D0)
class UWillowSeqEvent_MissionRemoteEvent : public USequenceEvent
{
public:
	class UMissionDefinition*                          AssociatedMissionDefinition;                              // 0x00C4(0x0004) (Edit)
	struct FName                                       EventName;                                                // 0x00C8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_MissionRemoteEvent");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_VehicleSpawned
// 0x0004 (0x00C4 - 0x00C8)
class UWillowSeqEvent_VehicleSpawned : public USequenceEvent
{
public:
	class AWillowVehicle*                              SpawnedVehicle;                                           // 0x00C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_VehicleSpawned");
		return ptr;
	}

};


// Class WillowGame.WillowSeqVar_DayNightCycleVariable
// 0x0000 (0x005C - 0x005C)
class UWillowSeqVar_DayNightCycleVariable : public USeqVar_Float
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqVar_DayNightCycleVariable");
		return ptr;
	}

};


// Class WillowGame.WillowSeqVar_DayNightCycleRate
// 0x0000 (0x005C - 0x005C)
class UWillowSeqVar_DayNightCycleRate : public UWillowSeqVar_DayNightCycleVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqVar_DayNightCycleRate");
		return ptr;
	}

};


// Class WillowGame.WillowSeqVar_TimeOfDay
// 0x0000 (0x005C - 0x005C)
class UWillowSeqVar_TimeOfDay : public UWillowSeqVar_DayNightCycleVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqVar_TimeOfDay");
		return ptr;
	}

};


// Class WillowGame.ActionSkillStateExpressionEvaluator
// 0x0004 (0x003C - 0x0040)
class UActionSkillStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bIsRunning : 1;                                           // 0x003C(0x0004) (Edit)
	unsigned long                                      bIsNotRunning : 1;                                        // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActionSkillStateExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.HealthStateExpressionEvaluator
// 0x0004 (0x003C - 0x0040)
class UHealthStateExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bHealthy : 1;                                             // 0x003C(0x0004) (Edit)
	unsigned long                                      bInjured : 1;                                             // 0x003C(0x0004) (Edit)
	unsigned long                                      bDead : 1;                                                // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HealthStateExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.NumberWeaponsEquippedExpressionEvaluator
// 0x0004 (0x003C - 0x0040)
class UNumberWeaponsEquippedExpressionEvaluator : public UExpressionEvaluator
{
public:
	int                                                NumberOfWeapons;                                          // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("NumberWeaponsEquippedExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.PlayerActionExpressionEvaluator
// 0x000C (0x003C - 0x0048)
class UPlayerActionExpressionEvaluator : public UExpressionEvaluator
{
public:
	TArray<struct FEvalActionData>                     EvalActions;                                              // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerActionExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.SkillAttributeContextResolver
// 0x0038 (0x003C - 0x0074)
class USkillAttributeContextResolver : public UAttributeContextResolver
{
public:
	class USkillDefinition*                            AssociatedSkill;                                          // 0x003C(0x0004) (Edit, Const)
	struct FNameBasedObjectPath                        AssociatedSkillPathName;                                  // 0x0040(0x0034) (Const, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillAttributeContextResolver");
		return ptr;
	}

};


// Class WillowGame.SkillEffectManager
// 0x001C (0x0188 - 0x01A4)
class ASkillEffectManager : public AActor
{
public:
	unsigned long                                      bAllowSkillActivation : 1;                                // 0x0188(0x0004)
	unsigned long                                      bUpdatingSkills : 1;                                      // 0x0188(0x0004)
	unsigned long                                      bAddedHUDTrackedSkillsLastTick : 1;                       // 0x0188(0x0004) (Transient)
	TArray<struct FDeferredSkillActivationData>        DeferredSkillActivationList;                              // 0x018C(0x000C) (NeedCtorLink)
	TArray<class USkill*>                              ActiveSkills;                                             // 0x0198(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillEffectManager");
		return ptr;
	}


	void TriggerTakeHitEvents(const FScriptInterface& Victim, class AController* InstigatedBy, class AController* VictimController, class UClass* DamageType, class UDamagePipeline* Pipeline);
	class USkill* GetActiveSkillForInstigatorByDefinition(class AController* SkillInstigator, class USkillDefinition* Definition);
	class USkill* GetActiveSkillForInstigator(class AController* SkillInstigator, const struct FName& SkillFName);
	bool UpdateSkillGrade(class AController* SkillInstigator, class USkillDefinition* Definition, int Grade);
	void NotifySkillDamagedEvent(unsigned char EventType, class AController* EventInstigator, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline);
	void NotifySkillEvent(unsigned char EventType, class AController* EventInstigator, class AController* EventRecipient, class UClass* DamageSource, class UDamagePipeline* Pipeline, class UObject* ContextObject);
	bool IsSkillActive(class AController* SkillInstigator, class USkillDefinition* Definition);
	bool IsSkillPaused(class AController* SkillInstigator, class USkillDefinition* Definition);
	void DeactivateSkill(class AController* SkillInstigator, class USkillDefinition* Definition, bool bIgnoreSkillInstigator);
	bool ActivateSkill(class AController* SkillInstigator, class USkillDefinition* Definition, class UObject* AdditionalSkillTarget, int SkillGrade, const struct FScriptDelegate& StateChangeDelegate);
	int DeferActivateSkill(class AController* SkillInstigator, class USkillDefinition* Definition, class UObject* AdditionalSkillTarget, int SkillGrade, const struct FScriptDelegate& StateChangeDelegate);
	void RefreshSkillsAffectingInstigator(class AController* SkillInstigator);
	void RefreshSkillsForInstigator(class AController* SkillInstigator);
	void DeactivateAllSkillTreeSkillsForPlayer(class AWillowPlayerController* WPC);
	void DeactivateAllSkillsForInstigator(class AController* SkillInstigator);
};


// Class WillowGame.SkillExpressionEvaluator
// 0x0005 (0x003C - 0x0041)
class USkillExpressionEvaluator : public UExpressionEvaluator
{
public:
	class USkillDefinition*                            Skill;                                                    // 0x003C(0x0004) (Edit, Const)
	unsigned char                                      SkillState;                                               // 0x0040(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.VehiclePassengerExpressionEvaluator
// 0x0004 (0x003C - 0x0040)
class UVehiclePassengerExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned long                                      bNotInVehicle : 1;                                        // 0x003C(0x0004) (Edit)
	unsigned long                                      bDriver : 1;                                              // 0x003C(0x0004) (Edit)
	unsigned long                                      bPassenger : 1;                                           // 0x003C(0x0004) (Edit)
	unsigned long                                      bAttachedRider : 1;                                       // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehiclePassengerExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.WeaponActionAvailableExpressionEvaluator
// 0x0000 (0x003C - 0x003C)
class UWeaponActionAvailableExpressionEvaluator : public UExpressionEvaluator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponActionAvailableExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.WeaponEquippedExpressionEvaluator
// 0x0001 (0x003C - 0x003D)
class UWeaponEquippedExpressionEvaluator : public UExpressionEvaluator
{
public:
	unsigned char                                      WeaponType;                                               // 0x003C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponEquippedExpressionEvaluator");
		return ptr;
	}


	bool Evaluate(class UObject* ContextSource);
};


// Class WillowGame.AIPawnBalanceDefinition
// 0x0078 (0x003C - 0x00B4)
class UAIPawnBalanceDefinition : public UBaseBalanceDefinition
{
public:
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x003C(0x0004) (Const, Native, NoExport)
	class UExpressionEvaluator*                        CanSpawnIf;                                               // 0x0040(0x0004) (Edit, Const, EditInline)
	TArray<struct FAIPawnPlaythroughData>              PlayThroughs;                                             // 0x0044(0x000C) (Edit, Const, NeedCtorLink)
	class AWillowAIPawn*                               AIPawnArchetype;                                          // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      Champion : 1;                                             // 0x0054(0x0004) (Edit, Const)
	unsigned long                                      bUnlockOnDeathAchievementForAllPlayers : 1;               // 0x0054(0x0004) (Edit, Const)
	TArray<class UPopulationSpawnedActorTagDefinition*> ActorTags;                                                // 0x0058(0x000C) (Edit, Const, NeedCtorLink)
	struct FAttributeInitializationData                DefaultExpLevel;                                          // 0x0064(0x0010) (Edit, Const)
	unsigned char                                      BaseItemGameStage;                                        // 0x0074(0x0001) (Edit, Const)
	unsigned char                                      AchievementToUnlockOnDeath;                               // 0x0075(0x0001) (Edit, Const)
	unsigned char                                      HasLookedUpFixupIndex;                                    // 0x0076(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0077(0x0001) MISSED OFFSET
	struct FAttributeInitializationData                ItemGameStageOffset;                                      // 0x0078(0x0010) (Edit, Const)
	TArray<class UItemPoolListDefinition*>             DefaultItemPoolIncludedLists;                             // 0x0088(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FItemPoolInfo>                       DefaultItemPoolList;                                      // 0x0094(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAIPawnGameStageGradeWeightData>     Grades;                                                   // 0x00A0(0x000C) (Const, NeedCtorLink)
	int                                                FixupAIPawnNameIndex;                                     // 0x00AC(0x0004) (Transient)
	class UAIPawnBalanceModifierDefinition*            BalanceModifier;                                          // 0x00B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AIPawnBalanceDefinition");
		return ptr;
	}


	struct FName GetTransformedKillStat(unsigned char Transform);
	struct FString GetTransformedDisplayName(unsigned char Transform);
	bool SetupPawnItemPoolList(class AWillowAIPawn* SpawnedPawn);
	class AWillowAIPawn* GetPawnArchetype();
	int GetPlayThroughIndex();
};


// Class WillowGame.AttackLocation
// 0x0004 (0x003C - 0x0040)
class UAttackLocation : public UObject
{
public:
	unsigned long                                      bRequired : 1;                                            // 0x003C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
	bool IsRunning(const FScriptInterface& AI);
	bool CanPath(const FScriptInterface& AI);
};


// Class WillowGame.AttackLocation_Direct
// 0x0000 (0x0040 - 0x0040)
class UAttackLocation_Direct : public UAttackLocation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_Direct");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
};


// Class WillowGame.AttackLocation_Height
// 0x0008 (0x0040 - 0x0048)
class UAttackLocation_Height : public UAttackLocation
{
public:
	unsigned char                                      Restriction;                                              // 0x0040(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              Height;                                                   // 0x0044(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_Height");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
};


// Class WillowGame.AttackLocation_LineOfSight
// 0x002C (0x0040 - 0x006C)
class UAttackLocation_LineOfSight : public UAttackLocation
{
public:
	unsigned char                                      LineOfSight;                                              // 0x0040(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              ValidTime;                                                // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bFullLineOfSight : 1;                                     // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bMustHaveNavMesh : 1;                                     // 0x0048(0x0004) (Edit, Const)
	float                                              ArcAnglePct;                                              // 0x004C(0x0004) (Edit, Const)
	float                                              ArcSpeed;                                                 // 0x0050(0x0004) (Edit, Const)
	struct FVector                                     ArcStartOffset;                                           // 0x0054(0x000C) (Edit, Const)
	struct FVector                                     ArcEndOffset;                                             // 0x0060(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_LineOfSight");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
};


// Class WillowGame.AttackLocation_MaxDistance
// 0x0004 (0x0040 - 0x0044)
class UAttackLocation_MaxDistance : public UAttackLocation
{
public:
	float                                              MaxDistance;                                              // 0x0040(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_MaxDistance");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
};


// Class WillowGame.AttackLocation_Move
// 0x0008 (0x0040 - 0x0048)
class UAttackLocation_Move : public UAttackLocation
{
public:
	float                                              MaxTime;                                                  // 0x0040(0x0004) (Edit, Const)
	float                                              MoveDistance;                                             // 0x0044(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_Move");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
};


// Class WillowGame.AttackLocation_ParentDistance
// 0x000C (0x0040 - 0x004C)
class UAttackLocation_ParentDistance : public UAttackLocation
{
public:
	unsigned char                                      Restriction;                                              // 0x0040(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              Distance;                                                 // 0x0044(0x0004) (Edit, Const)
	unsigned long                                      bCheckDestination : 1;                                    // 0x0048(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_ParentDistance");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
};


// Class WillowGame.AttackLocation_Range
// 0x000C (0x0040 - 0x004C)
class UAttackLocation_Range : public UAttackLocation
{
public:
	unsigned long                                      bCanPath : 1;                                             // 0x0040(0x0004) (Edit, Const)
	struct FAIRange                                    Range;                                                    // 0x0044(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_Range");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
	bool CanPath(const FScriptInterface& AI);
};


// Class WillowGame.AttackLocation_Side
// 0x0000 (0x0040 - 0x0040)
class UAttackLocation_Side : public UAttackLocation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AttackLocation_Side");
		return ptr;
	}


	bool ValidLocation(const FScriptInterface& AI, struct FVector* TestLoc);
};


// Class WillowGame.Behavior_AISpawn
// 0x0040 (0x004C - 0x008C)
class UBehavior_AISpawn : public UBehaviorBase
{
public:
	unsigned long                                      bForceSpawn : 1;                                          // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bSpawnFromSpawnPointInstanceData : 1;                     // 0x004C(0x0004) (Edit, Const)
	struct FName                                       SpawnPointName;                                           // 0x0050(0x0008) (Edit, Const)
	class UPopulationDefinition*                       PopDef;                                                   // 0x0058(0x0004) (Edit, Const)
	struct FBehaviorContextData                        SpawnContext;                                             // 0x005C(0x0010) (Edit, Const)
	struct FName                                       InstanceDataName;                                         // 0x006C(0x0008) (Edit, Const)
	struct FBehaviorContextData                        OverrideContext;                                          // 0x0074(0x0010) (Edit, Const)
	struct FName                                       PopulationOverrideName;                                   // 0x0084(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AISpawn");
		return ptr;
	}


	class AActor* SpawnActor(class UObject* ContextObject, class UPopulationDefinition* EffectivePopDef, class UObject* SpawnLocationContext);
	void PublishBehaviorOutput(class AActor* SpawnedActor, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.DownloadableFixupAIPawnNamesDefinition
// 0x000C (0x003C - 0x0048)
class UDownloadableFixupAIPawnNamesDefinition : public UGBXDefinition
{
public:
	TArray<struct FAIPawnPlaythroughThreeData>         PlayThroughThree;                                         // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DownloadableFixupAIPawnNamesDefinition");
		return ptr;
	}

};


// Class WillowGame.EventFilter_OnTakeDamage
// 0x0004 (0x0040 - 0x0044)
class UEventFilter_OnTakeDamage : public UBehaviorEventFilterBase
{
public:
	float                                              DamageThreshold;                                          // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EventFilter_OnTakeDamage");
		return ptr;
	}

};


// Class WillowGame.FromContextFlagValueResolver
// 0x0004 (0x003C - 0x0040)
class UFromContextFlagValueResolver : public UFlagValueResolver
{
public:
	class UFlagDefinition*                             MyFlagDef;                                                // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FromContextFlagValueResolver");
		return ptr;
	}

};


// Class WillowGame.PopulationFactoryWillowAIPawn
// 0x0054 (0x0058 - 0x00AC)
class UPopulationFactoryWillowAIPawn : public UPopulationFactory
{
public:
	class AWillowAIPawn*                               WillowAIPawnArchetype;                                    // 0x0058(0x0004) (Edit, Const)
	struct FAttributeInitializationData                PawnExpLevel;                                             // 0x005C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                PawnWeaponLevel;                                          // 0x006C(0x0010) (Edit, Const)
	TArray<struct FFlagDefinitionInitialization>       FlagsToSet;                                               // 0x007C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAttributeBaseValueData>             AttributeStartingValues;                                  // 0x0088(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FItemPoolInfo>                       ItemPoolList;                                             // 0x0094(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UItemPoolListDefinition*>             ItemPoolIncludedLists;                                    // 0x00A0(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryWillowAIPawn");
		return ptr;
	}


	struct FString GetDescriptionOfFactoryOutput();
	class AWillowAIPawn* RestorePopulatedAIPawn(class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, const struct FPopulatedAIPawnMemento& AIPawnMemento);
	void CreateSavedInventory(class AWillowAIPawn* aWPawn, const struct FPopulatedAIPawnMemento& AIPawnMemento);
	void GetPopulatedAIPawnMemento(class AWillowAIPawn* aWPawn, struct FPopulatedAIPawnMemento* Memento);
	static bool ShouldSavePopulationActor(class UPopulationMaster* Master, class AActor* ActorToSave);
	static bool DestroyPopulationActor(class UPopulationMaster* Master, int nOpportunityIdx, class AActor* ActorToDestroy, class UPopulationFactory* SpawnFactory, int CreationFlags, bool bDontSaveActor);
	class AActor* CreatePopulationActor(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel);
	void SetupPopulationActor(class UPopulationMaster* Master, class AWillowAIPawn* SpawnedPawn, class UObject* SpawnLocationContextObject, int GameStage, int AwesomeLevel, bool bUseMemento, const struct FPopulatedAIPawnMemento& AIPawnMemento);
	void SetFlagDefinitions(class AWillowAIPawn* aPawn);
	void ApplyPopulationDefinition(class UPopulationMaster* Master, class AWillowAIPawn* AIPawn);
	class UObject* GetAContextSourceForThePopulationActor(class UPopulationMaster* Master);
	struct FBoxSphereBounds GetSpawnVisibilityBounds(int GameStage, int AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int GameStage, int AwesomeLevel);
	int GetActorSpawnCost(int GameStage, int AwesomeLevel, bool bCanSpawnTest);
	static void SetupMatineeForActor(class AActor* aNewActor);
};


// Class WillowGame.PopulationFactoryBalancedAIPawn
// 0x0008 (0x00AC - 0x00B4)
class UPopulationFactoryBalancedAIPawn : public UPopulationFactoryWillowAIPawn
{
public:
	class UAIPawnBalanceDefinition*                    PawnBalanceDefinition;                                    // 0x00AC(0x0004) (Edit, Const)
	unsigned long                                      bUseInstigatorLevel : 1;                                  // 0x00B0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryBalancedAIPawn");
		return ptr;
	}


	float GetSpawnProbabilityAtThisGameStage(int GameStage, int AwesomeLevel);
	struct FString GetDescriptionOfFactoryOutput();
	class AWillowAIPawn* SpawnAIPawn(class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, bool bUseMemento, const struct FPopulatedAIPawnMemento& AIPawnMemento);
	class AWillowAIPawn* RestorePopulatedAIPawn(class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, const struct FPopulatedAIPawnMemento& AIPawnMemento);
	class AActor* CreatePopulationActor(class UPopulationMaster* Master, class APopulationOpportunity* Opportunity, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel);
	void ApplyAttributeStartingValues(class AWillowAIPawn* SpawnedPawn);
	void SetupBalancedPopulationActor(class UPopulationMaster* Master, const FScriptInterface& BalancedInstigator, class AWillowAIPawn* SpawnedPawn, class UObject* SpawnLocationContextObject, int GameStage, int AwesomeLevel, bool bUseMemento, const struct FPopulatedAIPawnMemento& AIPawnMemento);
	struct FBoxSphereBounds GetSpawnVisibilityBounds(int GameStage, int AwesomeLevel);
	class UPawnAllegiance* GetActorAllegiance(int GameStage, int AwesomeLevel);
	int GetActorSpawnCost(int GameStage, int AwesomeLevel, bool bCanSpawnTest);
	bool CanSpawn(class APopulationOpportunity* SpawningOpportunity);
};


// Class WillowGame.PopulationFactoryWillowInventory
// 0x0000 (0x0058 - 0x0058)
class UPopulationFactoryWillowInventory : public UPopulationFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PopulationFactoryWillowInventory");
		return ptr;
	}


	class AWillowPickup* RestorePickup(class UPopulationMaster* Master, class UObject* SpawnLocationContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, int GameStage, int AwesomeLevel, const struct FPopulatedPickupMemento& Memento);
	class AWillowPickup* CreateInventoryPickup(class UPopulationMaster* Master, const struct FPopulatedPickupMemento& Memento, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void GetPopulatedPickupMemento(class AWillowPickup* Pickup, struct FPopulatedPickupMemento* Memento);
	static bool ShouldSavePopulationActor(class UPopulationMaster* Master, class AActor* ActorToSave);
};


// Class WillowGame.RES_AIOperation
// 0x0000 (0x003C - 0x003C)
class URES_AIOperation : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_AIOperation");
		return ptr;
	}

};


// Class WillowGame.RES_Behavior
// 0x0000 (0x003C - 0x003C)
class URES_Behavior : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_Behavior");
		return ptr;
	}

};


// Class WillowGame.RES_CharacterDialog
// 0x0000 (0x003C - 0x003C)
class URES_CharacterDialog : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_CharacterDialog");
		return ptr;
	}

};


// Class WillowGame.RES_CustomAnimation
// 0x0000 (0x003C - 0x003C)
class URES_CustomAnimation : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_CustomAnimation");
		return ptr;
	}

};


// Class WillowGame.RES_Firing
// 0x0000 (0x003C - 0x003C)
class URES_Firing : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_Firing");
		return ptr;
	}

};


// Class WillowGame.RES_Moving
// 0x0000 (0x003C - 0x003C)
class URES_Moving : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_Moving");
		return ptr;
	}

};


// Class WillowGame.RES_Posture
// 0x0000 (0x003C - 0x003C)
class URES_Posture : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_Posture");
		return ptr;
	}

};


// Class WillowGame.RES_Skill
// 0x0000 (0x003C - 0x003C)
class URES_Skill : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_Skill");
		return ptr;
	}

};


// Class WillowGame.RES_Sound
// 0x0000 (0x003C - 0x003C)
class URES_Sound : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_Sound");
		return ptr;
	}

};


// Class WillowGame.RES_SpecialMovement
// 0x0000 (0x003C - 0x003C)
class URES_SpecialMovement : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_SpecialMovement");
		return ptr;
	}

};


// Class WillowGame.RES_SpeedChange
// 0x0000 (0x003C - 0x003C)
class URES_SpeedChange : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_SpeedChange");
		return ptr;
	}

};


// Class WillowGame.RES_UseVehicle
// 0x0000 (0x003C - 0x003C)
class URES_UseVehicle : public UActionResource
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RES_UseVehicle");
		return ptr;
	}

};


// Class WillowGame.TargetMetaInfoValueResolver
// 0x0008 (0x003C - 0x0044)
class UTargetMetaInfoValueResolver : public UAttributeValueResolver
{
public:
	struct FName                                       PropertyName;                                             // 0x003C(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TargetMetaInfoValueResolver");
		return ptr;
	}

};


// Class WillowGame.TransformedFlagValueResolver
// 0x0001 (0x003C - 0x003D)
class UTransformedFlagValueResolver : public UFlagValueResolver
{
public:
	unsigned char                                      Transform;                                                // 0x003C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TransformedFlagValueResolver");
		return ptr;
	}

};


// Class WillowGame.WillowActionSequencePawn
// 0x0078 (0x00B0 - 0x0128)
class UWillowActionSequencePawn : public UActionSequencePawn
{
public:
	class UWillowAIComponent*                          WillowAI;                                                 // 0x00B0(0x0004) (ExportObject, Component, EditInline)
	class UWillowNavigationHandle*                     MyNavHandle;                                              // 0x00B4(0x0004)
	class AWillowMind*                                 MyWillowMind;                                             // 0x00B8(0x0004)
	class AWillowAIPawn*                               MyWillowPawn;                                             // 0x00BC(0x0004)
	struct FPathFindData                               PathData;                                                 // 0x00C0(0x0058) (Transient, NeedCtorLink)
	class AActor*                                      Target;                                                   // 0x0118(0x0004) (Transient)
	class UWillowMindTargetInfo*                       TargetRec;                                                // 0x011C(0x0004) (Transient)
	class UWillowMindTargetInfo*                       ParentTargetRec;                                          // 0x0120(0x0004) (Transient)
	int                                                LastYawCheck;                                             // 0x0124(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowActionSequencePawn");
		return ptr;
	}


	void CreateActorPath(class AActor* GoalActor, float MaxDist, bool bAdjustStartForMotion);
	struct FVector GetActorFloorLoc(class AActor* GoalActor);
	void CreateBackupFlyerPath(const struct FVector& GoalVector, bool bAdjustStartForMotion);
	void CreateVectorPath(const struct FVector& GoalVector, const struct FGBXNavMeshPolyRef& GoalPoly, bool bAdjustStartForMotion);
	struct FVector GetFinalDestination();
	struct FVector GetPointOnGround(const struct FVector& StartPoint, float Tolerance);
	bool CanMoveTo(const struct FVector& GoalPoint);
	bool ReachedDestination();
	void FinishPath();
	void WaitForPath();
	void FollowPath();
	bool PathIsValid();
	void InvalidatePath();
	bool PathFind();
	bool TargetTooFar();
	void ActivateEvent(const struct FName& EventName);
	bool IsWalking();
	bool IsCurrentlyFlying();
	bool IsFixingFlying();
	bool IsFlying();
	void Stop();
	void Start();
	void Init();
	void SetPawnMovementSpeed(unsigned char NewPawnMovementSpeed);
	void WaitForPawnToTurn();
	void WaitForPawnToStop();
};


// Class WillowGame.Action_Burrow
// 0x0008 (0x0128 - 0x0130)
class UAction_Burrow : public UWillowActionSequencePawn
{
public:
	class USpecialMove_Cloak*                          BurrowEnter;                                              // 0x0128(0x0004) (Transient)
	class USpecialMove_Cloak*                          BurrowExit;                                               // 0x012C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Burrow");
		return ptr;
	}


	void CheckCloaked(unsigned char Type, bool bForceUncloak);
	bool SafeToUncloak();
	void ForceUncloak();
	void ForceCloak();
	void CheckStateTransition();
	void Start();
};


// Class WillowGame.WillowAIComponent
// 0x00D4 (0x00EC - 0x01C0)
class UWillowAIComponent : public UAIComponent
{
public:
	class AWillowMind*                                 MyWillowMind;                                             // 0x00EC(0x0004) (Transient)
	class APopulationOpportunityDen*                   MyDen;                                                    // 0x00F0(0x0004) (Transient)
	class UWillowAIBlackboardComponent*                MyBlackboard;                                             // 0x00F4(0x0004) (ExportObject, Transient, Component, EditInline)
	FScriptInterface                                   TargetLeader;                                             // 0x00F8(0x0008) (Transient)
	FScriptInterface                                   FormationLeader;                                          // 0x0100(0x0008) (Transient)
	TArray<int>                                        InvalidCombatZones;                                       // 0x0108(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        ClaimedCombatZones;                                       // 0x0114(0x000C) (Const, Transient, NeedCtorLink)
	float                                              ZoneTime;                                                 // 0x0120(0x0004) (Const, Transient)
	struct FCombatZone                                 LastZone;                                                 // 0x0124(0x0020) (Const, Transient)
	struct FCombatZone                                 CurrentZone;                                              // 0x0144(0x0020) (Const, Transient)
	struct FCombatZone                                 ClaimedZone;                                              // 0x0164(0x0020) (Const, Transient)
	class AVolume*                                     CombatVolume;                                             // 0x0184(0x0004) (Transient)
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;                 // 0x0188(0x0004) (Transient)
	unsigned long                                      bCanUseCover : 1;                                         // 0x0188(0x0004) (Transient)
	struct FCoverInfo                                  DesiredCover;                                             // 0x018C(0x0008) (Transient)
	float                                              LastHurtTime;                                             // 0x0194(0x0004) (Transient)
	float                                              LastAttackedTime;                                         // 0x0198(0x0004) (Transient)
	class AActor*                                      LastAttacker;                                             // 0x019C(0x0004) (Transient)
	TArray<struct FAIHoldData>                         HeadLookHolds;                                            // 0x01A0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FAIHoldData>                         PhaseLockHolds;                                           // 0x01AC(0x000C) (Transient, NeedCtorLink)
	float                                              LastTickTime;                                             // 0x01B8(0x0004) (Transient)
	float                                              TickThrottleTime;                                         // 0x01BC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIComponent");
		return ptr;
	}


	bool IsAIThrottled();
	static bool IsAttackDebugEnabled();
	static void ToggleAttackDebug();
	void DrawAttackDebug();
	class AWillowVehicle* ClaimNearbyVehicle();
	bool CanPhaseLock();
	void ReleasePhaseLock(const struct FName& HoldName, class UObject* Tag);
	void HoldPhaseLock(const struct FName& HoldName, class UObject* Tag);
	bool PhaseLockOnHold();
	void ReleaseHeadLook(const struct FName& HoldName, class UObject* Tag);
	void HoldHeadLook(const struct FName& HoldName, class UObject* Tag);
	bool HeadLookOnHold();
	bool OnHold();
	float GetTimeSinceAttacked();
	float GetTimeSinceHurt();
	void SetThreatLevel(class AActor* Target, unsigned char NewThreat);
	unsigned char GetThreatLevel(class AActor* Target);
	unsigned char GetHighestThreatLevel();
	struct FCoverExposureData GetCoverExposure(struct FCoverInfo* Cover);
	void TryEnterCover();
	void TryExitCover();
	bool IsLocationValid(bool bZoneCheck, bool bAllowPartial, struct FVector* TestLoc, TArray<class UAttackLocation*>* Limits);
	int GetLocationScore(bool bZoneCheck, struct FVector* TestLoc, TArray<class UAttackLocation*>* Limits);
	void InvalidateCombatZone(int ZoneIndex);
	void MarkCurrentCombatZone();
	static struct FCombatZone GetCombatZoneByLocation(struct FVector* TestLoc);
	bool CombatZoneAvailable(struct FCombatZone* Zone);
	void UnclaimCombatZone(struct FCombatZone* Zone);
	void ClaimCombatZone(struct FCombatZone* Zone);
	float DistToFormationLeader();
	class UWillowFormationComponent* GetFormation(class UWillowFormationComponent* Current, const struct FName& Tag, class AWillowPawn* LeaderPawn);
	void SetFormationLeader(const FScriptInterface& NewLeader, bool bOverride);
	FScriptInterface GetFormationLeader();
	void SetTargetLeader(const FScriptInterface& NewLeader, bool bOverride);
	FScriptInterface GetTargetLeader();
	class AActor* GetForcedTarget();
	bool HasForcedTarget();
	void Release(const struct FName& HoldName, class UObject* Tag);
	void Hold(const struct FName& HoldName, class UObject* Tag);
	void TargetChanged(class AActor* OldTarget, class AActor* NewTarget);
	void InitializeTargetRecord(class UMindTargetInfo* TargetRec);
	void TargetRemoved(class UMindTargetInfo* TargetRec);
	bool ValidCurrentTarget(class UMindTargetInfo* TargetRec);
	bool ValidTarget(class AActor* Target);
	void AddDenTargets(class APopulationOpportunityDen* Den);
	void GetTargetsFromParents();
	void GetTargets();
	void NotifyAttackedBy(class AActor* Attacker);
	void ClearState();
};


// Class WillowGame.Action_GenericAttack
// 0x0050 (0x0130 - 0x0180)
class UAction_GenericAttack : public UAction_Burrow
{
public:
	unsigned long                                      bLimitedMovement : 1;                                     // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bBurrowAttack : 1;                                        // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bShootTarget : 1;                                         // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bPathingFailed : 1;                                       // 0x0130(0x0004) (Transient)
	unsigned long                                      bWantsCrouchIdle : 1;                                     // 0x0130(0x0004) (Transient)
	unsigned long                                      bWantsCrouchMove : 1;                                     // 0x0130(0x0004) (Transient)
	unsigned long                                      bCanBeLimitedByDownedPlayers : 1;                         // 0x0130(0x0004) (Transient)
	unsigned long                                      bWantsFullLOSTrace : 1;                                   // 0x0130(0x0004) (Transient)
	TArray<class UAttackLocation*>                     Limits;                                                   // 0x0134(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	float                                              CrouchIdleChance;                                         // 0x0140(0x0004) (Edit, Const)
	float                                              CrouchMoveChance;                                         // 0x0144(0x0004) (Edit, Const)
	float                                              CheckRate;                                                // 0x0148(0x0004)
	unsigned char                                      Type;                                                     // 0x014C(0x0001) (Transient)
	unsigned char                                      Validity;                                                 // 0x014D(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x014E(0x0002) MISSED OFFSET
	struct FVector                                     AttackLoc;                                                // 0x0150(0x000C) (Transient)
	struct FCombatZone                                 MyZone;                                                   // 0x015C(0x0020) (Transient)
	float                                              IdleTime;                                                 // 0x017C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_GenericAttack");
		return ptr;
	}


	bool ReachedAttackLoc();
	bool HalfExposed();
	float GetDotToTarget();
	bool TargetReachable();
	struct FVector GetNearestLocationToTarget(bool bCanBeExpensive);
	bool PathFind();
	bool WantsPathFind();
	void CheckExpiredZone();
	bool OnlyExpireMyZone();
	bool CanCheckExpiredZone();
	void CheckForNewZone();
	bool CanClaimZones();
	bool ValidLocation(bool bAllAreRequired, struct FVector* TestLoc);
	void CheckAttackLocation();
	void UnclaimMovement();
	void ClaimMovement();
	bool CanMove();
	void CheckStateTransition();
	struct FName GetDesiredState();
	bool TargetIsDownedPlayer();
	void Update();
	void Stop();
	void Start();
	struct FName CanRun();
	void Init();
	void InitData();
};


// Class WillowGame.Action_AnimAttack
// 0x0014 (0x0180 - 0x0194)
class UAction_AnimAttack : public UAction_GenericAttack
{
public:
	unsigned char                                      AimType;                                                  // 0x0180(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	float                                              VisionAngle;                                              // 0x0184(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      AttackAnim;                                               // 0x0188(0x0004) (Edit, Const)
	float                                              Aim;                                                      // 0x018C(0x0004) (Transient)
	unsigned long                                      bTargetHeld : 1;                                          // 0x0190(0x0004) (Transient)
	unsigned long                                      bTempHardAttach : 1;                                      // 0x0190(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_AnimAttack");
		return ptr;
	}


	bool IsAimed();
	void ReleaseTarget();
	void HoldTarget();
	void AttackFinished();
	bool OnlyExpireMyZone();
	bool CanCheckExpiredZone();
	struct FName GetDesiredState();
	void Update();
	void Stop();
	void Start();
	void Init();
};


// Class WillowGame.Action_BasicAttack
// 0x0054 (0x0194 - 0x01E8)
class UAction_BasicAttack : public UAction_AnimAttack
{
public:
	unsigned long                                      bMigrated : 1;                                            // 0x0194(0x0004) (Const)
	unsigned long                                      bTargetMustBeInRange : 1;                                 // 0x0194(0x0004) (Const)
	unsigned long                                      bInterpToAimDirection : 1;                                // 0x0194(0x0004) (Const)
	unsigned long                                      bAlwaysFaceTarget : 1;                                    // 0x0194(0x0004) (Const)
	float                                              Angle;                                                    // 0x0198(0x0004) (Const)
	float                                              VerticalDistMax;                                          // 0x019C(0x0004) (Const)
	struct FAIRange                                    Range;                                                    // 0x01A0(0x0008) (Const)
	unsigned char                                      RangeType;                                                // 0x01A8(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A9(0x0003) MISSED OFFSET
	struct FCombatZoneSearchData                       ZoneSearch;                                               // 0x01AC(0x0028)
	class USpecialMoveDefinition*                      AttackSMD;                                                // 0x01D4(0x0004) (Const)
	struct FAIRange                                    InnerRadius;                                              // 0x01D8(0x0008) (Const)
	struct FAIRange                                    OuterRadius;                                              // 0x01E0(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_BasicAttack");
		return ptr;
	}

};


// Class WillowGame.Action_LeapAtTarget
// 0x002C (0x01E8 - 0x0214)
class UAction_LeapAtTarget : public UAction_BasicAttack
{
public:
	struct FTrajectoryData                             Options;                                                  // 0x01E8(0x0020) (Edit)
	class USpecialMoveDefinition*                      LaunchAnimation;                                          // 0x0208(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      LandAnimation;                                            // 0x020C(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      InAirAttackIdleAnimation;                                 // 0x0210(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_LeapAtTarget");
		return ptr;
	}


	void LandFinished();
	void PlayLand(bool bInterrupted);
	void PlayIdle(bool bInterrupted);
	void PlayLaunch();
	void ActivateEvent(const struct FName& EventName);
	bool TargetTooFar();
	struct FName CanRun();
};


// Class WillowGame.Action_ShootTarget
// 0x0044 (0x0180 - 0x01C4)
class UAction_ShootTarget : public UAction_GenericAttack
{
public:
	float                                              ChanceToCrouch;                                           // 0x0180(0x0004) (Const)
	float                                              ChanceToMoveCrouch;                                       // 0x0184(0x0004) (Const)
	unsigned long                                      bMigrated : 1;                                            // 0x0188(0x0004) (Const)
	float                                              Angle;                                                    // 0x018C(0x0004) (Const)
	struct FAIRange                                    Range;                                                    // 0x0190(0x0008) (Const)
	unsigned char                                      RangeType;                                                // 0x0198(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0199(0x0003) MISSED OFFSET
	struct FCombatZoneSearchData                       ZoneSearch;                                               // 0x019C(0x0028)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_ShootTarget");
		return ptr;
	}

};


// Class WillowGame.Action_CoverAttack
// 0x003C (0x0128 - 0x0164)
class UAction_CoverAttack : public UWillowActionSequencePawn
{
public:
	TArray<class UAttackLocation*>                     Limits;                                                   // 0x0128(0x000C) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	float                                              LineOfSightTime;                                          // 0x0134(0x0004) (Edit, Const)
	struct FCoverInfo                                  MyCover;                                                  // 0x0138(0x0008) (Transient)
	struct FCombatZone                                 MyZone;                                                   // 0x0140(0x0020) (Transient)
	float                                              IdleTime;                                                 // 0x0160(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_CoverAttack");
		return ptr;
	}


	bool PathFind();
	void CheckExpiredZone();
	void CheckForNewZone();
	void FindCover();
	bool ReachedCoverLoc();
	bool IsInCover();
	bool CoverValid();
	bool CheckCoverLocation(struct FCoverInfo* Cover, struct FVector* CoverLoc, int* BestScore);
	bool IsValidCover(struct FCoverInfo* Cover);
	void CreateCoverList(struct FVector* TestLoc);
	struct FCoverInfo GetCoverPoint();
	struct FVector GetCoverLocation();
	void CheckStateTransition();
	void Update();
	void Stop();
	void Start();
	struct FName CanRun();
	void Init();
	void InitData();
};


// Class WillowGame.Action_CombatPoint
// 0x0034 (0x0164 - 0x0198)
class UAction_CombatPoint : public UAction_CoverAttack
{
public:
	unsigned long                                      bMigrated : 1;                                            // 0x0164(0x0004)
	struct FCombatPointSearchData                      Search;                                                   // 0x0168(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_CombatPoint");
		return ptr;
	}

};


// Class WillowGame.Action_SwoopAttack
// 0x0054 (0x0128 - 0x017C)
class UAction_SwoopAttack : public UWillowActionSequencePawn
{
public:
	float                                              SwoopFarDistance;                                         // 0x0128(0x0004) (Edit, Const)
	float                                              SwoopFarHeight;                                           // 0x012C(0x0004) (Edit, Const)
	float                                              SwoopCloseDistance;                                       // 0x0130(0x0004) (Edit, Const)
	float                                              SwoopCloseHeight;                                         // 0x0134(0x0004) (Edit, Const)
	unsigned long                                      bShootTarget : 1;                                         // 0x0138(0x0004) (Edit, Const)
	unsigned long                                      bUseOffset : 1;                                           // 0x0138(0x0004) (Edit, Const)
	unsigned long                                      bFoundAttackOffset : 1;                                   // 0x0138(0x0004) (Transient)
	unsigned long                                      bCacheTargetLoc : 1;                                      // 0x0138(0x0004) (Transient)
	float                                              SwoopAttackDistance;                                      // 0x013C(0x0004) (Const)
	TArray<struct FSwoopAttackData>                    SwoopAttackDistances;                                     // 0x0140(0x000C) (Edit, NeedCtorLink)
	float                                              Offset;                                                   // 0x014C(0x0004) (Edit, Const)
	unsigned char                                      OffsetDirection;                                          // 0x0150(0x0001) (Edit, Const)
	unsigned char                                      Direction;                                                // 0x0151(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0152(0x0002) MISSED OFFSET
	struct FVector                                     AttackOffset;                                             // 0x0154(0x000C) (Transient)
	float                                              ClosestAttackDist;                                        // 0x0160(0x0004) (Transient)
	struct FVector                                     LastAttackLocation;                                       // 0x0164(0x000C) (Transient)
	struct FVector                                     CachedTargetLoc;                                          // 0x0170(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_SwoopAttack");
		return ptr;
	}


	float GetDistToGoal();
	struct FVector GetGoalLocation(bool bForce);
	void SetAllTriggered(bool bTriggered);
	float GetDistToTarget();
	bool PathFind();
	void Stop();
	void Start();
	struct FName CanRun();
	void Init();
};


// Class WillowGame.WillowAIBlackboardComponent
// 0x0004 (0x01C0 - 0x01C4)
class UWillowAIBlackboardComponent : public UWillowAIComponent
{
public:
	class UPawnAllegiance*                             Allegiance;                                               // 0x01C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIBlackboardComponent");
		return ptr;
	}


	class UPawnAllegiance* GetAllegiance();
	void GetTargets();
};


// Class WillowGame.WillowAIDenComponent
// 0x0004 (0x01C0 - 0x01C4)
class UWillowAIDenComponent : public UWillowAIComponent
{
public:
	class UWillowAIDenComponent*                       ParentDenAI;                                              // 0x01C0(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIDenComponent");
		return ptr;
	}


	bool ShouldRemoveTarget(class UMindTargetInfo* TargetRec);
	void FindTargetsInDen(class APopulationOpportunityDen* Den);
	void FindTargets();
};


// Class WillowGame.WillowAIDefinition
// 0x001C (0x0060 - 0x007C)
class UWillowAIDefinition : public UAIDefinition
{
public:
	class UActionSequence*                             PatrolAction;                                             // 0x0060(0x0004)
	class UActionSequence*                             ScriptedAction;                                           // 0x0064(0x0004)
	class UExpressionEvaluator*                        WantsFormation;                                           // 0x0068(0x0004) (Edit, Const, EditInline)
	float                                              ReacquireTime;                                            // 0x006C(0x0004) (Edit, Const)
	float                                              ReacquireDistance;                                        // 0x0070(0x0004) (Edit, Const)
	unsigned long                                      bGetTargetsFromParents : 1;                               // 0x0074(0x0004) (Edit, Const)
	float                                              SuppressionFireTime;                                      // 0x0078(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIDefinition");
		return ptr;
	}


	void OnRevivedPlayerMaster(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnDismount(struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.WillowAIDenDefinition
// 0x0008 (0x0060 - 0x0068)
class UWillowAIDenDefinition : public UAIDefinition
{
public:
	float                                              MinEngagementTime;                                        // 0x0060(0x0004) (Edit, Const)
	float                                              MinProvokedTime;                                          // 0x0064(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIDenDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowAIMoveNode
// 0x0011 (0x01C4 - 0x01D5)
class AWillowAIMoveNode : public AGearboxAIMoveNode
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;                      // 0x01C4(0x0004) (Const, Native, NoExport)
	unsigned long                                      bPreviewJump : 1;                                         // 0x01C8(0x0004) (Edit, Const, EditorOnly)
	unsigned long                                      bShowPath : 1;                                            // 0x01C8(0x0004) (Edit, Const, EditorOnly)
	unsigned long                                      bFuzzyArrival : 1;                                        // 0x01C8(0x0004) (Edit, Const)
	float                                              PawnArrivalRadius;                                        // 0x01CC(0x0004) (Edit, Const)
	float                                              AISpeedPercentageHere;                                    // 0x01D0(0x0004) (Edit, Const)
	unsigned char                                      VehicleNodeType;                                          // 0x01D4(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIMoveNode");
		return ptr;
	}


	void NotifyPathChanged();
};


// Class WillowGame.Perch
// 0x007F (0x01D5 - 0x0254)
class APerch : public AWillowAIMoveNode
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	struct FPointer                                    VfTable_IIInstanceData;                                   // 0x01D8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBodyCompositionInstance;                        // 0x01DC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIBehaviorConsumer;                               // 0x01E0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x01E4(0x0004) (Const, Native, NoExport)
	class UPerchDefinition*                            PerchDef;                                                 // 0x01E8(0x0004) (Edit)
	class UPerchPreviewComponent*                      PreviewComponent;                                         // 0x01EC(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	float                                              UseRadius;                                                // 0x01F0(0x0004) (Edit)
	float                                              UseHeight;                                                // 0x01F4(0x0004) (Edit)
	unsigned long                                      bOverrideLoopTime : 1;                                    // 0x01F8(0x0004)
	unsigned long                                      bLookForPlayersInRange : 1;                               // 0x01F8(0x0004) (Transient)
	struct FAIRange                                    LoopTimeOverride;                                         // 0x01FC(0x0008) (Edit)
	TArray<class AVolume*>                             TargetVolumes;                                            // 0x0204(0x000C) (Edit, NeedCtorLink)
	class AWillowAIPawn*                               User;                                                     // 0x0210(0x0004) (Transient)
	float                                              CooldownTime;                                             // 0x0214(0x0004) (Transient)
	float                                              NextPlayerInRangeCheckTime;                               // 0x0218(0x0004) (Transient)
	struct FInstanceDataSet                            InstanceState;                                            // 0x021C(0x000C) (Component, NeedCtorLink)
	struct FReplicatedInstanceDataState                ReplicatedInstanceDataState;                              // 0x0228(0x0010) (Net, Transient, RepNotify)
	struct FBehaviorConsumerHandle                     ConsumerHandle;                                           // 0x0238(0x0004)
	struct FReplicatedBehaviorEvent                    ReplicatedBehaviorEvent;                                  // 0x023C(0x0004) (Net, RepNotify)
	struct FReplicatedBehaviorConsumerState            ReplicatedBehaviorConsumerState;                          // 0x0240(0x000C) (Net, RepNotify)
	class UDynamicLightEnvironmentComponent*           DynamicLightEnvironment;                                  // 0x024C(0x0004) (ExportObject, Transient, Component, EditInline)
	float                                              AlwaysRelevantDistanceSquared;                            // 0x0250(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Perch");
		return ptr;
	}


	struct FBehaviorConsumerHandle GetBehaviorConsumerHandle();
	void RegisterBehaviorConsumer();
	void ClearBodyCompositionInstance();
	FScriptInterface GetBodyInfoProvider();
	void ApplyPreviewBodyComposition();
	void ChangeInstanceDataSwitch(const struct FName& Switch, unsigned char NewValue);
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void PreRemoveBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex);
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	struct FAIRange GetLoopRange();
	void CheckStartReplication();
	void InitBody();
	void InitializeRBPhys();
	void PostBeginPlay();
	void SetPerchDef(class UPerchDefinition* NewPerchDef);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.SpecialMove_Cover
// 0x0000 (0x00C8 - 0x00C8)
class USpecialMove_Cover : public UWillowAnimDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_Cover");
		return ptr;
	}


	class UAnimNodeSpecialMoveBlend* GetSMNode(const FScriptInterface& SMI);
};


// Class WillowGame.WillowAwarenessZoneDefinition
// 0x0001 (0x006C - 0x006D)
class UWillowAwarenessZoneDefinition : public UAwarenessZoneDefinition
{
public:
	unsigned char                                      ThreatLevel;                                              // 0x006C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAwarenessZoneDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowBoundaryTurret
// 0x005C (0x0188 - 0x01E4)
class AWillowBoundaryTurret : public AActor
{
public:
	float                                              ShotTime;                                                 // 0x0188(0x0004) (Edit)
	float                                              SeekTime;                                                 // 0x018C(0x0004) (Edit)
	class UFiringModeDefinition*                       FiringModeDef;                                            // 0x0190(0x0004) (Edit, Const)
	float                                              ViewWidth;                                                // 0x0194(0x0004) (Edit)
	float                                              KillDistance;                                             // 0x0198(0x0004) (Edit)
	float                                              WarnDistance;                                             // 0x019C(0x0004) (Edit)
	unsigned long                                      bInstaKill : 1;                                           // 0x01A0(0x0004) (Edit)
	unsigned long                                      bUseSocket1 : 1;                                          // 0x01A0(0x0004) (Transient)
	unsigned long                                      bWarningEffectsOn : 1;                                    // 0x01A0(0x0004) (Transient)
	class UAkEvent*                                    ShootAkEvent;                                             // 0x01A4(0x0004) (Edit)
	struct FName                                       MuzzleSocket1;                                            // 0x01A8(0x0008) (Edit)
	struct FName                                       MuzzleSocket2;                                            // 0x01B0(0x0008) (Edit)
	class UAkEvent*                                    PlayWarningSoundsAkEvent;                                 // 0x01B8(0x0004) (Edit)
	class UAkEvent*                                    StopWarningSoundsAkEvent;                                 // 0x01BC(0x0004) (Edit)
	class UStaticMeshComponent*                        BaseMesh;                                                 // 0x01C0(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      TurretMesh;                                               // 0x01C4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    LaserEffects1;                                            // 0x01C8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    LaserEffects2;                                            // 0x01CC(0x0004) (Edit, ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WarningEffects;                                           // 0x01D0(0x0004) (Edit, ExportObject, Component, EditInline)
	class AWillowPawn*                                 CurrentTarget;                                            // 0x01D4(0x0004) (Transient)
	TArray<class AWillowPlayerPawn*>                   PlayersInWarnZone;                                        // 0x01D8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowBoundaryTurret");
		return ptr;
	}


	bool IsLethalLocation(const struct FVector& TestLocation);
	void Shoot();
	void SetInitialState();
	void SetWarningEffects();
	void UnwarnPlayer(class AWillowPlayerPawn* WPP);
	void WarnPlayer(class AWillowPlayerPawn* WPP);
	void KillPlayer(class AWillowPlayerPawn* WPP);
};


// Class WillowGame.AIClassDefinition
// 0x0104 (0x0294 - 0x0398)
class UAIClassDefinition : public UWillowCharacterClassDefinition
{
public:
	class UAIDefinition*                               AIDef;                                                    // 0x0294(0x0004) (Edit, Const)
	struct FString                                     DefaultDisplayName;                                       // 0x0298(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     UBMKilledByMessageString;                                 // 0x02A4(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bWatchPlayerWhenUsed : 1;                                 // 0x02B0(0x0004) (Const)
	unsigned long                                      bIsCrawler : 1;                                           // 0x02B0(0x0004) (Edit)
	unsigned long                                      bIsTurret : 1;                                            // 0x02B0(0x0004) (Edit)
	unsigned long                                      bLeadTarget : 1;                                          // 0x02B0(0x0004) (Edit)
	unsigned long                                      bAvoidObstacles : 1;                                      // 0x02B0(0x0004) (Edit)
	unsigned long                                      bAvoidTarget : 1;                                         // 0x02B0(0x0004) (Edit)
	unsigned long                                      CheckForVehiclesBeforeUnCloaking : 1;                     // 0x02B0(0x0004) (Edit)
	unsigned long                                      bApplySlowDown : 1;                                       // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bUseSimpleFlight : 1;                                     // 0x02B0(0x0004) (Edit)
	unsigned long                                      bHeloStyle : 1;                                           // 0x02B0(0x0004) (Edit)
	unsigned long                                      bFlyOverrideNavSize : 1;                                  // 0x02B0(0x0004)
	unsigned long                                      bDropDefaultWeaponOnDeath : 1;                            // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bBoss : 1;                                                // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bUsable : 1;                                              // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bSecondaryUsable : 1;                                     // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bTriggerFootstepEvent : 1;                                // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bFriendlyFireAlwaysFiresEvents : 1;                       // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bAwardKillsToAllPlayers : 1;                              // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bRootOnlyYawRotation : 1;                                 // 0x02B0(0x0004) (Edit)
	float                                              WatchPlayerTime;                                          // 0x02B4(0x0004) (Edit, Const)
	float                                              SightViewCone;                                            // 0x02B8(0x0004) (Edit)
	float                                              SightFireCone;                                            // 0x02BC(0x0004) (Edit)
	float                                              CrawlerMeshLerpSpeed;                                     // 0x02C0(0x0004) (Edit)
	int                                                MoveAtDestinationThreshold;                               // 0x02C4(0x0004) (Edit)
	class UAkEvent*                                    AkStartRotation;                                          // 0x02C8(0x0004) (Edit)
	class UAkEvent*                                    AkStopRotation;                                           // 0x02CC(0x0004) (Edit)
	struct FRotator                                    RotationRate;                                             // 0x02D0(0x000C) (Edit)
	unsigned char                                      Physics;                                                  // 0x02DC(0x0001) (Edit)
	unsigned char                                      UsableIcon;                                               // 0x02DD(0x0001) (Const, Deprecated)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02DE(0x0002) MISSED OFFSET
	float                                              AccelRate;                                                // 0x02E0(0x0004) (Edit)
	float                                              CrawlerRotationModifier;                                  // 0x02E4(0x0004) (Edit)
	float                                              CornerCutDistance;                                        // 0x02E8(0x0004) (Edit)
	float                                              LookAheadDistance;                                        // 0x02EC(0x0004) (Edit)
	float                                              LookInterpRate;                                           // 0x02F0(0x0004) (Edit)
	float                                              SlowDownDist;                                             // 0x02F4(0x0004) (Edit, Const)
	float                                              SlowDownMinPct;                                           // 0x02F8(0x0004) (Edit, Const)
	float                                              FlyMaxRotationModifier;                                   // 0x02FC(0x0004) (Edit)
	float                                              FlyBlockedDistModifier;                                   // 0x0300(0x0004) (Edit)
	float                                              FlyLookAheadTime;                                         // 0x0304(0x0004) (Edit)
	float                                              FlyNavMeshCheckDist;                                      // 0x0308(0x0004) (Edit)
	float                                              FlyStartSlowPct;                                          // 0x030C(0x0004) (Edit)
	float                                              FlyStopSlowPct;                                           // 0x0310(0x0004) (Edit)
	float                                              FlyExtentModifier;                                        // 0x0314(0x0004) (Edit)
	float                                              OverrideNavSize;                                          // 0x0318(0x0004) (Edit)
	float                                              OverrideNavHeight;                                        // 0x031C(0x0004) (Edit)
	TArray<class USkillDefinition*>                    PassiveSkills;                                            // 0x0320(0x000C) (Edit, Const, NeedCtorLink)
	class UInventoryBalanceDefinition*                 DefaultWeapon;                                            // 0x032C(0x0004) (Edit, Const)
	class UPawnInteractionDefinition*                  InteractionDefinition;                                    // 0x0330(0x0004) (Edit, Const)
	float                                              CombatMusicTargetingThreat;                               // 0x0334(0x0004) (Edit, Const)
	class UAkState*                                    SpecialCombatMusicState;                                  // 0x0338(0x0004) (Edit, Const)
	int                                                SpecialCombatMusicPriority;                               // 0x033C(0x0004) (Edit, Const)
	class UInteractionIconDefinition*                  UsableIconDef;                                            // 0x0340(0x0004) (Edit, Const)
	class UInteractionIconDefinition*                  UsableIconDefSecondary;                                   // 0x0344(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnUsedBehaviors;                                          // 0x0348(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnUsedBehaviors_NoMission;                                // 0x0354(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnDismissedBehaviors;                                     // 0x0360(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnLingeringBehaviors;                                     // 0x036C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	struct FAttributeInitializationData                TimeUntilConsideredLingering;                             // 0x0378(0x0010) (Edit, Const)
	float                                              FocusRadius;                                              // 0x0388(0x0004) (Edit, Const)
	struct FVector                                     FocusOffset;                                              // 0x038C(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AIClassDefinition");
		return ptr;
	}


	void OnAllPickupsDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnPickupDetached(class UObject* Pickup, class UObject* PickedUpBy, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnFootStep(int Foot, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUnTouch(unsigned char EventOutput, class UObject* Other, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTouch(unsigned char EventOutput, class UObject* Other, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUncloak(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnCloak(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTakeHeal(class UObject* Instigator, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnVehicleTakeDamage(class UObject* Instigator, class UObject* HitVehicle, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnTakeDamage(class UObject* Instigator, float Damage, float ShieldDamage, class UObject* DamageSource, class UObject* DamageType, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnSpawned(struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUserCouldNotAffordSecondary(unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUserCouldNotAfford(unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnSecondaryUsed(unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
	void OnUsed(unsigned char EventOutput, class UObject* Instigator, class UObject* UsedComponent, struct FBehaviorConsumerHandle* ConsumerHandle);
};


// Class WillowGame.WillowCombatPoint
// 0x0010 (0x0188 - 0x0198)
class AWillowCombatPoint : public AActor
{
public:
	unsigned char                                      ConstraintType;                                           // 0x0188(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	TArray<class UPopulationSpawnedActorTagDefinition*> ConstraintTags;                                           // 0x018C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCombatPoint");
		return ptr;
	}

};


// Class WillowGame.WillowCoverComponent
// 0x000B (0x0059 - 0x0064)
class UWillowCoverComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	class AWillowAIPawn*                               AIPawn;                                                   // 0x005C(0x0004) (Transient)
	class USpecialMove_Cover*                          LastAction;                                               // 0x0060(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCoverComponent");
		return ptr;
	}


	void IdleTimer();
	void FireTimer();
	float GetRange(struct FAIRange* Range);
	bool CanFire();
	void ClearCover();
	void PlayTimedAction(class USpecialMove_Cover* Action);
	void UpdateAction();
	struct FName GetAction();
	class UWillowCoverStanceDefinition* GetStance();
	struct FRotator GetCoverRotation(struct FCoverInfo* Cover);
	struct FVector GetCoverLocation(struct FCoverInfo* Cover);
	void ResetExposure();
	void ActionFinished();
};


// Class WillowGame.WillowCoverStanceDefinition
// 0x0020 (0x003C - 0x005C)
class UWillowCoverStanceDefinition : public UGBXDefinition
{
public:
	struct FName                                       AimProfile;                                               // 0x003C(0x0008) (Edit, Const)
	class USpecialMove_Cover*                          Enter;                                                    // 0x0044(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_Cover*                          Exit;                                                     // 0x0048(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_Cover*                          Idle;                                                     // 0x004C(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_Cover*                          FireEnter;                                                // 0x0050(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_Cover*                          FireExit;                                                 // 0x0054(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_Cover*                          FireIdle;                                                 // 0x0058(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCoverStanceDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowFormationComponent
// 0x0014 (0x0210 - 0x0224)
class UWillowFormationComponent : public UPrimitiveComponent
{
public:
	struct FName                                       NameTag;                                                  // 0x0210(0x0008) (Edit)
	unsigned long                                      bMagnetize : 1;                                           // 0x0218(0x0004) (Edit)
	unsigned long                                      bShouldCrouch : 1;                                        // 0x0218(0x0004) (Edit)
	FScriptInterface                                   AIOwner;                                                  // 0x021C(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowFormationComponent");
		return ptr;
	}

};


// Class WillowGame.WillowMind
// 0x00C4 (0x0768 - 0x082C)
class AWillowMind : public AGearboxMind
{
public:
	struct FPointer                                    VfTable_IISeeTargetable;                                  // 0x0768(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIControllerLocator;                              // 0x076C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IIConstructObject;                                // 0x0770(0x0004) (Const, Native, NoExport)
	class UAIClassDefinition*                          AIClass;                                                  // 0x0774(0x0004)
	class AWillowAIPawn*                               MyWillowPawn;                                             // 0x0778(0x0004)
	class UAIDefinition*                               AIDefOverride;                                            // 0x077C(0x0004)
	unsigned long                                      bCharacterClassInitialized : 1;                           // 0x0780(0x0004)
	unsigned long                                      bWantsToSprint : 1;                                       // 0x0780(0x0004)
	unsigned long                                      bCurrentlyScripted : 1;                                   // 0x0780(0x0004)
	unsigned long                                      bScriptedHoldPosition : 1;                                // 0x0780(0x0004)
	unsigned long                                      bScriptedCanAttack : 1;                                   // 0x0780(0x0004)
	unsigned long                                      bWantsToFireWeapon : 1;                                   // 0x0780(0x0004) (Transient)
	unsigned long                                      bWeaponsRestricted : 1;                                   // 0x0780(0x0004) (Transient)
	unsigned long                                      bWeaponFireUseRotation : 1;                               // 0x0780(0x0004) (Transient)
	unsigned long                                      bProvoked : 1;                                            // 0x0780(0x0004)
	unsigned long                                      bPawnAddedToRadar : 1;                                    // 0x0780(0x0004) (Transient)
	unsigned long                                      bWantsRotationAudio : 1;                                  // 0x0780(0x0004) (Transient)
	class AWillowMind*                                 SpawnParent;                                              // 0x0784(0x0004)
	TArray<class AWillowMind*>                         SpawnChildren;                                            // 0x0788(0x000C) (NeedCtorLink)
	int                                                TotalSpawnedChildren;                                     // 0x0794(0x0004)
	struct FVector                                     DirectionHint;                                            // 0x0798(0x000C)
	class UWillowNavigationHandle*                     WillowNav;                                                // 0x07A4(0x0004)
	float                                              DistanceToGoal;                                           // 0x07A8(0x0004)
	class AWillowAIMoveNode*                           LastPatrolNode;                                           // 0x07AC(0x0004)
	class AWillowAIMoveNode*                           LastScriptedNode;                                         // 0x07B0(0x0004)
	unsigned char                                      ScriptedStance;                                           // 0x07B4(0x0001)
	unsigned char                                      ScriptedFocusStyle;                                       // 0x07B5(0x0001)
	unsigned char                                      WeaponFireMode;                                           // 0x07B6(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x07B7(0x0001) MISSED OFFSET
	class UWillowSeqAct_AIScriptedAnim*                ScriptedAction;                                           // 0x07B8(0x0004)
	float                                              LastUsedTime;                                             // 0x07BC(0x0004)
	struct FFlag                                       LookAtPlayer;                                             // 0x07C0(0x0010)
	class AActor*                                      FollowActor;                                              // 0x07D0(0x0004)
	float                                              FollowMinDist;                                            // 0x07D4(0x0004)
	float                                              FollowMaxDist;                                            // 0x07D8(0x0004)
	class UWillowFormationComponent*                   FollowComponent;                                          // 0x07DC(0x0004) (ExportObject, Component, EditInline)
	float                                              SightFireCone;                                            // 0x07E0(0x0004) (Transient)
	float                                              LastWeaponFireTime;                                       // 0x07E4(0x0004) (Transient)
	float                                              WeaponBurstEndTime;                                       // 0x07E8(0x0004) (Transient)
	float                                              NextAvailableFireTime;                                    // 0x07EC(0x0004) (Transient)
	class APerch*                                      PatrolPerch;                                              // 0x07F0(0x0004)
	class APerch*                                      CombatPerch;                                              // 0x07F4(0x0004)
	float                                              RotationRateModifier;                                     // 0x07F8(0x0004) (Transient)
	float                                              RotationRateModifierBaseValue;                            // 0x07FC(0x0004) (Const)
	TArray<class UAttributeModifier*>                  RotationRateModifierModifierStack;                        // 0x0800(0x000C) (Const, Transient, NeedCtorLink)
	class UAttributeModifier*                          AvoidanceModifier;                                        // 0x080C(0x0004)
	struct FVector                                     ProvokedLocation;                                         // 0x0810(0x000C)
	class APawnInteractionProxy*                       InteractionProxy;                                         // 0x081C(0x0004)
	class AActor*                                      SpawnedHelperActor;                                       // 0x0820(0x0004)
	float                                              SightViewCone;                                            // 0x0824(0x0004) (Transient)
	float                                              MinAggroTimeToConsiderAwareOfTarget;                      // 0x0828(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowMind");
		return ptr;
	}


	void NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall);
	void PassInteractionProxyEventsToKismet(bool bPassEventsToKismet);
	void ProcessTraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int TraceFlags);
	void TraceTouch(class AActor* Other, class UComponent* ComponentHit, const struct FVector& TouchLocation, const struct FVector& TouchNormal, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int TraceFlags, float TouchTime);
	bool IsTooFarFromHome();
	struct FVector GetViewLocation();
	class AActor* GetWorldBody();
	class AWillowMind* GetAWillowMind();
	class AWillowPlayerController* GetAWillowPlayerController();
	class AController* GetABaseController();
	void StopRotationAudio();
	void StartRotationAudio();
	void SetWantsRotationAudio(bool bWantsAudio);
	bool GetWantsRotationAudio();
	float ParentIsScripted();
	float GetNumSpawnChildren();
	float ParentDistToTarget();
	bool InGodMode();
	static void SetAIDemigod(bool bAIDemigod);
	static bool GetAIDemigod();
	static void SetAIGod(bool bAIGod);
	static bool GetAIGod();
	int ActivateEventRule(const struct FName& RuleEventName);
	void SetOverrideAIDef(class UAIDefinition* NewAIDef);
	void InitSequence(class UActionSequence* NewSequence);
	class UAIDefinition* GetAIDefinition();
	FScriptInterface GetAIParent();
	bool CanTickAI();
	bool GetReplicatedInstanceDataState(struct FReplicatedInstanceDataState* OutReplicatedInstanceDataState);
	bool GetInstanceDataState(struct FInstanceDataSet* OutInstanceDataState);
	void DestroyOwnedInstanceData();
	void KillHelperActor();
	bool RemoveInstanceDataObject(class UObject* InstanceDataObject);
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	class APawn* GetInstanceDataPawn();
	class AController* Behavior_GetSkillInstigatorController();
	void Behavior_UpgradeSkill(class USkillDefinition* SkillToUpgrade, int NumberOfLevelsToRaise, int MaximumLevelToRaiseSkill);
	void Behavior_DeactivateSkill(class USkillDefinition* SkillToDeactivate, bool bIgnoreSkillInstigator);
	void Behavior_ActivateSkill(class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade);
	void SetFlag(class UFlagDefinition* FlagDef, bool FlagValue);
	void NotifyTakeHit(class AController* InstigatedBy, class APawn* HitPawn, const struct FVector& HitLocation, float Damage, class UClass* DamageType, const struct FVector& Momentum, class UDamagePipeline* Pipeline);
	struct FVector GetRallyPoint();
	class APopulationOpportunityDen* GetPopOpDen();
	struct FVector GetPerchLocation(class APerch* TestPerch);
	void CheckForPerch(bool bCombat, bool bClosestPerch);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, const FScriptInterface& DamageCauser, class UDamagePipeline* Pipeline);
	void ReceiveRunOverWarning(class AWillowVehicle* Vehicle);
	struct FVector GetDirectionHint();
	void ExitVehicle(class AWillowVehicle* ExitedVehicle);
	void EnterVehicle(class AWillowVehicle* EnteredVehicle, bool bDriver);
	bool TargetIsFriendly();
	bool AddTargetable(class AActor* NewTarget, bool bSeeTarget, bool bHearThreat, bool bSmellTarget);
	bool IsAwareOfTarget(class AActor* PotentialTarget);
	void NotifyAttackedBy(class AActor* Attacker, bool bDamaged);
	void OnAICombatVolume(class UWillowSeqAct_AICombatVolume* Action);
	void OnAILookAt(class UWillowSeqAct_AILookAt* Action);
	void OnAIProvoke(class UWillowSeqAct_AIProvoke* Action);
	void OnAIScriptedFollow(class UWillowSeqAct_AIScriptedFollow* Action);
	void OnAIScriptedDeath(class UWillowSeqAct_AIScriptedDeath* Action);
	void StopScriptedAnim(class UWillowSeqAct_AIScriptedAnim* OverrideAction);
	void ScriptedAnimEnded();
	void OnAIScriptedAnim(class UWillowSeqAct_AIScriptedAnim* Action);
	void OnAIScriptedHold(class UWillowSeqAct_AIScriptedHold* Action);
	void OnAIScripted(class UWillowSeqAct_AIScripted* Action);
	void ClearScriptedMove(bool bAborted, class UWillowSeqAct_AIScripted* OverrideAction);
	void OnAIAbortMoveToActor(class USeqAct_AIAbortMoveToActor* Action);
	void ForceMoveToActor(class AActor* destActor);
	bool IsFlying();
	bool WantsToSprint();
	void SetWantsToSprint(bool bInWantsToSprint);
	bool ShouldLookAtPlayer();
	bool IsInScriptedMovement();
	void InitNavigationHandle();
	bool CanHoldWeapon(class APawn* Holder, class AWeapon* TestWeapon, bool bHoldInOffHand);
	void SetWeaponsRestricted(bool bNewWeaponsRestrictedState);
	struct FVector GetTargetLeadOffset();
	bool ShouldPauseFiring();
	bool ShouldStopFiring();
	bool CanFireMyWeapon();
	void TickWeaponFire(float DeltaTime);
	float GetWeaponBurstLength();
	float GetWeaponFireDelay();
	float GetWeaponSpeed();
	void StopFiringWeapon(bool bPaused);
	void StartFiringWeapon(bool bPaused);
	struct FRotator GetAdjustedAimFor(class AWeapon* InWeapon, const struct FVector& StartFireLoc);
	void RecalculateAttributeInitializedState();
	void ApplyCharacterClassDefaults(class APawn* P, class UCharacterClassDefinition* CharClass);
	class UCharacterClassDefinition* GetClassDefinition();
	void CleanSpawnFamily(class APawn* Killer);
	void PawnDied(class APawn* P);
	void UnPossess();
	void InitializeCharacterClass();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void OnTeleport(class USeqAct_Teleport* Action);
	class UPawnAllegiance* GetAllegiance();
	class APawn* GetWorldPawn();
	class AActor* GetActor();
	void Destroyed();
};


// Class WillowGame.WillowMindAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UWillowMindAttributeContextResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowMindAttributeContextResolver");
		return ptr;
	}

};


// Class WillowGame.WillowMindTargetInfo
// 0x0054 (0x00D8 - 0x012C)
class UWillowMindTargetInfo : public UMindTargetInfo
{
public:
	FScriptInterface                                   Targetable;                                               // 0x00D8(0x0008)
	float                                              Distance2D;                                               // 0x00E0(0x0004)
	float                                              DotToTarget;                                              // 0x00E4(0x0004)
	float                                              DotFromTarget;                                            // 0x00E8(0x0004)
	float                                              DistanceVertical;                                         // 0x00EC(0x0004)
	float                                              WeaponDotToTarget;                                        // 0x00F0(0x0004)
	float                                              LeftDotToTarget;                                          // 0x00F4(0x0004)
	float                                              DotTargetFacing;                                          // 0x00F8(0x0004)
	unsigned char                                      ThreatLevel;                                              // 0x00FC(0x0001)
	unsigned char                                      Exposure;                                                 // 0x00FD(0x0001)
	unsigned char                                      CoverExposure;                                            // 0x00FE(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00FF(0x0001) MISSED OFFSET
	float                                              ForgetTime;                                               // 0x0100(0x0004)
	float                                              AggroTime;                                                // 0x0104(0x0004)
	float                                              ExposureChangeTime;                                       // 0x0108(0x0004)
	struct FVector                                     LastKnownLocation;                                        // 0x010C(0x000C)
	unsigned long                                      bTargetLost : 1;                                          // 0x0118(0x0004)
	float                                              LastAttackTime;                                           // 0x011C(0x0004) (Transient)
	float                                              TotalDamagePct;                                           // 0x0120(0x0004) (Transient)
	FScriptInterface                                   MovingAI;                                                 // 0x0124(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowMindTargetInfo");
		return ptr;
	}


	struct FVector GetTargetLocation();
};


// Class WillowGame.WillowNavigationHandle
// 0x00C8 (0x02A0 - 0x0368)
class UWillowNavigationHandle : public UGearboxNavigationHandle
{
public:
	unsigned long                                      bInitialized : 1;                                         // 0x02A0(0x0004) (Transient)
	unsigned long                                      bGoalActorIsFinalDest : 1;                                // 0x02A0(0x0004) (Transient)
	unsigned long                                      bNavMeshWalking : 1;                                      // 0x02A0(0x0004)
	unsigned long                                      bFlightBlocked : 1;                                       // 0x02A0(0x0004) (Transient)
	unsigned long                                      bFlightFullyBlocked : 1;                                  // 0x02A0(0x0004) (Transient)
	unsigned long                                      bIsAvoidingObstacle : 1;                                  // 0x02A0(0x0004) (Transient)
	unsigned long                                      bWasAvoidingObstacle : 1;                                 // 0x02A0(0x0004) (Transient)
	class AWillowMind*                                 MyWillowMind;                                             // 0x02A4(0x0004) (Transient)
	class AWillowAIPawn*                               MyWillowPawn;                                             // 0x02A8(0x0004) (Transient)
	class UWillowActionSequencePawn*                   ControllingAction;                                        // 0x02AC(0x0004) (Transient)
	int                                                PathFindActionIndex;                                      // 0x02B0(0x0004) (Transient)
	struct FCombatZone                                 PathZone;                                                 // 0x02B4(0x0020) (Transient)
	unsigned char                                      FixMode;                                                  // 0x02D4(0x0001) (Transient)
	unsigned char                                      FlightMode;                                               // 0x02D5(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02D6(0x0002) MISSED OFFSET
	float                                              FixStartTime;                                             // 0x02D8(0x0004) (Transient)
	struct FBasedPosition                              FixPosition;                                              // 0x02DC(0x0034) (Transient)
	float                                              FixWaitTime;                                              // 0x0310(0x0004) (Transient)
	float                                              FixMoveTime;                                              // 0x0314(0x0004) (Transient)
	float                                              FixLerpTime;                                              // 0x0318(0x0004) (Transient)
	float                                              FixMaxDist;                                               // 0x031C(0x0004) (Transient)
	float                                              FixFailedWaitTime;                                        // 0x0320(0x0004) (Transient)
	int                                                FlyHitIndex;                                              // 0x0324(0x0004) (Transient)
	struct FVector                                     OriginalFlyDirection;                                     // 0x0328(0x000C) (Transient)
	TArray<struct FVector>                             FlyHits;                                                  // 0x0334(0x000C) (Transient, NeedCtorLink)
	TArray<struct FVector>                             FlyDirections;                                            // 0x0340(0x000C) (Transient, NeedCtorLink)
	float                                              FlightObstacleDistPct;                                    // 0x034C(0x0004) (Transient)
	float                                              FlyFixRate;                                               // 0x0350(0x0004) (Transient)
	float                                              FlyFixLastCheckTime;                                      // 0x0354(0x0004) (Transient)
	struct FVector                                     FlyFixLocation;                                           // 0x0358(0x000C) (Transient)
	int                                                MyNextExpensiveFrame;                                     // 0x0364(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowNavigationHandle");
		return ptr;
	}


	bool PassedCurrentFlyGoal();
	bool ReachedCurrentFlyGoal();
	void CheckFlying();
	void TickFlying(float DeltaTime);
	void SetWantsToFly(bool bNewWantsToFly);
	bool WantsToFly();
	bool ShouldFly();
	bool IsFlying();
	void ProcessObstacleAvoidance();
	void NotifyAvoidingObstacle();
	bool CanAvoidObstacles();
	void FixByLerping();
	void FixByMoving();
	void FixAnchor();
	void ClearSpecialMovement();
	bool IsPaused();
	bool IsHardAttached();
	bool GoalReachable();
	bool PointReachable(const struct FVector& Point, const struct FVector& OverrideStartPoint, bool bAllowHitsInEndCollisionBox);
	bool TrySpecialMove(struct FBasedPosition* MoveTarget);
	struct FVector GetMoveVector(unsigned char MoveStyle);
	void SetFacingPolicy(unsigned char MoveStyle);
	bool IsGoalValid();
	void MovePawnToGoal();
	void SetPawnPhysics();
	void FindActionPaths();
	bool ClearPath(bool bStopMovement, bool bAllowDelayedClear);
	bool PathIsValid(bool bCheckAnchor, struct FPathFindData* Data);
	bool CanFollowPath();
	bool FollowPath(struct FPathFindData* PathData);
	bool CreateConstrainedPath(const struct FVector& DestLocation, struct FPathFindData* PathData, TArray<class UAttackLocation*>* Constraints);
};


// Class WillowGame.WillowClientNavigationHandle
// 0x0000 (0x0368 - 0x0368)
class UWillowClientNavigationHandle : public UWillowNavigationHandle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowClientNavigationHandle");
		return ptr;
	}

};


// Class WillowGame.WillowNavMeshPathFinder
// 0x0000 (0x0048 - 0x0048)
class UWillowNavMeshPathFinder : public UGBXNavMeshPathFinder
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowNavMeshPathFinder");
		return ptr;
	}


	bool FindConstrainedPath(const FScriptInterface& AI, struct FGBXNavMeshPath* Path, struct FNavMeshPathParams* PathParams, struct FVector* SrcLocation, struct FGBXNavMeshPolyRef* SrcPoly, struct FVector* DestLocation, TArray<class UAttackLocation*>* Constraints);
};


// Class WillowGame.WillowObstacleRenderComponent
// 0x0000 (0x0210 - 0x0210)
class UWillowObstacleRenderComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowObstacleRenderComponent");
		return ptr;
	}

};


// Class WillowGame.DeployableTurretActor
// 0x0028 (0x1324 - 0x134C)
class ADeployableTurretActor : public AWillowAIPawn
{
public:
	unsigned long                                      bIsAttached : 1;                                          // 0x1324(0x0004)
	class UWillowImpactDefinition*                     BounceImpact;                                             // 0x1328(0x0004) (Edit, Const)
	float                                              AtRestSpeedThreshold;                                     // 0x132C(0x0004) (Edit, Const)
	TArray<struct FTurretEffect>                       TurretEffects;                                            // 0x1330(0x000C) (Edit, Component, NeedCtorLink)
	unsigned char                                      TurretDamagePct;                                          // 0x133C(0x0001) (Net, RepNotify)
	unsigned char                                      UnknownData00[0x3];                                       // 0x133D(0x0003) MISSED OFFSET
	TArray<struct FTurretDamageEffectData>             DamageEffectTriggers;                                     // 0x1340(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DeployableTurretActor");
		return ptr;
	}


	void PostSpawnCheckForPlayerOverlap();
	void PostInitBodyComposition(const struct FName& Identifier, class UObject* Value, int BodyCompositionIndex, unsigned char BodyCompositionMode);
	void FindBase();
	void CheckTurretDamage();
	void TriggerTurretEffect(const struct FName& EventTag);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, class UDamagePipeline* Pipeline);
	bool HandleHealthDepleted(class AController* InstigatedBy, class UClass* DamageType, const struct FVector& HitLocation, const FScriptInterface& DamageCauser, const struct FTraceHitInfo& HitInfo, class UDamagePipeline* Pipeline);
	void ShutOffTurretEffectsOnDeath();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowSeqEvent_DenStat
// 0x0004 (0x00C4 - 0x00C8)
class UWillowSeqEvent_DenStat : public USequenceEvent
{
public:
	int                                                TriggerValue;                                             // 0x00C4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_DenStat");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_Provoked
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_Provoked : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_Provoked");
		return ptr;
	}

};


// Class WillowGame.WillowTI_CalcCanFire
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcCanFire : public UTI_Calc
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_CalcCanFire");
		return ptr;
	}

};


// Class WillowGame.WillowTI_CalcDistances
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcDistances : public UTI_Calc
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_CalcDistances");
		return ptr;
	}

};


// Class WillowGame.WillowTI_CalcExposure
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcExposure : public UTI_Calc
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_CalcExposure");
		return ptr;
	}

};


// Class WillowGame.WillowTI_CalcThreat
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcThreat : public UTI_Calc
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_CalcThreat");
		return ptr;
	}

};


// Class WillowGame.WillowTI_PrioritizeAttacking
// 0x0008 (0x0050 - 0x0058)
class UWillowTI_PrioritizeAttacking : public UTI_Prioritize
{
public:
	float                                              DecayRate;                                                // 0x0050(0x0004) (Edit, Const)
	float                                              FullyEngagedPct;                                          // 0x0054(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_PrioritizeAttacking");
		return ptr;
	}

};


// Class WillowGame.WillowTI_PrioritizeHealth
// 0x0001 (0x0050 - 0x0051)
class UWillowTI_PrioritizeHealth : public UTI_Prioritize
{
public:
	unsigned char                                      Priority;                                                 // 0x0050(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_PrioritizeHealth");
		return ptr;
	}

};


// Class WillowGame.WillowTI_PrioritizeIdle
// 0x0004 (0x0050 - 0x0054)
class UWillowTI_PrioritizeIdle : public UTI_Prioritize
{
public:
	int                                                MaxAICurrentlyTargeting;                                  // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_PrioritizeIdle");
		return ptr;
	}

};


// Class WillowGame.WillowTI_PrioritizeOpinion
// 0x0001 (0x0050 - 0x0051)
class UWillowTI_PrioritizeOpinion : public UTI_Prioritize
{
public:
	unsigned char                                      Opinion;                                                  // 0x0050(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_PrioritizeOpinion");
		return ptr;
	}

};


// Class WillowGame.AIDebugDummyBase
// 0x0020 (0x01CC - 0x01EC)
class AAIDebugDummyBase : public ASkeletalMeshActor
{
public:
	class USkeletalMeshComponent*                      MyMesh;                                                   // 0x01CC(0x0004) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   MatInstBody;                                              // 0x01D0(0x0004)
	class UMaterialInstanceConstant*                   MatInstHead;                                              // 0x01D4(0x0004)
	class UMaterialInstanceConstant*                   MatInstHelmet;                                            // 0x01D8(0x0004)
	struct FLinearColor                                DummyColor;                                               // 0x01DC(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AIDebugDummyBase");
		return ptr;
	}


	void SetSkeletalMesh(class USkeletalMesh* NewMesh);
	void PostBeginPlay();
};


// Class WillowGame.WillowAIDebugCamera
// 0x0018 (0x008C - 0x00A4)
class UWillowAIDebugCamera : public UAIDebugCamera
{
public:
	TArray<class AAIDebugDummyBase*>                   Dummies;                                                  // 0x008C(0x000C) (Transient, NeedCtorLink)
	class UClass*                                      AIDebugDummyClass;                                        // 0x0098(0x0004) (Transient)
	int                                                NumDummies;                                               // 0x009C(0x0004) (Transient)
	unsigned long                                      bShowAINodeReservation : 1;                               // 0x00A0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowTerritoryZones : 1;                                  // 0x00A0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowWillowInspectorStats : 1;                            // 0x00A0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowAccuracyDebug : 1;                                   // 0x00A0(0x0004) (Config, GlobalConfig)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIDebugCamera");
		return ptr;
	}


	void ToggleAccuracyDebug();
	void ToggleWillowInspectorStats();
	void ToggleTerritoryZones();
	void ToggleAIShowNodeReservation();
	void SetRuleEngine(class URuleEngine* NewRuleEngine);
	void InitDummies(int NewNumDummies);
	void SetPrevSnapshot();
	void SetNextSnapshot();
	void NotifyGameUnPaused();
	void NotifyGamePaused();
};


// Class WillowGame.WillowNavDebug
// 0x0000 (0x0188 - 0x0188)
class AWillowNavDebug : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowNavDebug");
		return ptr;
	}

};


// Class WillowGame.WillowPawnSnapshotRecord
// 0x00C4 (0x0FCC - 0x1090)
class UWillowPawnSnapshotRecord : public UGearboxPawnSnapshotRecord
{
public:
	struct FName                                       MyWillowPawnName;                                         // 0x0FCC(0x0008)
	struct FName                                       MyWeaponName;                                             // 0x0FD4(0x0008)
	struct FName                                       MyDrivenVehicleName;                                      // 0x0FDC(0x0008)
	unsigned char                                      FacingPolicy;                                             // 0x0FE4(0x0001)
	unsigned char                                      MyPhysics;                                                // 0x0FE5(0x0001)
	unsigned char                                      MyRootMotionMode;                                         // 0x0FE6(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0FE7(0x0001) MISSED OFFSET
	TArray<struct FAwarenessInfo>                      TerritoryZones;                                           // 0x0FE8(0x000C) (NeedCtorLink)
	struct FTargetPriorityInfo                         BestTargetData;                                           // 0x0FF4(0x001C) (NeedCtorLink)
	struct FVector                                     BestTargetLocation;                                       // 0x1010(0x000C)
	struct FVector                                     Destination;                                              // 0x101C(0x000C)
	TArray<struct FMatrix>                             SpaceBases;                                               // 0x1028(0x000C) (NeedCtorLink)
	int                                                ExperienceLevel;                                          // 0x1034(0x0004)
	int                                                GameStage;                                                // 0x1038(0x0004)
	int                                                AwesomeLevel;                                             // 0x103C(0x0004)
	float                                              CurHealth;                                                // 0x1040(0x0004)
	float                                              CurShield;                                                // 0x1044(0x0004)
	float                                              MaxShield;                                                // 0x1048(0x0004)
	int                                                WeaponLevel;                                              // 0x104C(0x0004)
	int                                                WeaponDamage;                                             // 0x1050(0x0004)
	struct FString                                     PathState;                                                // 0x1054(0x000C) (NeedCtorLink)
	float                                              PathFailTime;                                             // 0x1060(0x0004)
	int                                                PathFailCount;                                            // 0x1064(0x0004)
	struct FString                                     PathFailName;                                             // 0x1068(0x000C) (NeedCtorLink)
	TArray<struct FVector>                             TargetVehiclePursuitPoints;                               // 0x1074(0x000C) (NeedCtorLink)
	int                                                TargetVehicleSelectedPursuitPointNdx;                     // 0x1080(0x0004)
	TArray<struct FDebugListItem>                      ExtraDebugItems;                                          // 0x1084(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPawnSnapshotRecord");
		return ptr;
	}

};


// Class WillowGame.WillowSnapshotRecord
// 0x0000 (0x0D00 - 0x0D00)
class UWillowSnapshotRecord : public USnapshotRecord
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSnapshotRecord");
		return ptr;
	}

};


// Class WillowGame.WillowPlayerSnapshotRecord
// 0x0008 (0x0D00 - 0x0D08)
class UWillowPlayerSnapshotRecord : public UWillowSnapshotRecord
{
public:
	struct FName                                       MyWillowPawnName;                                         // 0x0D00(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerSnapshotRecord");
		return ptr;
	}

};


// Class WillowGame.HUDDefinition
// 0x0094 (0x003C - 0x00D0)
class UHUDDefinition : public UGBXDefinition
{
public:
	int                                                MaxDamageIndicators;                                      // 0x003C(0x0004) (Edit, Const)
	float                                              DamageIndicatorLifetime;                                  // 0x0040(0x0004) (Edit, Const)
	float                                              ItemCardAwarenessRange;                                   // 0x0044(0x0004) (Edit, Const)
	float                                              PickupRange;                                              // 0x0048(0x0004) (Edit, Const)
	float                                              CompassIconScaleMax;                                      // 0x004C(0x0004) (Edit, Const)
	float                                              CompassIconScaleMin;                                      // 0x0050(0x0004) (Edit, Const)
	float                                              CompassIconScaleMaxRange;                                 // 0x0054(0x0004) (Edit, Const)
	float                                              CompassIconScaleMinRange;                                 // 0x0058(0x0004) (Edit, Const)
	class UAttributePresentationDefinition*            CustomAttributePresentation;                              // 0x005C(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	float                                              MaximumPainRotation;                                      // 0x0060(0x0004) (Edit)
	float                                              MaximumPainOffset;                                        // 0x0064(0x0004) (Edit)
	float                                              MaximumPainFOV;                                           // 0x0068(0x0004) (Edit)
	float                                              MaximumDamage;                                            // 0x006C(0x0004) (Edit)
	float                                              PainLength;                                               // 0x0070(0x0004) (Edit)
	class UWillowLevelTimerDefinition*                 LevelTimerDefinition;                                     // 0x0074(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         HUDMovieDefinition;                                       // 0x0078(0x0004) (Edit)
	class UGFxMovieDefinition*                         StatusMenuDefinition;                                     // 0x007C(0x0004) (Edit)
	int                                                QUICKSLOT_SELECTED;                                       // 0x0080(0x0004) (Edit, Const)
	int                                                QUICKSLOT_LOCKED;                                         // 0x0084(0x0004) (Edit, Const)
	int                                                QUICKSLOT_AVAILABLE;                                      // 0x0088(0x0004) (Edit, Const)
	TArray<struct FName>                               P1QuickSlotTextures;                                      // 0x008C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FName>                               P2QuickSlotTextures;                                      // 0x0098(0x000C) (Edit, Const, NeedCtorLink)
	int                                                QUICKSLOT_TEX_WIDTH;                                      // 0x00A4(0x0004) (Edit, Const)
	int                                                QUICKSLOT_TEX_HEIGHT;                                     // 0x00A8(0x0004) (Edit, Const)
	struct FName                                       P1ItemCardTexture;                                        // 0x00AC(0x0008) (Edit, Const)
	struct FName                                       P2ItemCardTexture;                                        // 0x00B4(0x0008) (Edit, Const)
	struct FName                                       PlayerNameBone;                                           // 0x00BC(0x0008) (Edit, Const)
	float                                              PlayerNameHeightOffset;                                   // 0x00C4(0x0004) (Edit, Const)
	float                                              HealthAnimationTime;                                      // 0x00C8(0x0004) (Edit, Const)
	class UAkEvent*                                    AutosaveAkEvent;                                          // 0x00CC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowRadarManager
// 0x0448 (0x0188 - 0x05D0)
class AWillowRadarManager : public AActor
{
public:
	float                                              DefaultIconLifeTime[0x11];                                // 0x0188(0x0004) (Const, Config, GlobalConfig)
	int                                                NumberOfDynamicIcons;                                     // 0x01CC(0x0004) (Net)
	struct FServerDynamicRadarIconData                 ServerDynamicIcons[0x12];                                 // 0x01D0(0x000C)
	class AActor*                                      SkillStations[0x1C];                                      // 0x02A8(0x0004)
	struct FRemoteDynamicRadarIconData                 RemoteDynamicIcons[0x12];                                 // 0x0318(0x0014) (Net)
	struct FVector                                     SkillStationLocations[0x1C];                              // 0x0480(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowRadarManager");
		return ptr;
	}


	void PostBeginPlay();
	void RemoveSkillStation(class AActor* TheStation);
	void AddSkillStation(class AActor* TheStation);
	void RemoveDynamicIcon(class UObject* Source);
	void AddDynamicIcon(unsigned char IconType, class UObject* Source, float Duration);
};


// Class WillowGame.WillowSeqCond_SwitchByPlatform
// 0x0000 (0x008C - 0x008C)
class UWillowSeqCond_SwitchByPlatform : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqCond_SwitchByPlatform");
		return ptr;
	}


	unsigned char GetPlatform();
};


// Class WillowGame.WillowUIDataStore_StringAliasMap
// 0x0004 (0x00D0 - 0x00D4)
class UWillowUIDataStore_StringAliasMap : public UUIDataStore_StringAliasMap
{
public:
	int                                                FakePlatform;                                             // 0x00D0(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowUIDataStore_StringAliasMap");
		return ptr;
	}


	int GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString);
};


// Class WillowGame.PlayerStatsNotifier
// 0x003C (0x003C - 0x0078)
class UPlayerStatsNotifier : public UObject
{
public:
	struct FMultiMap_Mirror                            StatIdListenerMap;                                        // 0x003C(0x003C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerStatsNotifier");
		return ptr;
	}


	void DisplayDebug(class AHUD* H, float* out_YL, float* out_YPos);
	void OnStatIncrement(class AWillowPlayerStats* StatContext, const struct FName& StatId, int Amount);
	void UnRegisterListeners(class AWillowPlayerController* PCOwner);
	void UnRegisterListener(struct FTrainingData* Listener);
	void RegisterListener(struct FTrainingData* Listener);
};


// Class WillowGame.WillowBaseStats
// 0x006C (0x0188 - 0x01F4)
class AWillowBaseStats : public AInfo
{
public:
	struct FPointer                                    VfTable_ISparkUpdateCallback;                             // 0x0188(0x0004) (Const, Native, NoExport)
	int                                                SaveVersion;                                              // 0x018C(0x0004)
	int                                                ReadVersion;                                              // 0x0190(0x0004)
	TArray<struct FWillowStatProperty>                 StatProperties;                                           // 0x0194(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x01A0(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.WillowBaseStats.StatIDToStatArrayMapping
	unsigned long                                      bStatPostingInFlight : 1;                                 // 0x01DC(0x0004) (Transient)
	unsigned long                                      bStatPostingIncomplete : 1;                               // 0x01DC(0x0004) (Transient)
	class UStatChannel*                                ReplicationChannel;                                       // 0x01E0(0x0004) (Transient)
	struct FString                                     DebugDisplayFilter;                                       // 0x01E4(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentDebugPage;                                         // 0x01F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowBaseStats");
		return ptr;
	}


	void ClearSparkCallbacks();
	void DirtyAllStats();
	void ReportDirtyStats();
	void AllDirtyStats(int* StatIdx);
	void UpdateChallengeBaseValues();
	void TryAndSpawnReplicationChannel(class UNetConnection* Connection);
	struct FString StatPropertyToStringFromName(const struct FName& StatName);
	struct FString StatPropertyToString(int StatIdx);
	void SetFloatStat(const struct FName& StatId, float Value);
	void SetIntStat(const struct FName& StatId, int Value, bool bSkipNotify);
	float GetFloatStat(const struct FName& StatId, bool bForChallenges);
	int GetIntStat(const struct FName& StatId, bool bForChallenges);
	void IncrementFloatStat(const struct FName& StatId, float IncAmount);
	void IncrementIntStat(const struct FName& StatId, int IncAmount);
	void PreviousDebugPage();
	void NextDebugPage();
};


// Class WillowGame.WillowPlayerStats
// 0x0004 (0x01F4 - 0x01F8)
class AWillowPlayerStats : public AWillowBaseStats
{
public:
	int                                                nNumConsecutiveSniperRifleKills;                          // 0x01F4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerStats");
		return ptr;
	}


	void IncrementPlayerLauncherDirectHitStat(class UClass* DamageType, const FScriptInterface& DamageCauser, class UDamagePipeline* DamagePipeline, class APawn* DamagedPawn);
	void IncrementPlayerKnockedDownProjectileStat(class UClass* DamageType, const FScriptInterface& DamageCauser);
	void IncrementPlayerTedioreReloadDamageStat(const FScriptInterface& DamageCauser, float Amount);
	void IncrementPlayerSecondWindStat(class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const FScriptInterface& DamageCauser);
	void IncrementPlayerCriticalHitStat(class UClass* DamageType, const FScriptInterface& DamageCauser);
	void UpdatePlayerShotStats(class UClass* DamageType, const FScriptInterface& DamageCauser, bool bMiss, bool bKill);
	void ResetPlayerShotStats();
	void IncrementPlayerKillStat(class UCharacterClassDefinition* CharacterClass, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, const FScriptInterface& DamageCauser, bool bCritical, bool bCrouched, float ZoomedTime, float KillDistance, class UDamagePipeline* DamagePipeline, class APawn* KilledPawn, int IncAmount);
	void IncrementWeaponFiredStat(class AWillowWeapon* WWeapon, int IncAmount);
	void SetIntStat(const struct FName& StatId, int Value, bool bSkipNotify);
	void IncrementIntStat(const struct FName& StatId, int IncAmount);
};


// Class WillowGame.WillowVersusDuelArena
// 0x0084 (0x0188 - 0x020C)
class AWillowVersusDuelArena : public AActor
{
public:
	class AWillowVersusDuelInfo*                       DuelInfo;                                                 // 0x0188(0x0004)
	int                                                ArenaIndex;                                               // 0x018C(0x0004) (Net, RepNotify)
	class AWillowPlayerPawn*                           Challenger;                                               // 0x0190(0x0004) (Net, RepNotify)
	class AWillowPlayerPawn*                           Competitor;                                               // 0x0194(0x0004) (Net, RepNotify)
	class UWillowVersusDuelGlobals*                    DuelGlobals;                                              // 0x0198(0x0004)
	class UStaticMeshComponent*                        ArenaMeshComponent;                                       // 0x019C(0x0004) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   ArenaMaterialInstance;                                    // 0x01A0(0x0004)
	float                                              ArenaStatus;                                              // 0x01A4(0x0004)
	struct FLinearColor                                CurrentChallengerTeamColorPrimary;                        // 0x01A8(0x0010)
	struct FLinearColor                                CurrentChallengerTeamColorSecondary;                      // 0x01B8(0x0010)
	struct FLinearColor                                CurrentChallengerTeamColorTertiary;                       // 0x01C8(0x0010)
	struct FLinearColor                                CurrentCompetitorTeamColorPrimary;                        // 0x01D8(0x0010)
	struct FLinearColor                                CurrentCompetitorTeamColorSecondary;                      // 0x01E8(0x0010)
	struct FLinearColor                                CurrentCompetitorTeamColorTertiary;                       // 0x01F8(0x0010)
	unsigned long                                      bChallengerOOB : 1;                                       // 0x0208(0x0004)
	unsigned long                                      bCompetitorOOB : 1;                                       // 0x0208(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVersusDuelArena");
		return ptr;
	}


	void DestroyDuelArena();
	void OnDuelEnd();
	void CreateDuelArena();
	void InitializeDuelArena(class AWillowVersusDuelInfo* NewDuelInfo, int NewArenaIndex, class AWillowPlayerPawn* NewChallenger, class AWillowPlayerPawn* NewCompetitor);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.WillowVersusDuelGlobals
// 0x0078 (0x003C - 0x00B4)
class UWillowVersusDuelGlobals : public UGBXDefinition
{
public:
	int                                                ArenaMaterialIndex;                                       // 0x003C(0x0004) (Edit, Const)
	struct FName                                       ArenaMaterialParamName;                                   // 0x0040(0x0008) (Edit, Const)
	class UStaticMesh*                                 ArenaMesh;                                                // 0x0048(0x0004) (Edit, Const)
	float                                              ArenaMeshRadiusActual;                                    // 0x004C(0x0004) (Edit, Const)
	float                                              ArenaMeshRadiusDesired;                                   // 0x0050(0x0004) (Edit, Const)
	float                                              ArenaSetupTime;                                           // 0x0054(0x0004) (Edit, Const)
	float                                              ArenaTakeDownTime;                                        // 0x0058(0x0004) (Edit, Const)
	TArray<class UBehaviorBase*>                       OnChallengeIssued;                                        // 0x005C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnDuelStarted;                                            // 0x0068(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnLeftDuelArena;                                          // 0x0074(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnDuelWinLoss;                                            // 0x0080(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	TArray<class UBehaviorBase*>                       OnDuelDraw;                                               // 0x008C(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	float                                              DuelArenaTimeout;                                         // 0x0098(0x0004) (Edit, Const)
	float                                              DuelChallengeCoolDown;                                    // 0x009C(0x0004) (Edit, Const)
	float                                              DuelChallengeTimeout;                                     // 0x00A0(0x0004) (Edit, Const)
	float                                              DuelLength;                                               // 0x00A4(0x0004) (Edit, Const)
	TArray<struct FDuelTeamPair>                       DuelTeams;                                                // 0x00A8(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVersusDuelGlobals");
		return ptr;
	}

};


// Class WillowGame.WillowVersusDuelInfo
// 0x005C (0x0188 - 0x01E4)
class AWillowVersusDuelInfo : public AReplicationInfo
{
public:
	class UWillowVersusDuelGlobals*                    DuelGlobals;                                              // 0x0188(0x0004)
	unsigned long                                      bTimedOut : 1;                                            // 0x018C(0x0004)
	unsigned long                                      bDuelEnded : 1;                                           // 0x018C(0x0004)
	class AWillowPlayerPawn*                           Challenger;                                               // 0x0190(0x0004)
	class AWillowPlayerPawn*                           Competitor;                                               // 0x0194(0x0004)
	class AWillowPlayerPawn*                           Winner;                                                   // 0x0198(0x0004)
	class AWillowPlayerPawn*                           Loser;                                                    // 0x019C(0x0004)
	class AWillowPlayerReplicationInfo*                ChallengerPRI;                                            // 0x01A0(0x0004) (Net)
	class AWillowPlayerReplicationInfo*                CompetitorPRI;                                            // 0x01A4(0x0004) (Net)
	int                                                ActiveDuelIndex;                                          // 0x01A8(0x0004)
	class AWillowVersusDuelArena*                      DuelArena;                                                // 0x01AC(0x0004)
	struct FTempProfileStruct                          TemporaryChallengerProfile;                               // 0x01B0(0x0018) (NeedCtorLink)
	struct FTempProfileStruct                          TemporaryCompetitorProfile;                               // 0x01C8(0x0018) (NeedCtorLink)
	class AWillowTradeManager*                         TradeManager;                                             // 0x01E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVersusDuelInfo");
		return ptr;
	}


	void ProcessLeviathanDuelStartedEvent();
	void ClearCombatantStateForDuel();
	void InitializeValuesOnCombatants();
	void RemoveFromActiveDuels();
	void ReviveLoser();
	void RestoreTemporaryProfile(class AWillowPlayerPawn* Combatant, const struct FTempProfileStruct& TempProfile);
	void RestoreTemporaryProfilesForCombatants();
	void OnDuelArenaDestroyed();
	class AWillowPlayerPawn* GetLoser();
	class AWillowPlayerPawn* GetWinner();
	void OnDuelEnd();
	void UpdatePlayerStat(class AWillowPlayerPawn* Combatant, const struct FName& Stat);
	void NotifyDuelResult();
	void SetWinnerAndLoser(class AWillowPlayerPawn* NewWinner, class AWillowPlayerPawn* NewLoser);
	void EndDuel(class AWillowPlayerPawn* NewWinner, class AWillowPlayerPawn* NewLoser, bool bCausedByGoingOutOfBounds);
	void OnCompetitorOutOfBounds();
	void OnCompetitorLeftDuelArena();
	void OnCompetitorEnteredDuelArena();
	void OnChallengerOutOfBounds();
	void OnChallengerLeftDuelArena();
	void OnChallengerEnteredDuelArena();
	void OnDuelLengthElapsed();
	bool CombatantsAreDueling();
	void StartDuelTimer();
	void SetAllegianceForCombatants();
	void OnDuelArenaCreated();
	struct FTempProfileStruct SaveTemporaryProfile(class AWillowPlayerPawn* Combatant);
	void SaveTemporaryProfilesForCombatants();
	void ClearPotentialDuelsForCombatants();
	struct FVector GetDuelArenaLocation();
	void CreateDuelArena();
	void ClearDuelTimers();
	void RegisterDuelAsActive();
	void StartDuel();
	void SetCompetitor(class AWillowPlayerPawn* NewCompetitor);
	class AWillowPlayerReplicationInfo* GetCompetitorPRI();
	class AWillowPlayerPawn* GetCompetitor();
	void SetChallenger(class AWillowPlayerPawn* NewChallenger);
	class AWillowPlayerReplicationInfo* GetChallengerPRI();
	class AWillowPlayerPawn* GetChallenger();
	void RemoveFromPotentialDuels();
	bool CoolDownActive();
	void OnChallengeCoolDown();
	bool TimedOut();
	void OnChallengeTimeout();
	void InitializeDuel();
	void PostBeginPlay();
};


// Class WillowGame.BaseInventoryPanelGFxObject
// 0x0034 (0x0078 - 0x00AC)
class UBaseInventoryPanelGFxObject : public UGFxObject
{
public:
	unsigned long                                      bActive : 1;                                              // 0x0078(0x0004)
	unsigned long                                      bCanRolloverEmptyCells : 1;                               // 0x0078(0x0004)
	TArray<struct FASValue>                            HandleRollOverArgs;                                       // 0x007C(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          CellObjects;                                              // 0x0088(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          EmptyWidgetObjects;                                       // 0x0094(0x000C) (NeedCtorLink)
	class UBaseTopLevelPanelGFxObject*                 ParentPanel;                                              // 0x00A0(0x0004)
	class UWillowInventoryGFxMovie*                    OwningMovie;                                              // 0x00A4(0x0004)
	class UWillowInventoryGFxDefinition*               OwningMovieDef;                                           // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BaseInventoryPanelGFxObject");
		return ptr;
	}


	void handleRollOver_9();
	void handleRollOver_8();
	void handleRollOver_7();
	void handleRollOver_6();
	void handleRollOver_5();
	void handleRollOver_4();
	void handleRollOver_3();
	void handleRollOver_2();
	void handleRollOver_1();
	void handleRollOver_Generic(int Index);
	void RedirectRollOver(class UGFxObject* Cell, int Index, const struct FString& OriginalFunctionName);
	void FlourishActiveCell();
	void OnStartDrag(class UGFxObject* StartingCell, class UGFxObject* OutDragData);
	class UGFxObject* extStartDrag(class UGFxObject* StartingCell);
	void OnSettingPanelForTransferring(bool bFocused, bool bEquipping);
	void extOnSetActive(bool _bActive);
	void SetActive(bool _bActive);
	void InspectItem(class AWillowInventory* Thing);
	class AWillowInventory* GetSelectedThing();
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool Init(class UBaseTopLevelPanelGFxObject* InParentPanel, const struct FName& InPanelName);
};


// Class WillowGame.BadassPanelGFxObject
// 0x00D0 (0x00AC - 0x017C)
class UBadassPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	struct FString                                     BA_RankString;                                            // 0x00AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BA_TokensString;                                          // 0x00B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BA_RedeemTokenButtonString;                               // 0x00C4(0x000C) (Const, Localized, NeedCtorLink)
	float                                              TokenUpPct;                                               // 0x00D0(0x0004) (Transient)
	int                                                PossibleRewardIndices[0x5];                               // 0x00D4(0x0004) (Transient)
	class UGFxClikWidget*                              RedeemButton;                                             // 0x00E8(0x0004) (Transient)
	class UGFxClikWidget*                              Selections[0x5];                                          // 0x00EC(0x0004) (Transient)
	struct FString                                     TooltipsText_Cancel;                                      // 0x0100(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Close;                                       // 0x010C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Redeem;                                      // 0x0118(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Reward;                                      // 0x0124(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BonusStatsHeader;                                         // 0x0130(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BonusStatsDisabledHeader;                                 // 0x013C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RewardChoiceHeader;                                       // 0x0148(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RewardString;                                             // 0x0154(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_ActivateBonusStats;                          // 0x0160(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_DeactivateBonusStats;                        // 0x016C(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bBrowsingRewards : 1;                                     // 0x0178(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BadassPanelGFxObject");
		return ptr;
	}


	void UpdateTrainingBox();
	void OnRewardFocused(const struct FEventData& Data);
	void OnRedeemTokensFocused(const struct FEventData& Data);
	void UpdateRedeemTokensFocusedTooltips();
	void ToggleBadassSkill();
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool BlockInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool DeferInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void UpdateCounters();
	void UpdateBars();
	void Tick(float DeltaTime);
	void SetBonusStatsText();
	void OnRewardSelected(int RewardNumber);
	void OnReward5Selected(const struct FEventData& Data);
	void OnReward4Selected(const struct FEventData& Data);
	void OnReward3Selected(const struct FEventData& Data);
	void OnReward2Selected(const struct FEventData& Data);
	void OnReward1Selected(const struct FEventData& Data);
	void OnRedeemTokensClicked(const struct FEventData& Data);
	void UpdatePercents();
	void HideCurrencies();
	void UpdateCurrencies();
	void SetUpBadassPanel();
	void SetInitialButtonStates();
	void extOnSetActive(bool _bActive);
	void OnSetInactive();
	bool Init(class UBaseTopLevelPanelGFxObject* InParentPanel, const struct FName& InPanelName);
};


// Class WillowGame.ChallengesPanelGFxObject
// 0x007C (0x00AC - 0x0128)
class UChallengesPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	class UGFxTextListContainer*                       ChallengeLogTextList;                                     // 0x00AC(0x0004) (Transient)
	class UStatusMenuGFxDefinition*                    StatusMenuDef;                                            // 0x00B0(0x0004) (Transient)
	class AWillowPlayerController*                     MyWPC;                                                    // 0x00B4(0x0004) (Transient)
	struct FString                                     TooltipsText_Cancel;                                      // 0x00B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Track;                                       // 0x00C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Untrack;                                     // 0x00D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Reset;                                       // 0x00DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UnspecifiedCategoryHeader;                                // 0x00E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TrackedCategoryHeader;                                    // 0x00F4(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             ChallengeCategories;                                      // 0x0100(0x000C) (NeedCtorLink)
	unsigned char                                      CurrentSortMode;                                          // 0x010C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	struct FString                                     ChallengeSortTooltip;                                     // 0x0110(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ChallengeRewardHeader;                                    // 0x011C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengesPanelGFxObject");
		return ptr;
	}


	void UpdatePrestigeIndicator();
	struct FString GetSortString();
	void SortModeChanged();
	void UpdateTooltips();
	void RefreshChallengesOnReset();
	void SetListHeader(const struct FString& Header);
	void SetChallengeDescription(const struct FString& ChallengeName, const struct FString& ChallengeDescription, const struct FString& ChallengeLevels, const struct FString& RewardHeader, const struct FString& Reward);
	void UpdateChallengeDescription();
	void UpdateListOfChallenges();
	void extOnSetActive(bool _bActive);
	void ScrollLog(unsigned char MoveDir);
	void Tick(float DeltaTime);
	void TrackHighlightedObject();
	void ChangeSort();
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool BlockInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool DeferInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void Deinit();
	bool Init(class UBaseTopLevelPanelGFxObject* InParentPanel, const struct FName& InPanelName);
	void SetLastSortMode(unsigned char SortMode);
	unsigned char GetLastSortMode();
	void SetLastHighlightedEntry(int EntryIdx);
	int GetLastHighlightedEntry();
	void UpdateChallengeTextList();
};


// Class WillowGame.DeferredDataProviderGFxObject
// 0x0010 (0x0078 - 0x0088)
class UDeferredDataProviderGFxObject : public UGFxObject
{
public:
	class UGFxMoviePlayer*                             BaseOwningMovie;                                          // 0x0078(0x0004)
	TArray<class UGFxObject*>                          CachedObjects;                                            // 0x007C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DeferredDataProviderGFxObject");
		return ptr;
	}


	int GetLength();
	void Invalidate(int Length);
	void EmptyData();
	class UGFxObject* RequestItemRange(int StartIndex, int EndIndex, class UGFxObject* Scope, const struct FString& CallBack);
	class UGFxObject* RequestItemAt(int Index, class UGFxObject* Scope, const struct FString& CallBack);
	void Init();
};


// Class WillowGame.GFxTextListContainer
// 0x0050 (0x003C - 0x008C)
class UGFxTextListContainer : public UObject
{
public:
	TArray<struct FOneTimeDataElement>                 OneTimeArray;                                             // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             CategoryLabelsArray;                                      // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FSortableDataElement>                SortableArray;                                            // 0x0054(0x000C) (NeedCtorLink)
	TArray<struct FGFxTextEntry>                       TextEntries;                                              // 0x0060(0x000C) (NeedCtorLink)
	class UGFxMovie*                                   ParentMovie;                                              // 0x006C(0x0004)
	int                                                HighlightedEntry;                                         // 0x0070(0x0004)
	int                                                IndexOfTopEntry;                                          // 0x0074(0x0004)
	int                                                NumberEntriesPerPage;                                     // 0x0078(0x0004)
	int                                                SavedHighlightedEntry;                                    // 0x007C(0x0004)
	int                                                SavedIndexOfTopEntry;                                     // 0x0080(0x0004)
	class UGFxTextListDefinition*                      ListDef;                                                  // 0x0084(0x0004)
	unsigned long                                      bHighlightBarNormal : 1;                                  // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GFxTextListContainer");
		return ptr;
	}


	int GetIndexOfNextCategory();
	int GetIndexOfPreviousCategory();
	void SetMoreBars(bool bMoreUp, bool bMoreDown);
	void UpdateTextEntries();
	void MoveHighlightBar(int frame);
	int GetTextEntryIndexOfFirstRealEntry();
	bool GetTextAndIconAtIndex(int Idx, struct FString* Text, struct FString* Icon);
	unsigned char GetTextEntryKindAtIndex(int Idx);
	class UObject* GetObjectAtIndex(int Idx);
	void RemoveObject(class UObject* anObject);
	void ScrollToBottomOfList();
	void SetIconOverrideFor(class UObject* anObject, const struct FString& IconOverride);
	void SetObjectHighlighted(class UObject* anObject);
	int FindObjectIndex(class UObject* anObject);
	void SetHighlightBarOff();
	void SetHighlightBarNormal();
	void SetHighlightBarSelected();
	void UnHighlightAll();
	void PositionHighlightBar();
	void ResetState();
	void RestoreState();
	void SaveState();
	struct FString GetHighlightedText();
	class UObject* GetHighlightedObject();
	bool IsSlotValid(int Slot);
	bool SelectSlot(int Slot);
	void RepositionToFitIndex(int IndexToFit);
	class UObject* Move(unsigned char Dir);
	void UpdateEntriesPerPage(int NewSize);
	void AddDataEntry(class UObject* Entry, const struct FString& LocalizedText, const struct FColor& UnselectedTextColor, const struct FString& IconFrameLabel);
	void EmptyData();
	void Init(class UGFxMovie* Parent, class UGFxTextListDefinition* Def);
};


// Class WillowGame.InventoryDataProviderGFxObject
// 0x003C (0x0088 - 0x00C4)
class UInventoryDataProviderGFxObject : public UDeferredDataProviderGFxObject
{
public:
	class UWillowInventoryGFxMovie*                    OwningMovie;                                              // 0x0088(0x0004)
	class UInventoryListPanelGFxObject*                OwningPanel;                                              // 0x008C(0x0004)
	TArray<struct FHeavyInventoryElement>              HeavyweightArray;                                         // 0x0090(0x000C) (NeedCtorLink)
	TArray<struct FSortableDataElement>                LightweightArray;                                         // 0x009C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             CategoryLabelsArray;                                      // 0x00A8(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          RainbowObjects;                                           // 0x00B4(0x000C) (NeedCtorLink)
	int                                                UnloadableCount;                                          // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryDataProviderGFxObject");
		return ptr;
	}


	void OnTrashFavChanged(class AWillowInventory* WInv);
	unsigned char GetEntryKindAtIndex(int Index);
	void AddDataEntry(class UObject* Entry, const struct FString& LocalizedText, const struct FColor& RarityColor);
	void EmptyData();
	int FindIndexOfThing(class AWillowInventory* ThingToBeSelected);
	class AWillowInventory* GetInventoryAtIndex(int Index);
	void Init();
};


// Class WillowGame.InventoryListPanelGFxObject
// 0x005C (0x00AC - 0x0108)
class UInventoryListPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	class UInventoryDataProviderGFxObject*             DataProvider;                                             // 0x00AC(0x0004)
	class UMultitypeScrollingListGFxObject*            InventoryList;                                            // 0x00B0(0x0004)
	int                                                CurrentSelectedIndex;                                     // 0x00B4(0x0004)
	int                                                CachedSelectedIndex;                                      // 0x00B8(0x0004)
	TArray<struct FCellContentData>                    InventoryCellsData;                                       // 0x00BC(0x000C) (Component, NeedCtorLink)
	class UGearboxRenderTextureManager*                RTM;                                                      // 0x00C8(0x0004)
	struct FName                                       PanelName;                                                // 0x00CC(0x0008)
	struct FSortFilterConfiguration                    CurrentSortFilterConfig;                                  // 0x00D4(0x0010) (NeedCtorLink)
	struct FString                                     PanelTitle;                                               // 0x00E4(0x000C) (NeedCtorLink)
	unsigned long                                      bCellUnselected : 1;                                      // 0x00F0(0x0004)
	unsigned long                                      bCanChangeSort : 1;                                       // 0x00F0(0x0004)
	unsigned long                                      bShowSoldOutIfEmpty : 1;                                  // 0x00F0(0x0004)
	unsigned long                                      bTrashFavoritesEnabled : 1;                               // 0x00F0(0x0004)
	unsigned long                                      bSkipSetRenderInfo : 1;                                   // 0x00F0(0x0004)
	float                                              OriginalTrashFavXPosition;                                // 0x00F4(0x0004)
	class UGFxObject*                                  Container;                                                // 0x00F8(0x0004)
	struct FScriptDelegate                             __OnListSort__Delegate;                                   // 0x00FC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryListPanelGFxObject");
		return ptr;
	}


	void SetCanDrag(bool bCanDrag);
	void SetEmptyPanelWidget(bool bVisible, bool bSoldOutTextVisible);
	void SetPanelHighlight(bool bVisible);
	void OnStartDrag(class UGFxObject* StartingCell, class UGFxObject* OutDragData);
	void RestoreState();
	void SaveState();
	void ClearCell(int ItemIdx);
	void FreeCellData();
	class UGFxObject* GetCellObject(int DesiredCellIndex);
	void CycleSelectedThingAsTrashOrFavorite();
	void extOnTrashFavChanged(int RendererIndex, int Mark, bool bEnabled);
	void SetTrashFavoritesEnabled(bool bEnabled);
	void SetCellTrashFavoritesEnabled(class UGFxObject* Cell, bool bEnabled);
	void extOnNewBackpackRenderer(int RendererIndex, const struct FString& TextureLinkage);
	void SetRendererInfo(int DataIndex, int RendererType, int RendererIndex);
	void extOnCellUnselected(int Index);
	void extOnBackpackItemSelected(int SelectedIndex, bool bSelected);
	void extOnCellPressed(int PressedIndex);
	void FixupSelectedIndex();
	bool IsCurrentCellValid();
	class AWillowInventory* GetThingByIndex(int Index);
	class AWillowInventory* GetSelectedThing();
	void UpdateList(TArray<class AWillowInventory*>* NewListThings);
	int MoveDelta(int Delta, int StartIndex, int OriginalIndex);
	void Move(int Delta);
	void SetSelectedIndexByThing(class AWillowInventory* ThingToBeSelected);
	void extOnSetActive(bool _bActive);
	void extOnPanelRollOver(int ControllerId);
	void extOnStoragePanelPressed(int ControllerId);
	void SetPanelTitleStorage();
	void SetPanelTitle(const struct FString& NewTitle);
	void SetSortLabel(struct FSortFilterConfiguration* SortFilterCategorizeData);
	void extOnChangeSort(int Delta);
	void ApplySortConfiguration(struct FSortFilterConfiguration* SortFilterCategorizeData);
	void SetList(int UnloadableCount, TArray<class AWillowInventory*>* InventoryThings, struct FSortFilterConfiguration* SortFilterCategorizeData);
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void __SetHeaderIconClip(const struct FString& MoviePath);
	void SetHeaderIconClip(class USwfMovie* MovieClip);
	void __SetBackgroundTint(int BackgroundTint, float BackgroundTintAlpha);
	void SetBackgroundTint(const struct FColor& BackgroundTint);
	void __SetBackground(const struct FString& Background);
	void SetBackground(unsigned char Background);
	bool Init(class UBaseTopLevelPanelGFxObject* InParentPanel, const struct FName& InPanelName);
	void OnListSort();
	static unsigned char GetInventoryType(class AWillowInventory* WInv);
	static void InitializePlayerClasses();
};


// Class WillowGame.StatusMenuEquippedPanelGFxObject
// 0x003C (0x00AC - 0x00E8)
class UStatusMenuEquippedPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	TArray<int>                                        RainbowCell;                                              // 0x00AC(0x000C) (NeedCtorLink)
	TArray<int>                                        CachedCellInfo;                                           // 0x00B8(0x000C) (NeedCtorLink)
	int                                                SelectedCellSuffix;                                       // 0x00C4(0x0004)
	int                                                PreferredDownCellSuffix;                                  // 0x00C8(0x0004)
	int                                                EquippedTypeCellSuffix;                                   // 0x00CC(0x0004)
	class UStatusMenuGFxDefinition*                    StatusDef;                                                // 0x00D0(0x0004)
	unsigned long                                      bReadyWeaponLeftUnlocked : 1;                             // 0x00D4(0x0004)
	unsigned long                                      bReadyWeaponRightUnlocked : 1;                            // 0x00D4(0x0004)
	class UGFxObject*                                  CachedCurrentlySelectedCell;                              // 0x00D8(0x0004)
	struct FScriptDelegate                             __MoveFunction__Delegate;                                 // 0x00DC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusMenuEquippedPanelGFxObject");
		return ptr;
	}


	void ShowDualWieldInventoryGuides(bool bShow, int SlotsUnlocked);
	void CleanUpAfterCancelledDrag();
	void PrepareForFinishDrag(int CellSuffix);
	bool CanFinishDragOnCell(int CellSuffix);
	void OnStartDrag(class UGFxObject* StartingCell, class UGFxObject* OutDragData);
	void SetCellMarkForIndex(int Index, int Mark);
	void SetCellMarkForThing(class AWillowInventory* Thing);
	void __SetCellMarks(int Mark1, int Mark2, int Mark3, int Mark4, int Mark5, int Mark6, int Mark7, int Mark8);
	void __SetCellInfo(int ReadyWeaponUpInfo, int RWD, int RWL, int RWR, int ShieldInfo, int GrenadeModInfo, int ClassModInfo, int ArtifactInfo);
	void extOnTrashFavChanged(int Index, int Mark, bool bEnabled);
	int GetMarkFromInventory(class AWillowInventory* WInv);
	void SetCellInfo();
	unsigned char GetSelectedCellInventoryType();
	int GetSuffixFromQuickSlot(unsigned char Slot);
	unsigned char GetWeaponSlotFromSuffix(int Suffix);
	unsigned char GetWeaponSlotFromThing(class AWillowInventory* Thing);
	unsigned char GetHighlightedWeaponSlot();
	int GetTypeCellSuffixBasedOnPosition();
	int GetTypeCellSuffixBasedOnThing(class AWillowInventory* EquippingThing);
	bool IsAWeaponSuffix(int Suffix);
	void StopEquip();
	void SelectTypeCellBasedOnThing(int TypeCellSuffix);
	void StartEquip(class AWillowInventory* EquippingThing, bool bShouldSelectTypeCell);
	bool EquippingMove(unsigned char Dir);
	void extOnMouseUp(int controllerIdx);
	void extOnCellPressed(int Suffix);
	void extOnEquippedPanelPressed(int controllerIdx);
	bool NormalMove(unsigned char Dir);
	void RestoreCurrentSelectedCell();
	void CacheCurrentSelectedCellAndSetToNone();
	void ResetCacheCurrentSelectedCell();
	class UGFxObject* GetCurrentSelectedCell();
	void extOnCellUnselected(int InSelectedCellSuffix);
	void extOnCellSelected(int InSelectedCellSuffix);
	class AWillowInventory* GetThingByIndex(int Index);
	class AWillowInventory* GetSelectedThing();
	void __SetSelectedCell(int SelectedCell);
	void SetCellsForEquipping(int TypeCellSuffix);
	void SetSelectedCell();
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void SetReadyWeaponRight(bool bVisible);
	void SetReadyWeaponLeft(bool bVisible);
	void FlourishWeaponLeft();
	void FlourishWeaponRight();
	void SetUpEquippedSlotIcons();
	void Refresh();
	bool Init(class UBaseTopLevelPanelGFxObject* InParentPanel, const struct FName& InPanelName);
	bool MoveFunction(unsigned char Dir);
};


// Class WillowGame.BaseTopLevelPanelGFxObject
// 0x0034 (0x0078 - 0x00AC)
class UBaseTopLevelPanelGFxObject : public UGFxObject
{
public:
	class UWillowInventoryGFxMovie*                    ParentMovie;                                              // 0x0078(0x0004)
	class UWillowInventoryGFxDefinition*               ParentMovieDef;                                           // 0x007C(0x0004)
	TArray<struct FItemCardInfo>                       ItemCards;                                                // 0x0080(0x000C) (NeedCtorLink)
	struct FName                                       QueuedTriggerKey;                                         // 0x008C(0x0008)
	struct FScriptDelegate                             QueuedInputKey;                                           // 0x0094(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnInputKey__Delegate;                                   // 0x00A0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BaseTopLevelPanelGFxObject");
		return ptr;
	}


	void OnTrashFavChanged(class AWillowInventory* Thing);
	void OnCellPressed(class UBaseInventoryPanelGFxObject* Panel);
	void OnStartDrag(class UGFxObject* StartingCell, class UGFxObject* OutDragData);
	unsigned char GetInspectedItemCurrencyType(class AWillowInventory* Thing);
	int GetInspectedItemOverridePrice(class AWillowInventory* Thing);
	void __SetComparingTweenInfo(float TT, float MCLX, float MCLY, float MCLZ, float MCRX, float MCRY, float MCRZ, float CCLX, float CCLY, float CCLZ, float CCRX, float CCRY, float CCRZ, float MCSL, float MCSR, float CCSL, float CCSR);
	void SetComparingTweenInfo(const struct FName& MainCardName, const struct FName& CompareCardName, const struct FName& LeftPanelName, const struct FName& RightPanelName);
	struct FCardInfo GetCard(const struct FName& CardName);
	void OnItemSelected(class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing);
	void UpdateDynamicCard(class AWillowInventory* Thing);
	void SetUpCardEx(const struct FName& CardName, class AWillowInventory* Thing, class AWillowInventory* CompareAgainstThing, unsigned char CurrencyType, int OverrideValue);
	void SetUpCard(const struct FName& CardName, class AWillowInventory* Thing, class AWillowInventory* CompareAgainstThing, int OverrideValue);
	int GetItemCardContentIndex(const struct FName& CardName);
	class UItemCardGFxObject* GetItemCard(const struct FName& CardName);
	struct FItemCardInfo GetItemCardInfo(const struct FName& CardName);
	struct FPanelInfo GetPanel(const struct FName& PanelName);
	void extInitComplete();
	void extInitRightPanel();
	void extInitLeftPanel();
	void InitPanels();
	void AssignPanels();
	void extInitPanels();
	void RefreshItemCards();
	void InitItemCards();
	void AssignItemCards();
	void extInitItemCards();
	void SetActivePanelByName(const struct FString& PanelName);
	void OnPanelPressed(class UBaseInventoryPanelGFxObject* Panel);
	void __SetFocusUnfocusedCompareTweenPositions(const struct FString& PN, float TT, float FX, float FY, float FZ, float UFX, float UFY, float UFZ, float CX, float CY, float CZ);
	void TweenPanel(const struct FString& PanelName, bool bFocused, bool bCompare);
	void TweenPanelToPosition(const struct FName& PanelName, unsigned char NewPanelPosition);
	void SetFocusUnfocusedCompareTweenPositions(const struct FName& PanelName);
	bool SwitchToQueuedInputHandler(const struct FName& ukey, unsigned char uevent);
	void QueueNewInputHandler(const struct FScriptDelegate& NewInputKey, const struct FName& TriggerKey);
	bool Init(class UWillowInventoryGFxMovie* InParent);
	bool OnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
};


// Class WillowGame.ChallengesScreenGFxObject
// 0x0010 (0x00AC - 0x00BC)
class UChallengesScreenGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	unsigned char                                      CurrentPanel;                                             // 0x00AC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	class UBadassPanelGFxObject*                       BadassPanel;                                              // 0x00B0(0x0004)
	class UChallengesPanelGFxObject*                   ChallengesPanel;                                          // 0x00B4(0x0004)
	class UChallengesPanelDefinition*                  PanelDef;                                                 // 0x00B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengesScreenGFxObject");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetTooltipText(const struct FString& TooltipsText);
	void ConfigureForPlayer(float ControllerId);
	bool OfferInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool NormalInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool BlockInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool DeferInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void SwitchToPanel(unsigned char Panel);
	void SwitchFocus(unsigned char NewPanel, bool bPlaySound);
	void RestoreState();
	void Refresh();
	void DeinitPanels();
	void Deinit();
	void InitPanels();
	void AssignPanels();
	bool Init(class UWillowInventoryGFxMovie* InParent);
};


// Class WillowGame.StatusMenuInventoryPanelGFxObject
// 0x0050 (0x00AC - 0x00FC)
class UStatusMenuInventoryPanelGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	unsigned long                                      bShouldStartOnEquippedPanel : 1;                          // 0x00AC(0x0004) (Config)
	unsigned long                                      bInEquippedView : 1;                                      // 0x00AC(0x0004)
	unsigned long                                      bSwitchedPanelsMousePress : 1;                            // 0x00AC(0x0004)
	unsigned long                                      bIsDoingEquip : 1;                                        // 0x00AC(0x0004)
	unsigned long                                      bShouldShowDualWieldGuides : 1;                           // 0x00AC(0x0004)
	unsigned long                                      bInitialSetupFinished : 1;                                // 0x00AC(0x0004)
	class UStatusMenuEquippedPanelGFxObject*           EquippedPanel;                                            // 0x00B0(0x0004)
	class UInventoryListPanelGFxObject*                BackpackPanel;                                            // 0x00B4(0x0004)
	class UAmmoPanelGFxObject*                         AmmoPanel;                                                // 0x00B8(0x0004)
	class AWillowInventory*                            EquippingThing;                                           // 0x00BC(0x0004)
	class AWillowInventory*                            SecondEquippingThing;                                     // 0x00C0(0x0004)
	class UBaseInventoryPanelGFxObject*                StartEquipPanel;                                          // 0x00C4(0x0004)
	int                                                SlotsUsed;                                                // 0x00C8(0x0004)
	int                                                MaxCapacity;                                              // 0x00CC(0x0004)
	struct FSortFilterConfiguration                    CachedSortFilterConfig;                                   // 0x00D0(0x0010) (NeedCtorLink)
	int                                                TotalSlotCount;                                           // 0x00E0(0x0004)
	int                                                NewlyOpenedSlotCount;                                     // 0x00E4(0x0004)
	int                                                BackpackSortConfigIndex;                                  // 0x00E8(0x0004)
	int                                                StartingBackpackSortConfigIndex;                          // 0x00EC(0x0004)
	TArray<struct FSortFilterConfiguration>            BackpackSortConfigurations;                               // 0x00F0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusMenuInventoryPanelGFxObject");
		return ptr;
	}


	class UGFxObject* GetCurrentCellObject();
	void OnCellPressed(class UBaseInventoryPanelGFxObject* Panel);
	void extCompleteDrag_Backpack(int DropTargetIndex);
	void extCompleteDrag_Equipped(int CellSuffix);
	void extCancelDrag();
	void OnStartDrag(class UGFxObject* StartingCell, class UGFxObject* OutDragData);
	void SetLeftRightArrowVisibility(bool bArrowLeftVisible, bool bArrowRightVisible);
	void TweenCards(bool bTransferring, bool bStartedFromLeftPanel);
	void __SetStorageInfoCardData(const struct FString& NewInfo);
	void SetStorageInfoCardData();
	void SetStorageInfoCardTitle(const struct FString& NewTitle);
	void FreeCellData();
	void OnTrashFavChanged(class AWillowInventory* Thing);
	void CycleSelectedThingAsTrashOrFavorite();
	void CycleEquippedThingAsTrashOrFavorite();
	void FlourishDrop(const struct FString& Text);
	bool CanDrop(class AWillowInventory* ThingToBeDropped);
	void DropSelectedThing();
	bool CanUnready(class AWillowInventory* ReadiedThing);
	bool CanReady(class AWillowInventory* WInv);
	bool CanUseConsume(class AWillowInventory* WInv);
	bool UnreadyThing(class AWillowInventory* ReadiedThing);
	bool IsComparing();
	void SetBackpackList(const struct FSortFilterConfiguration& ConfigData, TArray<class AWillowInventory*>* BackpackThings);
	void SetTooltipText(const struct FString& TooltipsText);
	void __SetDPadFrames(const struct FString& Platform);
	void SetDPadFrames();
	void SetTotalCredits(int Credits);
	void SetAllAmmoCounts();
	void __SetPortrait(const struct FString& PortraitPath);
	void SetPortrait();
	void ShowDualWieldInventoryGuides(bool bShow, int SlotsUnlocked);
	void FlourishNewSlots(int NewSlotsToShow);
	void SetBackpackCapacity(int InSlotsUsed, int InMaxCapacity);
	void __AwardNewQuickSlots();
	void AwardNewQuickSlots(int TotalSlotCountIn, int NewlyOpenedSlotCountIn, bool bShouldShowDualWieldGuidesIn);
	void ConfigureForPlayer(float ControllerId);
	void FlourishEquip(const struct FString& Text);
	void FinishEquip(const struct FName& TriggerKey, bool bCompleted);
	void CancelEquip();
	bool CompleteEquip();
	void TryUnlockedFlourish(class AWillowInventory* WInv);
	void StartEquip(const struct FName& TriggerKey, bool bIsDragAndDrop);
	bool EquipInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	unsigned char GetEquippedPanelCurrentCellType();
	void OnItemSelected(class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing);
	bool NormalInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void InspectSelectedItem();
	class AWillowInventory* GetSelectedThingFromNative();
	class AWillowInventory* GetSelectedThing();
	void UpdateDynamicCard(class AWillowInventory* Thing);
	void RefreshItemCards();
	void SwitchToEquippedPanel();
	void SwitchToBackpackPanel();
	void UpdateTooltipsText();
	void SwitchFocus(unsigned char NewPanel, bool bPlaySound);
	void OnPanelPressed(class UBaseInventoryPanelGFxObject* Panel);
	void RestoreState();
	void Refresh();
	void OnListSort();
	void SaveBackpackSortPreference();
	void extInitComplete();
	void RefreshBackpackPanel();
	void extInitRightPanel();
	void extInitLeftPanel();
	void InitItemCards();
	void AssignItemCards();
	bool Init(class UWillowInventoryGFxMovie* InParent);
};


// Class WillowGame.TradingPanelGFxObject
// 0x0024 (0x00AC - 0x00D0)
class UTradingPanelGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	class UInventoryListPanelGFxObject*                BackpackPanel;                                            // 0x00AC(0x0004)
	class UTradingOffersPanelGFxObject*                OffersPanel;                                              // 0x00B0(0x0004)
	unsigned char                                      CurrentPanel;                                             // 0x00B4(0x0001)
	unsigned char                                      ReturnPanel;                                              // 0x00B5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00B6(0x0002) MISSED OFFSET
	class AWillowInventory*                            OfferingThing;                                            // 0x00B8(0x0004)
	struct FSortFilterConfiguration                    CachedSortFilterConfig;                                   // 0x00BC(0x0010) (NeedCtorLink)
	unsigned long                                      bCancelNextDrag : 1;                                      // 0x00CC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TradingPanelGFxObject");
		return ptr;
	}


	void extCompleteDrag_Backpack(int DropTargetIndex);
	void extCompleteDrag_Offered(int CellSuffix);
	void extCancelDrag();
	bool CanDragSelectedThing();
	void OnStartDrag(class UGFxObject* StartingCell, class UGFxObject* OutDragData);
	void SetLeftRightArrowVisibility(bool bLeftArrowVisible, bool bRightArrowVisible);
	void InspectItem(class AWillowInventory* Thing);
	void SetBackpackList(TArray<class AWillowInventory*>* BackpackThings);
	void SetTooltipText(const struct FString& TooltipsText);
	void SetTotalCredits(int Credits);
	void ConfigureForPlayer(float ControllerId);
	void FinishOffer();
	void CancelOffer();
	bool CompleteOffer();
	void StartOffer();
	bool CanUseCLIKButtons();
	bool CanStartOffer();
	bool OfferInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool NormalInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool BlockInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool DeferInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	class AWillowInventory* GetSelectedThing();
	void RefreshItemCards();
	void SwitchToPanel(unsigned char Panel);
	void SwitchFocus(unsigned char NewPanel);
	void RestoreState();
	void OnItemSelected(class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing);
	void Refresh();
	void OnListSort();
	void InitPanels();
	void AssignPanels();
	void InitItemCards();
	void AssignItemCards();
	bool Init(class UWillowInventoryGFxMovie* InParent);
};


// Class WillowGame.TwoPanelInterfaceGFxObject
// 0x0070 (0x00AC - 0x011C)
class UTwoPanelInterfaceGFxObject : public UBaseTopLevelPanelGFxObject
{
public:
	FScriptInterface                                   TwoPanelInterface;                                        // 0x00AC(0x0008)
	class UInventoryListPanelGFxObject*                StoragePanel;                                             // 0x00B4(0x0004)
	class UInventoryListPanelGFxObject*                PlayerPanel;                                              // 0x00B8(0x0004)
	unsigned long                                      bOnLeftPanel : 1;                                         // 0x00BC(0x0004)
	unsigned long                                      bStartedOnLeftPanel : 1;                                  // 0x00BC(0x0004)
	unsigned long                                      bLeftPanelRefreshed : 1;                                  // 0x00BC(0x0004)
	unsigned long                                      bRightPanelRefreshed : 1;                                 // 0x00BC(0x0004)
	unsigned long                                      bOwningMovieHandlesCellPress : 1;                         // 0x00BC(0x0004)
	int                                                frameNum;                                                 // 0x00C0(0x0004)
	class AWillowInventory*                            TransferringThing;                                        // 0x00C4(0x0004)
	struct FName                                       DynamicCardName;                                          // 0x00C8(0x0008)
	struct FString                                     HeaderNavLeftTooltip;                                     // 0x00D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     HeaderNavRightTooltip;                                    // 0x00DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StoragePanelLabel;                                        // 0x00E8(0x000C) (NeedCtorLink)
	struct FString                                     PlayerPanelLabel;                                         // 0x00F4(0x000C) (NeedCtorLink)
	unsigned char                                      bCanAcceptInput;                                          // 0x0100(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0101(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __SwitchToStartingPanel__Delegate;                        // 0x0104(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDynamicCardUpdated__Delegate;                         // 0x0110(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TwoPanelInterfaceGFxObject");
		return ptr;
	}


	void OnCellPressed(class UBaseInventoryPanelGFxObject* Panel);
	void InitForConsole();
	void InitForPC();
	bool OnValidCell();
	class UGFxObject* GetCurrentCellObject();
	class UInventoryListPanelGFxObject* GetCurrentPanel();
	unsigned char GetInspectedItemCurrencyType(class AWillowInventory* Thing);
	int GetInspectedItemOverridePrice(class AWillowInventory* Thing);
	void SetActivePanelSelectIndexByThing(class AWillowInventory* Thing);
	void SetActivePanelSortConfiguration(const struct FSortFilterConfiguration& NewConfiguration);
	void SetTabIconFrame(int IconNumber, const struct FString& frame);
	void SetActiveTab(const struct FString& Tab);
	void __SetNavTooltips(const struct FString& LeftTooltip, const struct FString& RightTooltip);
	void SetNavTooltips();
	void SetTooltipText(const struct FString& TooltipsText);
	void Cleanup();
	void SetStorageInfoCardVisible(bool bVisible);
	void __SetStorageInfoCardData(const struct FString& NewInfo);
	void SetStorageInfoCardData();
	void SetStorageInfoCardTitle(const struct FString& NewTitle);
	void CycleSelectedThingAsTrashOrFavorite();
	void TweenCards(bool bTransferring, bool bStartedFromLeftPanel);
	void FinishTransfer(const struct FName& TriggerKey, bool bCompleted);
	void CancelTransfer(const struct FName& ukey);
	void ConfirmTransfer(const struct FName& ukey);
	bool TransferInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void StartTransfer(const struct FName& TriggerKey);
	bool IsTransferring();
	bool NormalInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool PanelInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnItemSelected(class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing);
	void InitItemCards();
	void AssignItemCards();
	void SetHeader(const struct FString& frame, const struct FString& Title);
	class AWillowInventory* GetSelectedThing();
	class AWillowInventory* GetEquippedAnalogueThroughInterface(class AWillowInventory* InThing);
	class AWillowInventory* GetSelectedThingThroughInterface();
	void UpdateDynamicCard(class AWillowInventory* Thing);
	void RefreshItemCards();
	void SetUpCard(const struct FName& CardName, class AWillowInventory* Thing, class AWillowInventory* CompareAgainstThing, int OverrideValue);
	void SetActive(bool bSelected);
	void SwitchPanelsForComparing();
	bool TrySwitchToRightPanel();
	bool TrySwitchToLeftPanel();
	void SwitchToRightPanel(bool bSetHeader);
	void SwitchToLeftPanel(bool bSetHeader);
	void OnListSort();
	void ConfigureForPlayer(float ControllerId);
	void OnTick();
	void Refresh();
	void RefreshRightPanel();
	void RefreshLeftPanel();
	void SetActiveHeaderIcon(const struct FString& Position);
	void SetHeaderLabel(const struct FString& NewLabel);
	void SetPlayerPanelHidden();
	void SetNavHeaderIconCount(int IconCount);
	void extInitRightPanel();
	void extInitLeftPanel();
	bool Init(class UWillowInventoryGFxMovie* InParent);
	void OnDynamicCardUpdated(class AWillowInventory* WInv);
	void SwitchToStartingPanel(bool bSetHeader);
};


// Class WillowGame.GFxTextListDefinition
// 0x0060 (0x003C - 0x009C)
class UGFxTextListDefinition : public UGBXDefinition
{
public:
	struct FString                                     ContainerName;                                            // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     FunctionPath;                                             // 0x0048(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     MoreUpName;                                               // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     MoreDownName;                                             // 0x0060(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     CategoryPrefix;                                           // 0x006C(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     CategoryPostfix;                                          // 0x0078(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     CategoryIconLabel;                                        // 0x0084(0x000C) (Edit, Const, NeedCtorLink)
	struct FColor                                      TextNormalColor;                                          // 0x0090(0x0004) (Edit, Const)
	struct FColor                                      TextHighlightColor;                                       // 0x0094(0x0004) (Edit, Const)
	int                                                InitialEntryCount;                                        // 0x0098(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GFxTextListDefinition");
		return ptr;
	}

};


// Class WillowGame.HashDisplayGFxDefinition
// 0x0024 (0x00BC - 0x00E0)
class UHashDisplayGFxDefinition : public UGFxMovieDefinition
{
public:
	class UGFxTextListDefinition*                      LeftSideDef;                                              // 0x00BC(0x0004) (Edit)
	struct FColor                                      EmptySlotColor;                                           // 0x00C0(0x0004) (Edit)
	int                                                CardCellWidth;                                            // 0x00C4(0x0004) (Edit)
	int                                                CardCellHeight;                                           // 0x00C8(0x0004) (Edit)
	int                                                CardTextureWidth;                                         // 0x00CC(0x0004) (Edit)
	int                                                CardTextureHeight;                                        // 0x00D0(0x0004) (Edit)
	struct FString                                     Card1ExternalTextureMap;                                  // 0x00D4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HashDisplayGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.HUDScalingAnchorDefinition
// 0x0008 (0x003C - 0x0044)
class UHUDScalingAnchorDefinition : public UGBXDefinition
{
public:
	struct FVector2D                                   AnchorPosition;                                           // 0x003C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDScalingAnchorDefinition");
		return ptr;
	}

};


// Class WillowGame.HUDWidget_Base
// 0x0004 (0x0078 - 0x007C)
class UHUDWidget_Base : public UGFxObject
{
public:
	class UWillowHUDGFxMovie*                          MyHUDMovie;                                               // 0x0078(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDWidget_Base");
		return ptr;
	}


	void Update(float DeltaTime);
	void Deinit();
	void Init(class UWillowHUDGFxMovie* OwnerMovie);
};


// Class WillowGame.HUDWidget_Challenges
// 0x0038 (0x007C - 0x00B4)
class UHUDWidget_Challenges : public UHUDWidget_Base
{
public:
	unsigned long                                      bShowing : 1;                                             // 0x007C(0x0004) (Transient)
	class UGFxObject*                                  InnerClip;                                                // 0x0080(0x0004) (Transient)
	class UGFxObject*                                  HeaderClip;                                               // 0x0084(0x0004) (Transient)
	class UGFxObject*                                  SubtextClip;                                              // 0x0088(0x0004) (Transient)
	class UGFxObject*                                  SubtextInnerClip;                                         // 0x008C(0x0004) (Transient)
	class UGFxObject*                                  SubtextInnerTextClip;                                     // 0x0090(0x0004) (Transient)
	float                                              FlipTime;                                                 // 0x0094(0x0004) (Transient)
	float                                              HideTime;                                                 // 0x0098(0x0004) (Transient)
	struct FString                                     Header_InProgress;                                        // 0x009C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Header_Complete;                                          // 0x00A8(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDWidget_Challenges");
		return ptr;
	}


	struct FString GetRewardString();
	struct FString GetProgressString();
	struct FString GetNameString();
	void Hide();
	void Flip();
	void ConditionalShowNextQueuedChallenge();
	void ShowNextQueuedChallenge();
	void Update(float DeltaTime);
	void Deinit();
	void Init(class UWillowHUDGFxMovie* OwnerMovie);
};


// Class WillowGame.HUDWidget_Crosshairs
// 0x0024 (0x007C - 0x00A0)
class UHUDWidget_Crosshairs : public UHUDWidget_Base
{
public:
	float                                              CrosshairSize;                                            // 0x007C(0x0004) (Transient)
	int                                                CrosshairFrame;                                           // 0x0080(0x0004) (Transient)
	unsigned char                                      CrosshairVisibility;                                      // 0x0084(0x0001) (Transient)
	unsigned char                                      MyCrosshairColor;                                         // 0x0085(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
	int                                                ChargeFrame;                                              // 0x0088(0x0004) (Transient)
	class UGFxObject*                                  OuterClip;                                                // 0x008C(0x0004) (Transient)
	class UGFxObject*                                  InnerClip;                                                // 0x0090(0x0004) (Transient)
	class UGFxObject*                                  ChargeClip;                                               // 0x0094(0x0004) (Transient)
	class AWillowWeapon*                               WWeap;                                                    // 0x0098(0x0004) (Transient)
	unsigned long                                      bScopeCrosshair : 1;                                      // 0x009C(0x0004) (Transient)
	unsigned long                                      bDualWieldCrosshair : 1;                                  // 0x009C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDWidget_Crosshairs");
		return ptr;
	}


	void AssociateWeapon(class AWillowWeapon* InWeap);
	void UpdateCrosshairColor();
	void UpdateCrosshairFrame();
	void SetCrosshairVisibility(bool bVisible);
	void Update(float DeltaTime);
	void Deinit();
	void Init(class UWillowHUDGFxMovie* OwnerMovie);
};


// Class WillowGame.HUDWidget_Minimap
// 0x00F4 (0x007C - 0x0170)
class UHUDWidget_Minimap : public UHUDWidget_Base
{
public:
	unsigned long                                      bPlayerRelative : 1;                                      // 0x007C(0x0004) (Transient)
	unsigned long                                      bShowThreats : 1;                                         // 0x007C(0x0004) (Config, GlobalConfig)
	float                                              WorldRadius;                                              // 0x0080(0x0004) (Transient)
	float                                              UnrealUnitsPerPixel;                                      // 0x0084(0x0004) (Transient)
	float                                              TargetWorldRadius;                                        // 0x0088(0x0004) (Transient)
	float                                              OuterRadius;                                              // 0x008C(0x0004) (Transient)
	float                                              RadiusLerpPerSecond;                                      // 0x0090(0x0004) (Transient)
	class UGFxObject*                                  MapClip;                                                  // 0x0094(0x0004) (Transient)
	class UGFxObject*                                  DirArrowClip;                                             // 0x0098(0x0004) (Transient)
	class UGFxObject*                                  NorthMarkerClip;                                          // 0x009C(0x0004) (Transient)
	struct FVector                                     NorthMarkerOffset;                                        // 0x00A0(0x000C) (Transient)
	int                                                CachedPlayerYaw;                                          // 0x00AC(0x0004) (Transient)
	int                                                MapYawOffset;                                             // 0x00B0(0x0004) (Transient)
	TArray<struct FMinimapObjectiveIconClip>           Icons_Objective;                                          // 0x00B4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_AreaObjective;                                      // 0x00C0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapObjectiveIconClip>           Icons_AreaObjectiveSticky;                                // 0x00CC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_CustomObjective;                                    // 0x00D8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_Threats;                                            // 0x00E4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_Allies;                                             // 0x00F0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_Vehicles;                                           // 0x00FC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_Shops;                                              // 0x0108(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_VSS;                                                // 0x0114(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_HealthStations;                                     // 0x0120(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_FastTravelStations;                                 // 0x012C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_LevelTravelStations;                                // 0x0138(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_CustomizationStations;                              // 0x0144(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_MissionEligible;                                    // 0x0150(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMinimapIconClip>                    Icons_MissionRedeemable;                                  // 0x015C(0x000C) (Transient, NeedCtorLink)
	class AWillowTacticalMapVolume*                    TacticalMapVolume;                                        // 0x0168(0x0004) (Transient)
	class UWillowHUDGFxMovieDefinition*                HUDMovieDef;                                              // 0x016C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDWidget_Minimap");
		return ptr;
	}


	void ToggleFogOfWarBlob(const struct FString& BlobName, bool bEnabled);
	void InitFogOfWarBlobs();
	void UpdateTargetRadius(bool bInVehicle, float LerpTime);
	void SetMapMovie(const struct FString& MapMoviePath);
	void Update(float DeltaTime);
	void Deinit();
	void InitOverheadMapVolume();
	void Init(class UWillowHUDGFxMovie* OwnerMovie);
};


// Class WillowGame.HUDWidget_Missions
// 0x00D8 (0x007C - 0x0154)
class UHUDWidget_Missions : public UHUDWidget_Base
{
public:
	unsigned long                                      bMissionWidgetNeedsRefresh : 1;                           // 0x007C(0x0004) (Transient)
	unsigned long                                      bCachedMissionTimerRunning : 1;                           // 0x007C(0x0004) (Transient)
	unsigned long                                      bCachedMissionBranches : 1;                               // 0x007C(0x0004) (Transient)
	unsigned long                                      bCachedMissionTurnIn : 1;                                 // 0x007C(0x0004) (Transient)
	unsigned long                                      bCachedMissionFailed : 1;                                 // 0x007C(0x0004) (Transient)
	unsigned long                                      bDoingNonTrackedMissionFlip : 1;                          // 0x007C(0x0004) (Transient)
	unsigned long                                      bRejectFurtherNonTrackedAdds : 1;                         // 0x007C(0x0004) (Transient)
	TArray<class UMissionObjectiveDefinition*>         CachedActiveMissionObjectives;                            // 0x0080(0x000C) (Transient, NeedCtorLink)
	TArray<class UMissionObjectiveDefinition*>         CachedBranchedMissionObjectives;                          // 0x008C(0x000C) (Transient, NeedCtorLink)
	TArray<class UMissionObjectiveDefinition*>         DisplayedActiveMissionObjectives;                         // 0x0098(0x000C) (Transient, NeedCtorLink)
	TArray<class UMissionObjectiveDefinition*>         DisplayedBranchedMissionObjectives;                       // 0x00A4(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        DisplayedActiveMissionObjectiveCounts;                    // 0x00B0(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        DisplayedBranchedMissionObjectiveCounts;                  // 0x00BC(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CachedMissionName;                                        // 0x00C8(0x000C) (Transient, NeedCtorLink)
	int                                                CachedMissionTimerSeconds;                                // 0x00D4(0x0004) (Transient)
	int                                                CachedMissionDefenseHealth;                               // 0x00D8(0x0004) (Transient)
	class UMissionObjectiveDefinition*                 CachedMissionDefenseObjective;                            // 0x00DC(0x0004) (Transient)
	class UMissionDefinition*                          CachedNonTrackedMission;                                  // 0x00E0(0x0004) (Transient)
	class UMissionObjectiveDefinition*                 CachedNonTrackedMissionObjective;                         // 0x00E4(0x0004) (Transient)
	float                                              NonTrackedMissionStartTime;                               // 0x00E8(0x0004) (Transient)
	float                                              NonTrackedMissionDuration;                                // 0x00EC(0x0004)
	float                                              MissionModuleTweenDuration;                               // 0x00F0(0x0004)
	struct FString                                     MissionTurnInString;                                      // 0x00F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionFailedString;                                      // 0x0100(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DefendString;                                             // 0x010C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TimerPausedString;                                        // 0x0118(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OrString;                                                 // 0x0124(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FMissionWidgetMessage>               MessageQueue;                                             // 0x0130(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMissionWidgetMessage>               ProcessedMessageQueue;                                    // 0x013C(0x000C) (Transient, NeedCtorLink)
	TArray<class UGFxObject*>                          ActiveFlyingCheckmarks;                                   // 0x0148(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDWidget_Missions");
		return ptr;
	}


	void ClearAllCheckmarks();
	void ClearNextCheckmark();
	int FindModuleNumForDisplayedObjective(class UMissionObjectiveDefinition* Objective);
	void DoMissionStatusFanfare(const struct FString& frame, class UMissionDefinition* MissionDef, bool bShowObjectiveFlourish, class UMissionObjectiveDefinition* MissionObjective);
	void SetDisplayedMission(class UMissionDefinition* MissionDef);
	void SendMissionWidgetMessage(struct FMissionWidgetMessage* Message);
	void RefreshMissionWidget();
	void extMissionModuleAnimFinished(const struct FString& AnimName, const struct FString& ModuleName);
	void ProcessMissionWidgetMessages(float DeltaTime);
	void UpdateActiveMission();
	void Update(float DeltaTime);
	void Deinit();
	void Init(class UWillowHUDGFxMovie* OwnerMovie);
};


// Class WillowGame.HUDWidget_Trading
// 0x0108 (0x007C - 0x0184)
class UHUDWidget_Trading : public UHUDWidget_Base
{
public:
	struct FString                                     TradePrompt_Send;                                         // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradePrompt_Accept;                                       // 0x0088(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeSentTo;                                              // 0x0094(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeReceivedFrom;                                        // 0x00A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled;                                            // 0x00AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeFinished;                                            // 0x00B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeDisabled;                                            // 0x00C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradingDisabled;                                          // 0x00D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_Busy;                                       // 0x00DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_OutOfRange;                                 // 0x00E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_SelfRefused;                                // 0x00F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_OtherRefused;                               // 0x0100(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_SelfWithdrew;                               // 0x010C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_OtherWithdrew;                              // 0x0118(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_SelfCanceled;                               // 0x0124(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeCanceled_OtherCanceled;                              // 0x0130(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeFinished_Won;                                        // 0x013C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeFinished_Lost;                                       // 0x0148(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeFinished_Draw;                                       // 0x0154(0x000C) (Const, Localized, NeedCtorLink)
	class UGFxObject*                                  InnerClip;                                                // 0x0160(0x0004) (Transient)
	class UGFxObject*                                  Line1Clip;                                                // 0x0164(0x0004) (Transient)
	class UGFxObject*                                  Line2Clip;                                                // 0x0168(0x0004) (Transient)
	class AWillowTradeManager*                         TradeManager;                                             // 0x016C(0x0004) (Transient)
	unsigned char                                      CachedStatus;                                             // 0x0170(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0171(0x0003) MISSED OFFSET
	class APlayerReplicationInfo*                      CachedPartnerPRI;                                         // 0x0174(0x0004) (Transient)
	unsigned long                                      bTipsShown : 1;                                           // 0x0178(0x0004) (Transient)
	float                                              ReasonMessageDuration;                                    // 0x017C(0x0004)
	float                                              LastReasonMessageTime;                                    // 0x0180(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDWidget_Trading");
		return ptr;
	}


	void TradeManagerShutDown(unsigned char Reason);
	void TradeManagerInitialized(class AWillowTradeManager* InTradeManager);
	void HideTips(bool bForceOff);
	void ShowTips();
	void Update(float DeltaTime);
	void Deinit();
	void Init(class UWillowHUDGFxMovie* OwnerMovie);
};


// Class WillowGame.HUDWidget_WorldSpace
// 0x0098 (0x007C - 0x0114)
class UHUDWidget_WorldSpace : public UHUDWidget_Base
{
public:
	TArray<struct FObjectiveIcon>                      ObjectiveIcons;                                           // 0x007C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FPlayerIcon>                         PlayerIcons;                                              // 0x0088(0x000C) (Transient, NeedCtorLink)
	TArray<struct FPlayerIcon>                         NPCAllyIcons;                                             // 0x0094(0x000C) (Transient, NeedCtorLink)
	class UWillowHUDGFxMovieDefinition*                HUDDef;                                                   // 0x00A0(0x0004) (Transient)
	class AWillowPlayerPawn*                           RelevantPlayerPawns[0x3];                                 // 0x00A4(0x0004) (Transient)
	int                                                NextRelevantPlayerPawnIndex;                              // 0x00B0(0x0004) (Transient)
	struct FString                                     CachedPlayerName[0x3];                                    // 0x00B4(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      bCachedPlayerState[0x3];                                  // 0x00D8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00DB(0x0001) MISSED OFFSET
	struct FString                                     CachedNPCAllyName[0x2];                                   // 0x00DC(0x000C) (Transient, NeedCtorLink)
	struct FVector2D                                   VVOrg;                                                    // 0x00F4(0x0008) (Transient)
	struct FVector2D                                   VVExt;                                                    // 0x00FC(0x0008) (Transient)
	class UGFxObject*                                  TopLevelClip;                                             // 0x0104(0x0004) (Transient)
	class UGFxObject*                                  MinimapWrapperClip;                                       // 0x0108(0x0004) (Transient)
	class UGFxObject*                                  MinimapClip;                                              // 0x010C(0x0004) (Transient)
	class UGFxObject*                                  ParentClip;                                               // 0x0110(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDWidget_WorldSpace");
		return ptr;
	}


	class APlayerReplicationInfo* GetPRIFor(class AWillowPlayerPawn* WPP);
	void NotifyOfPawnRelevance(class AWillowPlayerPawn* WPP);
	void UpdateNPCAllyIcons(float DeltaTime, class AWillowGameReplicationInfo* WGRI, class ULocalPlayer* LP, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float ViewFOV);
	void UpdatePlayerIcons(float DeltaTime, class AWillowGameReplicationInfo* WGRI, class ULocalPlayer* LP, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float ViewFOV);
	void UpdateObjectiveIcons(float DeltaTime, class AWillowGameReplicationInfo* WGRI, class ULocalPlayer* LP, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float ViewFOV);
	bool IsShowingObjective(int ObjectiveIndex);
	void SetVirtualViewport();
	void Update(float DeltaTime);
	void Deinit();
	void Init(class UWillowHUDGFxMovie* OwnerMovie);
};


// Class WillowGame.InventoryDataProviderElement
// 0x0008 (0x0078 - 0x0080)
class UInventoryDataProviderElement : public UGFxObject
{
public:
	unsigned char                                      Kind;                                                     // 0x0078(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	int                                                LightweightIdx;                                           // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryDataProviderElement");
		return ptr;
	}

};


// Class WillowGame.ItemCardGFxObject
// 0x0004 (0x0078 - 0x007C)
class UItemCardGFxObject : public UGFxObject
{
public:
	unsigned long                                      bIsVisible : 1;                                           // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemCardGFxObject");
		return ptr;
	}


	void SetVisible_(bool bVisible);
	void SetBackgroundStyle(const struct FString& Style);
	void __SetTopStat(int StatIndex, const struct FString& LabelText, const struct FString& ValueText, const struct FString& CompareArrow, const struct FString& AuxText, const struct FString& IconName);
	void __SetTitle(const struct FString& Manufacturer, const struct FString& Title, int Rarity, const struct FString& TypeIcon, const struct FString& ElementalIcon, bool bIsReadied);
	void SetCardUIStats(TArray<struct FTopStatData>* TopStats);
	void AdjustHeight();
	void SetHeight();
	void SetLevelRequirement(bool bHasRequirement, bool bMetRequirement, bool bAlreadyUsed, const struct FString& RequirementText);
	void ToggleCreditsSpinner(bool bVisible);
	void SetEridiumValue(int Amount);
	void SetValue(int Amount);
	void SetFunStats(const struct FString& FunStatsText);
	void SetTopStat(int StatIndex, const struct FString& LabelText, const struct FString& ValueText, unsigned char CompareArrow, const struct FString& AuxText, const struct FString& IconName);
	void SetColor(const struct FString& Manufacturer, const struct FString& Title, const struct FColor& newColor, const struct FString& TypeIcon, const struct FString& ElementalIcon, bool bIsReadied);
	void SetTitle(const struct FString& Manufacturer, const struct FString& Title, const struct FColor& Rarity, const struct FString& TypeIcon, const struct FString& ElementalIcon, bool bIsReadied);
	void SetItemCardEx(class AWillowPlayerController* WPC, const FScriptInterface& InventoryItem, class AWillowInventory* CompareAgainstInventoryItem, unsigned char CurrencyType, int OverrideValue);
	int GetPlayerLevel(class AWillowPlayerController* WPC);
	void SetItemCard(class AWillowPlayerController* WPC, const FScriptInterface& InventoryItem, class AWillowInventory* CompareAgainstInventoryItem, int OverrideValue);
	void Init();
	struct FColor GetCurrentRainbowColor();
	void UnregisterRainbowCardToHUD();
	void RegisterRainbowCardToHUD(const FScriptInterface& InventoryItem);
};


// Class WillowGame.ItemOfTheDayPanelGFxObject
// 0x000C (0x0078 - 0x0084)
class UItemOfTheDayPanelGFxObject : public UGFxObject
{
public:
	class UVendingMachineExGFxMovie*                   VendingMachineMovie;                                      // 0x0078(0x0004)
	class UTexture*                                    CellThumbnail;                                            // 0x007C(0x0004)
	class USwfMovie*                                   CustomMovieClip;                                          // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemOfTheDayPanelGFxObject");
		return ptr;
	}


	class UGFxObject* GetCellObject();
	void extOnIOTDPress();
	void extOnIOTDRollOut();
	void extOnIOTDRollOver();
	void SetCellStatus(bool bIsEmpty, bool bIsSoldOut);
	void __SetBackgroundClip(const struct FString& MoviePath);
	void SetBackgroundClip(class USwfMovie* MovieClip);
	void __SetBackground(const struct FString& Background);
	void SetBackground(unsigned char Background);
	void __SetRarityColor(int RarityColorInt);
	void SetRarityColor(const struct FColor& Rarity);
	void SetItemOfTheDayItem(class AWillowInventory* ItemOfTheDay);
	void SetSelected(bool bSelected);
	void SetCellData(int Width, int Height, int PlayerNumber);
	void SetTimeRemaining(const struct FString& TimeRemaining);
	void SetVisibility(bool bVisible);
	void __SetLocalizedStrings(const struct FString& Header, const struct FString& Caption);
	void SetLocalizedStrings(const struct FString& Header, const struct FString& Caption);
	void Cleanup();
	void InitLabels();
	void Init(class UVendingMachineExGFxMovie* InVendingMachineMovie);
};


// Class WillowGame.ItemPickupGFxDefinition
// 0x001C (0x00BC - 0x00D8)
class UItemPickupGFxDefinition : public UGFxMovieDefinition
{
public:
	class UMaterial*                                   MatSrc;                                                   // 0x00BC(0x0004) (Edit)
	class UParticleSystem*                             Particle;                                                 // 0x00C0(0x0004) (Edit)
	struct FName                                       ParticleMatParamName;                                     // 0x00C4(0x0008) (Edit)
	struct FName                                       MatTexParamName;                                          // 0x00CC(0x0008) (Edit)
	float                                              TallItemZOffsetPercentage;                                // 0x00D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPickupGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.MontageGFxObject
// 0x0028 (0x0078 - 0x00A0)
class UMontageGFxObject : public UGFxObject
{
public:
	class AWillowPlayerController*                     WPCOwner;                                                 // 0x0078(0x0004)
	class UCreditsGFxDefinition*                       CreditsDef;                                               // 0x007C(0x0004)
	struct FString                                     LinkageName;                                              // 0x0080(0x000C) (NeedCtorLink)
	int                                                MontageIdx;                                               // 0x008C(0x0004)
	unsigned long                                      bShouldShowImages : 1;                                    // 0x0090(0x0004)
	unsigned long                                      bMontageTexturesLoaded : 1;                               // 0x0090(0x0004) (Transient)
	TArray<class UTexture2D*>                          MontageTextures;                                          // 0x0094(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MontageGFxObject");
		return ptr;
	}


	void extFadeOutComplete();
	void extFadeInComplete();
	void FadeOut();
	void FadeIn();
	void StartNewTexture();
	bool StartNextTexture();
	void Close();
	void OnMontageTexturesLoaded();
	void Init(class UCreditsGFxDefinition* CreditsDefinition, const struct FString& TextureLinkageName);
	void SetShouldShowImages();
	void ClearMontageTextures();
	void AddMontageTextures();
};


// Class WillowGame.ScrollingListGFxObject
// 0x0000 (0x0078 - 0x0078)
class UScrollingListGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ScrollingListGFxObject");
		return ptr;
	}


	void SetSelectedIndex(int SelectedIndex);
	void ScrollToIndex(int ScrollToIndex);
	void Init();
};


// Class WillowGame.MultitypeScrollingListGFxObject
// 0x000C (0x0078 - 0x0084)
class UMultitypeScrollingListGFxObject : public UScrollingListGFxObject
{
public:
	FScriptInterface                                   ParentPanel;                                              // 0x0078(0x0008)
	unsigned long                                      bInitialInitComplete : 1;                                 // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MultitypeScrollingListGFxObject");
		return ptr;
	}


	void ContinueInitialInit();
	void extGameScroll(int Delta);
	class UGFxObject* getRendererAt(int Index);
	void SetEquippingState(bool bEquipping);
	void extSetRendererInfo(int DataIndex, int RendererType, int RendererIndex);
	void Init();
	void InitMultitype(const FScriptInterface& InParentPanel);
};


// Class WillowGame.SkillTreeGFxDefinition
// 0x029C (0x003C - 0x02D8)
class USkillTreeGFxDefinition : public UGBXDefinition
{
public:
	struct FString                                     SkillMovieClip;                                           // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ArtifactDialogMovieClip;                                  // 0x0048(0x000C) (Edit, NeedCtorLink)
	struct FString                                     IconOnName;                                               // 0x0054(0x000C) (Edit, NeedCtorLink)
	struct FString                                     IconOffName;                                              // 0x0060(0x000C) (Edit, NeedCtorLink)
	struct FString                                     IconHiddenName;                                           // 0x006C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     IncendiaryArtifactName;                                   // 0x0078(0x000C) (Edit, NeedCtorLink)
	struct FString                                     CorrosiveArtifactName;                                    // 0x0084(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ShockArtifactName;                                        // 0x0090(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ExplosiveArtifactName;                                    // 0x009C(0x000C) (Edit, NeedCtorLink)
	int                                                ArtifactListSize;                                         // 0x00A8(0x0004) (Edit)
	struct FString                                     SkillSelectedName;                                        // 0x00AC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillUnselectedName;                                      // 0x00B8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillDisabledName;                                        // 0x00C4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillEnabledName;                                         // 0x00D0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillPartialName;                                         // 0x00DC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillMaxedName;                                           // 0x00E8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillSpentName;                                           // 0x00F4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillRushShowName;                                        // 0x0100(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillRushHideName;                                        // 0x010C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillArtifactShowName;                                    // 0x0118(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillArtifactHideName;                                    // 0x0124(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillArtifactSelectionName;                               // 0x0130(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillArtifactIconName;                                    // 0x013C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillArtifactListItemName;                                // 0x0148(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionBackgroundUnlockedName;                        // 0x0154(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionBackgroundLockedName;                          // 0x0160(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionBackgroundFirstName;                           // 0x016C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionBackgroundSomeName;                            // 0x0178(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionBackgroundMaxedName;                           // 0x0184(0x000C) (Edit, NeedCtorLink)
	struct FString                                     KillSkillPrefix;                                          // 0x0190(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillPointsName;                                          // 0x019C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillPointsSpentVersusTotalName;                          // 0x01A8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillPointsRemainingName;                                 // 0x01B4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillPointSpentName;                                      // 0x01C0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillRushName;                                            // 0x01CC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionBackgroundName;                                // 0x01D8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     DescriptionName;                                          // 0x01E4(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillName;                                                // 0x01F0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     PortraitName;                                             // 0x01FC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     InfoBoxName;                                              // 0x0208(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ClassModPath;                                             // 0x0214(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ClassName;                                                // 0x0220(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ArtifactName;                                             // 0x022C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillFirstTreeMovieClip;                                  // 0x0238(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillLeftTreeMovieClip;                                   // 0x0244(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillMiddleTreeMovieClip;                                 // 0x0250(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SkillRightTreeMovieClip;                                  // 0x025C(0x000C) (Edit, NeedCtorLink)
	int                                                FirstBranchProgressionMaskSize;                           // 0x0268(0x0004) (Edit)
	int                                                SkillBranchProgressionMaskSize;                           // 0x026C(0x0004) (Edit)
	float                                              BranchProgressionMaskSpeed;                               // 0x0270(0x0004) (Edit)
	float                                              BranchProgressionMaskSpeedEnterScreen;                    // 0x0274(0x0004) (Edit)
	int                                                NumBranchesPerTree;                                       // 0x0278(0x0004) (Edit, Const)
	int                                                NumTiersPerBranch;                                        // 0x027C(0x0004) (Edit, Const)
	int                                                NumCellsPerTier;                                          // 0x0280(0x0004) (Edit, Const)
	struct FVector                                     SelectedLocation;                                         // 0x0284(0x000C) (Edit, Const)
	struct FVector                                     UnselectedOffset;                                         // 0x0290(0x000C) (Edit, Const)
	struct FVector                                     OverviewOffset;                                           // 0x029C(0x000C) (Edit, Const)
	struct FVector                                     OverviewGlobalOffset;                                     // 0x02A8(0x000C) (Edit, Const)
	float                                              TweenDuration;                                            // 0x02B4(0x0004) (Edit, Const)
	float                                              SelectedScale;                                            // 0x02B8(0x0004) (Edit, Const)
	float                                              UnselectedScale;                                          // 0x02BC(0x0004) (Edit, Const)
	float                                              OverviewScale;                                            // 0x02C0(0x0004) (Edit, Const)
	float                                              SelectedAlpha;                                            // 0x02C4(0x0004) (Edit, Const)
	float                                              UnselectedAlpha;                                          // 0x02C8(0x0004) (Edit, Const)
	float                                              OverviewAlpha;                                            // 0x02CC(0x0004) (Edit, Const)
	float                                              SelectedSkillZOffset;                                     // 0x02D0(0x0004) (Edit, Const)
	float                                              SelectedSkillZTweenTime;                                  // 0x02D4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillTreeGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.SkillTreeGFxObject
// 0x01A6 (0x0078 - 0x021E)
class USkillTreeGFxObject : public UGFxObject
{
public:
	struct FString                                     Artifacts;                                                // 0x0078(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoArtifactsDescription;                                   // 0x0084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ArtifactsDescription;                                     // 0x0090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EquipArtifact;                                            // 0x009C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoArtifactEquippedDescription;                            // 0x00A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoArtifactOption;                                         // 0x00B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AdrenalineRush;                                           // 0x00C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Level;                                                    // 0x00CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SkillModifierNextLevel;                                   // 0x00D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ClassModBonusString;                                      // 0x00E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SkillPoints_Sing;                                         // 0x00F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SkillPoints_Plur;                                         // 0x00FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ClassModUntrainedString;                                  // 0x0108(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SkillPointsRemainingString;                               // 0x0114(0x000C) (Const, Localized, NeedCtorLink)
	class USkillTreeGFxDefinition*                     MovieDef;                                                 // 0x0120(0x0004) (Transient)
	class UStatusMenuExGFxMovie*                       Movie;                                                    // 0x0124(0x0004) (Transient)
	class AWillowPlayerController*                     WPCOwner;                                                 // 0x0128(0x0004) (Transient)
	int                                                NumSkillPoints;                                           // 0x012C(0x0004) (Transient)
	float                                              ProgressionMaskSpeed;                                     // 0x0130(0x0004) (Transient)
	float                                              FinalFirstBranchProgressionMask;                          // 0x0134(0x0004) (Transient)
	float                                              CurrentFirstBranchProgressionMask;                        // 0x0138(0x0004) (Transient)
	float                                              FinalLeftBranchProgressionMask;                           // 0x013C(0x0004) (Transient)
	float                                              CurrentLeftBranchProgressionMask;                         // 0x0140(0x0004) (Transient)
	float                                              FinalMiddleBranchProgressionMask;                         // 0x0144(0x0004) (Transient)
	float                                              CurrentMiddleBranchProgressionMask;                       // 0x0148(0x0004) (Transient)
	float                                              FinalRightBranchProgressionMask;                          // 0x014C(0x0004) (Transient)
	float                                              CurrentRightBranchProgressionMask;                        // 0x0150(0x0004) (Transient)
	unsigned long                                      bCanPlayRushingHelpClip : 1;                              // 0x0154(0x0004) (Transient)
	unsigned long                                      bInstinctDialogOpen : 1;                                  // 0x0154(0x0004) (Transient)
	unsigned long                                      bArtifactDialogOpen : 1;                                  // 0x0154(0x0004) (Transient)
	unsigned long                                      bUsingLockedSkillNameColor : 1;                           // 0x0154(0x0004) (Transient)
	unsigned long                                      bOverviewMode : 1;                                        // 0x0154(0x0004) (Transient)
	int                                                EquippedArtifactIndex;                                    // 0x0158(0x0004) (Transient)
	TArray<struct Fartifact_datum>                     ArtifactList;                                             // 0x015C(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentArtifactIndex;                                     // 0x0168(0x0004) (Transient)
	struct FString                                     PreviousSkillNameColor;                                   // 0x016C(0x000C) (Transient, NeedCtorLink)
	struct FColor                                      SkillIntermediateGradeColor;                              // 0x0178(0x0004) (Config)
	struct FColor                                      SkillMaxGradeColor;                                       // 0x017C(0x0004) (Config)
	struct FColor                                      SkillLockedTextColor;                                     // 0x0180(0x0004) (Config)
	struct FString                                     SkillNextGradeModifierTextHTML;                           // 0x0184(0x000C) (Config, NeedCtorLink)
	struct FString                                     SkillLockedModifierTextHTML;                              // 0x0190(0x000C) (Config, NeedCtorLink)
	class USkillDefinition*                            CurrentSkill;                                             // 0x019C(0x0004) (Transient)
	class USkillDefinition*                            CurrentSkill_Rollover;                                    // 0x01A0(0x0004) (Transient)
	int                                                CellNavPref;                                              // 0x01A4(0x0004) (Transient)
	int                                                BranchNavPref;                                            // 0x01A8(0x0004) (Transient)
	int                                                OverrideBranchNum;                                        // 0x01AC(0x0004) (Transient)
	struct FString                                     Tooltips_SpendPoints;                                     // 0x01B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Tooltips_Overview;                                        // 0x01BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Tooltips_Cancel;                                          // 0x01C8(0x000C) (Const, Localized, NeedCtorLink)
	class UGFxObject*                                  InformationBox;                                           // 0x01D4(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x01D8(0x003C) UNKNOWN PROPERTY: MapProperty WillowGame.SkillTreeGFxObject.SkillDefinitionToUICell
	int                                                HACK_PrevBranchForClick;                                  // 0x0214(0x0004) (Transient)
	unsigned char                                      bSetProgressTree1;                                        // 0x0218(0x0001)
	unsigned char                                      bSetProgressTree2;                                        // 0x0219(0x0001)
	unsigned char                                      bSetProgressTree3;                                        // 0x021A(0x0001)
	unsigned char                                      bTree1Init;                                               // 0x021B(0x0001)
	unsigned char                                      bTree2Init;                                               // 0x021C(0x0001)
	unsigned char                                      bTree3Init;                                               // 0x021D(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillTreeGFxObject");
		return ptr;
	}


	void OnCellRolledOver(class USkillDefinition* CellSkill);
	void CellRolledOver(int BranchNum, int TierNum, int CellNum);
	void OnCellClicked(class USkillDefinition* CellSkill);
	void CellClicked(int BranchNum, int TierNum, int CellNum);
	class AWillowClassMod* GetPlayerClassMod();
	void Flash_UpdateArtifactSelection();
	void Flash_PopulateArtifactList();
	int BuildArtifactList(TArray<struct Fartifact_datum>* List);
	static struct FString GetSkillDescriptionForGrade(class USkillDefinition* SkillDef, int Grade, int GradeModifier, class AWillowPlayerController* PlayerOwner, bool bIncludeHTML);
	void SetSkillNameColorToUnlocked();
	void SetSkillNameColorToLocked();
	struct FString GetSkillNameColorPath();
	void Flash_SetSkillPointProperties_AS(int NewNumSkillPoints);
	void Flash_SetSkillPointProperties();
	void Flash_SetCharacter_AS(const struct FString& ClassModText, const struct FString& ClassName, const struct FString& PortraitPath);
	void Flash_SetCharacter();
	void EquipSelectedArtifact();
	void RequestRespec();
	void HandleArtifactChange(unsigned char ElementalSkillIndex, unsigned char UnequippedElementalSkillIndex);
	void HandleSkillTreeReset(int NewSkillPoints);
	void HandleSkillPointsChange(int NewSkillPoints);
	void PlaySpendFlourish(class USkillDefinition* SkillDef, int Grade);
	void HandleSkillGradeChange(class USkillDefinition* Skill, unsigned char NewSkillPoints, unsigned char Grade);
	void RequestSkillUpgrade();
	unsigned char CanUpgradeSkill();
	bool Nav_Back(int InPlayerIndex);
	bool ToggleOverviewMode(int InPlayerIndex);
	bool Reset(int InPlayerIndex);
	void HoverSkillCell(const struct FString& HoveredCell);
	bool Activate(int InPlayerIndex);
	void ArtifactSelect(int IdxSelected);
	void Nav_DownArtifact();
	void Nav_UpArtifact();
	void UpdateSkillIcon(class USkillDefinition* SkillDef, class AWillowClassMod* ClassMod);
	void UpdateAllSkillIcons_Branch(int DesiredBranchNumber);
	void UpdateAllSkillIcons();
	void SetSkillIconVisibility(int CurrentBranch);
	void UpdateInfoBox();
	void UpdateBranchLocations(bool bImmediate, unsigned char Dir);
	void UpdateBranchDepths();
	int GetEffectiveCurrentBranchNumber();
	void UpdateTooltips();
	void PostNav(class USkillDefinition* PreviousSkill, unsigned char Dir);
	class UGFxObject* GetHighlightClip(class USkillDefinition* SkillDef);
	class UGFxObject* GetCellClip(class USkillDefinition* SkillDef);
	bool GetUICell(class USkillDefinition* SkillDef, struct FSkillTreeUICell* OutCell);
	class USkillDefinition* Navigate(unsigned char Dir);
	bool Nav_Right(int InPlayerIndex);
	bool Nav_Left(int InPlayerIndex);
	bool Nav_Down(int InPlayerIndex, bool bPage);
	bool Nav_Up(int InPlayerIndex, bool bPage);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void extInitTree(int TreeNum, const struct FString& TreePath);
	void ClearCellMap();
	void HandleClose();
	void Init();
	void HandleOpen(class AWillowPlayerController* WPC, class UStatusMenuExGFxMovie* GFxMovie, class USkillTreeGFxDefinition* SkillDef);
	void CalculateBranchProgression();
	void Flash_SendInitialSkillData();
};


// Class WillowGame.StatusMenuMapGFxObject
// 0x022C (0x0078 - 0x02A4)
class UStatusMenuMapGFxObject : public UGFxObject
{
public:
	float                                              ViewBorder;                                               // 0x0078(0x0004) (Const)
	float                                              PanRate;                                                  // 0x007C(0x0004) (Const)
	struct FString                                     CompassIconFrames[0x11];                                  // 0x0080(0x000C) (Const, NeedCtorLink)
	class AWillowPlayerController*                     PlayerOwner;                                              // 0x014C(0x0004) (Transient)
	TArray<struct FMapObjectData>                      MapObjects;                                               // 0x0150(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	struct FMatrix                                     Transform;                                                // 0x0160(0x0040) (Transient)
	struct FVector2D                                   CoordScale;                                               // 0x01A0(0x0008) (Transient)
	struct FVector2D                                   ClipSize;                                                 // 0x01A8(0x0008) (Transient)
	struct FClipRect                                   MapClipRect;                                              // 0x01B0(0x0010) (Transient)
	struct FVector2D                                   ViewSize;                                                 // 0x01C0(0x0008) (Transient)
	struct FVector2D                                   ViewOffset;                                               // 0x01C8(0x0008) (Transient)
	struct FVector2D                                   DesiredCenter;                                            // 0x01D0(0x0008) (Transient)
	unsigned long                                      bSizesInitialized : 1;                                    // 0x01D8(0x0004) (Transient)
	unsigned long                                      bMapFrameDirty : 1;                                       // 0x01D8(0x0004) (Transient)
	unsigned long                                      bDesiredCenterDirty : 1;                                  // 0x01D8(0x0004) (Transient)
	unsigned long                                      bCenterDirty : 1;                                         // 0x01D8(0x0004) (Transient)
	unsigned long                                      bPlayersDirty : 1;                                        // 0x01D8(0x0004) (Transient)
	float                                              PanScalingFactor;                                         // 0x01DC(0x0004) (Transient)
	float                                              CurrScaleVal;                                             // 0x01E0(0x0004) (Transient)
	float                                              ZoomSpeedFactor;                                          // 0x01E4(0x0004) (Config)
	float                                              MaxScale;                                                 // 0x01E8(0x0004) (Config)
	float                                              MinScale;                                                 // 0x01EC(0x0004) (Config)
	class AWillowTacticalMapVolume*                    TacticalMapVolume;                                        // 0x01F0(0x0004) (Transient)
	float                                              UnrealUnitsPerPixel;                                      // 0x01F4(0x0004) (Transient)
	class UGFxObject*                                  MapPlaceholderClip;                                       // 0x01F8(0x0004) (Transient)
	class UGFxObject*                                  MaskClip;                                                 // 0x01FC(0x0004) (Transient)
	class UGFxObject*                                  InfoBoxClip;                                              // 0x0200(0x0004) (Transient)
	int                                                InfoBoxIconIndex;                                         // 0x0204(0x0004) (Transient)
	float                                              InfoBoxDistance;                                          // 0x0208(0x0004) (Config)
	float                                              PanIncrement;                                             // 0x020C(0x0004) (Config)
	float                                              PanZoomFactor;                                            // 0x0210(0x0004) (Config)
	struct FVector2D                                   CursorPos;                                                // 0x0214(0x0008) (Transient)
	int                                                MapYawOffset;                                             // 0x021C(0x0004) (Transient)
	struct FString                                     AndMore;                                                  // 0x0220(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CustomObjectiveToggle;                                    // 0x022C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_Player;                                             // 0x0238(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_CustomObjective;                                    // 0x0244(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_MissionAvailable;                                   // 0x0250(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_MissionComplete;                                    // 0x025C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_Vehicle;                                            // 0x0268(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_Objective;                                          // 0x0274(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_AreaObjective;                                      // 0x0280(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_InteractiveObject;                                  // 0x028C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionTurnIn;                                            // 0x0298(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusMenuMapGFxObject");
		return ptr;
	}


	void ToggleFogOfWarBlob(const struct FString& BlobName, bool bEnabled);
	void ToggleLegend();
	void SetPlayerInfo(int PlayerIndex, const struct FString& PlayerInfo);
	void HidePlayerInfo(int PlayerIndex);
	void SetMapScale(float MapScale);
	void SetMapMovie(const struct FString& MapMoviePath);
	void FindLandmarks();
	void PanVert(float Dir);
	void PanHorz(float Dir);
	float GetZoomScalingFactor();
	void ApplyAnalogScale(float ScaleVal);
	bool AnalogScale(float ScaleVal);
	float GetDeltaTimeScalar();
	void ResetMapObjects();
	void OnClose();
	void PostMapMovieLoad();
	void Init(class AWillowPlayerController* MyOwner);
	void UpdateInfoBox();
	void QuickAccessInit();
	void PlaceCustomObjective();
	void RemoveCustomObjective();
	void AddCustomObjective();
	int GetCustomObjectiveIndex();
	bool HasCustomObjective();
	float GetUnrealMapScale();
	void FindObjects();
	void FindPlayers();
	void UpdateObjects(bool bStaticUpdate);
	void ApplyFlash();
	void SetMapHeader();
	void InitMapFrameVars();
};


// Class WillowGame.WillowGFxColiseumOverlayDefinition
// 0x002C (0x00BC - 0x00E8)
class UWillowGFxColiseumOverlayDefinition : public UGFxMovieDefinition
{
public:
	class UAttributeDefinition*                        CurrentRoundCounter;                                      // 0x00BC(0x0004) (Edit)
	class UAttributeDefinition*                        CurrentWaveCounter;                                       // 0x00C0(0x0004) (Edit)
	class UAttributeDefinition*                        MaxRoundCounter;                                          // 0x00C4(0x0004) (Edit)
	class UAttributeInitializationDefinition*          HealthModifier;                                           // 0x00C8(0x0004) (Edit)
	class UAttributeInitializationDefinition*          DamageModifier;                                           // 0x00CC(0x0004) (Edit)
	class UAttributeInitializationDefinition*          ShieldModifier;                                           // 0x00D0(0x0004) (Edit)
	TArray<struct FString>                             WaveLabels;                                               // 0x00D4(0x000C) (Edit, Const, Localized, NeedCtorLink)
	float                                              RefreshInterval;                                          // 0x00E0(0x0004) (Edit)
	class UColiseumRuleDefinition*                     AllRulesDefinition;                                       // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxColiseumOverlayDefinition");
		return ptr;
	}


	struct FString EvaluateBalanceFormula(class UAttributeInitializationDefinition* InDef, float Multiplier);
};


// Class WillowGame.WillowGFxMenuHelperSaveGame
// 0x0058 (0x003C - 0x0094)
class UWillowGFxMenuHelperSaveGame : public UObject
{
public:
	class UWillowGFxDialogBox*                         LoadingListDlg;                                           // 0x003C(0x0004) (Transient)
	class UWillowGFxDialogBox*                         DeletingDlg;                                              // 0x0040(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ValidatingDlg;                                            // 0x0044(0x0004) (Transient)
	TArray<struct FPlayerSaveData>                     SaveGames;                                                // 0x0048(0x000C) (Transient, NeedCtorLink)
	int                                                PlayerIndex;                                              // 0x0054(0x0004) (Transient)
	class UWillowGFxMovie*                             MenuOwner;                                                // 0x0058(0x0004) (Transient)
	int                                                CurrentSelection;                                         // 0x005C(0x0004) (Transient)
	unsigned long                                      bValidateOnly : 1;                                        // 0x0060(0x0004) (Transient)
	unsigned long                                      bIsEnumerating : 1;                                       // 0x0060(0x0004) (Transient)
	unsigned long                                      bShouldLoadDefaultProfileAfterDelete : 1;                 // 0x0060(0x0004) (Transient)
	struct FScriptDelegate                             __OnDeleted__Delegate;                                    // 0x0064(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSaveGamesUpdated__Delegate;                           // 0x0070(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeleteStarted__Delegate;                              // 0x007C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeleteEnded__Delegate;                                // 0x0088(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMenuHelperSaveGame");
		return ptr;
	}


	void CheckForPS3SaveList();
	static bool CheckForPS3LoadGame(struct FLoadInfo* outLI);
	static void BeginPS3LoadGame(int ControllerId, int PS3UserNum);
	void OnDeleteComplete(bool bWasSuccessful);
	int GetSaveIdFromFilePath(const struct FString& FilePath);
	int IntFromHex(const struct FString& HexStr);
	bool ConfirmSaveDelete_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void FinishSaveGameUpdate();
	void SortResults(TArray<struct FPlayerSaveData>* Results);
	void OnSaveGameListLoadComplete(bool bWasSuccessful);
	void GetSaveList(TArray<struct FString> filenames);
	void GetSaveListComplete(bool bWasSuccessful);
	void OnSaveGameLoadComplete(bool bWasSuccessful);
	void LoadSelectedCharacter(bool bValidated);
	void OnValidationComplete(bool bWasSuccessful);
	TArray<struct FString> GetSaveGames();
	void OnLoadingStorageDeviceChanged(bool bIsValid, class UWillowGFxDialogBox* Dlg);
	void ShowBlockingLoadingDialog();
	void BeginGetSaveList(bool bForceReload);
	void EmptyResults();
	void EmptyContent();
	void OnDeleteStorageDeviceChanged(bool bIsValid, class UWillowGFxDialogBox* Dlg);
	void Delete(int SelectionIndex);
	void Activate(int SelectionIndex);
	void AbortRead();
	void SetOwner(class UWillowGFxMovie* InMenuOwner, int InPlayerIndex);
	void Init(class UWillowGFxMovie* InMenuOwner, int InPlayerIndex);
	void OnDeleteEnded(bool bWasDeleted);
	void OnDeleteStarted();
	void OnSaveGamesUpdated(int InPlayerIndex);
	void OnDeleted(int InPlayerIndex, bool bWasSuccessful);
};


// Class WillowGame.WillowGFxMovie
// 0x0010 (0x0254 - 0x0264)
class UWillowGFxMovie : public UGearboxGFxMovie
{
public:
	unsigned long                                      bAutoCloseHUD : 1;                                        // 0x0254(0x0004) (Const)
	unsigned long                                      bAutoCloseAll : 1;                                        // 0x0254(0x0004) (Const)
	int                                                DefaultRTTSize_PC;                                        // 0x0258(0x0004) (Config)
	int                                                DefaultRTTSize_Console;                                   // 0x025C(0x0004) (Config)
	class AWillowPlayerController*                     WPCOwner;                                                 // 0x0260(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMovie");
		return ptr;
	}


	static int GetQuadrantForControllerId(int ControllerId);
	void extConditionalBeginSway(const struct FString& ClipPath);
	void GetRecommendedRTTSizesFor(unsigned char TargetType, int* TexWidth, int* TexHeight, int* CellWidth, int* CellHeight);
	class UTexture* GetRecommendedThumbnail(unsigned char UpdateType, unsigned char TargetType, const struct FName& _tag);
	void FreeGFxThumbnails();
	void FreeGFxThumbnail(class UTexture* Tex);
	class UTexture* GetGFxThumbnail(int TextureSizeX, int TextureSizeY, unsigned char UpdateType, int SizeX, int SizeY, const struct FName& _tag);
	struct FString ResolveMission(int MissionNumber);
	static bool IsPresenceContextMatch(const struct FOnlineFriend& Friend, const struct FString& ContextKey);
	static void GetFriendCharacterClassAndLevel(const struct FOnlineFriend& Friend, struct FString* CharacterClassPath, int* Level);
	static void GetFriendLocation(const struct FOnlineFriend& Friend, int* PlayThrough, struct FString* Mission);
	static unsigned char GetInviteType(class UOnlineGameSettings* GameSettings);
	static unsigned char GetNetworkType(class UOnlineGameSettings* GameSettings);
	static int GetCappedDisplayCurrencyAmount(unsigned char FormOfCurrency, int Amount);
	static struct FString GFxColoredText(bool bAppendNewline, struct FColor* C, struct FString* S);
	void ConditionalLoadGame(const struct FLoadInfo& LI, int PlayerIndex);
	void NotifyLoadGameStarted();
	bool DoDeviceSelection(class AWillowPlayerController* WPC);
	FScriptInterface GetGameInterface();
	void ShowGamerCardUI(int ControllerId, struct FUniqueNetId* PlayerUniqueId);
	void ShowLivePartyUI();
	void ShowAchievementsUI();
	int CheckControllerStatus(int ControllerId, unsigned char MinStatus);
	void FocusOn(class UGFxObject* Thing);
	unsigned char GetControllerId(int PlayerIndex);
	int GetInputPlayerIndex(int ControllerId);
	class AWillowPlayerController* GetWillowOwner();
	static bool Movie_IsPlaying(const struct FString& MovieFileName);
	static void Movie_Stop(float fDelaySeconds, bool bWait);
	static void Movie_Play(const struct FString& MovieFileName, bool bIsStreamed);
	bool LocText(const struct FString& Section, const struct FString& File, struct FString* Key);
	struct FString GetFallbackLocSection();
	struct FString GetFallbackLocFile();
	static class UAkEvent* LookupFallbackAkEventFromGlobalsDefinition(const struct FName& UIEvent);
	void UpdateHUDVisibility(class AWillowPlayerController* _WPCOwner, bool bShowHUD);
	void OnClose();
	bool Start(bool StartPaused);
	void CleanupDestroyedMovies();
	void SingleArgInvokeSF(const struct FString& Command, const struct FString& Arg);
};


// Class WillowGame.GearboxAccountGFxMovie
// 0x0050 (0x0264 - 0x02B4)
class UGearboxAccountGFxMovie : public UWillowGFxMovie
{
public:
	class UGearboxAccountGFxObject*                    GearboxAccountObj;                                        // 0x0264(0x0004) (Transient)
	TArray<struct FString>                             ScreenStack;                                              // 0x0268(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CurrentAgeString;                                         // 0x0274(0x000C) (Transient, NeedCtorLink)
	int                                                authenticationAttempts;                                   // 0x0280(0x0004) (Transient)
	unsigned long                                      bIsFirstWelcome : 1;                                      // 0x0284(0x0004) (Transient)
	unsigned long                                      bCtrl : 1;                                                // 0x0284(0x0004) (Transient)
	unsigned long                                      bHasSeenOffers : 1;                                       // 0x0284(0x0004) (Transient)
	int                                                SparkInteractionWaitInSeconds;                            // 0x0288(0x0004) (Transient)
	int                                                NextSparkInteractionTime;                                 // 0x028C(0x0004) (Transient)
	class UWillowPauseTicker*                          SparkTicker;                                              // 0x0290(0x0004) (Transient)
	int                                                OfferCount;                                               // 0x0294(0x0004) (Transient)
	int                                                DefaultInitTime;                                          // 0x0298(0x0004) (Transient)
	int                                                MinInitTime;                                              // 0x029C(0x0004) (Transient)
	int                                                MaxInitTime;                                              // 0x02A0(0x0004) (Transient)
	class UWillowPauseTicker*                          InitTicker;                                               // 0x02A4(0x0004) (Transient)
	struct FScriptDelegate                             __OnConsoleInputComplete__Delegate;                       // 0x02A8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GearboxAccountGFxMovie");
		return ptr;
	}


	bool IsSparkTimerActive(const struct FName& FuncName);
	void ClearSparkTimer(const struct FName& FuncName);
	void SetSparkTimer(float Rate, bool bLoop, const struct FName& FuncName);
	bool CanRunSparkInteraction(const struct FName& FuncName);
	struct FString GetShiftMenuTextString(const struct FString& Key);
	void DelayNextSparkInteraction();
	void UpdateLegal();
	void extRequestCurrentOffers();
	void extRequestConsoleCodeEntry();
	void extRequestConfigureSignUpAdditionalTextMessage(const struct FString& MessagePath);
	void extRequestConfigureAdditionalBenefitsMessage(const struct FString& MessagePath);
	void extGearboxAccountOnLoad(const struct FString& TargetPath);
	void DisplaySupportId();
	void TryPasteKeyCode();
	void PopulateOffers();
	void OnEntitlementsUpdated(class UGearboxAccountData* GearboxAccount);
	void PerformRedeemCode();
	void OnRedeemCodeButtonClick(class UGFxObject* EventObj);
	void OnAgeGateConfirmAgeButtonClick(class UGFxObject* EventObj);
	void PerformSignUp();
	void OnSignUpScreenSignUpButtonClick(class UGFxObject* EventObj);
	void OnEULAScreenAcceptButtonClick(class UGFxObject* EventObj);
	void PerformResetPassword();
	void OnResetPasswordScreenResetPasswordButtonClick(class UGFxObject* EventObj);
	void OnSignInScreenResetPasswordButtonClick(class UGFxObject* EventObj);
	void PerformSignIn();
	void OnSignInScreenSignInButtonClick(class UGFxObject* EventObj);
	void OnGetUserAgeGroup(unsigned char LocalUserNum, unsigned char UserAgeGroup);
	void OnWelcomeScreenSignUpButtonClick(class UGFxObject* EventObj);
	void OnWelcomeScreenSignInButtonClick(class UGFxObject* EventObj);
	void OnConfirmPasswordButtonClick(class UGFxObject* EventObj);
	void OnPasswordButtonClick(class UGFxObject* EventObj);
	void OnEmailButtonClick(class UGFxObject* EventObj);
	void OnBackButtonClick(class UGFxObject* EventObj);
	int IsConsole();
	bool IsSteamworksInitialized();
	int IsSignedIn();
	int IsAuthenticated();
	int IsFirstWelcome();
	void AttachFunctions();
	void OnEmailOrPasswordEntryComplete(bool bSuccessful);
	void OnRedeemCodeEntryComplete(bool bSuccessful);
	void OnAgeYearEntryComplete(bool bSuccessful);
	void OnAgeDayEntryComplete(bool bSuccessful);
	void OnAgeMonthEntryComplete(bool bSuccessful);
	void OnConsoleCodeEntryComplete(bool bSuccessful);
	void OnConfirmPasswordInputComplete(bool bSuccessful);
	void OnPasswordInputComplete(bool bSuccessful);
	void OnEmailInputComplete(bool bSuccessful);
	void ConsolePlayerInput(const struct FScriptDelegate& OnInputCompleteDelegate, const struct FString& TitleText, const struct FString& DescriptionText, unsigned char KeyboardType, int MaxLength);
	bool ValidateConfirmPassword();
	bool ValidatePassword();
	bool ValidateEmail();
	bool ValidateAge(int Month, int Day, int Year);
	void UpdateTooltips();
	void UpdateSignInStatus();
	void UpdatePlayerName();
	void ReturnToWelcomeScreen();
	bool PopScreen();
	void PushScreen(const struct FString& Screen);
	void HandleBack();
	bool OnCodeRedemptionSuccessClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void HandleCodeRedeemed(unsigned char Result, const struct FString& CustomTitle, const struct FString& CustomBody);
	void HandleResetPassword(unsigned char Result);
	void HandleAccountSignUp(unsigned char Result);
	void HandleAgeGate(unsigned char Result);
	void HandleAccountSignIn(unsigned char Result);
	bool HandleInitializedTimeoutClicked(class UWillowGFxDialogBox* DialogBox, int ControllerId);
	void HandleInitializedTimeout();
	void HandleInitialized(unsigned char InitializedResult);
	void OnClose();
	void extConfigureForViewOffers();
	void ResetSparkAndHideMovie();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnConsoleInputComplete(bool bUserCancelled);
	struct FString GetRegion();
	bool IsKeyValid(const struct FString& Key);
	void GetCurrentDate(int* Month, int* Day, int* Year);
};


// Class WillowGame.HashDisplayGFxMovie
// 0x0070 (0x0264 - 0x02D4)
class UHashDisplayGFxMovie : public UWillowGFxMovie
{
public:
	class AWillowInventoryManager*                     WInvMgr;                                                  // 0x0264(0x0004)
	class UHashDisplayGFxDefinition*                   HashDisplayDef;                                           // 0x0268(0x0004)
	class UGFxTextListContainer*                       LeftSideTextList;                                         // 0x026C(0x0004)
	class UGearboxRenderTextureManager*                RTM;                                                      // 0x0270(0x0004)
	class UTexture*                                    Card1Tex;                                                 // 0x0274(0x0004)
	class UMeshComponent*                              Card1Mesh;                                                // 0x0278(0x0004) (ExportObject, Component, EditInline)
	TArray<struct FSortFilterConfiguration>            SortConfigurations;                                       // 0x027C(0x000C) (NeedCtorLink)
	int                                                LeftSideSortConfigIndex;                                  // 0x0288(0x0004)
	TArray<struct FString>                             UsedInvTypes;                                             // 0x028C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             UsedManufacturers;                                        // 0x0298(0x000C) (NeedCtorLink)
	TArray<struct FString>                             UsedWeaponTypes;                                          // 0x02A4(0x000C) (NeedCtorLink)
	TArray<struct FString>                             EquippedLabels;                                           // 0x02B0(0x000C) (NeedCtorLink)
	struct FString                                     EmptySlotText;                                            // 0x02BC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnStatefulInputKey__Delegate;                           // 0x02C8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HashDisplayGFxMovie");
		return ptr;
	}


	void ConfigureForPlayer(float ControllerId);
	void FadePopup_AS();
	void ShowPopup_AS(const struct FString& PopupText, const struct FString& PopupTitle);
	void ShowPopup(const struct FString& PopupText, const struct FString& PopupTitle);
	void SetAmmoCount(const struct FString& FlashString, class UResourceDefinition* ResourceDef);
	void SetAllAmmoCounts();
	void ToggleSort(unsigned char Direction);
	void UpdateCardPanelWithCurrentActiveListEntry();
	void UpdateCardPanel(int CardIndex, class AWillowInventory* MainThing, class AWillowInventory* OtherThing);
	struct FString GetHashDisplayStringForItem(const struct FItemDefinitionData& ItemDefData);
	struct FString GetHashDisplayStringForWeapon(const struct FWeaponDefinitionData& WeapDefData);
	void MoveHighlightBar(unsigned char Dir);
	void SortContainer(class UGFxTextListContainer* Container);
	void SetupContainerWithData(class UGFxTextListContainer* Container, TArray<class AWillowInventory*>* Things);
	void StartClosing();
	void extUpdateLeftListSize(int NewSize);
	void extPopupFading();
	void SetCredits_Wrapper(int Credits);
	void SetCredits(int Credits);
	void extSetupScreen();
	void HandleMove(const struct FName& ukey, unsigned char uevent);
	void PopupStateInputKey(const struct FName& ukey, unsigned char uevent);
	void NormalStateInputKey(const struct FName& ukey, unsigned char uevent);
	bool MainInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnClose();
	bool Start(bool StartPaused);
	void OnStatefulInputKey(const struct FName& ukey, unsigned char uevent);
};


// Class WillowGame.ItemPickupGFxMovie
// 0x005C (0x0264 - 0x02C0)
class UItemPickupGFxMovie : public UWillowGFxMovie
{
public:
	class UMaterial*                                   MatSrc;                                                   // 0x0264(0x0004) (Edit)
	class UParticleSystem*                             Particle;                                                 // 0x0268(0x0004) (Edit)
	struct FName                                       ParticleMatParamName;                                     // 0x026C(0x0008) (Edit)
	struct FName                                       MatTexParamName;                                          // 0x0274(0x0008) (Edit)
	float                                              TallItemZOffsetPercentage;                                // 0x027C(0x0004) (Edit)
	class AWillowHUD*                                  MyHUDOwner;                                               // 0x0280(0x0004) (Transient)
	class UParticleSystemComponent*                    MyPSC;                                                    // 0x0284(0x0004) (ExportObject, Transient, Component, EditInline)
	class UMaterialInstanceConstant*                   MyMati;                                                   // 0x0288(0x0004) (Transient)
	class UTextureRenderTarget2D*                      MyRenderTexture;                                          // 0x028C(0x0004) (Transient)
	class UTexture*                                    PickupTex;                                                // 0x0290(0x0004) (Transient)
	class UMeshComponent*                              PickupMesh;                                               // 0x0294(0x0004) (ExportObject, Transient, Component, EditInline)
	class AWillowInventory*                            CompareAgainstThing;                                      // 0x0298(0x0004) (Transient)
	unsigned long                                      bReadyToDisplay : 1;                                      // 0x029C(0x0004) (Transient)
	unsigned long                                      bShouldGetCompareAgainstThing : 1;                        // 0x029C(0x0004) (Transient)
	int                                                SplitIndex;                                               // 0x02A0(0x0004) (Transient)
	struct FString                                     WeapTexName;                                              // 0x02A4(0x000C) (Transient, NeedCtorLink)
	float                                              ItemCardHeight;                                           // 0x02B0(0x0004) (Transient)
	struct FScriptDelegate                             __OnItemCardHeightCalculatedHandler__Delegate;            // 0x02B4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemPickupGFxMovie");
		return ptr;
	}


	void InitFromDefinition();
	void EnableThumbnail();
	void extOnItemCardHeightCalculated(float NewHeight);
	void extReadyForInventoryInfo(const struct FString& Path);
	void UpdateCompareAgainstThing();
	class AWillowInventory* GetCompareAgainstThing();
	void Show(bool bShow);
	void InitializeFrom(class UGearboxGFxMovie* SrcMovie);
	void CreateBackupRenderTarget();
	void SetOnItemCardHeightCalculatedHandler(class UGFxObject* Context, const struct FScriptDelegate& F);
	void OnClose();
	bool Start(bool StartPaused);
	void OnItemCardHeightCalculatedHandler(float NewHeight);
};


// Class WillowGame.OnlineMessageGFxMovie
// 0x0014 (0x0264 - 0x0278)
class UOnlineMessageGFxMovie : public UWillowGFxMovie
{
public:
	class UGFxObject*                                  BlockingMessageClip;                                      // 0x0264(0x0004) (Transient)
	class UGFxObject*                                  NonBlockingMessageClip;                                   // 0x0268(0x0004) (Transient)
	struct FString                                     BlockingSubtitle;                                         // 0x026C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("OnlineMessageGFxMovie");
		return ptr;
	}


	void extOnHideBegin(class UGFxObject* Clip);
	void extOnlineMessageOnLoad(const struct FString& blockingPath, const struct FString& nonBlockingPath);
	void UpdateAspectRatio();
	void HACK_DontActuallyBlock();
	void SetBlocking(bool bBlocking);
	bool IsBlocking();
	void DisplayMessageInternal(const struct FString& Message, bool bShowBusyIndicator);
	void HideBlocking();
	void Hide();
	void AppendSubtitle(const struct FString& Subtitle, struct FString* Message);
	void DisplayMessageAndSubtitle(const struct FString& Message, const struct FString& Subtitle);
	void DisplayMessage(const struct FString& Message);
	void DisplayBlockingMessage(const struct FString& Message);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.TextChatGFxMovie
// 0x0004 (0x0264 - 0x0268)
class UTextChatGFxMovie : public UWillowGFxMovie
{
public:
	class UGFxObject*                                  ChatObj;                                                  // 0x0264(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TextChatGFxMovie");
		return ptr;
	}


	void extTextChatOnLoad(const struct FString& TargetPath);
	void AddChatMessageInternal(const struct FString& PlayerName, const struct FString& msg);
	bool HandleTextChatInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	struct FString GetChatObjText();
	void StopTextChatInternal();
	void StartTextChatInternal();
	struct FString GetTimestampString(const struct FString& TimeFormat);
	void AddChatMessage(class APlayerReplicationInfo* PRI, const struct FString& msg);
	void StartTextChat();
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.WillowGFxDialogBox
// 0x0090 (0x0264 - 0x02F4)
class UWillowGFxDialogBox : public UWillowGFxMovie
{
public:
	TArray<struct FDialogBoxLayout>                    Layouts;                                                  // 0x0264(0x000C) (Const, NeedCtorLink)
	TArray<struct FDialogBoxButton>                    Buttons;                                                  // 0x0270(0x000C) (Transient, NeedCtorLink)
	struct FString                                     DlgCaptionMarkup;                                         // 0x027C(0x000C) (Transient, NeedCtorLink)
	struct FString                                     DlgTextMarkup;                                            // 0x0288(0x000C) (Transient, NeedCtorLink)
	struct FName                                       CancelButtonTag;                                          // 0x0294(0x0008) (Transient)
	struct FName                                       DialogResult;                                             // 0x029C(0x0008) (Transient)
	int                                                CurrentSelection;                                         // 0x02A4(0x0004) (Transient)
	struct FString                                     AutoLocFile;                                              // 0x02A8(0x000C) (Transient, NeedCtorLink)
	struct FString                                     AutoLocSection;                                           // 0x02B4(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bAutoLocEnabled : 1;                                      // 0x02C0(0x0004) (Transient)
	unsigned long                                      bHasTips : 1;                                             // 0x02C0(0x0004) (Transient)
	unsigned long                                      bAllowNonOwnerInput : 1;                                  // 0x02C0(0x0004) (Transient)
	unsigned long                                      bNoCancel : 1;                                            // 0x02C0(0x0004) (Transient)
	struct FString                                     DefaultTooltips;                                          // 0x02C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __OnStorageDeviceChanged__Delegate;                       // 0x02D0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnButtonClicked__Delegate;                              // 0x02DC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnHandleInputKey__Delegate;                             // 0x02E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxDialogBox");
		return ptr;
	}


	void SetViewScaleMode(unsigned char SM);
	struct FString GetFallbackLocSection();
	struct FString GetFallbackLocFile();
	void SetButtonCaption(int ButtonIndex, const struct FString& NewCaption);
	void SetQuadrant(unsigned char ControllerId);
	void SetAllowNonOwnerInput(bool InAllowNonOwnerInput);
	void StorageDeviceChanged(unsigned char ControllerId, bool bIsValid);
	void SetTooltips(const struct FString& TooltipText);
	void ShowTooltips(bool bShow);
	class UWillowGFxDialogBox* DisplayBlockingBox(const struct FString& File, const struct FString& Section);
	void DisplayCustomYesNoBox(const struct FString& CaptionFile, const struct FString& CaptionSection, const struct FString& CaptionKey, const struct FString& PromptFile, const struct FString& PromptSection, const struct FString& PromptKey, const struct FScriptDelegate& OnClicked);
	void DisplayYesNoBox(const struct FString& File, const struct FString& Section, const struct FScriptDelegate& OnClicked, const struct FString& CaptionPrefix);
	class UWillowGFxDialogBox* DisplayOkBoxTextFromSpark(const struct FString& File, const struct FString& Section, const struct FScriptDelegate& OnClicked, const struct FString& CustomCaption, const struct FString& CustomPrompt);
	class UWillowGFxDialogBox* DisplayOkBox(const struct FString& File, const struct FString& Section, const struct FScriptDelegate& OnClicked);
	void ApplySelection();
	void OnWidgetClicked(int ButtonIndex, int ControllerId);
	void OnWidgetFocused(int ButtonIndex);
	void OnWidget4Clicked(const struct FEventData& Data);
	void OnWidget3Clicked(const struct FEventData& Data);
	void OnWidget2Clicked(const struct FEventData& Data);
	void OnWidget1Clicked(const struct FEventData& Data);
	void OnWidget0Clicked(const struct FEventData& Data);
	void OnWidget4Focused(const struct FEventData& Data);
	void OnWidget3Focused(const struct FEventData& Data);
	void OnWidget2Focused(const struct FEventData& Data);
	void OnWidget1Focused(const struct FEventData& Data);
	void OnWidget0Focused(const struct FEventData& Data);
	void AddEventListenersForWidget(class UGFxClikWidget* Widget, int ButtonIndex);
	void ApplyFlashButtons();
	int GetWidgetIndex(int LogicalIndex);
	int GetLogicalIndex(int WidgetIndex);
	void ApplyFlashSelection();
	void ApplyFlashText();
	void ApplyLayout();
	void SetDefaultButton(const struct FName& ButtonTag, bool bSetCancelButton);
	void ReplaceDialogCaption(const struct FString& Replace, const struct FString& With);
	void ReplaceDialogText(const struct FString& Replace, const struct FString& With);
	bool SetLayout(const struct FName& LayoutTag);
	bool SetButtonTip(const struct FName& ButtonTag, const struct FString& TipText);
	bool SetButtonCallback(const struct FName& ButtonTag, const struct FScriptDelegate& OnClicked);
	bool AutoAppendButton(const struct FName& ButtonTag, const struct FScriptDelegate& OnClicked);
	bool AutoLoc(struct FString* Key);
	void AutoLocEnablePrompt(const struct FString& File, const struct FString& Section, const struct FString& Key);
	void AutoLocEnableCaption(const struct FString& File, const struct FString& Section, const struct FString& Key);
	void AutoLocEnable(const struct FString& File, const struct FString& Section);
	bool AppendButton(const struct FName& ButtonTag, const struct FString& Caption, const struct FString& TipText, const struct FScriptDelegate& OnClicked);
	void ClearButtons();
	void SetText(const struct FString& CaptionMarkup, const struct FString& TextMarkup);
	void Accepted(int ControllerId);
	void Cancelled(int ControllerId);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnClose();
	bool Start(bool StartPaused);
	bool OnHandleInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool OnButtonClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void OnStorageDeviceChanged(bool bIsValid, class UWillowGFxDialogBox* Dlg);
};


// Class WillowGame.WillowGFxMovie3D
// 0x012C (0x0264 - 0x0390)
class UWillowGFxMovie3D : public UWillowGFxMovie
{
public:
	class UWillowGFxMovie3DDefinition*                 My3DDefinition;                                           // 0x0264(0x0004)
	unsigned long                                      bFullscreenMovie : 1;                                     // 0x0268(0x0004)
	unsigned long                                      bApplyHUDScale : 1;                                       // 0x0268(0x0004)
	unsigned long                                      bNoSplitscreenPanning : 1;                                // 0x0268(0x0004)
	unsigned long                                      bNoSplitscreenScaling : 1;                                // 0x0268(0x0004)
	unsigned long                                      bNeedsMatricesUpdated : 1;                                // 0x0268(0x0004) (Transient)
	unsigned long                                      bDidHorizontalSplitscreenPanningLastTick : 1;             // 0x0268(0x0004) (Transient)
	unsigned long                                      bAlwaysHideInCinematicMode : 1;                           // 0x0268(0x0004) (Transient)
	struct FVector2D                                   SplitRegionOrg;                                           // 0x026C(0x0008)
	struct FVector2D                                   SplitRegionExt;                                           // 0x0274(0x0008)
	struct FMap_Mirror                                 ChainedObjectMap;                                         // 0x027C(0x003C) (Native, Transient)
	TArray<class UGFxObject*>                          RedundantClipArray;                                       // 0x02B8(0x000C) (Transient, NeedCtorLink)
	class UGFxObject*                                  FocusObject;                                              // 0x02C4(0x0004) (Transient)
	struct FVector                                     FocusOffset;                                              // 0x02C8(0x000C) (Transient)
	struct FVector                                     InterpFocusOffset;                                        // 0x02D4(0x000C) (Transient)
	TArray<class UGFxObject*>                          SlidingObjects;                                           // 0x02E0(0x000C) (Transient, NeedCtorLink)
	TArray<class UGFxObject*>                          SlidingObjectMetrics;                                     // 0x02EC(0x000C) (Transient, NeedCtorLink)
	TArray<struct FVector>                             SlidingObjectOrigins;                                     // 0x02F8(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0304(0x000C) MISSED OFFSET
	struct FMatrix                                     CachedViewMat;                                            // 0x0310(0x0040) (Transient)
	struct FMatrix                                     CachedProjMat;                                            // 0x0350(0x0040) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMovie3D");
		return ptr;
	}


	void extGenericButtonClicked(const struct FString& ActionName);
	void InitForConsole();
	void InitForPC();
	void InitForPlatform();
	bool FilterAxisInput(int ControllerId, const struct FName& Key, float Delta, float DeltaTime);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, unsigned char InputEvent);
	float GetDynamicFOVScalar();
	float GetHUDElemScale();
	struct FVector2D GetHUDScale();
	class AWillowPlayerController* GetPrimaryPlayerWPC();
	bool IsPropTweening(class UGFxObject* Clip, const struct FString& PropertyName);
	struct FASValue GetMaybeTweenedProperty(class UGFxObject* Clip, const struct FString& PropertyName);
	struct FVector2D GetViewportScale();
	struct FVector2D GetViewportDimensions();
	class UGameViewportClient* GetViewport();
	struct FVector2D GetMovieDimensions();
	void ClearSplitscreenPanningCache();
	void ResetSlidingObjects();
	void UpdateSlidingObjects();
	void AddSlidingObject(class UGFxObject* Slider, class UGFxObject* Metric);
	void ClampFocusOffset();
	void UpdateFocusOffset();
	void FocusOn(class UGFxObject* Thing);
	class UGFxObject* GetParentClip(class UGFxObject* Thing);
	void AddClipToMap(class UGFxObject* Thing);
	int GetKeyFor(class UGFxObject* Thing);
	bool DoVerticalSplitscreenPanning();
	bool DoHorizontalSplitscreenPanning();
	struct FRotator Get3DRotationOffset();
	struct FVector Get3DLocationOffset();
	void Set3DMatrices();
	void InitFromDefinition();
	void OnSetViewport();
	bool Start(bool StartPaused);
};


// Class WillowGame.CharacterSelectionReduxGFxMovie
// 0x00F0 (0x0390 - 0x0480)
class UCharacterSelectionReduxGFxMovie : public UWillowGFxMovie3D
{
public:
	float                                              FadeInTimeInSeconds;                                      // 0x0390(0x0004) (Config)
	float                                              FadeOutTimeInSeconds;                                     // 0x0394(0x0004) (Config)
	class UCharacterSelectionGFxObject*                CharacterSelectClip;                                      // 0x0398(0x0004) (Transient)
	class UCharacterCustomizationMenuGFxObject*        CustomizationMenu[0x2];                                   // 0x039C(0x0004) (Transient)
	class UCharacterSelectionCustomizationListGFxObject* CustomizationList[0x2];                                   // 0x03A4(0x0004) (Transient)
	TArray<class UPlayerNameIdentifierDefinition*>     SelectableCharacters;                                     // 0x03AC(0x000C) (Transient, NeedCtorLink)
	class UCustomizationDefinition*                    EquippedHeadCustomization[0x2];                           // 0x03B8(0x0004) (Transient)
	class UCustomizationDefinition*                    EquippedSkinCustomization[0x2];                           // 0x03C0(0x0004) (Transient)
	class UCustomizationDefinition*                    PreviewHeadCustomization[0x2];                            // 0x03C8(0x0004) (Transient)
	class UCustomizationDefinition*                    PreviewSkinCustomization[0x2];                            // 0x03D0(0x0004) (Transient)
	class APlayerStandIn*                              StandIn[0x2];                                             // 0x03D8(0x0004) (Transient)
	TArray<class UCustomizationDefinition*>            PrimaryPlayerHeadCustomizations;                          // 0x03E0(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            PrimaryPlayerSkinCustomizations;                          // 0x03EC(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            SplitPlayerHeadCustomizations;                            // 0x03F8(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            SplitPlayerSkinCustomizations;                            // 0x0404(0x000C) (Transient, NeedCtorLink)
	int                                                SelectedCharacterIndex[0x2];                              // 0x0410(0x0004) (Transient)
	int                                                CurrentUIState[0x2];                                      // 0x0418(0x0004) (Transient)
	int                                                SelectedEntryIdx[0x2];                                    // 0x0420(0x0004) (Transient)
	int                                                CurrentPlayerEnteringName;                                // 0x0428(0x0004) (Transient)
	struct FString                                     TimerCaption;                                             // 0x042C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WaitingMessage;                                           // 0x0438(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectCharMessage;                                        // 0x0444(0x000C) (Const, Localized, NeedCtorLink)
	float                                              HACK_NextInputTime;                                       // 0x0450(0x0004) (Transient)
	unsigned long                                      CachedIsWidescreen : 1;                                   // 0x0454(0x0004) (Transient)
	unsigned long                                      bCheckPauseState : 1;                                     // 0x0454(0x0004) (Transient)
	unsigned long                                      bChangingPrimaryStandInPosition : 1;                      // 0x0454(0x0004) (Transient)
	unsigned long                                      bChangingSplitStandInPosition : 1;                        // 0x0454(0x0004) (Transient)
	class UWillowPauseTicker*                          TimerPauseTicker;                                         // 0x0458(0x0004) (Transient)
	class UWillowGFxDialogBox*                         UseCurrentSaveGameDlg;                                    // 0x045C(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ConfirmQuitDlg;                                           // 0x0460(0x0004) (Transient)
	class UWillowGFxLobbyLoadCharacter*                LoadCharacterLobby;                                       // 0x0464(0x0004) (Transient)
	int                                                PreviousStartGameTimer;                                   // 0x0468(0x0004) (Transient)
	int                                                AdjustStandInDebugMessageKey;                             // 0x046C(0x0004) (Transient)
	int                                                PreviewIndex[0x2];                                        // 0x0470(0x0004) (Transient)
	int                                                LastOfferPlayerIndex;                                     // 0x0478(0x0004) (Transient)
	class UWillowGFxDialogBox*                         PurchaseDialog;                                           // 0x047C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CharacterSelectionReduxGFxMovie");
		return ptr;
	}


	void extOnFadeInComplete();
	void extCharacterSelectOnLoad(const struct FString& TargetPath, const struct FString& P1CustomizationMenuTargetPath, const struct FString& P2CustomizationMenuTargetPath, const struct FString& P1CustomizationListTargetPath, const struct FString& P2CustomizationListTargetPath);
	void CheckForStartFadeIn();
	void FindAndViewCharacterSelectCamera();
	void RegisterStandIns();
	void ApplyPriorityVisibilityEffect(bool bRemoveEffect);
	void ApplyPriorityBlurEffect(bool bRemoveEffect);
	void CharacterLoadCanceled();
	void CharacterLoadComplete(const struct FLoadInfo& LI, int PlayerIndex);
	void OpenCharacterSelect(int PlayerIndex);
	void AppendSelectTooltipSuffix(int PlayerIndex, struct FString* TooltipString);
	void AppendTooltipPlayerRestriction(bool bAvailableToP1, bool bAvailableToP2, struct FString* TooltipString);
	void AppendTooltipSpacing(int TooltipCount, struct FString* Tooltip);
	void UpdateTooltips();
	void PopulateSkinCustomizationList(int PlayerIndex);
	void PopulateHeadCustomizationList(int PlayerIndex);
	bool IsTimerActive(const struct FName& FuncName);
	void ClearTimer(const struct FName& FuncName);
	void SetTimer(float Rate, bool bLoop, const struct FName& FuncName);
	bool HasNonLocalPlayers();
	void UpdateMessages();
	void UpdatePartySelections();
	void UpdatePlayerStandIn(int PlayerIndex, class AWillowPlayerController* WPC, class UPlayerSaveGame* SaveGame);
	void UpdatePlayerSaveGameFromSelectedCharacter(int PlayerIndex);
	void ClearLocalCustomizationsForPlayer(class AWillowPlayerController* WPC);
	void UpdateSplitPlayerStandIn();
	void UpdatePrimaryPlayerStandIn();
	void UpdateCustomizations(int PlayerIndex);
	void UpdateCharacterDisplay(int PlayerIndex, int CharacterIndex, bool bRefreshStandIn);
	void UpdateAspectRatio();
	void SetUIState(int PlayerIndex, int NewState);
	void SetSelectedCharacterIndex(int PlayerIndex, int NewSelectedIndex);
	void PromptQuit();
	bool OnQuitCanceled(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnQuitConfirmed(class UWillowGFxDialogBox* Dlg, int ControllerId);
	struct FString GetSelectedCharacterDefaultName(int PlayerIndex);
	void ValidatePlayerName(int PlayerIndex, const struct FString& PlayerName);
	void SetPlayerName(int PlayerIndex, const struct FString& PlayerName);
	void OnPlayerNameInputFinished(bool bSuccessful);
	void InputName(int PlayerIndex);
	void UpdateSkinPreview(int PlayerIndex, class UCustomizationDefinition* CustomDef);
	void UpdateHeadPreview(int PlayerIndex, class UCustomizationDefinition* CustomDef);
	void CancelSkinCustomization(int PlayerIndex);
	void CancelHeadCustomization(int PlayerIndex);
	void CommitSkinCustomization(int PlayerIndex);
	void CommitHeadCustomization(int PlayerIndex);
	void RecordCustomizationEventForPlayerIndex(int PlayerIndex, class UCustomizationDefinition* Definition);
	void HandleCustomizationSelected(int PlayerIndex, const struct FString& EventName, int EntryIndex);
	bool UsingGamepad();
	void HandleCustomizationMenuEntryClick(int PlayerIndex, int EntryIndex);
	void HandleCharacterMouseOver(int PlayerIndex, int CharacterIndex);
	void HandleCharacterClicked(int ControllerId, int CharacterIndex);
	void PromptPlayerUseCurrentSaveGame(class AWillowPlayerController* WPC, class UPlayerSaveGame* SaveGame);
	bool OnBeginGameWithCurrentCharacterDeclined(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnBeginGameWithCurrentCharacterConfirmed(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void DetermineStartingCharacterIndex();
	bool OnPurchaseCanceled(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void MarketplaceDownloadComplete();
	bool OnPurchaseRequest(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ConfirmCharacter(int PlayerIndex);
	void CacheCustomizations(int PlayerIndex);
	void DEBUG_AddDummyCharacters(int NumDummyChars);
	void BuildCharacterList();
	bool IsUnownedDlcClass(int SelectedCharIdx);
	int GetOfferIdForSelectedIndex(int SelectedCharIdx);
	static bool GetOfferIdForDlc(class UDownloadableContentDefinition* DlcDef, int* OfferId);
	static bool GetHasPurchaseInfoForDlc(class UDownloadableContentDefinition* DlcDef);
	bool HandleChooseCustomizationInput(int PlayerIndex, const struct FName& Key, unsigned char Event);
	bool HandleCustomizeCharacterInput(int PlayerIndex, const struct FName& Key, unsigned char Event);
	bool HandleChooseCharacterInput(int PlayerIndex, int ControllerId, const struct FName& Key, unsigned char Event);
	void NotifyPauseMenuOpened();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool FadeInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnExternalUIChanged(bool bIsOpening);
	void OnTick();
	void OnClose();
	void BeginClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.ItemInspectionGFxMovie
// 0x0130 (0x0390 - 0x04C0)
class UItemInspectionGFxMovie : public UWillowGFxMovie3D
{
public:
	class UItemInspectionGFxMovieDefinition*           MyInspDef;                                                // 0x0390(0x0004) (Transient)
	float                                              StartTime;                                                // 0x0394(0x0004) (Transient)
	class UMeshComponent*                              MyInspectionMesh;                                         // 0x0398(0x0004) (ExportObject, Transient, Component, EditInline)
	class UWillowInventoryDefinition*                  InvDef;                                                   // 0x039C(0x0004) (Transient)
	struct FRotator                                    MeshRotation;                                             // 0x03A0(0x000C) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	struct FQuat                                       MeshRotationQuat;                                         // 0x03B0(0x0010) (Transient)
	struct FQuat                                       MeshRotationPitchQuat;                                    // 0x03C0(0x0010) (Transient)
	struct FQuat                                       MeshRotationYawQuat;                                      // 0x03D0(0x0010) (Transient)
	float                                              CurrentItemScale;                                         // 0x03E0(0x0004) (Transient)
	struct FVector                                     CurrentOffset;                                            // 0x03E4(0x000C) (Transient)
	float                                              StartFOV;                                                 // 0x03F0(0x0004) (Transient)
	float                                              OffsetBounds;                                             // 0x03F4(0x0004) (Transient)
	unsigned long                                      bDraggingMouse_LMB : 1;                                   // 0x03F8(0x0004) (Transient)
	unsigned long                                      bDraggingMouse_RMB : 1;                                   // 0x03F8(0x0004) (Transient)
	unsigned long                                      bReverseIntroRotation : 1;                                // 0x03F8(0x0004) (Transient)
	unsigned long                                      bInvertIntroAlphaPower : 1;                               // 0x03F8(0x0004) (Transient)
	unsigned long                                      CachedWidescreen : 1;                                     // 0x03F8(0x0004) (Transient)
	unsigned long                                      bCtrl : 1;                                                // 0x03F8(0x0004) (Transient)
	unsigned long                                      bLBDown : 1;                                              // 0x03F8(0x0004) (Transient)
	unsigned long                                      bRBDown : 1;                                              // 0x03F8(0x0004) (Transient)
	unsigned long                                      bXDown : 1;                                               // 0x03F8(0x0004) (Transient)
	unsigned long                                      bRequestInFlight : 1;                                     // 0x03F8(0x0004) (Transient)
	struct FIntPoint                                   DragMouseLoc;                                             // 0x03FC(0x0008) (Transient)
	float                                              MouseDragScale_Rotate;                                    // 0x0404(0x0004) (Config)
	float                                              MouseDragScale_Pan;                                       // 0x0408(0x0004) (Config)
	float                                              MouseWheelScale;                                          // 0x040C(0x0004) (Config)
	float                                              KeyPanScale;                                              // 0x0410(0x0004) (Config)
	struct FString                                     TooltipsText_Pan_Mouse;                                   // 0x0414(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Pan_Controller;                              // 0x0420(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Rotate_Mouse;                                // 0x042C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Rotate_Controller;                           // 0x0438(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Zoom_Mouse;                                  // 0x0444(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Zoom_Controller;                             // 0x0450(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Screenshot_Keyboard;                         // 0x045C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Screenshot_Controller;                       // 0x0468(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipsText_Close;                                       // 0x0474(0x000C) (Const, Localized, NeedCtorLink)
	struct FRotator                                    RandomIntroRotation;                                      // 0x0480(0x000C) (Transient)
	float                                              RandomIntroAlphaPower;                                    // 0x048C(0x0004) (Transient)
	class UItemCardGFxObject*                          ItemCard;                                                 // 0x0490(0x0004) (Transient)
	struct FCellContentData                            CardContents;                                             // 0x0494(0x0010) (Component)
	int                                                ScreenShotCounter;                                        // 0x04A4(0x0004)
	struct FString                                     SerialNumberString;                                       // 0x04A8(0x000C) (NeedCtorLink)
	struct FString                                     DemoPerkCode;                                             // 0x04B4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemInspectionGFxMovie");
		return ptr;
	}


	void ShowDemoPerkCreatedDialog(bool Success, const struct FString& Code);
	void HandleCreateDemoPerkResponse(struct FSparkResult* Result);
	void SaveDemoPerk();
	void TrySaveDemoPerk();
	void UpdateTooltips();
	struct FQuat MakeQuatFromAxisAndAngle(const struct FVector& Axis, float Angle);
	void HandleMouseDrag(int dx, int DY);
	void StopMouseDrag(bool bRMB);
	void StartMouseDrag(bool bRMB);
	struct FBoxSphereBounds GetBoundsFor(class UMeshComponent* MeshComponent);
	float GetCurrentMeshScale();
	struct FRotator GetCurrentMeshRotation();
	float IntroAlpha();
	bool PlayingIntro();
	void ScaleMesh(float dz);
	void PanMesh(float dx, float DY);
	void RotateMesh(float dYaw, float dPitch);
	void OnClose();
	void InspectItem(class AWillowInventory* Thing, int OverrideValue, unsigned char CurrencyType);
	bool HandleInputAxis(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void UpdateFrameForAspectRatio(bool bWidescreen);
	bool Start(bool StartPaused);
};


// Class WillowGame.LANServerBrowserGFxMovie
// 0x0048 (0x0390 - 0x03D8)
class ULANServerBrowserGFxMovie : public UWillowGFxMovie3D
{
public:
	class ULANServerBrowserGFxObject*                  ServerBrowserObj;                                         // 0x0390(0x0004) (Transient)
	unsigned long                                      bIsLanBrowser : 1;                                        // 0x0394(0x0004) (Transient)
	unsigned long                                      bSearchingForGames : 1;                                   // 0x0394(0x0004) (Transient)
	unsigned long                                      bUseDebugSearchResults : 1;                               // 0x0394(0x0004) (Const)
	struct FString                                     HeaderTextPath;                                           // 0x0398(0x000C) (Transient, NeedCtorLink)
	struct FString                                     TooltipTextPath;                                          // 0x03A4(0x000C) (Transient, NeedCtorLink)
	struct FOnlineGameSearchResult                     MatchmakingResult;                                        // 0x03B0(0x0008) (Transient)
	class UWillowPauseTicker*                          TimerPauseTicker;                                         // 0x03B8(0x0004) (Transient)
	TArray<int>                                        IncompatibleGameVersionsServerIndex;                      // 0x03BC(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      SortType;                                                 // 0x03C8(0x0001) (Transient)
	unsigned char                                      SortDirection;                                            // 0x03C9(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03CA(0x0002) MISSED OFFSET
	TArray<struct FResultEntry>                        SortedResults;                                            // 0x03CC(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LANServerBrowserGFxMovie");
		return ptr;
	}


	struct FString GetFriendlyGameVersionString();
	void extLANServerBrowserOnLoad(const struct FString& TargetPath, const struct FString& HeaderPath, const struct FString& VersionPath, const struct FString& TooltipPath);
	void HandleServerBrowserSortDirectionButtonClick(class UGFxObject* EventObj);
	void HandleServerBrowserSortTypeButtonClick(class UGFxObject* EventObj);
	struct FString GetSortDirectionString();
	struct FString GetSortString();
	void SetTooltips();
	void SetSearchingForGames(bool bSearching);
	void SetHeaderText();
	void SetBrowserType(bool bInIsLanBrowser);
	void SortResults();
	void PopulateSearchResults();
	void DebugGenerateSearchResults(int NumResults);
	void SetSort(unsigned char NewSortType, unsigned char NewSortDirection);
	void FilterResults();
	void OnFindGamesComplete(bool bWasSuccessful);
	void CancelGameSearch();
	void FindGames();
	void OnJoinMatchComplete(const struct FName& SessionName, bool bWasSuccessful);
	void OnDestroyGameForMatchJoinComplete(const struct FName& SessionName, bool bWasSuccessful);
	void JoinMatchmakingSession();
	void HandleServerBrowserItemClick(int ServerIndex);
	unsigned char GetNextSortType();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void BeginClose();
	void OnClose();
	bool Start(bool bStartPaused);
};


// Class WillowGame.QuestAcceptGFxMovie
// 0x005C (0x0390 - 0x03EC)
class UQuestAcceptGFxMovie : public UWillowGFxMovie3D
{
public:
	class UQuestAcceptGFxDefinition*                   MissionUIDef;                                             // 0x0390(0x0004)
	class UGFxTextListContainer*                       MissionTextList;                                          // 0x0394(0x0004)
	TArray<struct FString>                             MissionCategories;                                        // 0x0398(0x000C) (NeedCtorLink)
	FScriptInterface                                   MissionDirector;                                          // 0x03A4(0x0008)
	FScriptInterface                                   FocusSubject;                                             // 0x03AC(0x0008)
	class AWillowAIPawn*                               ContextNPC;                                               // 0x03B4(0x0004)
	int                                                RedeemableCount;                                          // 0x03B8(0x0004)
	int                                                EligibleCount;                                            // 0x03BC(0x0004)
	int                                                InProgressCount;                                          // 0x03C0(0x0004)
	TArray<struct FStatusMenuMissionEligibilityData>   MissionList;                                              // 0x03C4(0x000C) (NeedCtorLink)
	TArray<struct FStatusMenuMissionEligibilityData>   InProgressMissionList;                                    // 0x03D0(0x000C) (NeedCtorLink)
	class UMissionDefinition*                          MissionDefForRewardPage;                                  // 0x03DC(0x0004)
	unsigned long                                      bAcceptedMission : 1;                                     // 0x03E0(0x0004) (Transient)
	unsigned long                                      bTurnedInPlotMission : 1;                                 // 0x03E0(0x0004) (Transient)
	unsigned long                                      bSingleMissionDisplay : 1;                                // 0x03E0(0x0004) (Transient)
	class UMissionRewardGFxObject*                     RewardObject;                                             // 0x03E4(0x0004)
	int                                                WantsAcceptCounter;                                       // 0x03E8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("QuestAcceptGFxMovie");
		return ptr;
	}


	void extGenericButtonClicked(const struct FString& ActionName);
	void OnTick();
	void InitForConsole();
	void InitForPC();
	void OnClosedOnDeath();
	void UpdateMissionList(class UMissionDefinition* OnlyIfThisMissionIsAlreadyInTheList);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void MoveHighlight();
	void StopMovingHighlight();
	void StartMovingHighlight();
	void SetDescriptionScrollValue(float NewScrollValue);
	void extSetDescriptionScrollValue(float NewScrollValue);
	void extLogDown();
	void LogDown();
	void extLogUp();
	void LogUp();
	void ConditionallyScroll(const struct FString& Direction);
	void SetFocus();
	void UpdateMissionTextList();
	void SetScrollArrows();
	void SetLevelAndDifficulty(const struct FString& LevelText, const struct FString& Difficulty);
	void SetRewardsItem();
	void SetRewardsXP(const struct FString& XPText);
	void SetPlayerXP(const struct FString& XPText, int XPPercent);
	void SetRewardsTotalOtherCurrency(int Amount);
	void SetRewardsTotalCredits(int Credits);
	void SetPlayerDisplayedCredits(int Credits);
	void SetPlayerTotalCredits(int Credits);
	void OnClose();
	void extChoiceConfirmed();
	void extChoiceCancelled();
	void extHover(int HoverIndex);
	void extLogListTrack(int SlotIndex);
	void extLogListRollOver(int SlotIndex);
	void extNavigateDown();
	void extNavigateUp();
	void extOnRolloverChoice(int RewardChoice);
	void extOnFocusedChoice(int RewardChoice);
	void AcceptReward(int RewardChoice);
	void extOnClickedChoice(int RewardChoice);
	bool HandleRewardInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void ShowNoRewardScreen(class UMissionDefinition* Mission, unsigned char OldStatus);
	void DisplayRewardsPage(const struct FPendingMissionRewardData& MissionReward);
	void extCompleteConfirmed();
	void extAcceptConfirmed();
	void SetRewardCard(class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC);
	void SetInnerReward(class UGFxObject* InnerRewardClip, const struct FMissionRewardPresentationData& Presentation);
	TArray<struct FMissionRewardPresentationData> GetRewardPresentations(class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC);
	void ProtectedFillOutCommonScreenDetails();
	void extFillOutQuestAllScreenDetails();
	int GetSelectedIndex();
	void UpdateMissionDetails();
	void GotoCorrectPartOfMovie(bool bDisplayChoiceIntro);
	void SetQuestTitle(int Index, const struct FString& MissionName, const struct FString& IconType);
	void extPopulateQuestEntries();
	void QuestTitlesPrevFrame();
	void QuestTitlesNextFrame();
	void DetermineQuestEntries();
	bool HandleInputAxis(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	void HideTopPanel();
	bool Start(bool StartPaused);
};


// Class WillowGame.VehicleSpawnStationGFxMovie
// 0x00EC (0x0390 - 0x047C)
class UVehicleSpawnStationGFxMovie : public UWillowGFxMovie3D
{
public:
	struct FPointer                                    VfTable_IIStreamingDataEvent;                             // 0x0390(0x0004) (Const, Native, NoExport)
	class UGFxObject*                                  VSSWrapperObj;                                            // 0x0394(0x0004) (Transient)
	class UVehicleFamilySelectorGFxObject*             VehicleFamilySelector;                                    // 0x0398(0x0004) (Transient)
	class UVehicleChoiceInfoCardGFxObject*             VehicleChoiceInfoCard;                                    // 0x039C(0x0004) (Transient)
	class UVehicleChoiceModuleGFxObject*               VehicleChoiceModule[0x2];                                 // 0x03A0(0x0004) (Transient)
	class UVehicleSpawnStationGFxDefinition*           MyVehicleSpawnStationDefinition;                          // 0x03A8(0x0004) (Transient)
	TArray<class UVehicleFamilyDefinition*>            AvailableVehicleFamilyDefinitions;                        // 0x03AC(0x000C) (Transient, NeedCtorLink)
	class UVehicleFamilyDefinition*                    DesiredFamilyDefinition;                                  // 0x03B8(0x0004) (Transient)
	float                                              TimeStartedWaitingForFamilyChange;                        // 0x03BC(0x0004) (Transient)
	float                                              ChangeFamilyRequestMinWaitDuration;                       // 0x03C0(0x0004) (Const)
	float                                              ChangeFamilyRequestTimeOutDuration;                       // 0x03C4(0x0004) (Const)
	TArray<class UVSSUIDefinition*>                    AvailableVehicleUIDefinitions;                            // 0x03C8(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            AvailableVehicleSkinDefinitions;                          // 0x03D4(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            SeenVehicleSkinDefinitions;                               // 0x03E0(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      CurrentStage;                                             // 0x03EC(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET
	int                                                VehicleCellCount;                                         // 0x03F0(0x0004) (Transient)
	int                                                SelectedModuleIndex;                                      // 0x03F4(0x0004) (Transient)
	struct FSmartVector                                ClientPawnLocationAtTeleportTime;                         // 0x03F8(0x001C) (Transient)
	struct FString                                     SpawnVehicleLabel;                                        // 0x0414(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RespawnVehicleLabel;                                      // 0x0420(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TeleportLabel;                                            // 0x042C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoSkinAvailableLabel;                                     // 0x0438(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoSkinSelectedLabel;                                      // 0x0444(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UnlockedText;                                             // 0x0450(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bChoosingFamily : 1;                                      // 0x045C(0x0004) (Transient)
	unsigned long                                      WaitingOnReplicatedData : 1;                              // 0x045C(0x0004) (Transient)
	class UWillowGFxMovie*                             WaitingOnDataDlg;                                         // 0x0460(0x0004) (Transient)
	float                                              StartTimeWaitingOnReplicatedData;                         // 0x0464(0x0004) (Transient)
	class AVehicleStandIn*                             PreviewActor[0x2];                                        // 0x0468(0x0004) (Transient)
	float                                              StartTime;                                                // 0x0470(0x0004) (Transient)
	float                                              StartFOV;                                                 // 0x0474(0x0004) (Transient)
	int                                                PreviewIndex;                                             // 0x0478(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSpawnStationGFxMovie");
		return ptr;
	}


	void RunStreamingDataEvent(const struct FName& EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, int IntParam, float FloatParam);
	void CloseOrReturnToFamilySelection();
	void extGenericButtonClicked(const struct FString& ActionName);
	void InitForConsole();
	void InitForPC();
	bool HandleInputAxis(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	void UpdatePreview(class UCustomizationDefinition* CustomDef);
	void CancelCustomization();
	void CommitCustomization();
	void extOnSkinCellClick(const struct FString& EventName, int CellIndex);
	bool UsingGamepad();
	void extOnVehicleFamilyCellClick(int CellIndex);
	void extOnVehicleCellHighlight(int CellIndex);
	void extOnVehicleCellClick(int CellIndex);
	void extOnSkinTypeButtonClick(int ModuleIndex);
	void extOnVehicleTypeButtonClick(int ModuleIndex);
	void extOnTeleportButtonClick(int ModuleIndex);
	void extOnSpawnVehicleButtonClick(int ModuleIndex);
	void extOnVehicleChoiceInfoCardLoad(const struct FString& TargetPath, int InVehicleCellCount);
	void extOnVehicleChoiceModuleLoad(const struct FString& TargetPath, int ModuleIndex);
	void extOnVehicleFamilySelectorLoad(const struct FString& TargetPath);
	void extCacheVSSClip(const struct FString& TargetPath);
	bool VehicleFamilyInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool SharedInfoCardInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool SkinChoiceInfoCardInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool VehicleChoiceInfoCardInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool HandleKeyDefaults(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void TrySetFocus(int ModuleIndex, int ButtonIndex);
	void RefreshFocus();
	void ConfigureTooltips();
	void ConfigureTooltipsInternal(const struct FString& Tooltips);
	void ConfigureVSSWrapper();
	void HideSkinInfoCard(int ModuleIndex);
	void ShowSkinInfoCard(int ModuleIndex);
	void HideVehicleInfoCard(int ModuleIndex);
	void ShowVehicleInfoCard(int ModuleIndex);
	void ConfigureSkinTypeChoices(int ModuleIndex);
	void ConfigureVehicleTypeChoices(int ModuleIndex);
	void AddVehicleChoices();
	void RefreshVehicleChoiceModule(int ModuleIndex);
	class UVehicleChoiceModuleGFxObject* GetVehicleChoiceModule(int ModuleIndex);
	bool VehicleExistsAndIsOccupied(class UVehicleFamilyDefinition** OutSpawnedVehicleFamilyDef);
	void OnClose();
	void UpdatePreviewFromVSSUIDef(int ModuleIndex, class UVSSUIDefinition* VehicleUIDef);
	void DestroyPreviewMeshes();
	void DestroyPreviewActors();
	void CreatePreviewActors();
	void ShowPlayersMustExitMessage();
	void ShowProcessingRequestMessage();
	void ShowPleaseWaitMessage();
	void ShowNoVehiclesMessage();
	bool Start(bool StartPaused);
	float GetCurrentMeshScale();
	float IntroAlpha();
	bool PlayingIntro();
	struct FBoxSphereBounds GetBoundsFor(class UMeshComponent* MeshComponent);
	void InitVehicleChoiceModules();
	bool HandleVehicleFamilySelection();
	void SetCurrentStage(unsigned char NewCurrentStage);
	void UpdateSkinsOnVehicleTypeChange(int ModuleIndex);
	void CacheDefinitions(int VehicleFamilyIndex);
	void CacheVehicleFamilies();
};


// Class WillowGame.WeaponScopeGFxMovie
// 0x005C (0x0390 - 0x03EC)
class UWeaponScopeGFxMovie : public UWillowGFxMovie3D
{
public:
	class UWeaponScopeGFxDefinition*                   MyScopeDefinition;                                        // 0x0390(0x0004)
	class UHUDWidget_Crosshairs*                       CrosshairWidget;                                          // 0x0394(0x0004) (Transient)
	struct FString                                     CachedFLN_Housing;                                        // 0x0398(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CachedFLN_Stock;                                          // 0x03A4(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CachedFLN_Grip;                                           // 0x03B0(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CachedFLN_Collateral;                                     // 0x03BC(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CachedFLN_Crosshairs;                                     // 0x03C8(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CachedSFN;                                                // 0x03D4(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CachedElementalName;                                      // 0x03E0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponScopeGFxMovie");
		return ptr;
	}


	void InitializeAsTelescope();
	void CloseScope();
	void InitCrosshair(class AWillowWeapon* WWeapon);
	void InitElemental(const struct FString& ElementalName, class UGFxObject* HousingClip);
	struct FString GetElementalName(class AWillowWeapon* WWeapon);
	void InitializeFromWeapon(class AWillowWeapon* WWeapon, bool bDisplay);
	void ClearCached();
	class UManufacturerDefinition* GetManufacturerDefinitionFromWeaponPart(class UWeaponPartDefinition* PartDef, class UManufacturerDefinition* DefaultDef);
	struct FString GetWeaponTypeNameForLinkage(const struct FString& WeaponTypeLabel);
	struct FString GetManufacturerNameForLinkage(const struct FString& ManufacturerLabel);
	struct FString GetLinkageName(const struct FString& ScopePart, const struct FString& ManufacturerLabel, const struct FString& WeaponTypeLabel);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.WillowGFxMovieCredits
// 0x0054 (0x0390 - 0x03E4)
class UWillowGFxMovieCredits : public UWillowGFxMovie3D
{
public:
	struct FString                                     ceStarted;                                                // 0x0390(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	struct FString                                     ceFinished;                                               // 0x039C(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	class UCreditsGFxObject*                           Credits;                                                  // 0x03A8(0x0004)
	class UMontageGFxObject*                           Montage;                                                  // 0x03AC(0x0004)
	class UCreditsDataProviderGFxObject*               DataProvider;                                             // 0x03B0(0x0004)
	class UCreditsGFxDefinition*                       CreditsDef;                                               // 0x03B4(0x0004)
	class UTexture2D*                                  MiddlewareTexture;                                        // 0x03B8(0x0004)
	struct FString                                     MiddlewareTextureLinkageName;                             // 0x03BC(0x000C) (NeedCtorLink)
	unsigned long                                      bMiddlewareTextureLoaded : 1;                             // 0x03C8(0x0004) (Transient)
	unsigned long                                      bSplatTextureLoaded : 1;                                  // 0x03C8(0x0004) (Transient)
	unsigned long                                      bClosing : 1;                                             // 0x03C8(0x0004) (Transient)
	class UTexture2D*                                  SplatTexture;                                             // 0x03CC(0x0004)
	struct FString                                     SplatTextureLinkageName;                                  // 0x03D0(0x000C) (NeedCtorLink)
	float                                              ClosingTimeRemaining;                                     // 0x03DC(0x0004) (Transient)
	int                                                AxisResetCounter;                                         // 0x03E0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMovieCredits");
		return ptr;
	}


	bool HandleInputAxis(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void BeginClosing();
	void extCreditsFinished();
	void extOnSplatClipOnLoad(const struct FString& TextureLinkageName);
	void OnSplatTextureLoaded();
	void ClearSplatTexture();
	void LoadSplatTexture();
	void extOnMiddlewareClipOnLoad(const struct FString& TextureLinkageName);
	void OnMiddlewareTextureLoaded();
	void ClearMiddlewareTexture();
	void LoadMiddlewareTexture();
	void extInitMontage(const struct FString& PathToMontageObject, const struct FString& TextureLinkageName);
	void extInitCredits(const struct FString& PathToCreditsObject, class UGFxObject* DataProviderObject);
	void OnTick();
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.WillowGFxThirdPersonMovie
// 0x00AC (0x0390 - 0x043C)
class UWillowGFxThirdPersonMovie : public UWillowGFxMovie3D
{
public:
	class UWillowGFxThirdPersonDefinition*             MyThirdPersonDefinition;                                  // 0x0390(0x0004)
	float                                              CameraYaw;                                                // 0x0394(0x0004) (Transient)
	float                                              CameraPitch;                                              // 0x0398(0x0004) (Transient)
	struct FRotator                                    CameraRotation;                                           // 0x039C(0x000C) (Transient)
	struct FVector                                     CameraLocation;                                           // 0x03A8(0x000C) (Transient)
	float                                              CameraSplitOffset;                                        // 0x03B4(0x0004) (Transient)
	float                                              CameraSplitSpread;                                        // 0x03B8(0x0004) (Transient)
	struct FName                                       CameraFocusBoneName;                                      // 0x03BC(0x0008) (Transient)
	float                                              CameraFocusYaw;                                           // 0x03C4(0x0004) (Transient)
	float                                              LastCameraPitchTime;                                      // 0x03C8(0x0004) (Transient)
	unsigned long                                      bAdjustedCameraLastTick : 1;                              // 0x03CC(0x0004) (Transient)
	unsigned long                                      bClosing : 1;                                             // 0x03CC(0x0004) (Transient)
	unsigned long                                      bControlModeAdjustsMenu : 1;                              // 0x03CC(0x0004) (Transient)
	unsigned long                                      bNeedsCamRotUpdate : 1;                                   // 0x03CC(0x0004) (Transient)
	unsigned long                                      bDoCameraCollision : 1;                                   // 0x03CC(0x0004)
	unsigned long                                      bHideMeshInVertSplit : 1;                                 // 0x03CC(0x0004)
	unsigned long                                      bDraggingMouse_Camera : 1;                                // 0x03CC(0x0004) (Transient)
	unsigned long                                      bDoMenuSpring : 1;                                        // 0x03CC(0x0004) (Transient)
	float                                              MenuYaw;                                                  // 0x03D0(0x0004) (Transient)
	float                                              MenuPitch;                                                // 0x03D4(0x0004) (Transient)
	struct FRotator                                    MenuRotation;                                             // 0x03D8(0x000C) (Transient)
	struct FVector                                     MenuLocation;                                             // 0x03E4(0x000C) (Transient)
	float                                              CloseTime;                                                // 0x03F0(0x0004) (Transient)
	struct FVector                                     CloseCamLoc;                                              // 0x03F4(0x000C) (Transient)
	struct FRotator                                    CloseCamRot;                                              // 0x0400(0x000C) (Transient)
	float                                              MenuSpringYaw;                                            // 0x040C(0x0004) (Transient)
	float                                              MenuSpringPitch;                                          // 0x0410(0x0004) (Transient)
	struct FRotator                                    MenuSpringRotation;                                       // 0x0414(0x000C) (Transient)
	struct FIntPoint                                   DragMouseLoc_Camera;                                      // 0x0420(0x0008) (Transient)
	float                                              MouseDragScale_Camera;                                    // 0x0428(0x0004) (Config)
	float                                              MouseDrag_Region_Left;                                    // 0x042C(0x0004) (Config)
	float                                              MouseDrag_Region_Right;                                   // 0x0430(0x0004) (Config)
	float                                              MouseDrag_Region_Top;                                     // 0x0434(0x0004) (Config)
	float                                              MouseDrag_Region_Bottom;                                  // 0x0438(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxThirdPersonMovie");
		return ptr;
	}


	void HandleMouseDrag_Camera(int dx, int DY);
	struct FRotator Get3DRotationOffset();
	struct FVector Get3DLocationOffset();
	void ToggleControlMode();
	void EnableControl(bool bEnable);
	void SaveTabView();
	void StopMouseDrag();
	void TryStartMouseDrag();
	bool HandleKeyDefaults(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool HandleInputAxisPlayerCameraRotation(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	bool HandleCameraInputAxis(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	void UpdateDesiredCameraPosition();
	void OnClose();
	void FinishClosing();
	void BeginClosing();
	int GetCurrentTab();
	bool Start(bool StartPaused);
	bool AmITheStatusMenu();
};


// Class WillowGame.CustomizationGFxMovie
// 0x0104 (0x043C - 0x0540)
class UCustomizationGFxMovie : public UWillowGFxThirdPersonMovie
{
public:
	class UCharacterCustomizationMenuGFxObject*        CharacterCustomizationMenu;                               // 0x043C(0x0004) (Transient)
	class UCharacterCustomizationInfoCardGFxObject*    CharacterCustomizationInfoCard;                           // 0x0440(0x0004) (Transient)
	struct FString                                     SkillBranchDescriptions[0x3];                             // 0x0444(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            HeadCustomizations;                                       // 0x0468(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            SeenHeadCustomizations;                                   // 0x0474(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            SkinCustomizations;                                       // 0x0480(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            SeenSkinCustomizations;                                   // 0x048C(0x000C) (Transient, NeedCtorLink)
	class UCustomizationDefinition*                    EquippedHeadCustomization;                                // 0x0498(0x0004) (Transient)
	class UCustomizationDefinition*                    EquippedSkinCustomization;                                // 0x049C(0x0004) (Transient)
	class UCustomizationDefinition*                    PreviewHeadCustomization;                                 // 0x04A0(0x0004) (Transient)
	class UCustomizationDefinition*                    PreviewSkinCustomization;                                 // 0x04A4(0x0004) (Transient)
	unsigned long                                      bSelectingFromList : 1;                                   // 0x04A8(0x0004) (Transient)
	unsigned long                                      bHasSpentSkillPoints : 1;                                 // 0x04A8(0x0004) (Transient)
	int                                                SelectedEntryIdx;                                         // 0x04AC(0x0004) (Transient)
	struct FString                                     StringPreKeyboardUI;                                      // 0x04B0(0x000C) (Transient, NeedCtorLink)
	int                                                MaxNameLength;                                            // 0x04BC(0x0004)
	struct FString                                     HeaderText;                                               // 0x04C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoValidHeadCaption;                                       // 0x04CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoValidSkinCaption;                                       // 0x04D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UnlockedText;                                             // 0x04E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UnlockedHeadsNumbersText;                                 // 0x04F0(0x000C) (Transient, NeedCtorLink)
	struct FString                                     UnlockedSkinsNumbersText;                                 // 0x04FC(0x000C) (Transient, NeedCtorLink)
	struct FString                                     TooltipsPath;                                             // 0x0508(0x000C) (Transient, NeedCtorLink)
	int                                                PreviewIndex;                                             // 0x0514(0x0004) (Transient)
	struct FString                                     PreviewType;                                              // 0x0518(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            UnauthorizedHeadCustomizations;                           // 0x0524(0x000C) (Transient, NeedCtorLink)
	TArray<class UCustomizationDefinition*>            UnauthorizedSkinCustomizations;                           // 0x0530(0x000C) (Transient, NeedCtorLink)
	class UCustomizationDefinition*                    PotentialCustomizationForPurchase;                        // 0x053C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationGFxMovie");
		return ptr;
	}


	void MarketplaceDownloadComplete();
	bool GetOfferIdForCustomization(class UCustomizationDefinition* Customization, int* OfferIdForCustomization);
	void extGenericButtonClicked(const struct FString& ActionName);
	void InitForConsole();
	void InitForPC();
	int GetCurrentTab();
	void extInitSkinInfoCard();
	void extInitHeadInfoCard();
	void extInitRespecInfoCard();
	void extInitNameInfoCard();
	void extInitPlayerClassDisplay(const struct FString& TextFieldTargetPath);
	void SetToolTipsForPurchase();
	void SetTooltips();
	void extCharacterCustomizationOnLoad(const struct FString& InfoCardTargetPath, const struct FString& MenuTargetPath, const struct FString& TooltipsTargetPath);
	void ValidatePlayerName(const struct FString& PlayerName);
	void SetPlayerName(const struct FString& PlayerName);
	void OnPlayerNameInputFinished(bool bSuccessful);
	void InputName();
	void OnCurrencyChanged(const struct FCurrencyState& ChangedCurrency);
	void OnSkillTreeReset(int NewPoints);
	void SetUnlockedText_Skins();
	void SetUnlockedText_Heads();
	void UpdateInfoCard(int EntryIndex);
	void UpdateSkinPreview(class UCustomizationDefinition* CustomDef);
	void UpdateHeadPreview(class UCustomizationDefinition* CustomDef);
	void CancelSkinCustomization();
	void CancelHeadCustomization();
	bool OnPurchaseCanceled(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnPurchaseRequest(class UWillowGFxDialogBox* Dlg, int ControllerId);
	static bool ShowMarketplaceOfferFor(class AWillowPlayerController* WPC, int OfferId);
	static bool ShowPurchaseDialog(class AWillowPlayerController* WPC, const struct FScriptDelegate& PurchaseRequested, const struct FScriptDelegate& PurchaseCanceled, class UWillowGFxDialogBox** DialogOwner);
	void CommitSkinCustomization(class UCustomizationDefinition* TargetCustomization);
	void CommitHeadCustomization(class UCustomizationDefinition* TargetCustomization);
	void HandleCustomizationEvent(const struct FString& CustomizationType, const struct FString& EventName, int ItemIndex);
	bool UsingGamepad();
	void HandleMenuEntryRollOver(int EntryIndex);
	void HandleMenuEntryFocus(int EntryIndex);
	void HandleMenuEntryClick(int EntryIndex);
	void CacheCustomizations();
	void CacheSkillBranchDescriptions();
	bool MainInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnClose();
	void BeginClosing();
	bool Start(bool StartPaused);
	static struct FString GetSonyTitleID();
};


// Class WillowGame.FastTravelStationGFxMovie
// 0x006C (0x043C - 0x04A8)
class UFastTravelStationGFxMovie : public UWillowGFxThirdPersonMovie
{
public:
	TArray<struct FString>                             LocationDisplayNames;                                     // 0x043C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             LocationStationStrings;                                   // 0x0448(0x000C) (Transient, NeedCtorLink)
	TArray<class UFastTravelStationDefinition*>        LocationStationDefinitions;                               // 0x0454(0x000C) (Transient, NeedCtorLink)
	class UFastTravelStationDefinition*                CurrentWaypointStationDef;                                // 0x0460(0x0004) (Transient)
	class UFastTravelStationGFxObject*                 FastTravelClip;                                           // 0x0464(0x0004) (Transient)
	int                                                InitialSelectionIndex;                                    // 0x0468(0x0004) (Transient)
	int                                                SortMode;                                                 // 0x046C(0x0004) (Transient)
	struct FString                                     LocationsHeader;                                          // 0x0470(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocationsHeaderAlphabetical;                              // 0x047C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocationMissionTeaserHeader;                              // 0x0488(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocationMissionTeaser;                                    // 0x0494(0x000C) (Const, Localized, NeedCtorLink)
	float                                              NextWaypointCheckTime;                                    // 0x04A0(0x0004) (Transient)
	int                                                LastSelectionIndex;                                       // 0x04A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelStationGFxMovie");
		return ptr;
	}


	void SetCurrentWaypoint(int WaypointIndex);
	void extGenericButtonClicked(const struct FString& ActionName);
	void InitForConsole();
	void InitForPC();
	void extRequestLocationMissionData(int LocationIndex);
	void extRegisterMapLocationBlob(const struct FString& TargetPath);
	void extEnterTeleportScreen(const struct FString& TargetPath);
	void extActivate(int LocationIndex);
	void BeginClosing();
	void extPlayItemChangeSound();
	void BuildDLCMapLocations(TArray<struct FString>* DLCMapLocations);
	void ProcessDLCMovies();
	struct FString GetFastTravelHeader();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void BuildMissionDataForLocation(int LocationIndex, TArray<struct FString>* MissionNames, TArray<int>* MissionType);
	void BuildLocationData();
	void OnClose();
	void HandleOpen();
};


// Class WillowGame.WillowInventoryGFxMovie
// 0x002C (0x043C - 0x0468)
class UWillowInventoryGFxMovie : public UWillowGFxThirdPersonMovie
{
public:
	class UGearboxRenderTextureManager*                RTM;                                                      // 0x043C(0x0004) (Transient)
	TArray<struct FCellContentData>                    CardContents;                                             // 0x0440(0x000C) (Component, NeedCtorLink)
	class AWillowInventory*                            FrozenThing;                                              // 0x044C(0x0004)
	unsigned char                                      FrozenThingType;                                          // 0x0450(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0451(0x0003) MISSED OFFSET
	TArray<struct FString>                             UsedInvTypes;                                             // 0x0454(0x000C) (NeedCtorLink)
	class UWillowInventoryGFxDefinition*               MyInventoryDef;                                           // 0x0460(0x0004)
	class AWillowInventoryManager*                     WInvMgr;                                                  // 0x0464(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInventoryGFxMovie");
		return ptr;
	}


	void GetPlayerThings(TArray<class AWillowInventory*>* Things);
	int GetTotalCredits();
	void EvaluateCurrentSelection();
	void OnPanelRollOver(class UInventoryListPanelGFxObject* Panel, int ControllerId);
	class AWillowInventory* GetEquippedAnalogue(class AWillowInventory* NavigatedThing);
	void PressedHotkeyNumber(int HotkeyNum);
	void OnInventoryPanelSetActive(class UBaseInventoryPanelGFxObject* PanelObject, bool bActive);
	bool GetNextSortConfiguration(class UInventoryListPanelGFxObject* PanelObject, int Delta, struct FSortFilterConfiguration* NewSortConfig);
	void GetPlayerPanelItems(TArray<class AWillowInventory*>* Things);
	void FillOutListOfPlayerThings(bool bIncludeReadied, unsigned char MaxDroppability, TArray<class AWillowInventory*>* Things);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.PCContextMenuObject
// 0x007C (0x01C8 - 0x0244)
class UPCContextMenuObject : public UGFxMoviePlayer
{
public:
	class UGFxObject*                                  MenuListObject;                                           // 0x01C8(0x0004) (Transient)
	struct FString                                     Str_Buy;                                                  // 0x01CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Str_BuyBack;                                              // 0x01D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Str_Sell;                                                 // 0x01E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Str_SellTrash;                                            // 0x01F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Str_Compare;                                              // 0x01FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Str_Inspect;                                              // 0x0208(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Str_SelectCompare;                                        // 0x0214(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Str_Drop;                                                 // 0x0220(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __OnMenuClosed__Delegate;                                 // 0x022C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMenuItemClicked__Delegate;                            // 0x0238(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PCContextMenuObject");
		return ptr;
	}


	static void AddToMenuItemList(const struct FString& Caption, const struct FString& Action, TArray<struct FPCContextMenuItem>* Items);
	void extOnMenuItemClicked(const struct FString& Action);
	void extOnMenuAbort();
	void extOnMenuClosed();
	void ShowFor(class UGFxMoviePlayer* Player);
	void Show(float X, float Y);
	void AddMenuItems(TArray<struct FPCContextMenuItem> Items);
	void AddMenuItem(const struct FString& Caption, const struct FString& Action);
	void FocusOn(class UGFxObject* Thing);
	void OnClose();
	void Init(class ULocalPlayer* LocPlay);
	void OnMenuItemClicked(const struct FString& Action);
	void OnMenuClosed();
};


// Class WillowGame.StatusMenuExGFxMovie
// 0x034C (0x0468 - 0x07B4)
class UStatusMenuExGFxMovie : public UWillowInventoryGFxMovie
{
public:
	class UStatusMenuGFxDefinition*                    StatusDef;                                                // 0x0468(0x0004)
	class USkillTreeGFxDefinition*                     SkillDef;                                                 // 0x046C(0x0004)
	struct FString                                     InventoryTabString;                                       // 0x0470(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LogTabString;                                             // 0x047C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MapTabString;                                             // 0x0488(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LevelString;                                              // 0x0494(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     XPString;                                                 // 0x04A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NextString;                                               // 0x04AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PoweredByString;                                          // 0x04B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoMissionsString;                                         // 0x04C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoClassModString;                                         // 0x04D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EmptyInventorySlotText;                                   // 0x04DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AlreadyEquipped;                                          // 0x04E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Trans;                                                // 0x04F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Outpost;                                              // 0x0500(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_POI;                                                  // 0x050C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Player;                                               // 0x0518(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Buddy;                                                // 0x0524(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Waypoint;                                             // 0x0530(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Vss;                                                  // 0x053C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_BB;                                                   // 0x0548(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Health;                                               // 0x0554(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Shop;                                                 // 0x0560(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Unknown;                                              // 0x056C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Vehicle;                                              // 0x0578(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_CustomWaypoint;                                       // 0x0584(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Leg_Customization;                                        // 0x0590(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_Replay;                                 // 0x059C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_Track;                                  // 0x05A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_Scroll;                                 // 0x05B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_Sort;                                   // 0x05C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_ViewWorldMissions;                      // 0x05CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_ViewMyMissions;                         // 0x05D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_Ignore;                                 // 0x05E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_Unignore;                               // 0x05F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionLogTooltip_Cancel;                                 // 0x05FC(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FStatusMenuMissionEligibilityData>   ClientMissions;                                           // 0x0608(0x000C) (Transient, NeedCtorLink)
	int                                                ClientActiveMissionIndex;                                 // 0x0614(0x0004) (Transient)
	TArray<struct FStatusMenuMissionEligibilityData>   WorldMissions;                                            // 0x0618(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bShowWorldMissions : 1;                                   // 0x0624(0x0004) (Transient)
	unsigned long                                      bOnLeftSide : 1;                                          // 0x0624(0x0004) (Transient)
	unsigned long                                      bFullyOpened : 1;                                         // 0x0624(0x0004) (Transient)
	unsigned long                                      bHasScreenToCleanup : 1;                                  // 0x0624(0x0004)
	unsigned long                                      bMissionUpdated : 1;                                      // 0x0624(0x0004) (Transient)
	unsigned long                                      bHasReadiableWeapon : 1;                                  // 0x0624(0x0004) (Transient)
	unsigned long                                      bHasReadiableShield : 1;                                  // 0x0624(0x0004) (Transient)
	unsigned long                                      bHasReadiableGrenadeMod : 1;                              // 0x0624(0x0004) (Transient)
	unsigned long                                      bHasReadiableClassMod : 1;                                // 0x0624(0x0004) (Transient)
	unsigned long                                      bHasReadiableArtifact : 1;                                // 0x0624(0x0004) (Transient)
	unsigned long                                      bInListView : 1;                                          // 0x0624(0x0004)
	unsigned long                                      bContextMenuUp : 1;                                       // 0x0624(0x0004)
	unsigned long                                      bDisplayMarketingUnlockDialogOnNextTick : 1;              // 0x0624(0x0004) (Transient)
	unsigned long                                      bDraggingMouse : 1;                                       // 0x0624(0x0004) (Transient)
	unsigned long                                      bShouldSaveGame : 1;                                      // 0x0624(0x0004)
	unsigned char                                      MissionSortType;                                          // 0x0628(0x0001) (Transient)
	unsigned char                                      CurrentScreen;                                            // 0x0629(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x062A(0x0002) MISSED OFFSET
	int                                                MaxCapacity;                                              // 0x062C(0x0004)
	int                                                SlotsUsed;                                                // 0x0630(0x0004)
	float                                              InventoryRefreshRate;                                     // 0x0634(0x0004)
	int                                                CachedMaxCapacity;                                        // 0x0638(0x0004) (Transient)
	int                                                NewSlots;                                                 // 0x063C(0x0004) (Transient)
	int                                                CachedMaxReadied;                                         // 0x0640(0x0004) (Transient)
	int                                                MaxReadiedWeapons;                                        // 0x0644(0x0004) (Transient)
	TArray<struct FCachedInvData>                      CachedInventory;                                          // 0x0648(0x000C) (Transient, NeedCtorLink)
	class USkillTreeGFxObject*                         SkillTreePanel;                                           // 0x0654(0x0004) (Transient)
	class UStatusMenuMapGFxObject*                     StatusMenuMap;                                            // 0x0658(0x0004) (Transient)
	struct FCellContentData                            EquippedContents[0x8];                                    // 0x065C(0x0010) (Component)
	TArray<class AWillowInventory*>                    BackpackThings;                                           // 0x06DC(0x000C) (NeedCtorLink)
	TArray<class AWillowInventory*>                    AllThings;                                                // 0x06E8(0x000C) (NeedCtorLink)
	struct FName                                       CurrentCellName;                                          // 0x06F4(0x0008)
	struct FName                                       LastMainAction;                                           // 0x06FC(0x0008)
	struct FString                                     PlayerName;                                               // 0x0704(0x000C) (NeedCtorLink)
	int                                                ChangingCard;                                             // 0x0710(0x0004)
	TArray<struct FString>                             UsedManufacturers;                                        // 0x0714(0x000C) (NeedCtorLink)
	TArray<struct FString>                             UsedWeaponTypes;                                          // 0x0720(0x000C) (NeedCtorLink)
	TArray<struct FString>                             EquippedLabels;                                           // 0x072C(0x000C) (NeedCtorLink)
	struct FSortFilterConfiguration                    CompareConfiguration;                                     // 0x0738(0x0010) (NeedCtorLink)
	TArray<struct FSortFilterConfiguration>            SortConfigurations;                                       // 0x0748(0x000C) (NeedCtorLink)
	int                                                LeftSideSortConfigIndex;                                  // 0x0754(0x0004)
	struct FName                                       ScreenExitKey;                                            // 0x0758(0x0008)
	class UGFxTextListContainer*                       MissionLogTextList;                                       // 0x0760(0x0004)
	TArray<struct FString>                             MissionCategories;                                        // 0x0764(0x000C) (NeedCtorLink)
	struct FString                                     MoreArrowsDirection;                                      // 0x0770(0x000C) (NeedCtorLink)
	float                                              MoveHighlightRepeatRate;                                  // 0x077C(0x0004)
	struct FIntPoint                                   DragMouseLoc;                                             // 0x0780(0x0008) (Transient)
	float                                              MouseDragScale;                                           // 0x0788(0x0004) (Config)
	class UStatusMenuInventoryPanelGFxObject*          InventoryPanel;                                           // 0x078C(0x0004)
	class UChallengesScreenGFxObject*                  ChallengesPanel;                                          // 0x0790(0x0004)
	float                                              CurrentScreenTime;                                        // 0x0794(0x0004) (Transient)
	float                                              CurrMapZoomAudioLoopCounter;                              // 0x0798(0x0004) (Transient)
	float                                              PrevMapZoomAudioLoopCounter;                              // 0x079C(0x0004) (Transient)
	float                                              MapZoomAudioRefireDelay;                                  // 0x07A0(0x0004) (Transient)
	float                                              MapZoomAudioRefireDuration;                               // 0x07A4(0x0004)
	float                                              LastMissionLogTickTime;                                   // 0x07A8(0x0004) (Transient)
	int                                                TicksUntilPanelSwitchAllowed;                             // 0x07AC(0x0004)
	class UPCContextMenuObject*                        PCContextMenu;                                            // 0x07B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusMenuExGFxMovie");
		return ptr;
	}


	void TrySwitchToScreen(unsigned char DesiredScreen);
	void extChallLogDown();
	void extChallLogUp();
	void extGenericButtonClicked(const struct FString& ActionName);
	void extCellRolledOver(int BranchNum, int TierNum, int CellNum);
	void extCellClicked(int BranchNum, int TierNum, int CellNum);
	void EnableControl(bool bEnable);
	void extArtifactClose();
	void extArtifactSelect(int IdxSelected);
	void extSkillActivate();
	void extHoverSkillCell(const struct FString& HoveredCell);
	void NotifySkillPointsChanged();
	void InvalidateQuickAccess();
	void SetupSkillTree();
	bool PanMap(float X, float Y);
	void HandleMouseDrag(int dx, int DY);
	void StopMouseDrag();
	void HandleMapZoom(float Delta, bool bLoopingAudio);
	bool HandleMapInputAxis(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	bool HandleMapInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool HandleSkillsInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool CanToggleMissionView();
	bool CanShowWorldMissionView();
	bool CanShowClientMissionView();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void GotoNextTab();
	void GotoPrevTab();
	bool HasVehicleRestrictions();
	void ToggleUndiscoveredMissionVisibility();
	void RepositionMissionLog(int IndexToSelect);
	void OnMissionFilteredChanged();
	void ToggleMissionFiltered();
	bool IsHighlightedMissionFiltered();
	bool CanToggleHighlightedMissionFilter();
	void extStatusMenuMapPostMapMovieLoad(float Top, float Right, float Bottom, float Left);
	void UpdateMousePositionForMap();
	void extStatusMenuMapOnLoad(const struct FString& TargetPath);
	void ShowPopupModal(const struct FString& PopupText, const struct FString& PopupTitle);
	void ShowPopup(const struct FString& PopupText, const struct FString& PopupTitle);
	void extSetupNoMissionsPage();
	void GotoRegularMissions();
	void GotoNoMissions();
	void ResetScroll();
	void UpdateActiveMissionIcon();
	void OnActiveMissionChanged();
	void HitEnterOnLog();
	void ScrollSidePanel(const struct FString& Direction);
	void SetDescriptionScrollValue(float NewScrollValue);
	void extSetDescriptionScrollValue(float NewScrollValue);
	void extChallListTrack(int SlotIndex);
	void extChallListRollOver(int SlotIndex);
	void extLogListTrack(int SlotIndex);
	void extLogListRollOver(int SlotIndex);
	void extLogDown();
	void LogDown();
	void extLogUp();
	void LogUp();
	void SetLevelAndDifficulty(const struct FString& LevelText, const struct FString& Difficulty);
	void SetRewardsItem();
	void SetRewardsXP(const struct FString& XPText);
	void SetPlayerXP(const struct FString& XPText, int XPPercent);
	void SetPlayerLevel(const struct FString& LevelText);
	void SetRewardsTotalOtherCurrency(int Amount);
	void SetRewardsTotalCredits(int Credits);
	void SetPlayerDisplayedEridium(int Eridium);
	void SetPlayerTotalEridium(int Eridium);
	void SetPlayerDisplayedCredits(int Credits);
	void SetPlayerTotalCredits(int Credits);
	void SetRewardCard(class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC);
	void SetInnerReward(class UGFxObject* InnerRewardClip, const struct FMissionRewardPresentationData& Presentation);
	TArray<struct FMissionRewardPresentationData> GetRewardPresentations(class UMissionDefinition* MissionDef, class AWillowPlayerController* WPC);
	void SetScrollArrows();
	void UpdateGeneralDetails();
	static struct FString GetRightMostDelimited(const struct FString& Text, const struct FString& Delimiter);
	void UpdateMissionDetails();
	void OnMissionObjectivesChanged(class UMissionDefinition* MissionThatChanged);
	void SetActiveMission(int Index);
	void UpdateListOfMissionTitles();
	static void FilterMissions(TArray<struct FStatusMenuMissionEligibilityData>* MissionSet);
	static void StaticFilterMissions(TArray<struct FStatusMenuMissionEligibilityData>* MissionSet);
	static class UMissionDefinition* GetHighestPlotMissionDependency(class UMissionDefinition* InMission);
	static bool ArePlotMissionsInSequence(class UMissionDefinition* CurrentMission, class UMissionDefinition* PreviousMission);
	static class UMissionDefinition* GetHighestChainedPlotMissionCompleted(TArray<struct FStatusMenuMissionEligibilityData> MissionSet, class UDownloadableExpansionDefinition* DlcExpansion);
	static bool AllSideMissionDependenciesComplete(TArray<struct FStatusMenuMissionEligibilityData> MissionSet, class UMissionDefinition* InMission);
	static void GetUndiscoveredMissions(TArray<struct FStatusMenuMissionEligibilityData> MissionSet, class UDownloadableExpansionDefinition* DlcExpansion, class AWillowPlayerController* OwningPC, TArray<class UMissionDefinition*>* out_UndiscoveredMissions);
	static void GetAllUndiscoveredMissions(TArray<struct FStatusMenuMissionEligibilityData> MissionSet, class AWillowPlayerController* OwningPC, TArray<class UMissionDefinition*>* out_UndiscoveredMissions);
	static int GetFirstMissionNumber(class UDownloadableExpansionDefinition* DlcExpansion);
	void UpdateMissionTextList();
	void SetAvailability(bool T1, bool T2, bool T3, bool T4, bool T5, bool T6, bool T7, bool T8, bool T9, bool T10, bool T11, bool T12, bool T13, bool T14, bool T15, bool T16);
	void SetupChallengesScreen();
	bool IsPrimaryHostPlayer();
	void extSetupMissionLogScreen();
	void OnMissionStatusChanged();
	void ChangeMissionLogSorting();
	unsigned char GetNextMissionSortType();
	void SetupGenericLogs(class AWillowPlayerController* WPC);
	void SetCellsForWeaponEquipping(bool bIsEquipping);
	void EnterCellsView();
	void SwitchToCellsView();
	void EnterListView();
	void SwitchToListView();
	void ConditionallyScroll(const struct FString& Direction);
	void MoveHighlight();
	void StopMovingHighlight();
	void StartMovingHighlight();
	void extInventoryListSet(int NewEntry);
	void extInventoryListMove(const struct FString& Direction);
	void extCellsSet(const struct FString& NewCellString);
	bool IsCellValid(const struct FName& NewCell);
	struct FName TryToFindNextValidCell(const struct FName& Direction, const struct FName& NewCell);
	void ProcessCellMove(const struct FName& Direction);
	void extInventoryCellMove(const struct FString& Direction);
	void UpdateCardPanel(int CardIndex, class AWillowInventory* MainThing, class AWillowInventory* OtherThing);
	void AddCell(const struct FString& CellName);
	void SetDissimilarCells();
	void FlourishDrop();
	void extDropItem();
	void EquipFlourish(const struct FString& CellName);
	void DetachCell(int CellIndex);
	void UpdateCellData(int CellIndex, class AWillowInventory* TheItem, class UMeshComponent* TheMesh);
	void FreeCellData();
	void InitCellData();
	void extContextMenuClicked(const struct FString& Tag);
	void ShowContextMenuWrapper();
	void ShowContextMenu();
	void Cancel();
	void SetSelectedState(const struct FString& CellName, unsigned char NewState);
	void RestoreAllNormalState();
	void DisableCancel();
	void EnableCancel();
	void extUpdateBackpackListSize(int NewSize);
	void PrepareForCompare_Equipped();
	void PrepareForCompare_Backpack();
	void CleanupCompare();
	void extQuitCompare();
	void extCard2Visible(bool bCard2OnLeft);
	void extCompare();
	class AWillowInventory* GetEquippedCellInventory(int CellIndex);
	class AWillowInventory* GetHighlightedCellEntry();
	class AWillowInventory* GetHighlightedRightSideEntry();
	class AWillowInventory* GetHighlightedLeftSideEntry();
	class AWillowInventory* GetCurrentHighlightedObject();
	void ClearInventoryRefreshTimer();
	void SetInventoryRefreshTimer();
	void RefreshInventoryScreen(bool bForce);
	bool HasAnyBackpackOfCorrectType();
	bool CanSort();
	bool CanSwap(class AWillowInventory* WInv);
	bool CanUnready(class AWillowInventory* WInv);
	bool CanReady(class AWillowInventory* WInv);
	bool CanDrop(class AWillowInventory* WInv);
	bool CanCompare(class AWillowInventory* WInv);
	void SetInventoryTooltipsText(class AWillowInventory* WInv);
	void SetTooltipsText();
	struct FString GetSortString(unsigned char SortType);
	bool CanTrackHighlightedMission();
	bool GetCurrentMainAction(class AWillowInventory* WInv, struct FName* MainAction);
	void extToggleSort(const struct FString& Direction);
	void extUpdateLeftSideListSize(int NewSize);
	void extSetInitialHighlightBar(const struct FString& Container);
	void SortContainer(class UGFxTextListContainer* Container);
	void UpdateCachedInventoryMarkForThing(class AWillowInventory* Thing);
	void UpdateCachedInventoryMarks();
	void PrepareListOfAllInventory();
	bool IsComparing();
	void SetupInventoryScreen();
	bool InventoryPanelInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void ShowInventoryContextMenu(bool bIsCompareMode);
	void InventoryContextMenuClosed();
	void InventoryContextMenuActivated(const struct FString& Action);
	void GetPlayerThings(TArray<class AWillowInventory*>* Things);
	void SetPlayerCardInfo(const struct FString& ClassModText, const struct FString& ClassModFrameLabel, const struct FString& LevelText, int LevelPercent, const struct FString& XPText, int XPPercent, const struct FString& ShieldText, int ShieldPercent, const struct FString& HealthText, int HealthPercent);
	void SetCondensedHealthWidget_Wrapper(const struct FString& HealthText, int HealthNumber);
	void SetCondensedHealthWidget();
	void DisplayMarketingUnlockDialogIfNecessary();
	void HandleCurrencyChanged(const struct FCurrencyState& ChangedCurrency);
	void OnClose();
	unsigned char GetScreenByName(const struct FString& ScreenName);
	void CleanupScreen(unsigned char Screen);
	void extSetCurrentScreen(const struct FString& ScreenName);
	void Flash_SetMissionLogEnabled(bool bEnabled);
	void Flash_SetVehicleRestrictions();
	void Flash_SetCurrentScreen();
	struct FString GetInitialScreen();
	unsigned char GetInitialMissionSortType();
	int GetCurrentTab();
	void FinishClosing();
	void Hide();
	void DisplayRewardsPanel(const struct FPendingMissionRewardData& MissionReward);
	void TryDisplayRewardPanel();
	static void GetAllWorldMissions(TArray<struct FStatusMenuMissionEligibilityData>* out_WorldMissions);
	void RegisterMissionDelegates();
	void InitForConsole();
	void InitForPC();
	bool AmITheStatusMenu();
	bool Start(bool StartPaused);
};


// Class WillowGame.TradingGFxMovie
// 0x0154 (0x0468 - 0x05BC)
class UTradingGFxMovie : public UWillowInventoryGFxMovie
{
public:
	struct FString                                     OfferingString;                                           // 0x0468(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ReceivingString;                                          // 0x0474(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipString;                                            // 0x0480(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ToolTipString_Split;                                      // 0x048C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ReadyString;                                              // 0x0498(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TradeString;                                              // 0x04A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DuelString;                                               // 0x04B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CancelDuelString;                                         // 0x04BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CancelTradeString;                                        // 0x04C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WinnerTakeAllString;                                      // 0x04D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoRoomForItemsString;                                     // 0x04E0(0x000C) (Const, Localized, NeedCtorLink)
	int                                                MyMoneyOffer;                                             // 0x04EC(0x0004) (Transient)
	int                                                CachedPartnerMoneyOffer;                                  // 0x04F0(0x0004) (Transient)
	unsigned char                                      CachedMyStance;                                           // 0x04F4(0x0001) (Transient)
	unsigned char                                      CachedPartnerStance;                                      // 0x04F5(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04F6(0x0002) MISSED OFFSET
	struct FCellContentData                            OfferedContents[0x8];                                     // 0x04F8(0x0010) (Component)
	TArray<class AWillowInventory*>                    BackpackThings;                                           // 0x0578(0x000C) (NeedCtorLink)
	class UTradingPanelGFxObject*                      TradingPanel;                                             // 0x0584(0x0004)
	class UTradingGFxDefinition*                       TradingDef;                                               // 0x0588(0x0004)
	struct FSortFilterConfiguration                    CompareConfiguration;                                     // 0x058C(0x0010) (NeedCtorLink)
	TArray<struct FSortFilterConfiguration>            GenericSortConfigurations;                                // 0x059C(0x000C) (NeedCtorLink)
	int                                                GenericSortConfigIndex;                                   // 0x05A8(0x0004)
	unsigned long                                      bDoDuelingCheck : 1;                                      // 0x05AC(0x0004)
	unsigned long                                      bDuelingAllowed : 1;                                      // 0x05AC(0x0004)
	unsigned long                                      bUseTextboxForMoney : 1;                                  // 0x05AC(0x0004)
	struct FString                                     LastMoneyOfferString;                                     // 0x05B0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TradingGFxMovie");
		return ptr;
	}


	bool UpdateMoneyOfferFromTextbox();
	void extGenericButtonClicked(const struct FString& ActionName);
	void extMoneyWidgetActivated(bool bActivated);
	void FreeCellData();
	class AWillowInventory* GetLocalInvForTradeSlot(const struct FTradeSlot& Slot);
	void OnPartnerInvChanged();
	class AWillowInventory* GetOfferedCellInventory(int CellIndex);
	void UpdateTimer();
	void extSetDuel(bool bNewDuel);
	void extSetTrade(bool bNewTrade);
	void UnselectActionButtons();
	void SetPlayerInventoryMoney(int Money);
	void SetPartnerMoneyOffer(int PartnerMoneyOffer);
	void SetPlayerMoneyOffer(int PlayerMoneyOffer);
	void OnClose();
	void UpdateMoneyOffer(int iMoney);
	void extExitMoneyWidget(float fMoney);
	void TweenOut();
	void BeginClosing();
	void InitTradingScreen();
	void SetTooltips();
	class AWillowTradeManager* GetTradeManager();
	void InitCellData();
	bool IsOffering(class AWillowInventory* WInv, bool bPartner);
	void AddInventory(class AWillowInventory* WInv);
	void PrepareListOfAllInventory();
	void RefreshContents();
	void InitForConsole();
	void InitForPC();
	bool Start(bool StartPaused);
};


// Class WillowGame.TwoPanelInterfaceGFxMovie
// 0x003C (0x0468 - 0x04A4)
class UTwoPanelInterfaceGFxMovie : public UWillowInventoryGFxMovie
{
public:
	class UTwoPanelInterfaceGFxObject*                 TwoPanelInterface;                                        // 0x0468(0x0004)
	unsigned long                                      bShouldStartOnLeftPanel : 1;                              // 0x046C(0x0004) (Config)
	TArray<struct FSortFilterConfiguration>            GenericSortConfigurations;                                // 0x0470(0x000C) (NeedCtorLink)
	int                                                GenericSortConfigIndex_Storage;                           // 0x047C(0x0004)
	int                                                GenericSortConfigIndex_Player;                            // 0x0480(0x0004)
	class AWillowInteractiveObject*                    InteractiveObjectContext;                                 // 0x0484(0x0004)
	struct FString                                     StoragePanelLabel;                                        // 0x0488(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerPanelLabel;                                         // 0x0494(0x000C) (Const, Localized, NeedCtorLink)
	int                                                NumHeaderButtons;                                         // 0x04A0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TwoPanelInterfaceGFxMovie");
		return ptr;
	}


	void SetItemLocation(class AWillowInventory* Thing);
	void PressedHotkeyNumber(int HotkeyNum);
	void extGenericButtonClicked(const struct FString& ActionName);
	void InitForConsole();
	void InitForPC();
	void SetTooltips();
	struct FString _GetAddTip();
	struct FString GetAddTip();
	void AttachBackgroundClip(const struct FString& PathToBackgroundClip);
	void OnCellPressed(class UBaseInventoryPanelGFxObject* Panel);
	void PanelOnItemSelected(class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing);
	bool ShouldStoragePanelHighlightFrozen();
	class AWillowInventory* GetSelectedThing();
	struct FString GetPlayerPanelLabel();
	struct FString GetStoragePanelLabel();
	bool ShouldShowPanelNavTooltips();
	void NotifySelectionChange();
	unsigned char GetCurrencyTypeForInventory(class AWillowInventory* WInv);
	int GetOverridePriceForInventory(class AWillowInventory* WInv);
	void GetSortConfigDataForPanel(class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData);
	void OnLeftPanelInit(class UInventoryListPanelGFxObject* LeftPanel);
	FScriptInterface GetStorageReferenceForTransferring();
	FScriptInterface GetStorageReferenceForSwapping();
	void GetPlayerPanelItems(TArray<class AWillowInventory*>* Things);
	void GetStoragePanelItems(TArray<class AWillowInventory*>* Things, int* UnloadableCount);
	struct FString GetTitle();
	bool ShouldStartOnLeftPanel();
	void InitCardCellData(const struct FCardInfo& MainCardInfo);
	void extInitMainPanel(const struct FString& MainPanelTargetPath);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.VendingMachineExGFxMovie
// 0x016C (0x0468 - 0x05D4)
class UVendingMachineExGFxMovie : public UWillowInventoryGFxMovie
{
public:
	class AWillowVendingMachineBase*                   VM;                                                       // 0x0468(0x0004)
	class UVendingMachineExGFxDefinition*              VMGFxDef;                                                 // 0x046C(0x0004)
	class AWillowPawn*                                 OwnerInventoryPawn;                                       // 0x0470(0x0004)
	struct FShopItemData                               ItemOfTheDayData;                                         // 0x0474(0x000C)
	TArray<struct FShopItemData>                       ShopItems;                                                // 0x0480(0x000C) (NeedCtorLink)
	TArray<struct FShopItemData>                       BuyBackItems;                                             // 0x048C(0x000C) (NeedCtorLink)
	unsigned long                                      bIsStoragePanelShowingBuyback : 1;                        // 0x0498(0x0004)
	unsigned long                                      bShouldStartOnLeftPanel : 1;                              // 0x0498(0x0004) (Config)
	unsigned long                                      bOnItemOfTheDay : 1;                                      // 0x0498(0x0004)
	class UTwoPanelInterfaceGFxObject*                 TwoPanelInterface;                                        // 0x049C(0x0004)
	class UItemOfTheDayPanelGFxObject*                 ItemOfTheDayPanel;                                        // 0x04A0(0x0004)
	class UValueGFxObject*                             PlayerMoney;                                              // 0x04A4(0x0004)
	class UHealthBarGFxObject*                         HealthBar;                                                // 0x04A8(0x0004)
	class UShieldBarGFxObject*                         ShieldBar;                                                // 0x04AC(0x0004)
	class UAmmoPanelGFxObject*                         AmmoPanel;                                                // 0x04B0(0x0004)
	class UVendingMachineFeedbackGFxObject*            Feedback;                                                 // 0x04B4(0x0004)
	struct FString                                     HealthShopTitle;                                          // 0x04B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ItemsShopTitle;                                           // 0x04C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WeaponsShopTitle;                                         // 0x04D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BlackMarketTitle;                                         // 0x04DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     VisitLabel;                                               // 0x04E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ItemOfTheDayLabel;                                        // 0x04F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     VisitLabel_BlackMarket;                                   // 0x0500(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ItemOfTheDayLabel_BlackMarket;                            // 0x050C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StoragePanelLabel;                                        // 0x0518(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerPanelLabel;                                         // 0x0524(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BuybackPanelLabel;                                        // 0x0530(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ComparePanelLabel;                                        // 0x053C(0x000C) (Const, Localized, NeedCtorLink)
	unsigned char                                      CurrentSelectionShopStatus;                               // 0x0548(0x0001)
	unsigned char                                      ShopType;                                                 // 0x0549(0x0001)
	unsigned char                                      bCanAcceptInput;                                          // 0x054A(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x054B(0x0001) MISSED OFFSET
	class AWillowInventory*                            CurrentSelectionItem;                                     // 0x054C(0x0004)
	int                                                CachedCurrency;                                           // 0x0550(0x0004)
	int                                                StoragePanelSortConfigIndex;                              // 0x0554(0x0004)
	int                                                PlayerPanelSortConfigIndex;                               // 0x0558(0x0004)
	TArray<struct FSortFilterConfiguration>            WeaponsSortConfigurations;                                // 0x055C(0x000C) (NeedCtorLink)
	int                                                WeaponsSortConfigIndex;                                   // 0x0568(0x0004)
	TArray<struct FSortFilterConfiguration>            HealthSortConfigurations;                                 // 0x056C(0x000C) (NeedCtorLink)
	int                                                HealthSortConfigIndex;                                    // 0x0578(0x0004)
	TArray<struct FSortFilterConfiguration>            GrenadesSortConfigurations;                               // 0x057C(0x000C) (NeedCtorLink)
	int                                                GrenadesSortConfigIndex;                                  // 0x0588(0x0004)
	TArray<struct FSortFilterConfiguration>            BlackMarketSortConfigurations;                            // 0x058C(0x000C) (NeedCtorLink)
	int                                                BlackMarketSortConfigIndex;                               // 0x0598(0x0004)
	TArray<struct FSortFilterConfiguration>            GenericSortConfigurations;                                // 0x059C(0x000C) (NeedCtorLink)
	int                                                GenericSortConfigIndex;                                   // 0x05A8(0x0004)
	struct FSortFilterConfiguration                    CompareConfiguration;                                     // 0x05AC(0x0010) (NeedCtorLink)
	float                                              VendingMachineRefreshRate;                                // 0x05BC(0x0004)
	int                                                NumHeaderButtons;                                         // 0x05C0(0x0004) (Transient)
	class UPCContextMenuObject*                        PCContextMenu;                                            // 0x05C4(0x0004) (Transient)
	struct FString                                     ShopIconBase;                                             // 0x05C8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VendingMachineExGFxMovie");
		return ptr;
	}


	void SetItemLocation(class AWillowInventory* Thing);
	void CycleSelectedThingAsTrashOrFavorite();
	void PressedHotkeyNumber(int HotkeyNum);
	void extGenericButtonClicked(const struct FString& ActionName);
	void InitForConsole();
	void InitForPC();
	void RefreshShieldBar();
	void RefreshHealthBar();
	void TweenOut();
	void BeginClosing();
	void SetTooltips();
	void FinishCompare(const struct FName& ukey);
	void StartCompare(const struct FName& ukey);
	void CheckShopOpStatus();
	bool CanSellAllTrash();
	void SellAllTrash();
	void PlayFeedback_CannotCarryOrUse();
	void PlayFeedback_CannotAfford();
	void ConditionalStartTransfer(const struct FName& ukey);
	bool GetCurrentShopMode(unsigned char* ShopMode, int* bCanActivate);
	bool IsCurrentSelectionBuyBack();
	bool IsCurrentSelectionSell();
	unsigned char GetStatusForItem(class AWillowInventory* Thing);
	void EvaluateCurrentSelection();
	bool ShouldStoragePanelHighlightFrozen();
	void SwitchToItemOfTheDay();
	void SwitchToPanels();
	void OnPanelRollOver(class UInventoryListPanelGFxObject* Panel, int ControllerId);
	void OnDynamicCardUpdated(class AWillowInventory* WInv);
	void InspectItem(class AWillowInventory* Thing);
	bool CompareInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool HandleItemOfTheDayInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool CanSwitchToBuyback();
	bool MainInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnInventoryPanelSetActive(class UBaseInventoryPanelGFxObject* PanelObject, bool bActive);
	void ShowContextMenu(bool bIsCompareMode);
	class UGFxObject* GetCurrentCellObject();
	void ContextMenuClosed();
	void ContextMenuActivated(const struct FString& Action);
	void OnCellPressed(class UBaseInventoryPanelGFxObject* Panel);
	void PanelOnItemSelected(class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing);
	class AWillowInventory* GetSelectedThing();
	struct FString GetPlayerPanelLabel();
	struct FString GetStoragePanelLabel();
	void NotifySelectionChange();
	unsigned char GetCurrencyTypeForInventory(class AWillowInventory* WInv);
	int GetOverridePriceForInventory(class AWillowInventory* WInv);
	void GetSortConfigDataForPanel(class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData);
	void SetPlayerCurrencyType(int CurrencyType);
	FScriptInterface GetStorageReferenceForTransferring();
	FScriptInterface GetStorageReferenceForSwapping();
	void GetPlayerPanelItems(TArray<class AWillowInventory*>* Things);
	void GetStoragePanelItems(TArray<class AWillowInventory*>* Things, int* UnloadableCount);
	struct FString GetTitle();
	bool ShouldStartOnLeftPanel();
	bool ShouldShowPanelNavTooltips();
	void SetCreditsDisplay();
	unsigned char GetCurrencyType();
	void UpdateTimeRemaining();
	void OnTick();
	void ConfigureShopForType(unsigned char InShopType);
	void Refresh();
	void RefreshStoragePanelItems(TArray<struct FShopItemData>* NewList);
	void RefreshTransientData();
	void ClearVendingMachineRefreshTimer();
	void SetVendingMachineRefreshTimer();
	class UTexture* InitCardCellThumbnail(const struct FCardInfo& InCardInfo);
	void FreeTextures();
	void OnClose();
	void ConfigureForType_IOTD();
	void ConfigureForType_TPI();
	void ConfigureForType_Shop();
	void OnLeftPanelInit(class UInventoryListPanelGFxObject* LeftPanel);
	void extInitMainPanel(const struct FString& MainPanelTargetPath);
	void extInitCustomItemOfTheDayBackground();
	void extInitItemOfTheDayPanel(const struct FString& ItemOfTheDayPanelPath);
	void extInitVendingMachine();
	bool Start(bool StartPaused);
};


// Class WillowGame.WillowHUDGFxMovie
// 0x0550 (0x0390 - 0x08E0)
class UWillowHUDGFxMovie : public UWillowGFxMovie3D
{
public:
	unsigned long                                      bIsWidescreen : 1;                                        // 0x0390(0x0004)
	unsigned long                                      bIsPrimary : 1;                                           // 0x0390(0x0004)
	unsigned long                                      bUsingPC360 : 1;                                          // 0x0390(0x0004)
	unsigned long                                      bUpdateSplitRegionNextTick : 1;                           // 0x0390(0x0004)
	unsigned long                                      bHasEverPickedUpGrenades : 1;                             // 0x0390(0x0004) (Transient)
	unsigned long                                      bShowLevelTimer : 1;                                      // 0x0390(0x0004) (Config)
	unsigned long                                      bShowIpAddr : 1;                                          // 0x0390(0x0004) (Config)
	unsigned long                                      bGameStageDebugEnabled : 1;                               // 0x0390(0x0004)
	unsigned long                                      bCachedPersistentMapNameMatchesRecordingList : 1;         // 0x0390(0x0004) (Transient)
	unsigned long                                      bDisplayTradeIcon_HUD : 1;                                // 0x0390(0x0004) (Transient)
	unsigned long                                      bDisplayTradeDisabledIcon_HUD : 1;                        // 0x0390(0x0004) (Transient)
	unsigned long                                      RetryTraining_PausesGame : 1;                             // 0x0390(0x0004) (Transient)
	unsigned long                                      RetryTraining_bIsntActuallyATrainingMessage : 1;          // 0x0390(0x0004) (Transient)
	unsigned long                                      RetryTraining_bMandatory : 1;                             // 0x0390(0x0004) (Transient)
	unsigned long                                      bMidTick : 1;                                             // 0x0390(0x0004) (Transient)
	unsigned char                                      SplitscreenMode;                                          // 0x0394(0x0001)
	unsigned char                                      bIsInVehicle;                                             // 0x0395(0x0001)
	unsigned char                                      bNeedsWidgetsRenewed;                                     // 0x0396(0x0001)
	unsigned char                                      bNeedsXPUpdate;                                           // 0x0397(0x0001) (Transient)
	unsigned char                                      bCachedKillSkillsEnabled;                                 // 0x0398(0x0001) (Transient)
	unsigned char                                      bCachedShieldPrimed;                                      // 0x0399(0x0001) (Transient)
	unsigned char                                      CachedHasActiveSkill;                                     // 0x039A(0x0001) (Transient)
	unsigned char                                      bCachedCrouched;                                          // 0x039B(0x0001) (Transient)
	unsigned char                                      bCachedInjured;                                           // 0x039C(0x0001) (Transient)
	unsigned char                                      bCachedHadReviveTarget;                                   // 0x039D(0x0001) (Transient)
	unsigned char                                      CachedActionSkillTooltip;                                 // 0x039E(0x0001) (Transient)
	unsigned char                                      bActionSkillGuideIsHidden;                                // 0x039F(0x0001) (Transient)
	unsigned char                                      CachedAllyExists[0x3];                                    // 0x03A0(0x0001) (Transient)
	unsigned char                                      bCachedAllyInjured[0x3];                                  // 0x03A3(0x0001) (Transient)
	unsigned char                                      bCachedAllyReviving[0x3];                                 // 0x03A6(0x0001) (Transient)
	unsigned char                                      bDrawEnemyHealth;                                         // 0x03A9(0x0001)
	unsigned char                                      bNewTarget;                                               // 0x03AA(0x0001)
	unsigned char                                      bLastShieldPresentUpdated;                                // 0x03AB(0x0001)
	unsigned char                                      bLastMinibarPresentUpdated;                               // 0x03AC(0x0001)
	unsigned char                                      bLastChampionUpdated;                                     // 0x03AD(0x0001)
	unsigned char                                      bLastFullyArmoredUpdated;                                 // 0x03AE(0x0001)
	unsigned char                                      bLastBeingHealedUpdated;                                  // 0x03AF(0x0001)
	unsigned char                                      EquippedCardType;                                         // 0x03B0(0x0001) (Transient)
	unsigned char                                      bCachedBoundaryWarningEnabled;                            // 0x03B1(0x0001) (Transient)
	unsigned char                                      DesiredCrosshairColor;                                    // 0x03B2(0x0001) (Transient)
	unsigned char                                      bCachedBossBar;                                           // 0x03B3(0x0001) (Transient)
	unsigned char                                      bCachedBossHasShield;                                     // 0x03B4(0x0001) (Transient)
	unsigned char                                      bCachedRecording;                                         // 0x03B5(0x0001) (Transient)
	unsigned char                                      RetryTraining_StatusMenuTab;                              // 0x03B6(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03B7(0x0001) MISSED OFFSET
	float                                              LastShutoffTime;                                          // 0x03B8(0x0004)
	class APawn*                                       Pawn;                                                     // 0x03BC(0x0004)
	class AWillowPlayerReplicationInfo*                WPRI;                                                     // 0x03C0(0x0004)
	class AWillowWeapon*                               WWeap;                                                    // 0x03C4(0x0004)
	class AWillowHUD*                                  MyHUDOwner;                                               // 0x03C8(0x0004)
	class UHUDDefinition*                              MyHUDDefinition;                                          // 0x03CC(0x0004)
	struct FCriticalTextMessageArray                   CriticalTextMessages;                                     // 0x03D0(0x000C) (NeedCtorLink)
	struct FCriticalTextMessageArray                   ChatTextMessages;                                         // 0x03DC(0x000C) (NeedCtorLink)
	struct FCriticalTextMessageArray                   TrainingTextMessages;                                     // 0x03E8(0x000C) (NeedCtorLink)
	struct FResourcePoolReference                      SavedGrenadePool;                                         // 0x03F4(0x000C) (Transient)
	float                                              CachedXP;                                                 // 0x0400(0x0004) (Transient)
	int                                                NumSkillSkillsVisible;                                    // 0x0404(0x0004) (Transient)
	float                                              CachedCooldown;                                           // 0x0408(0x0004) (Transient)
	float                                              CachedMaxCooldown;                                        // 0x040C(0x0004) (Transient)
	int                                                CachedCooldownFrame;                                      // 0x0410(0x0004) (Transient)
	struct FCachedWeaponInfo                           CachedWeaponInfo;                                         // 0x0414(0x0028) (Transient, NeedCtorLink)
	class UHUDWidget_Crosshairs*                       CrosshairWidget;                                          // 0x043C(0x0004) (Transient)
	int                                                CachedGrenades;                                           // 0x0440(0x0004) (Transient)
	int                                                CachedMaxGrenades;                                        // 0x0444(0x0004) (Transient)
	class AWillowGrenadeMod*                           CachedGrenadeMod;                                         // 0x0448(0x0004) (Transient)
	class UItemNamePartDefinition*                     CachedClassModNamePart;                                   // 0x044C(0x0004) (Transient)
	float                                              CachedHealth;                                             // 0x0450(0x0004) (Transient)
	float                                              CachedMaxHealth;                                          // 0x0454(0x0004) (Transient)
	float                                              CachedShields;                                            // 0x0458(0x0004) (Transient)
	float                                              CachedMaxShields;                                         // 0x045C(0x0004) (Transient)
	struct FString                                     CachedShieldType;                                         // 0x0460(0x000C) (Transient, NeedCtorLink)
	class UWillowDamageTypeDefinition*                 CachedShieldDamageResistanceType;                         // 0x046C(0x0004) (Transient)
	class UGFxObject*                                  ShieldClip;                                               // 0x0470(0x0004) (Transient)
	int                                                CachedLevel;                                              // 0x0474(0x0004) (Transient)
	class UPlayerNameIdentifierDefinition*             CachedPlayerNameIds;                                      // 0x0478(0x0004) (Transient)
	int                                                CachedSkillPointsToSpend;                                 // 0x047C(0x0004) (Transient)
	float                                              SkillPointsPromptTimer;                                   // 0x0480(0x0004) (Transient)
	float                                              CachedAfterburner;                                        // 0x0484(0x0004) (Transient)
	float                                              CachedCreditStopTime;                                     // 0x0488(0x0004) (Transient)
	int                                                CachedExCurrency[0xD];                                    // 0x048C(0x0004) (Transient)
	float                                              CachedExCurrencyStopTime;                                 // 0x04C0(0x0004) (Transient)
	float                                              CachedCreditRemovalStopTime;                              // 0x04C4(0x0004) (Transient)
	float                                              MoneyWidgetInterval;                                      // 0x04C8(0x0004) (Config)
	float                                              ExCurrencyWidgetInterval;                                 // 0x04CC(0x0004) (Config)
	float                                              MoneyRemovalInterval;                                     // 0x04D0(0x0004) (Config)
	struct FString                                     MoneyRemovalFrame;                                        // 0x04D4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FCellContentData>                    WeaponSelect;                                             // 0x04E0(0x000C) (Transient, Component, NeedCtorLink)
	int                                                CachedInjuredPct;                                         // 0x04EC(0x0004) (Transient)
	int                                                CachedRevivePct;                                          // 0x04F0(0x0004) (Transient)
	int                                                CachedTargetRevivePct;                                    // 0x04F4(0x0004) (Transient)
	float                                              CachedActionSkillTime;                                    // 0x04F8(0x0004) (Transient)
	struct FString                                     CachedAllyName[0x3];                                      // 0x04FC(0x000C) (Transient, NeedCtorLink)
	class UItemNamePartDefinition*                     CachedAllyClassModNamePart[0x3];                          // 0x0520(0x0004) (Transient)
	float                                              CachedAllyHealth[0x3];                                    // 0x052C(0x0004) (Transient)
	float                                              CachedAllyMaxHealth[0x3];                                 // 0x0538(0x0004) (Transient)
	float                                              CachedAllyShields[0x3];                                   // 0x0544(0x0004) (Transient)
	float                                              CachedAllyMaxShields[0x3];                                // 0x0550(0x0004) (Transient)
	int                                                CachedAllyLevel[0x3];                                     // 0x055C(0x0004) (Transient)
	class UPlayerNameIdentifierDefinition*             CachedAllyPlayerNameIds[0x3];                             // 0x0568(0x0004) (Transient)
	int                                                CachedAllyInjuredPct[0x3];                                // 0x0574(0x0004) (Transient)
	int                                                CachedAllyTeamBuffs[0x3];                                 // 0x0580(0x0004) (Transient)
	FScriptInterface                                   CurrentTargetable;                                        // 0x058C(0x0008)
	FScriptInterface                                   LastTargetable;                                           // 0x0594(0x0008)
	FScriptInterface                                   FadingTargetable;                                         // 0x059C(0x0008)
	class UPawnAllegiance*                             CurrentTargetAllegiance;                                  // 0x05A4(0x0004)
	class UPawnAllegiance*                             LastTargetAllegiance;                                     // 0x05A8(0x0004)
	int                                                LastMyLevelUpdated;                                       // 0x05AC(0x0004)
	float                                              LastHealthUpdated;                                        // 0x05B0(0x0004)
	float                                              LastShieldUpdated;                                        // 0x05B4(0x0004)
	float                                              LastMinibarUpdated;                                       // 0x05B8(0x0004)
	float                                              CurrentHealth;                                            // 0x05BC(0x0004)
	float                                              CurrentShield;                                            // 0x05C0(0x0004)
	float                                              CurrentMinibar;                                           // 0x05C4(0x0004)
	int                                                LastEnemyLevelUpdated;                                    // 0x05C8(0x0004)
	struct FString                                     LastEnemyNameUpdated;                                     // 0x05CC(0x000C) (NeedCtorLink)
	class UGFxObject*                                  TargetWidgetClip;                                         // 0x05D8(0x0004) (Transient)
	int                                                DangerousDifference;                                      // 0x05DC(0x0004)
	int                                                ImpossibleDifference;                                     // 0x05E0(0x0004)
	float                                              SkillPointsPromptInterval;                                // 0x05E4(0x0004) (Config)
	class UGearboxRenderTextureManager*                RTM;                                                      // 0x05E8(0x0004) (Transient)
	class AWillowInventory*                            SavedEquippedItemForCard;                                 // 0x05EC(0x0004) (Transient)
	class AWillowInventory*                            SavedComparisonItemForCard;                               // 0x05F0(0x0004) (Transient)
	float                                              EquippedCardHideTime;                                     // 0x05F4(0x0004) (Transient)
	int                                                QueuedLevelUpLevel;                                       // 0x05F8(0x0004)
	struct FHUDInteractionIcon                         CurrentInteractionIcon;                                   // 0x05FC(0x0028) (Transient)
	struct FString                                     AllyLeveledUpString;                                      // 0x0624(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AllyDyingString;                                          // 0x0630(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AllyRevivingString;                                       // 0x063C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerInjuredString;                                      // 0x0648(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SecondWindString;                                         // 0x0654(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerRevivingString;                                     // 0x0660(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RevivingTargetString;                                     // 0x066C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     InjuredTooltipString1;                                    // 0x0678(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     InjuredTooltipString2;                                    // 0x0684(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ContextualPromptString;                                   // 0x0690(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ContextualPromptButtonString;                             // 0x069C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CannotOpenMenuString;                                     // 0x06A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CannotSpendMoneyString;                                   // 0x06B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BadassTokenGet;                                           // 0x06C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CharacterHeadGet;                                         // 0x06CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CharacterSkinGet;                                         // 0x06D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     VehicleSkinGet;                                           // 0x06E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     XPGet;                                                    // 0x06F0(0x000C) (Const, Localized, NeedCtorLink)
	float                                              LastHUDTickTime;                                          // 0x06FC(0x0004) (Transient)
	float                                              CrosshairSmoothingSpeed;                                  // 0x0700(0x0004)
	struct FString                                     MyIpAddress;                                              // 0x0704(0x000C) (NeedCtorLink)
	int                                                LastLevelTimerTime;                                       // 0x0710(0x0004)
	struct FString                                     LevelTimerString;                                         // 0x0714(0x000C) (NeedCtorLink)
	struct FString                                     GameStageString;                                          // 0x0720(0x000C) (NeedCtorLink)
	float                                              HealthLerpStartValue;                                     // 0x072C(0x0004)
	float                                              HealthLerpCurrValue;                                      // 0x0730(0x0004)
	float                                              HealthLerpDesiredTime;                                    // 0x0734(0x0004)
	float                                              HealthLerpElapsedTime;                                    // 0x0738(0x0004)
	class UHUDWidget_Missions*                         MyMissionWidget;                                          // 0x073C(0x0004) (Transient)
	class UHUDWidget_Minimap*                          MyMinimapWidget;                                          // 0x0740(0x0004) (Transient)
	class UHUDWidget_WorldSpace*                       MyWorldSpaceWidget;                                       // 0x0744(0x0004) (Transient)
	class UHUDWidget_Trading*                          MyTradingWidget;                                          // 0x0748(0x0004) (Transient)
	class UHUDWidget_Challenges*                       MyChallengesWidget;                                       // 0x074C(0x0004) (Transient)
	class AWillowAIPawn*                               CachedBossPawn;                                           // 0x0750(0x0004) (Transient)
	float                                              CachedBossHealthAmt;                                      // 0x0754(0x0004) (Transient)
	float                                              CachedBossShieldAmt;                                      // 0x0758(0x0004) (Transient)
	struct FString                                     CachedBossName;                                           // 0x075C(0x000C) (Transient, NeedCtorLink)
	int                                                CachedBossLevel;                                          // 0x0768(0x0004) (Transient)
	struct FName                                       CachedPersistentMapName;                                  // 0x076C(0x0008) (Transient)
	float                                              LastRecordingCheckTime;                                   // 0x0774(0x0004) (Transient)
	struct FTrackedSkillIconState                      CachedTSkillIcon_TrigResp[0xB];                           // 0x0778(0x0010) (Transient)
	struct FTrackedSkillIconState                      CachedTSkillIcon_Flask;                                   // 0x0828(0x0010) (Transient)
	struct FTrackedSkillIconState                      CachedTSkillIcon_Kill[0x5];                               // 0x0838(0x0010) (Transient)
	TArray<struct FAvailableTrackedSkill>              AvailableTrackedSkills;                                   // 0x0888(0x000C) (Transient, NeedCtorLink)
	int                                                NumPurchasedTrigRespSlots;                                // 0x0894(0x0004) (Transient)
	float                                              RetryTrainingTime;                                        // 0x0898(0x0004) (Transient)
	float                                              RetryTrainingDuration;                                    // 0x089C(0x0004) (Transient)
	struct FString                                     RetryTraining_MessageString;                              // 0x08A0(0x000C) (Transient, NeedCtorLink)
	struct FString                                     RetryTraining_TitleString;                                // 0x08AC(0x000C) (Transient, NeedCtorLink)
	float                                              RetryTraining_Duration;                                   // 0x08B8(0x0004) (Transient)
	struct FColor                                      RetryTraining_DrawColor;                                  // 0x08BC(0x0004) (Transient)
	struct FString                                     RetryTraining_HUDInitializationFrame;                     // 0x08C0(0x000C) (Transient, NeedCtorLink)
	float                                              RetryTraining_PauseContinueDelay;                         // 0x08CC(0x0004) (Transient)
	class APlayerReplicationInfo*                      RetryTraining_Related_PRI1;                               // 0x08D0(0x0004) (Transient)
	class UWillowHUDGFxMovieDefinition*                HUDGFxDef;                                                // 0x08D4(0x0004) (Transient)
	float                                              StartTime;                                                // 0x08D8(0x0004) (Transient)
	class UEchoVersionGFxMovie*                        EchoVersionMovie;                                         // 0x08DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowHUDGFxMovie");
		return ptr;
	}


	bool ShouldShowAllyWidget(class AWillowPlayerReplicationInfo* AllyPRI);
	void ShowPullThePinNotification(class USwfMovie* ExternalClip);
	void extInitMinimapFogOfWar(class UGFxObject* MinimapClip);
	void extExecuteReadyNeedsUpdate();
	float GetDynamicFOVScalar();
	struct FVector2D GetActualCoordsForAnchor(class UHUDScalingAnchorDefinition* Anchor);
	void ApplyElementScaling();
	void ShowRewardPopup(unsigned char Type);
	void OnSetViewport();
	void UpdateMinimapRadius(bool bInVehicle, float LerpTime);
	void SetExCurrency(unsigned char Type, int Amount);
	void SetCredits(int Credits);
	void extContextualPromptFadedOut();
	void ToggleContextualPrompt(const struct FString& ContextString, bool bEnabled);
	void UpdateSkillIcon(bool bIsPurchasedTrigRespSlot, struct FTrackedSkillIconState* IconState, struct FTrackedSkillState* SkillState, struct FString* Path, struct FString* frame);
	void FindTrackedSkill(unsigned char Type, int Slot, struct FTrackedSkillState* OutState, struct FString* OutPathString, struct FString* OutFrameString);
	void UpdateSkillIcons();
	int GetRemappedSlot(class USkillDefinition* SkillDef);
	void SortAvailableTrackedSkills();
	void InitSkillIconsAvailability();
	void AddTrackedSkill(class USkillDefinition* SkillDef);
	void UpdateRecording();
	void UpdateBossBar();
	void ShowChapterHeader(class UMissionDefinition* MissionDef);
	void ResetShieldPrimeCachedValues(class AWillowShield* Shield);
	void SetShieldTriggeredState();
	void AmmoAbsorbed(class UClass* DamageSource, class UWillowDamageTypeDefinition* DamageTypeDef);
	void EnableActionSkill(class AActionSkill* Skill, bool bEnable);
	void ShowWorldDiscovery(const struct FName& DiscoveryName, const struct FString& DiscoveredArea, bool bFirstDiscovery, bool bForFogOfWarOnly);
	void ResumeActionSkillGuides();
	void HideActionSkillGuides();
	void extDuelClipEnded();
	void UpdateCachedXPValue(int ExpPoints);
	void extMissionModuleAnimFinished(const struct FString& AnimName, const struct FString& ModuleName);
	void DoMissionStatusFanfare(const struct FString& frame, class UMissionDefinition* MissionDef, bool bShowObjectiveFlourish, class UMissionObjectiveDefinition* MissionObjective);
	void UpdateBoundaryWarning();
	void TEMPClearOtherSkillIcons();
	void ToggleKillSkills(bool bEnable);
	void ShowToolTip(const struct FInteractionIconWithOverrides& HUDIcon, unsigned char UsabilityType);
	static void SetEquippedCardUIStats(class UWillowGFxMovie* Movie, TArray<struct FTopStatData>* UIStats);
	void UpdateEquippedCardFrom(class AWillowInventory* TheItem, class AWillowInventory* CompareItem);
	void extEquippedCardOpened();
	void HighlightSlotForPlayer(bool bPrimaryPlayer, unsigned char QuickSlot);
	void DisplayAllyDing(class AWillowPlayerReplicationInfo* InAllyPRI);
	void DisplayGenericRevive(class UGenericReviveMessageDefinition* ReviveDef, class APlayerReplicationInfo* OtherPRI, bool bIsOtherEventParticipant);
	void DisplaySecondWind();
	void DisplayDuel();
	void DisplayLevelUp(int ExpLevel);
	void TickDisplayLevelUp();
	bool CanDisplayLevelUp();
	void QueueDisplayLevelUp(int ExpLevel);
	void FreeResourcesInArray(TArray<struct FCellContentData>* Resources);
	unsigned char HideQuickSelectWeaponMenuForPlayer(bool bPrimaryPlayer);
	void PrivateOpenQuickSelectWeaponMenuForPlayer(bool bPrimaryPlayer, int UpStatus, int DownStatus, int LeftStatus, int RightStatus, int PlatformNumber);
	void SetResourcesInArray(class AWillowInventory* UpThing, class AWillowInventory* DownThing, class AWillowInventory* LeftThing, class AWillowInventory* RightThing, TArray<struct FCellContentData>* Resources, TArray<struct FName>* TextureNames);
	void OpenQuickSelectWeaponMenuForPlayer(bool bPrimaryPlayer, int UpStatus, int DownStatus, int LeftStatus, int RightStatus, class AWillowInventory* UpThing, class AWillowInventory* DownThing, class AWillowInventory* LeftThing, class AWillowInventory* RightThing, int PlatformNumber);
	void SetDangerousIconDifference(int DangerousIconDifference, int ImpossibleIconDifference);
	void extTrainingTextBoxOpened();
	void CloseTrainingTextBox();
	void OpenTrainingTextBox();
	void DrawTrainingText();
	void DrawChatText();
	struct FString GetFontColorTag(const struct FColor& DrawColor);
	void DrawCriticalText();
	void TickCriticalText(float DeltaTime);
	void ClearTrainingText();
	void AddTrainingText(const struct FString& MessageString, const struct FString& TitleString, float Duration, const struct FColor& DrawColor, const struct FString& HUDInitializationFrame, bool PausesGame, float PauseContinueDelay, class APlayerReplicationInfo* Related_PRI1, bool bIsntActuallyATrainingMessage, unsigned char StatusMenuTab, bool bMandatory);
	void AddChatText(const struct FString& MessageString, float Duration, const struct FColor& DrawColor, class APlayerReplicationInfo* Related_PRI1);
	void AddCriticalText(const struct FString& MessageString, float Duration, const struct FColor& DrawColor, class APlayerReplicationInfo* Related_PRI1);
	void UpdateDebug();
	void DisplayCouldNotSpendMoneyMessage(unsigned char UsedType);
	void DisplayCouldNotOpenMenuMessage();
	void DisplayCouldNotPickUpMessage(class AWillowPlayerController* Player, const struct FString& Message);
	void extTooltipFadedOut(const struct FString& TooltipPath);
	void extShieldTriggerComplete();
	void extEnemyRingFadeInFinished();
	void extEnemyRingFadeOutFinished();
	void UpdateTargetInformation(bool bForceUpdateIcons);
	void UpdateCurrentTarget(const FScriptInterface& CurrentTarget);
	void SetVehicleUIWidgetVisibility(class APawn* PossessedPawn, bool bInVehicle, bool bInTurret);
	void HideEchoCaller();
	void ShowEchoCaller(class UWillowDialogNameTag* Caller, const struct FScaleformPortraitData& PortraitData, class AWillowPlayerController* Player, bool bDisableEchoVideos, bool bSkipFadeIn);
	void UpdateSplitRegion();
	void Refresh();
	void UpdateMainFrame();
	void extResAnimFinished();
	void ClearAllyCache(int AllyNum);
	void UpdateAllyTeamBuffs(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyInjured(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyTalkingFromNetId(const struct FUniqueNetId& Player);
	void UpdateAllyTalking(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyClassMod(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyName(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyCharacter(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyLevel(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyShield(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void UpdateAllyHealth(int AllyNum, class AWillowPlayerReplicationInfo* AllyPRI, struct FString* AllyString);
	void SetAllyVisible(int AllyNum, bool bVisible, struct FString* AllyString);
	void UpdateInteractionIcon();
	void UpdateCrouched();
	void UpdateBootup();
	void UpdateInjured();
	void UpdateExCurrency();
	void UpdateCredits();
	void UpdateAfterburner();
	void UpdateSkillPoints();
	void UpdateCharacter();
	void UpdateClassMod();
	void UpdateLevel();
	void UpdateGrenades();
	void UpdateAmmo(unsigned char AmmoBar, class AWillowWeapon* OverrideWeapon, struct FCachedWeaponInfo* OverrideCache, struct FCachedWeaponInfo* AdditionalCache);
	void UpdateActionSkillPortrait();
	void UpdateActionSkill();
	void UpdateXP();
	void UpdateShield();
	void UpdateHealth();
	float GetUncappedXP();
	void InitCachedValues();
	void OnClose();
	void DoInitialSetupStuff();
	bool Start(bool StartPaused);
	void InitFromDefinition();
	void ShowIpAddress();
	void LevelTimer();
	void LoadDebugStrings();
	void UpdateCachedPlayerInfo();
	bool UpdateCachedViewportInfo();
};


// Class WillowGame.WillowGFxMoviePressStart
// 0x004B (0x0264 - 0x02AF)
class UWillowGFxMoviePressStart : public UWillowGFxMovie
{
public:
	float                                              IdleTimeBeforeStartingAttractLoop;                        // 0x0264(0x0004) (Edit)
	float                                              CurrIdleTime;                                             // 0x0268(0x0004)
	struct FString                                     AttractModeMovieName;                                     // 0x026C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Legal_ESRBDisclaimer;                                     // 0x0278(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Legal_GearboxTrademarks;                                  // 0x0284(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Legal_GearboxTrademarks_Console;                          // 0x0290(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bAsyncInProgress : 1;                                     // 0x029C(0x0004) (Transient)
	unsigned long                                      bDisableAttractLoop : 1;                                  // 0x029C(0x0004) (Transient)
	unsigned long                                      bMutedWorld : 1;                                          // 0x029C(0x0004) (Transient)
	unsigned long                                      ShouldStartSparkInitialization : 1;                       // 0x029C(0x0004) (Transient)
	class UWillowPauseTicker*                          TimerPauseTicker;                                         // 0x02A0(0x0004) (Transient)
	unsigned char                                      CurrentStartupStep;                                       // 0x02A4(0x0001) (Transient)
	unsigned char                                      EggCode[0xA];                                             // 0x02A5(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMoviePressStart");
		return ptr;
	}


	void extSetLegalText();
	bool IsTimerActive(const struct FName& FuncName);
	void ClearTimer(const struct FName& FuncName);
	void SetTimer(float Rate, bool bLoop, const struct FName& FuncName);
	bool ValidateEggCode();
	void OnClose();
	void ClearDelegates();
	void ContinueToMenu();
	void SessionCreationComplete();
	void OnCreateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void TryCreateLANGame();
	void TryCreateInternetGame();
	void CreateSession();
	class UGFxMovieDefinition* GetFrontEndMovieDef();
	void DoStartupDeviceSelection();
	void PatcherDownloadProcessComplete();
	void DownloadPatcherFiles();
	void RefreshMissionTracker();
	void DlcRefreshComplete();
	void DlcRefreshCompleteFromBusy();
	void DoDlcEnumeration();
	void DoSparkAuthentication();
	void PerformStartupStep();
	void GotoNextStartupStep();
	void BeginStartupProcess();
	void CustomPlay(const struct FString& frame);
	void extContinue();
	void extBeginWait();
	void HandleEggInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool HandleInputKey_AtTitle(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool HandleInputKey_ShowingLegal(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool ConditionalSkipToMenu();
	bool OnReturnToTitleScreen_Click(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool IsDialogOpen();
	void OnTick();
	bool OnInviteDialogClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool Start(bool StartPaused);
	void StopAttractLoop();
	bool IsAttractPlaying();
	void PlayAttractLoop();
};


// Class WillowGame.WillowGFxMovie3DDefinition
// 0x0034 (0x00BC - 0x00F0)
class UWillowGFxMovie3DDefinition : public UGFxMovieDefinition
{
public:
	float                                              View3DFOV;                                                // 0x00BC(0x0004) (Edit)
	float                                              View3DScale;                                              // 0x00C0(0x0004) (Edit)
	struct FVector                                     View3DTrans;                                              // 0x00C4(0x000C) (Edit)
	struct FRotator                                    View3DRot;                                                // 0x00D0(0x000C) (Edit)
	unsigned long                                      bSetMatricesEveryTick : 1;                                // 0x00DC(0x0004) (Edit)
	float                                              SplitscreenFOVScalar;                                     // 0x00E0(0x0004) (Edit)
	float                                              SplitscreenSizeScalar;                                    // 0x00E4(0x0004) (Edit)
	float                                              VerticalSplitscreenPanning;                               // 0x00E8(0x0004) (Edit)
	float                                              VerticalSplitscreenPanning_Spread;                        // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMovie3DDefinition");
		return ptr;
	}

};


// Class WillowGame.BankGFxDefinition
// 0x0034 (0x00F0 - 0x0124)
class UBankGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	class UGFxTextListDefinition*                      LeftSideDef;                                              // 0x00F0(0x0004) (Edit)
	class UGFxTextListDefinition*                      RightSideDef;                                             // 0x00F4(0x0004) (Edit)
	struct FColor                                      EmptySlotColor;                                           // 0x00F8(0x0004) (Edit)
	int                                                CardCellWidth;                                            // 0x00FC(0x0004) (Edit)
	int                                                CardCellHeight;                                           // 0x0100(0x0004) (Edit)
	int                                                CardTextureWidth;                                         // 0x0104(0x0004) (Edit)
	int                                                CardTextureHeight;                                        // 0x0108(0x0004) (Edit)
	struct FString                                     Card1ExternalTextureMap;                                  // 0x010C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Card2ExternalTextureMap;                                  // 0x0118(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BankGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.CreditsGFxDefinition
// 0x0070 (0x00F0 - 0x0160)
class UCreditsGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray<struct FCreditsLine>                        CreditData;                                               // 0x00F0(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              DefaultSpeed;                                             // 0x00FC(0x0004) (Edit)
	float                                              MaxFastForwardSpeed;                                      // 0x0100(0x0004) (Edit)
	float                                              MaxRewindSpeed;                                           // 0x0104(0x0004) (Edit)
	TArray<struct FCreditsTextureInfo>                 ImageMontage;                                             // 0x0108(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ImageMontagePackageName;                                  // 0x0114(0x000C) (Edit, NeedCtorLink)
	int                                                ImageDuration;                                            // 0x0120(0x0004) (Edit)
	int                                                ImageBlankSpace;                                          // 0x0124(0x0004) (Edit)
	int                                                InitialBlankSpace;                                        // 0x0128(0x0004) (Edit)
	unsigned long                                      bLoopMontageImages : 1;                                   // 0x012C(0x0004) (Edit)
	struct FString                                     MiddlewareLogosPackageName;                               // 0x0130(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MiddlewareTexturePath;                                    // 0x013C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SplatPackageName;                                         // 0x0148(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SplatTexturePath;                                         // 0x0154(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CreditsGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.ItemInspectionGFxMovieDefinition
// 0x003C (0x00F0 - 0x012C)
class UItemInspectionGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              ItemFOV;                                                  // 0x00F0(0x0004) (Edit, Const)
	float                                              ItemScale;                                                // 0x00F4(0x0004) (Edit, Const)
	float                                              RotationSpeed;                                            // 0x00F8(0x0004) (Edit, Const)
	float                                              ScaleSpeed;                                               // 0x00FC(0x0004) (Edit, Const)
	float                                              ScaleMin;                                                 // 0x0100(0x0004) (Edit, Const)
	float                                              ScaleMax;                                                 // 0x0104(0x0004) (Edit, Const)
	float                                              IntroTime;                                                // 0x0108(0x0004) (Edit, Const)
	struct FRotator                                    IntroRotation;                                            // 0x010C(0x000C) (Edit, Const)
	struct FRotator                                    IntroRotationRandomness;                                  // 0x0118(0x000C) (Edit, Const)
	float                                              IntroRotationAlphaPowerRandomness;                        // 0x0124(0x0004) (Edit, Const)
	float                                              HeightThreshold;                                          // 0x0128(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ItemInspectionGFxMovieDefinition");
		return ptr;
	}

};


// Class WillowGame.VehicleSpawnStationGFxDefinition
// 0x0080 (0x00F0 - 0x0170)
class UVehicleSpawnStationGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray<unsigned char>                              SupportedTags;                                            // 0x00F0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<unsigned char>                              RequiredTags;                                             // 0x00FC(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bUsePPOverride : 1;                                       // 0x0108(0x0004) (Edit)
	float                                              PostProcessInterpolationTime;                             // 0x010C(0x0004) (Edit)
	float                                              PreviewMeshFOV;                                           // 0x0110(0x0004) (Edit, Const)
	float                                              PreviewMeshScale;                                         // 0x0114(0x0004) (Edit, Const)
	float                                              IntroTime;                                                // 0x0118(0x0004) (Edit, Const)
	struct FRotator                                    DefaultMeshRotation[0x2];                                 // 0x011C(0x000C) (Edit, Const)
	struct FRotator                                    MeshRotationSpeed[0x2];                                   // 0x0134(0x000C) (Edit, Const)
	struct FVector                                     MeshOffset[0x2];                                          // 0x014C(0x000C) (Edit, Const)
	struct FString                                     HeaderTextOverrideKey;                                    // 0x0164(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSpawnStationGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.VendingMachineGFxDefinition
// 0x00C8 (0x00F0 - 0x01B8)
class UVendingMachineGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              StrictGiveUpDistance;                                     // 0x00F0(0x0004) (Edit)
	float                                              LooseGiveUpDistance;                                      // 0x00F4(0x0004) (Edit)
	float                                              StrictTolerance;                                          // 0x00F8(0x0004) (Edit)
	float                                              LooseTolerance;                                           // 0x00FC(0x0004) (Edit)
	struct FName                                       InitialLeftCell;                                          // 0x0100(0x0008) (Edit)
	struct FName                                       InitialRightCell;                                         // 0x0108(0x0008) (Edit)
	struct FName                                       ItemOfTheDayCell;                                         // 0x0110(0x0008) (Edit)
	struct FString                                     Card1Tex;                                                 // 0x0118(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Card2Tex;                                                 // 0x0124(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               RightSideCellOrderNames;                                  // 0x0130(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               BackpackCellNames;                                        // 0x013C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               EquippedCellNames;                                        // 0x0148(0x000C) (Edit, NeedCtorLink)
	int                                                TotalNumberOfCells;                                       // 0x0154(0x0004) (Edit)
	class UGFxTextListDefinition*                      WeaponsLeftSideDef;                                       // 0x0158(0x0004) (Edit)
	class UGFxTextListDefinition*                      WeaponsRightSideDef;                                      // 0x015C(0x0004) (Edit)
	class UGFxTextListDefinition*                      GrenadesLeftSideDef;                                      // 0x0160(0x0004) (Edit)
	class UGFxTextListDefinition*                      GrenadesRightSideDef;                                     // 0x0164(0x0004) (Edit)
	class UGFxTextListDefinition*                      HealthLeftSideDef;                                        // 0x0168(0x0004) (Edit)
	class UGFxTextListDefinition*                      HealthRightSideDef;                                       // 0x016C(0x0004) (Edit)
	int                                                ItemOfTheDay_Texture_Width;                               // 0x0170(0x0004) (Edit)
	int                                                ItemOfTheDay_Texture_Height;                              // 0x0174(0x0004) (Edit)
	int                                                ItemOfTheDay_Cell_Width;                                  // 0x0178(0x0004) (Edit)
	int                                                ItemOfTheDay_Cell_Height;                                 // 0x017C(0x0004) (Edit)
	int                                                Card_Texture_Width;                                       // 0x0180(0x0004) (Edit)
	int                                                Card_Texture_Height;                                      // 0x0184(0x0004) (Edit)
	int                                                Card_Cell_Width;                                          // 0x0188(0x0004) (Edit)
	int                                                Card_Cell_Height;                                         // 0x018C(0x0004) (Edit)
	struct FString                                     ItemOfTheDayTextureLinkage;                               // 0x0190(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Card1TextureLinkage;                                      // 0x019C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Card2TextureLinkage;                                      // 0x01A8(0x000C) (Edit, NeedCtorLink)
	int                                                RefreshInterval;                                          // 0x01B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VendingMachineGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.WeaponScopeGFxDefinition
// 0x0018 (0x00F0 - 0x0108)
class UWeaponScopeGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray<struct FLabelToLinkageMapping>              LinkageMappings_Manufacturers;                            // 0x00F0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FLabelToLinkageMapping>              LinkageMappings_WeaponTypes;                              // 0x00FC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponScopeGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowGFxThirdPersonDefinition
// 0x0030 (0x00F0 - 0x0120)
class UWillowGFxThirdPersonDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              CameraInterpSpeed;                                        // 0x00F0(0x0004) (Edit)
	float                                              CloseInterpTime;                                          // 0x00F4(0x0004) (Edit)
	float                                              CloseInterpDistSqThreshold;                               // 0x00F8(0x0004) (Edit)
	unsigned long                                      bUsePPOverride : 1;                                       // 0x00FC(0x0004) (Edit)
	unsigned long                                      bFixedYaw : 1;                                            // 0x00FC(0x0004) (Edit)
	float                                              PostProcessInterpolationTime;                             // 0x0100(0x0004) (Edit)
	TArray<struct FThirdPersonMenuView>                TabViews;                                                 // 0x0104(0x000C) (Edit, NeedCtorLink)
	float                                              CameraPitchMin;                                           // 0x0110(0x0004) (Edit)
	float                                              CameraPitchMax;                                           // 0x0114(0x0004) (Edit)
	float                                              MenuRotationSpeed;                                        // 0x0118(0x0004) (Edit)
	float                                              MenuRotationSmoothingSpeed;                               // 0x011C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxThirdPersonDefinition");
		return ptr;
	}

};


// Class WillowGame.CustomizationGFxDefinition
// 0x0000 (0x0120 - 0x0120)
class UCustomizationGFxDefinition : public UWillowGFxThirdPersonDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowInventoryGFxDefinition
// 0x0038 (0x0120 - 0x0158)
class UWillowInventoryGFxDefinition : public UWillowGFxThirdPersonDefinition
{
public:
	unsigned char                                      TF_Standard;                                              // 0x0120(0x0001) (Edit)
	unsigned char                                      TF_Trash;                                                 // 0x0121(0x0001) (Edit)
	unsigned char                                      TF_Favorite;                                              // 0x0122(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0123(0x0001) MISSED OFFSET
	float                                              TweenTime;                                                // 0x0124(0x0004) (Edit)
	TArray<struct FPanelInfo>                          Panels;                                                   // 0x0128(0x000C) (Edit, NeedCtorLink)
	TArray<struct FCardInfo>                           Cards;                                                    // 0x0134(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             ExternalTextureMap;                                       // 0x0140(0x000C) (Edit, NeedCtorLink)
	TArray<struct FString>                             CardExternalTextureMap;                                   // 0x014C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInventoryGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.StatusMenuGFxDefinition
// 0x0150 (0x0158 - 0x02A8)
class UStatusMenuGFxDefinition : public UWillowInventoryGFxDefinition
{
public:
	TArray<struct FDirectionData>                      Directions;                                               // 0x0158(0x000C) (Edit, NeedCtorLink)
	int                                                NumEntriesOnMissionLog;                                   // 0x0164(0x0004) (Edit)
	class UGFxTextListDefinition*                      MissionLogTextDefinition;                                 // 0x0168(0x0004) (Edit)
	struct FMissionStatusPresentation                  Pres_Active;                                              // 0x016C(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_ActivePlot;                                          // 0x017C(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_ReadyToTurnIn;                                       // 0x018C(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_NotStarted;                                          // 0x019C(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_Complete;                                            // 0x01AC(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_Ineligible;                                          // 0x01BC(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_Failed;                                              // 0x01CC(0x0010) (Edit, NeedCtorLink)
	struct FColor                                      UnselectedChallengeLogTextColor;                          // 0x01DC(0x0004) (Edit)
	class UGFxTextListDefinition*                      ChallengeLogTextDefinition;                               // 0x01E0(0x0004) (Edit)
	struct FColor                                      EmptyInventorySlotColor;                                  // 0x01E4(0x0004) (Edit)
	struct FName                                       Up;                                                       // 0x01E8(0x0008) (Edit)
	struct FName                                       Down;                                                     // 0x01F0(0x0008) (Edit)
	struct FName                                       Left;                                                     // 0x01F8(0x0008) (Edit)
	struct FName                                       Right;                                                    // 0x0200(0x0008) (Edit)
	struct FName                                       Shield;                                                   // 0x0208(0x0008) (Edit)
	struct FName                                       mod;                                                      // 0x0210(0x0008) (Edit)
	struct FName                                       Deck;                                                     // 0x0218(0x0008) (Edit)
	int                                                ReadyWeaponUpIdx;                                         // 0x0220(0x0004) (Edit)
	int                                                ReadyWeaponDownIdx;                                       // 0x0224(0x0004) (Edit)
	int                                                ReadyWeaponLeftIdx;                                       // 0x0228(0x0004) (Edit)
	int                                                ReadyWeaponRightIdx;                                      // 0x022C(0x0004) (Edit)
	int                                                EquippedShieldIdx;                                        // 0x0230(0x0004) (Edit)
	int                                                EquippedGrenadeModIdx;                                    // 0x0234(0x0004) (Edit)
	int                                                EquippedClassModIdx;                                      // 0x0238(0x0004) (Edit)
	int                                                EquippedArtifactIdx;                                      // 0x023C(0x0004) (Edit)
	int                                                ReadyWeaponUpSuffix;                                      // 0x0240(0x0004) (Edit)
	int                                                ReadyWeaponDownSuffix;                                    // 0x0244(0x0004) (Edit)
	int                                                ReadyWeaponLeftSuffix;                                    // 0x0248(0x0004) (Edit)
	int                                                ReadyWeaponRightSuffix;                                   // 0x024C(0x0004) (Edit)
	int                                                EquippedShieldSuffix;                                     // 0x0250(0x0004) (Edit)
	int                                                EquippedGrenadeModSuffix;                                 // 0x0254(0x0004) (Edit)
	int                                                EquippedClassModSuffix;                                   // 0x0258(0x0004) (Edit)
	int                                                EquippedArtifactSuffix;                                   // 0x025C(0x0004) (Edit)
	float                                              EquippedCellWidth;                                        // 0x0260(0x0004) (Edit)
	float                                              EquippedCellHeight;                                       // 0x0264(0x0004) (Edit)
	float                                              EquippedSmCellWidth;                                      // 0x0268(0x0004) (Edit)
	float                                              EquippedSmCellHeight;                                     // 0x026C(0x0004) (Edit)
	int                                                EquippedTextureWidth;                                     // 0x0270(0x0004) (Edit)
	int                                                EquippedTextureHeight;                                    // 0x0274(0x0004) (Edit)
	int                                                CardCellWidth;                                            // 0x0278(0x0004) (Edit)
	int                                                CardCellHeight;                                           // 0x027C(0x0004) (Edit)
	int                                                CardTextureWidth;                                         // 0x0280(0x0004) (Edit)
	int                                                CardTextureHeight;                                        // 0x0284(0x0004) (Edit)
	int                                                BackpackCellWidth;                                        // 0x0288(0x0004) (Edit)
	int                                                BackpackCellHeight;                                       // 0x028C(0x0004) (Edit)
	class USkillTreeGFxDefinition*                     SkillDef;                                                 // 0x0290(0x0004) (Edit)
	struct FString                                     InventoryPanelPath;                                       // 0x0294(0x000C) (Edit, NeedCtorLink)
	class UChallengesPanelDefinition*                  ChallengesPanelDef;                                       // 0x02A0(0x0004) (Edit)
	class UGFxMovieDefinition*                         LatentRewardDef;                                          // 0x02A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StatusMenuGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.TradingGFxDefinition
// 0x0000 (0x0158 - 0x0158)
class UTradingGFxDefinition : public UWillowInventoryGFxDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TradingGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowHUDGFxMovieDefinition
// 0x0084 (0x00F0 - 0x0174)
class UWillowHUDGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	float                                              MinimapRadius;                                            // 0x00F0(0x0004) (Edit)
	float                                              MinimapRadiusInVehicle;                                   // 0x00F4(0x0004) (Edit)
	float                                              MinimapRadiusLerpTime;                                    // 0x00F8(0x0004) (Edit)
	float                                              AlphaForInWorldObjectives;                                // 0x00FC(0x0004) (Edit)
	float                                              StatusFanfareTweenTime;                                   // 0x0100(0x0004) (Edit)
	float                                              WorldSpaceIconRangeIn;                                    // 0x0104(0x0004) (Edit)
	float                                              WorldSpaceIconRangeOut;                                   // 0x0108(0x0004) (Edit)
	float                                              WorldSpaceIconLerpTime;                                   // 0x010C(0x0004) (Edit)
	float                                              ObjFadeAlpha;                                             // 0x0110(0x0004) (Edit)
	float                                              ObjFadeScale;                                             // 0x0114(0x0004) (Edit)
	float                                              ObjFadeSpeed;                                             // 0x0118(0x0004) (Edit)
	float                                              OcclusionTestInterval;                                    // 0x011C(0x0004) (Edit)
	float                                              OcclusionAlpha;                                           // 0x0120(0x0004) (Edit)
	float                                              ChallengePart1Time;                                       // 0x0124(0x0004) (Edit)
	float                                              ChallengePart2Time;                                       // 0x0128(0x0004) (Edit)
	TArray<class UPawnAllegiance*>                     NoLevelAllegiances;                                       // 0x012C(0x000C) (Edit, NeedCtorLink)
	TArray<class UPawnAllegiance*>                     UsableFadeAllegiances;                                    // 0x0138(0x000C) (Edit, NeedCtorLink)
	TArray<class UMissionObjectiveDefinition*>         RecordingObjectives;                                      // 0x0144(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               RecordingMaps;                                            // 0x0150(0x000C) (Edit, NeedCtorLink)
	TArray<struct FScaledHUDElement>                   ScaledElements;                                           // 0x015C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FInjuredStringReplacementSet>        InjuredStringReplacements;                                // 0x0168(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowHUDGFxMovieDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowGFxMovieStatePlatform
// 0x0010 (0x005C - 0x006C)
class UWillowGFxMovieStatePlatform : public UGFxMovieState
{
public:
	TArray<struct FMovieStateData>                     PlatformStates;                                           // 0x005C(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	unsigned long                                      UseXboxFrameForPCWithGamepad : 1;                         // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMovieStatePlatform");
		return ptr;
	}

};


// Class WillowGame.WillowGFxMovieStateUsable
// 0x000C (0x005C - 0x0068)
class UWillowGFxMovieStateUsable : public UGFxMovieState
{
public:
	TArray<struct FMovieStateData>                     UsabilityStates;                                          // 0x005C(0x000C) (Edit, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxMovieStateUsable");
		return ptr;
	}

};


// Class WillowGame.WillowGFxUIManager
// 0x003C (0x003C - 0x0078)
class UWillowGFxUIManager : public UObject
{
public:
	class UWillowGFxUIManagerDefinition*               MyDefinition;                                             // 0x003C(0x0004) (Transient)
	class AWillowPlayerController*                     PlayerOwner;                                              // 0x0040(0x0004) (Transient)
	struct FVector                                     PlayerViewOffset;                                         // 0x0044(0x000C) (Transient)
	class UMeshComponent*                              ScreenMesh;                                               // 0x0050(0x0004) (ExportObject, Transient, Component, EditInline)
	class UTextureRenderTarget2D*                      RenderTarget;                                             // 0x0054(0x0004) (Transient)
	TArray<class UGearboxGFxMovie*>                    ScreenMovies;                                             // 0x0058(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bDefaultScreenMesh : 1;                                   // 0x0064(0x0004) (Transient)
	unsigned long                                      bPassAxisInputToScreenMovies : 1;                         // 0x0064(0x0004) (Transient, EditorOnly)
	class UGFxMovieDefinition*                         TheLobby;                                                 // 0x0068(0x0004) (Const)
	struct FScriptDelegate                             __OnMovieSpawned__Delegate;                               // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxUIManager");
		return ptr;
	}


	bool WantsPause();
	void UpdatePause();
	void Movie_OnClosed(class UGearboxGFxMovie* Movie);
	void ScreenMovie_OnClosed(class UGearboxGFxMovie* Movie);
	void UpdateFocus(class UGearboxGFxMovie* Movie);
	class UGearboxGFxMovie* FindFocusMovie();
	class UWillowGFxTrainingDialogBox* ShowTrainingDialog(const struct FString& Message, const struct FString& Title, float PauseDuration, unsigned char StatusMenuTab, bool bNoPause);
	class UWillowGFxEditDialog* ShowEditDialog();
	class UWillowGFxDialogBox* ShowDialog(bool bRestrictToOwnerViewport);
	void OnRestrictDialogToOwnerViewport(class UGearboxGFxMovie* Movie);
	class UGearboxGFxMovie* GetPlayingMovie();
	bool IsBlockingMoviePlaying();
	void CloseMovie(class UGFxMovieDefinition* MovieDefinition);
	bool IsMoviePlaying(class UGFxMovieDefinition* MovieDefinition);
	class UGearboxGFxMovie* PlayMovie(class UGFxMovieDefinition* MovieDefinition, class UObject* OtherObject);
	void OnMovieSpawned(class UGearboxGFxMovie* Movie);
	int ModalGameMenuCount();
	void Init(class UWillowGFxUIManagerDefinition* Definition, class AWillowPlayerController* Owner);
	bool ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	bool CalcCamera(float fDeltaTime, struct FVector* CamLoc, struct FRotator* out_CamRot);
	void UpdateScreenMesh();
};


// Class WillowGame.WillowGFxUIManagerDefinition
// 0x0084 (0x003C - 0x00C0)
class UWillowGFxUIManagerDefinition : public UGBXDefinition
{
public:
	struct FVector                                     MeshTranslation[0x6];                                     // 0x003C(0x000C) (Edit)
	struct FRotator                                    MeshRotation;                                             // 0x0084(0x000C) (Edit)
	struct FVector                                     ViewOffsetClamp;                                          // 0x0090(0x000C) (Edit)
	float                                              ViewOffsetScale;                                          // 0x009C(0x0004) (Edit)
	struct FName                                       TextureParameterName;                                     // 0x00A0(0x0008) (Edit)
	unsigned char                                      RenderTextureMode;                                        // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	class UGFxMovieDefinition*                         DialogBoxDefinition;                                      // 0x00AC(0x0004) (Edit)
	class UGFxMovieDefinition*                         TrainingDialogBoxDefinition;                              // 0x00B0(0x0004) (Edit)
	class UGFxMovieDefinition*                         TrainingDialogBoxDefinition_NoPause;                      // 0x00B4(0x0004) (Edit)
	class UGFxMovieDefinition*                         EditDialogBoxDefinition;                                  // 0x00B8(0x0004) (Edit)
	int                                                RenderTextureSize;                                        // 0x00BC(0x0004) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxUIManagerDefinition");
		return ptr;
	}


	struct FVector GetTranslation(class AWillowPlayerController* PC);
};


// Class WillowGame.WillowLeviathanService
// 0x0004 (0x004C - 0x0050)
class UWillowLeviathanService : public ULeviathanService
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x004C(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowLeviathanService");
		return ptr;
	}


	static void RecordDiagnosticEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char ActionType, int DiagnosticData1);
	static void RecordCustomizeCharacterEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FName& CustomizationName, unsigned char CustomizationEventType);
	static void RecordCharacterDeletedEventForPlayer(class AGearboxPlayerController* ForPlayer, int DeletedCharPlayTime, int DeletedCharLevel, const struct FString& DeletedCharGuid);
	static void RecordCharacterCreatedEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FName& CreatedClass, const struct FString& CreatedGuid);
	static void RecordCharacterLoadedEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FString& LoadedGuid, int LoadedPlayTime);
	static void RecordPointsSpentEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Type, const struct FName& ThingBought);
	static void RecordPointsResetEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Type, int Amount);
	static void RecordPointsEarnedEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Type, int Amount, int PostEarnedUnspent);
	static void RecordPartnerLeftGameEventForAllPlayers(const struct FString& LeavingPlayerId, int SessionPlayerNumber, unsigned char LeavingPlayerType);
	static void RecordPartnerLeftGameEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FString& LeavingPlayerId, int SessionPlayerNumber, unsigned char LeavingPlayerType);
	static void RecordPartnerJoinedGameEventForAllPlayers(const struct FString& JoiningPlayerId, int SessionPlayerNumber, unsigned char JoiningPlayerType);
	static void RecordPartnerJoinedGameEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FString& JoiningPlayerId, int SessionPlayerNumber, unsigned char JoiningPlayerType);
	static void RecordCharacterRevivedEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Reason);
	static void RecordCharacterKilledEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Reason);
	static void RecordCharacterDownEventForPlayer(class AGearboxPlayerController* ForPlayer, int EnemyLevel, const struct FName& Enemy, struct FVector2D* Location);
	static void RecordTeleportedToVehicleEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FName& VehicleType, int DistanceToVehicle);
	static void RecordDestroyVehicleEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FName& DestroyedVehicleType, unsigned char VehicleDestructionReason);
	static void RecordSpawnVehicleEventForPlayer(class AGearboxPlayerController* ForPlayer, const struct FName& SpawnedVehicleType);
	static void RecordDeclinedDuelEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char DuelDeclineReason);
	static void RecordDuelEndedEventForPlayer(class AGearboxPlayerController* ForPlayer, int DuelEndedVersus, unsigned char DuelResult);
	static void RecordMinorActionEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char ActionType);
	static void RecordMissionFastForwardEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char FastForwardResult, const struct FName& MissionDefinition);
	static void RecordMissionObjectiveChangedEventForPlayer(class AGearboxPlayerController* ForPlayer, int ObjectiveIndex, int ObjectiveProgress, int PreviousObjectiveProgress, const struct FName& MissionDefinition);
	static void RecordMissionObjectiveSetActivatedEventForPlayer(class AGearboxPlayerController* ForPlayer, int ObjectiveSetIndex, const struct FName& MissionDefinition);
	static void RecordMissionStatusChangedEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Status, const struct FName& MissionDefinition);
	static void RecordDiscoverLocationEventForPlayer(class AGearboxPlayerController* ForPlayer, int ExperienceGained, const struct FName& Location);
	static void RecordWieldedWeaponChangedEventForPlayer(class AGearboxPlayerController* ForPlayer, class AWillowInventory* Inv, bool OffHand);
	static void RecordBlackMarketUpgradePurchasedEventForPlayer(class AGearboxPlayerController* ForPlayer, int UpgradeLevel, const struct FName& UpgradeDefinition);
	static void RecordItemMovedInInventoryEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Slot, class AWillowInventory* Inv);
	static void RecordItemFromInventoryEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Location, unsigned char Slot, class AWillowInventory* Inv, int SessionPlayerNumber);
	static void RecordItemToInventoryEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Location, unsigned char Slot, class AWillowInventory* Inv, int SessionPlayerNumber, bool ReplacedEquipped);
	static void RecordItemSpawnedEventForAllPlayers(unsigned char Location, class AWillowInventory* Inv, const struct FName& SourceResponsible, const struct FName& SourceDefinition);
	static void RecordItemSpawnedEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Location, class AWillowInventory* Inv, const struct FName& SourceResponsible, const struct FName& SourceDefinition);
	static void RecordPlayerCharacterGainedLevelEventForPlayer(class AGearboxPlayerController* ForPlayer, int NewLevel);
	static void RecordExperienceGainedEventForPlayer(class AGearboxPlayerController* ForPlayer, unsigned char Source, int ExperienceGained);
	static void RecordLocationPulseEventForPlayer(class AGearboxPlayerController* ForPlayer, struct FVector2D* Location);
	static bool IsLeviathanEnabled();
	static void PublishEvents();
	static void NewPlaySession(class AWillowPlayerController* ForPlayer);
};


// Class WillowGame.Action_AimAtScanRange
// 0x0010 (0x0128 - 0x0138)
class UAction_AimAtScanRange : public UWillowActionSequencePawn
{
public:
	int                                                YawRange;                                                 // 0x0128(0x0004) (Edit)
	float                                              ScanSpeed;                                                // 0x012C(0x0004) (Edit)
	float                                              PointDelay;                                               // 0x0130(0x0004) (Edit)
	int                                                CurrentYawRange;                                          // 0x0134(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_AimAtScanRange");
		return ptr;
	}


	void SetNewRotation();
	void Stop();
	void Start();
};


// Class WillowGame.Action_AimAtThreat
// 0x0000 (0x0128 - 0x0128)
class UAction_AimAtThreat : public UWillowActionSequencePawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_AimAtThreat");
		return ptr;
	}


	void Start();
	struct FName CanRun();
};


// Class WillowGame.BehaviorAliasLookupDefinition
// 0x000C (0x003C - 0x0048)
class UBehaviorAliasLookupDefinition : public UGBXDefinition
{
public:
	TArray<struct FBehaviorAliasReference>             BehaviorAliasList;                                        // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BehaviorAliasLookupDefinition");
		return ptr;
	}


	bool RunBehaviorAlias(class UBehaviorAliasDefinition* BehaviorAlias, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData);
};


// Class WillowGame.PhaseLockDefinition
// 0x001C (0x003C - 0x0058)
class UPhaseLockDefinition : public UGBXDefinition
{
public:
	float                                              DropTime;                                                 // 0x003C(0x0004) (Edit, Const)
	float                                              HeightFromGround;                                         // 0x0040(0x0004) (Edit, Const)
	class UExpressionEvaluator*                        CanPlayDropAnims;                                         // 0x0044(0x0004) (Edit, Const, EditInline)
	class USpecialMove_PhaseLock*                      LiftAnim;                                                 // 0x0048(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_PhaseLock*                      LoopAnim;                                                 // 0x004C(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_PhaseLock*                      DropAnim;                                                 // 0x0050(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	class USpecialMove_PhaseLock*                      LandAnim;                                                 // 0x0054(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PhaseLockDefinition");
		return ptr;
	}

};


// Class WillowGame.Action_AttackLoop
// 0x0020 (0x01E8 - 0x0208)
class UAction_AttackLoop : public UAction_BasicAttack
{
public:
	struct FAIRange                                    LoopCount;                                                // 0x01E8(0x0008) (Edit, Const)
	class USpecialMoveDefinition*                      StartSMD;                                                 // 0x01F0(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      StopSMD;                                                  // 0x01F4(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      LoopSMD;                                                  // 0x01F8(0x0004) (Edit, Const)
	class UExpressionEvaluator*                        LoopCondition;                                            // 0x01FC(0x0004) (Edit, Const, EditInline)
	int                                                NumLoops;                                                 // 0x0200(0x0004) (Transient)
	int                                                MaxLoops;                                                 // 0x0204(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_AttackLoop");
		return ptr;
	}


	bool PlayAnim(class USpecialMoveDefinition* Anim, const struct FName& CallbackName);
};


// Class WillowGame.Action_BikeMove
// 0x003C (0x0128 - 0x0164)
class UAction_BikeMove : public UWillowActionSequencePawn
{
public:
	unsigned long                                      bLimitedMovement : 1;                                     // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bPathingFailed : 1;                                       // 0x0128(0x0004) (Transient)
	TArray<struct FVector>                             TargetOffsets;                                            // 0x012C(0x000C) (Edit, Const, NeedCtorLink)
	float                                              RecalcDestTargetMoveDist;                                 // 0x0138(0x0004) (Edit, Const)
	float                                              ReachDistance;                                            // 0x013C(0x0004) (Edit, Const)
	float                                              MinTravelDistance;                                        // 0x0140(0x0004) (Edit, Const)
	TArray<struct FVector>                             Dests;                                                    // 0x0144(0x000C) (Transient, NeedCtorLink)
	int                                                DestIdx;                                                  // 0x0150(0x0004) (Transient)
	int                                                NumFailedDests;                                           // 0x0154(0x0004) (Transient)
	struct FVector                                     CachedTargetLoc;                                          // 0x0158(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_BikeMove");
		return ptr;
	}


	bool WantsPathFind();
	bool ShouldRecalcDests();
	bool IsDestClose();
	void UnclaimMovement();
	void ClaimMovement();
	bool CanMove();
	void ResetDests();
	bool HasDests();
	void CalcDests();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_FollowPath
// 0x0024 (0x0130 - 0x0154)
class UAction_FollowPath : public UAction_Burrow
{
public:
	unsigned long                                      bPerchExiting : 1;                                        // 0x0130(0x0004) (Transient)
	unsigned long                                      bWaitingOnPerch : 1;                                      // 0x0130(0x0004) (Transient)
	unsigned long                                      bWaitingOnTimer : 1;                                      // 0x0130(0x0004) (Transient)
	unsigned long                                      bWaitingOnSpecialMoves : 1;                               // 0x0130(0x0004) (Transient)
	unsigned long                                      bReachedNode : 1;                                         // 0x0130(0x0004) (Transient)
	unsigned long                                      bPathInterrupted : 1;                                     // 0x0130(0x0004) (Transient)
	struct FPerchAnimData                              PerchData;                                                // 0x0134(0x0010) (Transient)
	class AWillowAIMoveNode*                           MoveNode;                                                 // 0x0144(0x0004) (Transient)
	class AWillowAIMoveNode*                           NextNode;                                                 // 0x0148(0x0004) (Transient)
	float                                              LastPathFailTime;                                         // 0x014C(0x0004) (Transient)
	float                                              TimeToStopLooping;                                        // 0x0150(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_FollowPath");
		return ptr;
	}


	void PathAttemptFinished();
	void PerchStop();
	void PerchDone();
	void PerchPlayStop(bool bInterrupted);
	void PerchPlayLoop(bool bInterrupted);
	void PerchPlayIdle(bool bInterrupted);
	void PerchStart(class APerch* NewPerch);
	struct FBehaviorConsumerHandle GetPerchConsumerHandle();
	void SetPerch();
	void SpecialMoveCallback();
	void SetSpecialMoves();
	void MoveTimerCallback();
	void SetMoveTimer();
	void Stop();
	void SetMoveNode(class AWillowAIMoveNode* NewNode);
	class AWillowAIMoveNode* GetMoveNode();
	void SetMoveFacingPolicy();
	void SetMoveNodeSpeed();
};


// Class WillowGame.Action_BunkerBoss_Flight
// 0x0088 (0x0154 - 0x01DC)
class UAction_BunkerBoss_Flight : public UAction_FollowPath
{
public:
	unsigned long                                      bShowDebug : 1;                                           // 0x0154(0x0004) (Edit)
	unsigned long                                      bDebugPerch : 1;                                          // 0x0154(0x0004) (Edit)
	unsigned long                                      bOnScriptedPath : 1;                                      // 0x0154(0x0004)
	unsigned long                                      bMoveToOffset : 1;                                        // 0x0154(0x0004)
	unsigned long                                      bNearDeath : 1;                                           // 0x0154(0x0004)
	unsigned long                                      bTurnOffSkelControl : 1;                                  // 0x0154(0x0004) (Transient)
	float                                              OffsetDistance;                                           // 0x0158(0x0004) (Edit)
	float                                              TimeBetweenAttacks;                                       // 0x015C(0x0004) (Edit)
	float                                              CircleFlightDistance;                                     // 0x0160(0x0004) (Edit)
	float                                              CircleFlightHeight;                                       // 0x0164(0x0004) (Edit)
	struct FVector                                     NonTargetOrigin;                                          // 0x0168(0x000C) (Edit)
	class UExpressionEvaluator*                        NearDeathExpression;                                      // 0x0174(0x0004) (Edit, Const, EditInline)
	struct FVector                                     MoveToPointNearDeath;                                     // 0x0178(0x000C) (Edit)
	class UExpressionEvaluator*                        PerchLoopExpression;                                      // 0x0184(0x0004) (Edit, Const, EditInline)
	class USpecialMoveDefinition*                      Turn360Anim;                                              // 0x0188(0x0004) (Edit)
	class UFlagDefinition*                             BackupPerchFlag;                                          // 0x018C(0x0004) (Edit)
	struct FName                                       DeathPerchName;                                           // 0x0190(0x0008) (Edit)
	struct FName                                       RotationOffsetName;                                       // 0x0198(0x0008) (Edit)
	struct FVector                                     LastLocation;                                             // 0x01A0(0x000C)
	struct FVector                                     BackupOffset;                                             // 0x01AC(0x000C)
	float                                              TimeOfNextAttack;                                         // 0x01B8(0x0004)
	float                                              NextValidationTime;                                       // 0x01BC(0x0004)
	float                                              BackupDist;                                               // 0x01C0(0x0004)
	int                                                PerchFailCount;                                           // 0x01C4(0x0004)
	struct FVector                                     PerchOffset;                                              // 0x01C8(0x000C)
	class APerch*                                      DeathPerch;                                               // 0x01D4(0x0004) (Transient)
	class USkelControlSingleBone*                      RotOffsetBone;                                            // 0x01D8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_BunkerBoss_Flight");
		return ptr;
	}


	void PerchStart(class APerch* NewPerch);
	struct FVector GetFlightPathToPerch();
	void PerchDone();
	bool ReadyToDie();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_Idle
// 0x001C (0x0130 - 0x014C)
class UAction_Idle : public UAction_Burrow
{
public:
	struct FAIRange                                    IdleTime;                                                 // 0x0130(0x0008) (Edit, Const)
	unsigned char                                      CloakBehavior;                                            // 0x0138(0x0001) (Edit, Const)
	unsigned char                                      FollowType;                                               // 0x0139(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x013A(0x0002) MISSED OFFSET
	unsigned long                                      bLookAtTarget : 1;                                        // 0x013C(0x0004) (Edit, Const)
	float                                              DistMin;                                                  // 0x0140(0x0004) (Edit, Const)
	float                                              DistMax;                                                  // 0x0144(0x0004) (Edit, Const)
	float                                              CheckRate;                                                // 0x0148(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Idle");
		return ptr;
	}


	void CheckStateTransition();
	bool ShouldPathToTarget();
	class AActor* GetGoalActor();
	void IdleFinished();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_BurrowIdle
// 0x0000 (0x014C - 0x014C)
class UAction_BurrowIdle : public UAction_Idle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_BurrowIdle");
		return ptr;
	}

};


// Class WillowGame.Action_ChargeTarget
// 0x0018 (0x01E8 - 0x0200)
class UAction_ChargeTarget : public UAction_BasicAttack
{
public:
	float                                              MissDistance;                                             // 0x01E8(0x0004) (Edit, Const)
	float                                              StrikeDistance;                                           // 0x01EC(0x0004) (Edit, Const)
	class USpecialMove_Motion*                         ChargeStart;                                              // 0x01F0(0x0004) (Edit, Const, EditInline)
	class USpecialMove_Motion*                         ChargeStop;                                               // 0x01F4(0x0004) (Edit, Const, EditInline)
	class USpecialMove_Motion*                         ChargeStrike;                                             // 0x01F8(0x0004) (Edit, Const, EditInline)
	class USpecialMove_Motion*                         ChargeHitWall;                                            // 0x01FC(0x0004) (Edit, Const, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_ChargeTarget");
		return ptr;
	}


	void StopCharge(class USpecialMoveDefinition* SMD);
	void ChargeFinished();
	struct FName CanRun();
};


// Class WillowGame.Action_CombatPerch
// 0x0004 (0x0154 - 0x0158)
class UAction_CombatPerch : public UAction_FollowPath
{
public:
	unsigned long                                      bMustHaveTarget : 1;                                      // 0x0154(0x0004) (Edit, Const)
	unsigned long                                      bTeleport : 1;                                            // 0x0154(0x0004) (Edit, Const)
	unsigned long                                      bPickClosestPerch : 1;                                    // 0x0154(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_CombatPerch");
		return ptr;
	}


	bool PathFind();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_DeathTrap
// 0x003C (0x0128 - 0x0164)
class UAction_DeathTrap : public UWillowActionSequencePawn
{
public:
	struct FAIRange                                    MoveRange;                                                // 0x0128(0x0008) (Edit, Const)
	unsigned long                                      bRandomOffsets : 1;                                       // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bCanShoot : 1;                                            // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bAttacking : 1;                                           // 0x0130(0x0004) (Transient)
	unsigned long                                      bCloseToOwner : 1;                                        // 0x0130(0x0004) (Transient)
	struct FAIRange                                    RandomHOffset;                                            // 0x0134(0x0008) (Edit, Const)
	struct FAIRange                                    RandomVOffset;                                            // 0x013C(0x0008) (Edit, Const)
	struct FAIRange                                    RandomTime;                                               // 0x0144(0x0008) (Edit, Const)
	struct FAIRange                                    RandomAngleLimits;                                        // 0x014C(0x0008) (Edit, Const)
	float                                              AttackDist;                                               // 0x0154(0x0004) (Edit, Const)
	struct FVector                                     CurrentMoveOffset;                                        // 0x0158(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_DeathTrap");
		return ptr;
	}


	void Reinitialize();
	bool WantsPath(float Distance);
	void StopAttacking();
	void StartAttacking();
	void CheckAttack();
	bool CanAttack();
	void ActivateEvent(const struct FName& EventName);
	float GetBufferDist();
	struct FVector GetMoveLoc();
	void PickRandomOffset();
	int GetRandomYaw();
	class AActor* GetPointDefense();
	class APawn* GetOwner();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_Drive_Pursuit
// 0x008C (0x0128 - 0x01B4)
class UAction_Drive_Pursuit : public UWillowActionSequencePawn
{
public:
	float                                              TargetForwardVelocityStartAction;                         // 0x0128(0x0004) (Edit)
	float                                              TargetForwardVelocityStopAction;                          // 0x012C(0x0004) (Edit)
	float                                              TimeBeforeExitingActionIfTargetSlowsDown;                 // 0x0130(0x0004) (Edit)
	float                                              MaxSpeedMultiplier;                                       // 0x0134(0x0004) (Edit)
	float                                              SpeedMultiplierDuringSharpTurns;                          // 0x0138(0x0004) (Edit)
	float                                              DistanceToTargetStartAction;                              // 0x013C(0x0004) (Edit)
	float                                              DistanceToTargetStopAction;                               // 0x0140(0x0004) (Edit)
	float                                              DistanceStopUsingBreadcrumbs;                             // 0x0144(0x0004) (Edit)
	float                                              DistanceToTargetPursue;                                   // 0x0148(0x0004) (Edit)
	float                                              DistanceToTargetRetreat;                                  // 0x014C(0x0004) (Edit)
	unsigned long                                      UseHandbrakeToStop : 1;                                   // 0x0150(0x0004) (Edit)
	unsigned long                                      UseAfterburnerBoosting : 1;                               // 0x0150(0x0004) (Edit)
	unsigned long                                      HasStarted : 1;                                           // 0x0150(0x0004) (Transient)
	unsigned long                                      WantsToBoost : 1;                                         // 0x0150(0x0004) (Transient)
	unsigned long                                      WantsToStopBoosting : 1;                                  // 0x0150(0x0004) (Transient)
	float                                              CanUseHandbrakeSpeedThreshold;                            // 0x0154(0x0004) (Edit)
	float                                              NoHandbrakeSpeedThreshold;                                // 0x0158(0x0004) (Edit)
	class AWillowVehicle*                              MyVehicle;                                                // 0x015C(0x0004) (Transient)
	float                                              LastTimeTargetWasFastEnough;                              // 0x0160(0x0004) (Transient)
	struct FVector                                     PursuitPoint;                                             // 0x0164(0x000C) (Transient)
	float                                              SpeedMultiplier;                                          // 0x0170(0x0004) (Transient)
	float                                              TimeOfLastBraking;                                        // 0x0174(0x0004) (Transient)
	class AWillowVehicleCombatArea*                    MyCombatArea;                                             // 0x0178(0x0004) (Transient)
	class AWillowVehicleCombatArea*                    TargetCombatArea;                                         // 0x017C(0x0004) (Transient)
	float                                              LastBoostTime;                                            // 0x0180(0x0004) (Transient)
	float                                              TimeStampOutsideCombatArea;                               // 0x0184(0x0004) (Transient)
	class AWillowVehicle*                              TargetVehicle;                                            // 0x0188(0x0004) (Transient)
	TArray<struct FEnemyBreadCrumbStruct>              EnemyPosBreadCrumbs;                                      // 0x018C(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      CurrentState;                                             // 0x0198(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0199(0x0003) MISSED OFFSET
	int                                                I;                                                        // 0x019C(0x0004) (Transient)
	float                                              MinTimeSpentBraking;                                      // 0x01A0(0x0004) (Const)
	float                                              RequiredDelayBetweenBrakings;                             // 0x01A4(0x0004) (Const)
	float                                              RequiredDelayBetweenBoosts;                               // 0x01A8(0x0004) (Const)
	float                                              BreadCrumbCoalesceThreshold;                              // 0x01AC(0x0004) (Const)
	float                                              OutOfCombatAreaGracePeriod;                               // 0x01B0(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Drive_Pursuit");
		return ptr;
	}


	void DisplayDebugBreadCrumbs();
	bool ReachedBreadCrumb();
	void UpdateBreadCrumbs();
	bool IsSharpTurn(const struct FVector& InPursuitPoint);
	struct FVector GetPursuitPointAndSpeedMultiplier(float* OutSpeedMultiplier);
	void Stop();
	void Start();
	struct FName CanRun();
	void ComputeCurrentState();
};


// Class WillowGame.Action_Drive_AlongsideTarget
// 0x001C (0x01B4 - 0x01D0)
class UAction_Drive_AlongsideTarget : public UAction_Drive_Pursuit
{
public:
	float                                              IdealDistanceFromTarget;                                  // 0x01B4(0x0004) (Edit)
	float                                              IdealDistanceAheadOfTarget;                               // 0x01B8(0x0004) (Edit)
	float                                              MinSpeedMultiplierWhenAheadOfTarget;                      // 0x01BC(0x0004) (Edit)
	float                                              MaxSpeedMultiplierWhenAheadOfTarget;                      // 0x01C0(0x0004) (Edit)
	float                                              SpeedDamperWhenRightAlongsideTarget;                      // 0x01C4(0x0004) (Edit)
	float                                              DistanceAheadOfTargetToAimFor;                            // 0x01C8(0x0004) (Edit)
	float                                              NudgeDistance;                                            // 0x01CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Drive_AlongsideTarget");
		return ptr;
	}


	struct FVector GetPursuitPointAndSpeedMultiplier(float* OutSpeedMultiplier);
	struct FVector DetermineClosestFlankPoint();
};


// Class WillowGame.Action_Drive_AvoidWall
// 0x0040 (0x0128 - 0x0168)
class UAction_Drive_AvoidWall : public UWillowActionSequencePawn
{
public:
	float                                              LineCheckDistance;                                        // 0x0128(0x0004) (Edit)
	int                                                NumLineChecks;                                            // 0x012C(0x0004) (Edit)
	float                                              HitNormalDotZThreshold;                                   // 0x0130(0x0004) (Edit)
	float                                              SpeedThresholdWhenVeering;                                // 0x0134(0x0004) (Edit)
	class AWillowVehicle*                              MyVehicle;                                                // 0x0138(0x0004) (Transient)
	struct FVector                                     PursuitPoint;                                             // 0x013C(0x000C) (Transient)
	struct FVector                                     CollisionPoint;                                           // 0x0148(0x000C) (Transient)
	struct FVector                                     HitNormal;                                                // 0x0154(0x000C) (Transient)
	float                                              Speed;                                                    // 0x0160(0x0004) (Transient)
	float                                              SpeedMultiplier;                                          // 0x0164(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Drive_AvoidWall");
		return ptr;
	}


	bool IAmBlocked();
	struct FVector GetPursuitPoint(float* OutSpeedMultiplier);
	void Start();
	struct FName CanRun();
	bool TestForCollision();
};


// Class WillowGame.Action_Drive_BackUpAndAdjust
// 0x0004 (0x0168 - 0x016C)
class UAction_Drive_BackUpAndAdjust : public UAction_Drive_AvoidWall
{
public:
	unsigned long                                      HasStarted : 1;                                           // 0x0168(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Drive_BackUpAndAdjust");
		return ptr;
	}


	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_Drive_GoBackToCombatArea
// 0x0010 (0x0128 - 0x0138)
class UAction_Drive_GoBackToCombatArea : public UWillowActionSequencePawn
{
public:
	float                                              MinSpeedMultiplier;                                       // 0x0128(0x0004) (Edit, Const)
	float                                              MaxSpeedMultiplier;                                       // 0x012C(0x0004) (Edit, Const)
	class AWillowVehicle*                              MyVehicle;                                                // 0x0130(0x0004)
	unsigned long                                      HasStarted : 1;                                           // 0x0134(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Drive_GoBackToCombatArea");
		return ptr;
	}


	void SetSpeedMultiplier();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_Drive_Pursuit_TargetOnFoot
// 0x0050 (0x0128 - 0x0178)
class UAction_Drive_Pursuit_TargetOnFoot : public UWillowActionSequencePawn
{
public:
	float                                              MaxSpeedMultiplier;                                       // 0x0128(0x0004) (Edit)
	float                                              SpeedMultiplierDuringSharpTurns;                          // 0x012C(0x0004) (Edit)
	float                                              DistanceToTargetStartAction;                              // 0x0130(0x0004) (Edit)
	float                                              DistanceToTargetStopAction;                               // 0x0134(0x0004) (Edit)
	float                                              DistanceToTargetPursue;                                   // 0x0138(0x0004) (Edit)
	float                                              DistanceToTargetRetreat;                                  // 0x013C(0x0004) (Edit)
	unsigned long                                      UseHandbrakeToStop : 1;                                   // 0x0140(0x0004) (Edit)
	unsigned long                                      HasStarted : 1;                                           // 0x0140(0x0004) (Transient)
	float                                              CanUseHandbrakeSpeedThreshold;                            // 0x0144(0x0004) (Edit)
	float                                              NoHandbrakeSpeedThreshold;                                // 0x0148(0x0004) (Edit)
	class AWillowVehicle*                              MyVehicle;                                                // 0x014C(0x0004) (Transient)
	struct FVector                                     PursuitPoint;                                             // 0x0150(0x000C) (Transient)
	float                                              SpeedMultiplier;                                          // 0x015C(0x0004) (Transient)
	float                                              TimeOfLastBraking;                                        // 0x0160(0x0004) (Transient)
	class AWillowVehicleCombatArea*                    MyCombatArea;                                             // 0x0164(0x0004) (Transient)
	float                                              TimeStampOutsideCombatArea;                               // 0x0168(0x0004) (Transient)
	float                                              MinTimeSpentBraking;                                      // 0x016C(0x0004) (Const)
	float                                              RequiredDelayBetweenBrakings;                             // 0x0170(0x0004) (Const)
	float                                              OutOfCombatAreaGracePeriod;                               // 0x0174(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Drive_Pursuit_TargetOnFoot");
		return ptr;
	}


	bool IsSharpTurn(const struct FVector& InPursuitPoint);
	struct FVector GetPursuitPointAndSpeedMultiplier(float* OutSpeedMultiplier);
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_DriveVehicle
// 0x0040 (0x0128 - 0x0168)
class UAction_DriveVehicle : public UWillowActionSequencePawn
{
public:
	float                                              MaxSpeedMultiplier;                                       // 0x0128(0x0004) (Edit, Const)
	float                                              ReachedNodeWeighting;                                     // 0x012C(0x0004) (Edit, Const)
	class AWillowVehicle*                              MyVehicle;                                                // 0x0130(0x0004)
	class AGearboxAIMoveNode*                          MoveNode;                                                 // 0x0134(0x0004)
	class AGearboxAIMoveNode*                          NextMoveNode;                                             // 0x0138(0x0004)
	struct FVector                                     StartLoc;                                                 // 0x013C(0x000C)
	struct FVector                                     VectA;                                                    // 0x0148(0x000C)
	struct FVector                                     VectB;                                                    // 0x0154(0x000C)
	float                                              T;                                                        // 0x0160(0x0004)
	unsigned long                                      HasStarted : 1;                                           // 0x0164(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_DriveVehicle");
		return ptr;
	}


	void AdvanceNodes();
	bool PassedNode();
	bool ReachedNode();
	void Stop();
	void Start();
	struct FName CanRun();
	class AWillowAIMoveNode* GetBestPatrolNode();
};


// Class WillowGame.Action_FinalBoss
// 0x0000 (0x0154 - 0x0154)
class UAction_FinalBoss : public UAction_FollowPath
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_FinalBoss");
		return ptr;
	}


	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_FinalBossFly
// 0x003C (0x0154 - 0x0190)
class UAction_FinalBossFly : public UAction_FollowPath
{
public:
	struct FName                                       LandPerchID;                                              // 0x0154(0x0008) (Edit)
	struct FName                                       FlightSplineName;                                         // 0x015C(0x0008) (Edit)
	struct FName                                       FlightSplineReverseName;                                  // 0x0164(0x0008) (Edit)
	struct FName                                       FlightAnimNodeRName;                                      // 0x016C(0x0008) (Edit)
	struct FName                                       FlightAnimNodeLName;                                      // 0x0174(0x0008) (Edit)
	class APerch*                                      FlyToPerch;                                               // 0x017C(0x0004) (Transient)
	class ASplineActor*                                FlightSpline;                                             // 0x0180(0x0004) (Transient)
	unsigned long                                      bReverse : 1;                                             // 0x0184(0x0004) (Transient)
	class UAnimNodeSequence*                           MyAnimSeqR;                                               // 0x0188(0x0004) (Transient)
	class UAnimNodeSequence*                           MyAnimSeqL;                                               // 0x018C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_FinalBossFly");
		return ptr;
	}


	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_FlyAnimAttack
// 0x0028 (0x0130 - 0x0158)
class UAction_FlyAnimAttack : public UAction_Burrow
{
public:
	unsigned char                                      AimType;                                                  // 0x0130(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              VisionAngle;                                              // 0x0134(0x0004) (Edit, Const)
	struct FAIRange                                    Range;                                                    // 0x0138(0x0008) (Edit, Const)
	unsigned long                                      bShootTarget : 1;                                         // 0x0140(0x0004) (Edit, Const)
	unsigned long                                      bAttackFromOppositeSideOfMaster : 1;                      // 0x0140(0x0004) (Edit, Const)
	unsigned long                                      bTargetHeld : 1;                                          // 0x0140(0x0004) (Transient)
	class USpecialMoveDefinition*                      AttackAnim;                                               // 0x0144(0x0004) (Edit, Const)
	float                                              CheckRate;                                                // 0x0148(0x0004)
	float                                              Aim;                                                      // 0x014C(0x0004) (Transient)
	struct FAIRange                                    ActualRange;                                              // 0x0150(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_FlyAnimAttack");
		return ptr;
	}


	bool ValidAttackLoc(const struct FVector& TestLoc);
	struct FVector GetAttackLoc();
	bool IsAimed();
	float GetDotToTarget();
	void AttackFinished();
	void CheckStateTransition();
	struct FName GetDesiredState();
	void ActivateEvent(const struct FName& EventName);
	void Stop();
	void Start();
	struct FName CanRun();
	void Init();
};


// Class WillowGame.Action_GoToScriptedDestination
// 0x0004 (0x0154 - 0x0158)
class UAction_GoToScriptedDestination : public UAction_FollowPath
{
public:
	float                                              FindLookAtTargetTime;                                     // 0x0154(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_GoToScriptedDestination");
		return ptr;
	}


	void FindLookAtTarget();
	bool ReachedFormation(const struct FVector& TestLoc);
	bool CanFollowFormationOwner();
	bool InRange(const struct FVector& TestLoc);
	bool WantsPath();
	void SetMoveNode(class AWillowAIMoveNode* NewNode);
	class AWillowAIMoveNode* GetMoveNode();
	void SetMoveNodeSpeed();
	unsigned char GetDefaultMoveNodeSpeed();
	void SetMoveFacingPolicy();
	void LookAtScriptedFocus();
	void CheckStateTransition();
	struct FName GetDesiredStateName();
	bool ShouldLookAtPlayer();
	void ActivateEvent(const struct FName& EventName);
	void Update();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_GrabPickup
// 0x0020 (0x0128 - 0x0148)
class UAction_GrabPickup : public UWillowActionSequencePawn
{
public:
	float                                              CheckRadius;                                              // 0x0128(0x0004) (Edit)
	class USpecialMoveDefinition*                      PickupAnim;                                               // 0x012C(0x0004) (Edit)
	unsigned long                                      bShootTarget : 1;                                         // 0x0130(0x0004) (Edit)
	float                                              GrabTimer;                                                // 0x0134(0x0004) (Edit)
	float                                              CheckTime;                                                // 0x0138(0x0004)
	float                                              CheckRadiusSq;                                            // 0x013C(0x0004) (Transient)
	float                                              LastCheckTime;                                            // 0x0140(0x0004) (Transient)
	class AWillowPickup*                               MyPickup;                                                 // 0x0144(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_GrabPickup");
		return ptr;
	}


	void ActuallyPickupItem();
	bool PathFind();
	struct FVector GetPathLocation();
	bool HasPathToPickup();
	void CheckPickUp();
	bool ValidPickup(class AWillowPickup* CheckPickUp);
	void Start();
	struct FName CanRun();
	void Init();
};


// Class WillowGame.WillowReplicatedEmitter
// 0x0074 (0x019C - 0x0210)
class AWillowReplicatedEmitter : public AWillowEmitter
{
public:
	struct FEmitterTemplateOptions                     EmitterTemplate;                                          // 0x019C(0x000C) (Net, RepNotify)
	float                                              ServerLifeSpan;                                           // 0x01A8(0x0004)
	int                                                NumFloatParameters;                                       // 0x01AC(0x0004)
	int                                                NumVectorParameters;                                      // 0x01B0(0x0004)
	int                                                NumColorParameters;                                       // 0x01B4(0x0004)
	struct FFloatParameter                             ReplicatedFloatParameters[0x2];                           // 0x01B8(0x000C) (Net, RepNotify)
	struct FVectorParameter                            ReplicatedVectorParameters[0x2];                          // 0x01D0(0x0014) (Net, RepNotify)
	struct FColorParameter                             ReplicatedColorParameters[0x2];                           // 0x01F8(0x000C) (Net, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowReplicatedEmitter");
		return ptr;
	}


	void Behavior_ChangeParticleSystemActiveState(unsigned char ChangeType);
	void Behavior_SetObjectParameterValue(int* SectionIndex, struct FName* ParameterName, class UObject** Param);
	bool Behavior_GetObjectParameterValue(int* SectionIndex, struct FName* ParameterName, class UObject** Param);
	bool Behavior_GetColorParameterValue(int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Param);
	bool Behavior_GetVectorParameterValue(int* SectionIndex, struct FName* ParameterName, struct FVector* Param);
	bool Behavior_GetFloatParameterValue(int* SectionIndex, struct FName* ParameterName, float* Param);
	void Behavior_SetColorParameterValue(int* SectionIndex, struct FName* ParameterName, struct FLinearColor* Param);
	void Behavior_SetVectorParameterValue(int* SectionIndex, struct FName* ParameterName, struct FVector* Param);
	void Behavior_SetFloatParameterValue(int* SectionIndex, struct FName* ParameterName, float* Param);
	void ApplyColorParameters();
	void ApplyVectorParameters();
	void ApplyFloatParameters();
	void SetColorParameter(const struct FName& ParameterName, const struct FColor& Param);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish);
	void SetTemplateWithCensoredAlternative(class UParticleSystem* DefaultTemplate, class UParticleSystem* CensoredTemplateAlternative, bool bEffectEligibleForCensoring, bool bDestroyOnFinish);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class WillowGame.Action_MortarAttack
// 0x007C (0x01E8 - 0x0264)
class UAction_MortarAttack : public UAction_BasicAttack
{
public:
	float                                              ShotDelay;                                                // 0x01E8(0x0004) (Edit, Const)
	struct FName                                       MortarSocket;                                             // 0x01EC(0x0008) (Edit, Const)
	struct FTrajectoryData                             Options;                                                  // 0x01F4(0x0020) (Edit, Const)
	int                                                NumShots;                                                 // 0x0214(0x0004) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             MortarValues;                                             // 0x0218(0x000C) (Edit, Const, NeedCtorLink)
	class UProjectileDefinition*                       MortarProjectile;                                         // 0x0224(0x0004) (Edit)
	class USpecialMoveDefinition*                      StartAnim;                                                // 0x0228(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      ShootAnim;                                                // 0x022C(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      StopAnim;                                                 // 0x0230(0x0004) (Edit, Const)
	struct FName                                       BeamSocket;                                               // 0x0234(0x0008) (Edit, Const)
	class UFiringModeDefinition*                       BeamFiringModeDefinition;                                 // 0x023C(0x0004) (Edit, Const)
	unsigned long                                      bStartAnimDefinesSeekTime : 1;                            // 0x0240(0x0004) (Edit, Const)
	unsigned long                                      bMoveSeeker : 1;                                          // 0x0240(0x0004) (Edit, Const)
	unsigned long                                      bSeeking : 1;                                             // 0x0240(0x0004) (Transient)
	struct FVector                                     SeekStartOffset;                                          // 0x0244(0x000C) (Edit, Const)
	float                                              SeekTime;                                                 // 0x0250(0x0004) (Edit, Const)
	class UParticleSystem*                             TargetParticle;                                           // 0x0254(0x0004) (Edit, Const)
	float                                              SeekSpeed;                                                // 0x0258(0x0004) (Edit, Const)
	int                                                ShotsTaken;                                               // 0x025C(0x0004) (Transient)
	class AEmitter*                                    Effect;                                                   // 0x0260(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_MortarAttack");
		return ptr;
	}


	void FireMortar();
	void CreateEffect();
	void DetachBeam();
	void AttachBeam();
	void Stop();
};


// Class WillowGame.ILightProjectileManagerOwner
// 0x0000 (0x003C - 0x003C)
class UILightProjectileManagerOwner : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ILightProjectileManagerOwner");
		return ptr;
	}


	class AWillowLightProjectileManager* GetLightProjMgrFor(class AWillowWeapon* aWeapon);
};


// Class WillowGame.Action_MoveToFormation
// 0x0014 (0x0130 - 0x0144)
class UAction_MoveToFormation : public UAction_Burrow
{
public:
	unsigned long                                      bBurrow : 1;                                              // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bShootTarget : 1;                                         // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bCompleteUponArrival : 1;                                 // 0x0130(0x0004) (Edit, Const)
	unsigned long                                      bCompletionMustRotate : 1;                                // 0x0130(0x0004) (Edit, Const)
	float                                              HoldDistance;                                             // 0x0134(0x0004) (Edit, Const)
	struct FName                                       NameTag;                                                  // 0x0138(0x0008) (Edit, Const)
	class UWillowFormationComponent*                   MyFormation;                                              // 0x0140(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_MoveToFormation");
		return ptr;
	}


	bool HalfExposed();
	bool RotatedEnough();
	bool CloseEnough();
	bool CanBeMagnetized();
	bool OwnerIsMoving();
	void SetFacingPolicy();
	void CheckFormation();
	class AWillowPawn* GetLeaderPawn();
	bool CanFollowOwner();
	void CheckStateTransition();
	void Update();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_MoveToVehicle
// 0x0010 (0x0130 - 0x0140)
class UAction_MoveToVehicle : public UAction_Burrow
{
public:
	float                                              EnterDistance;                                            // 0x0130(0x0004) (Edit, Const)
	class AWillowVehicle*                              MyVehicle;                                                // 0x0134(0x0004)
	float                                              CheckRate;                                                // 0x0138(0x0004)
	float                                              LastCheckTime;                                            // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_MoveToVehicle");
		return ptr;
	}


	bool PathFind();
	bool CloseEnough();
	void GetMyVehicle();
	float GetEnterDistance();
	void Update();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_Patrol
// 0x0028 (0x0154 - 0x017C)
class UAction_Patrol : public UAction_FollowPath
{
public:
	unsigned long                                      bTryToHideIfProvoked : 1;                                 // 0x0154(0x0004) (Edit, Const)
	unsigned long                                      bTryToHide : 1;                                           // 0x0154(0x0004) (Transient)
	struct FAIRange                                    TimeBetweenPatrolMovement;                                // 0x0158(0x0008) (Edit, Const)
	float                                              TimeOfNextRandomPatrol;                                   // 0x0160(0x0004) (Transient)
	struct FVector                                     HideLocation;                                             // 0x0164(0x000C) (Transient)
	TArray<class UAttackLocation*>                     HideLimits;                                               // 0x0170(0x000C) (Const, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_Patrol");
		return ptr;
	}


	void CheckFullyBlocked();
	struct FVector GetRandomHomeLocation();
	void SetMoveNode(class AWillowAIMoveNode* NewNode);
	class AWillowAIMoveNode* GetMoveNode();
	void SetMoveNodeSpeed();
	void SetMoveFacingPolicy();
	void ShowDesignError();
	void CheckStateTransition();
	struct FName GetPatrolState();
	void Stop();
	void Start();
	void ScriptCleanUp();
};


// Class WillowGame.Action_PlayCustomAnimation
// 0x0008 (0x0128 - 0x0130)
class UAction_PlayCustomAnimation : public UWillowActionSequencePawn
{
public:
	class USpecialMoveDefinition*                      SpecialMove;                                              // 0x0128(0x0004) (Edit)
	unsigned long                                      bStopMovement : 1;                                        // 0x012C(0x0004) (Edit)
	unsigned long                                      bWaitForMovementToStop : 1;                               // 0x012C(0x0004) (Edit)
	unsigned long                                      bStopOnInterrupt : 1;                                     // 0x012C(0x0004) (Edit)
	unsigned long                                      bUninteruptible : 1;                                      // 0x012C(0x0004) (Edit)
	unsigned long                                      bMovementHeld : 1;                                        // 0x012C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_PlayCustomAnimation");
		return ptr;
	}


	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_ScriptedNPC
// 0x0004 (0x0158 - 0x015C)
class UAction_ScriptedNPC : public UAction_GoToScriptedDestination
{
public:
	unsigned long                                      bLoadBalanceNPC : 1;                                      // 0x0158(0x0004) (Edit)
	unsigned long                                      bIdleNPC : 1;                                             // 0x0158(0x0004) (Edit)
	unsigned long                                      bStuckOnPerch : 1;                                        // 0x0158(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_ScriptedNPC");
		return ptr;
	}


	void PerchPlayStopBalanced();
	void PerchPlayStop(bool bInterrupted);
	void PerchDone();
	void PerchStart(class APerch* NewPerch);
	unsigned char GetDefaultMoveNodeSpeed();
	void SetMoveFacingPolicy();
	void SetupLoadBalancePathing();
	void SetupLoadBalanceDefaults();
	void CreateVectorPath(const struct FVector& GoalVector, const struct FGBXNavMeshPolyRef& GoalPoly, bool bAdjustStartForMotion);
	void CreateActorPath(class AActor* GoalActor, float MaxDist, bool bAdjustStartForMotion);
	void SetPerch();
	void PathAttemptFinished();
	struct FName GetDesiredStateName();
	void CheckStateTransition();
	struct FName CanRun();
};


// Class WillowGame.Behavior_AISetFlight
// 0x0001 (0x004C - 0x004D)
class UBehavior_AISetFlight : public UBehaviorBase
{
public:
	unsigned char                                      Mode;                                                     // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AISetFlight");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Action_SetFlight
// 0x003C (0x0128 - 0x0164)
class UAction_SetFlight : public UWillowActionSequencePawn
{
public:
	unsigned char                                      Mode;                                                     // 0x0128(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	class USpecialMoveDefinition*                      Anim;                                                     // 0x012C(0x0004) (Edit, Const)
	struct FBasedPosition                              LandPos;                                                  // 0x0130(0x0034) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_SetFlight");
		return ptr;
	}


	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_ShootThreatWhenInView
// 0x0000 (0x0128 - 0x0128)
class UAction_ShootThreatWhenInView : public UAction_AimAtThreat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_ShootThreatWhenInView");
		return ptr;
	}


	void Stop();
	void Start();
};


// Class WillowGame.Action_SweepAttack
// 0x0028 (0x0128 - 0x0150)
class UAction_SweepAttack : public UWillowActionSequencePawn
{
public:
	unsigned long                                      bShootTarget : 1;                                         // 0x0128(0x0004) (Edit, Const)
	float                                              Angle;                                                    // 0x012C(0x0004) (Edit, Const)
	float                                              Height;                                                   // 0x0130(0x0004) (Edit, Const)
	float                                              Radius;                                                   // 0x0134(0x0004) (Edit, Const)
	unsigned char                                      Direction;                                                // 0x0138(0x0001) (Edit, Const)
	unsigned char                                      SweepDirection;                                           // 0x0139(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x013A(0x0002) MISSED OFFSET
	float                                              MaxIntervalAngle;                                         // 0x013C(0x0004) (Edit, Const)
	struct FVector                                     NextLoc;                                                  // 0x0140(0x000C) (Transient)
	float                                              AngleTraveled;                                            // 0x014C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_SweepAttack");
		return ptr;
	}


	void CalcNextLoc();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.Action_VehicleTurret
// 0x0000 (0x0128 - 0x0128)
class UAction_VehicleTurret : public UWillowActionSequencePawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Action_VehicleTurret");
		return ptr;
	}


	void Update();
	void Stop();
	void Start();
	struct FName CanRun();
};


// Class WillowGame.WillowSeqEvent_TimerElapsed
// 0x0001 (0x00C4 - 0x00C5)
class UWillowSeqEvent_TimerElapsed : public USequenceEvent
{
public:
	unsigned char                                      Event;                                                    // 0x00C4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_TimerElapsed");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryInteractiveSwitch
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryInteractiveSwitch : public UActorFactoryInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryInteractiveSwitch");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryPopulationOpportunityPoint
// 0x0000 (0x007C - 0x007C)
class UActorFactoryPopulationOpportunityPoint : public UActorFactoryPopulationOpportunityArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryPopulationOpportunityPoint");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryPropObject
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryPropObject : public UActorFactoryInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryPropObject");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryVehicleSpawnStationPlatform
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryVehicleSpawnStationPlatform : public UActorFactoryInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryVehicleSpawnStationPlatform");
		return ptr;
	}

};


// Class WillowGame.ActorFactoryVehicleSpawnStationTerminal
// 0x0000 (0x0080 - 0x0080)
class UActorFactoryVehicleSpawnStationTerminal : public UActorFactoryInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ActorFactoryVehicleSpawnStationTerminal");
		return ptr;
	}

};


// Class WillowGame.WillowCoopPlayerStart
// 0x0000 (0x0254 - 0x0254)
class AWillowCoopPlayerStart : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCoopPlayerStart");
		return ptr;
	}

};


// Class WillowGame.AIDebugDummy
// 0x0000 (0x01EC - 0x01EC)
class AAIDebugDummy : public AAIDebugDummyBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AIDebugDummy");
		return ptr;
	}

};


// Class WillowGame.AmmoPanelGFxObject
// 0x0028 (0x0078 - 0x00A0)
class UAmmoPanelGFxObject : public UGFxObject
{
public:
	struct FString                                     AmmoTitle;                                                // 0x0078(0x000C) (Const, Localized, NeedCtorLink)
	int                                                CachedRepeater;                                           // 0x0084(0x0004)
	int                                                CachedSMG;                                                // 0x0088(0x0004)
	int                                                CachedShotgun;                                            // 0x008C(0x0004)
	int                                                CachedAR;                                                 // 0x0090(0x0004)
	int                                                CachedSniper;                                             // 0x0094(0x0004)
	int                                                CachedRocket;                                             // 0x0098(0x0004)
	int                                                CachedGrenade;                                            // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AmmoPanelGFxObject");
		return ptr;
	}


	void __SetHighlight(const struct FString& HighlightFrame);
	void SetHighlight(class AWillowInventory* WInv);
	void SetAmmoLabels(const struct FString& LabelNameBase, int HasAmount, int MaxAmount);
	void SetAmmoCount(const struct FString& FlashString, class UResourceDefinition* ResourceDef, class AWillowPlayerController* WPCOwner, int* CachedAmount);
	void SetAllAmmoCounts();
	void RefreshTransientData();
	void SetTitle(const struct FString& Title);
	void Init();
};


// Class WillowGame.GFxMovieInteractiveObject
// 0x0000 (0x0254 - 0x0254)
class UGFxMovieInteractiveObject : public UGearboxGFxMovie
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GFxMovieInteractiveObject");
		return ptr;
	}

};


// Class WillowGame.InputContextSelectorBase
// 0x0000 (0x003C - 0x003C)
class UInputContextSelectorBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputContextSelectorBase");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.DefaultInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UDefaultInputContextSelector : public UInputContextSelectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DefaultInputContextSelector");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.AssassinInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UAssassinInputContextSelector : public UDefaultInputContextSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("AssassinInputContextSelector");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.ExecuteActionSkill
// 0x0160 (0x0234 - 0x0394)
class AExecuteActionSkill : public AActionSkill
{
public:
	struct FAttributeInitializationData                ExecuteDurationFormula;                                   // 0x0234(0x0010) (Edit)
	float                                              RestoreControlAfterMeleeSwingDelay;                       // 0x0244(0x0004) (Edit, Const)
	float                                              AutoSwingAngleInDegrees;                                  // 0x0248(0x0004) (Edit, Const)
	unsigned long                                      ForceSwingOnWallCollision : 1;                            // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      ForceSwingOnExecuteDashTimeout : 1;                       // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      bEnableExecuteAimAssistance : 1;                          // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      bDisableExecuteAbility : 1;                               // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      bTargetRequiredForExecute : 1;                            // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      bEnemyTargetRequiredForExecute : 1;                       // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      bMustBeOnGroundToExecute : 1;                             // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      StopExecuteDashIfTouchFriendly : 1;                       // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      ClearVelocityOnDashEndInAir : 1;                          // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      bLockMovementAndRotation : 1;                             // 0x024C(0x0004) (Edit, Const)
	unsigned long                                      ExecuteDOFEffectActive : 1;                               // 0x024C(0x0004)
	unsigned long                                      bAttemptedExecute : 1;                                    // 0x024C(0x0004)
	unsigned long                                      bEnableAnalogMovementBackup : 1;                          // 0x024C(0x0004)
	unsigned long                                      bExecuteIsAvailable : 1;                                  // 0x024C(0x0004)
	unsigned long                                      bMovementHasBeenRestored : 1;                             // 0x024C(0x0004)
	unsigned long                                      bCleaningUpExecute : 1;                                   // 0x024C(0x0004)
	unsigned long                                      bFindMeleeTarget : 1;                                     // 0x024C(0x0004)
	unsigned long                                      bAttachedMeleeWeapon : 1;                                 // 0x024C(0x0004)
	struct FString                                     ExecuteCaption;                                           // 0x0250(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class USkillDefinition*                            ExecuteMeleeSkill;                                        // 0x025C(0x0004) (Edit, Const)
	float                                              ExecuteAnimDelay;                                         // 0x0260(0x0004) (Edit, Const)
	class UMeleeDefinition*                            ExecuteMeleeDef;                                          // 0x0264(0x0004) (Edit, Const)
	float                                              CheckForTargetDistance;                                   // 0x0268(0x0004) (Edit, Const)
	float                                              InitiateMeleeDistance;                                    // 0x026C(0x0004) (Edit, Const)
	float                                              ExecuteVelocity;                                          // 0x0270(0x0004) (Edit, Const)
	float                                              AirSpeed;                                                 // 0x0274(0x0004) (Edit, Const)
	float                                              AccelRateMultiplier;                                      // 0x0278(0x0004) (Edit, Const)
	struct FAttributeInitializationData                MinHitWallOverrideFormula;                                // 0x027C(0x0010) (Edit)
	struct FVector                                     DashEndInAirVelocityScale;                                // 0x028C(0x000C) (Edit, Const)
	class USpecialMoveDefinition*                      BeginExecuteSMD;                                          // 0x0298(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      IdleExecuteSMD;                                           // 0x029C(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      ExecuteAttackSMD;                                         // 0x02A0(0x0004) (Edit, Const)
	struct FDOFEffectData                              ExecuteDOFEffectData;                                     // 0x02A4(0x002C) (Edit, Const)
	struct FDOFEffectModifierData                      ExecuteDOFModiferData;                                    // 0x02D0(0x000C) (Edit, Const)
	struct FName                                       ExecuteDOFEffectName;                                     // 0x02DC(0x0008) (Edit, Const)
	float                                              CancelDashAngleInDegrees;                                 // 0x02E4(0x0004) (Edit, Const)
	class UMaterialInterface*                          VisionModeMaterial;                                       // 0x02E8(0x0004) (Edit, Const)
	class UPostProcessChain*                           VisionModePostProcessChain;                               // 0x02EC(0x0004) (Edit, Const)
	struct FPostProcessChainOptions                    VisionModePostProcessChainOptions;                        // 0x02F0(0x0018) (Edit, Const, NeedCtorLink)
	class UCoordinatedEffectDefinition*                VisionModeCoordinatedEffect;                              // 0x0308(0x0004) (Edit, Const)
	class UCoordinatedEffectDefinition*                VisionModeCurrentTargetCoordinatedEffect;                 // 0x030C(0x0004) (Edit, Const)
	class USkillDefinition*                            CritLocationsSkill;                                       // 0x0310(0x0004) (Edit, Const)
	class UMaterialInstanceConstant*                   VisionModeMaterialInstance;                               // 0x0314(0x0004)
	struct FDOFEffectModifierData                      PrevVisionModePPCModifierData;                            // 0x0318(0x000C)
	struct FDOFEffectData                              PrevVisionModeDOFEffectData;                              // 0x0324(0x002C)
	struct FVector                                     PreExecuteVelocity;                                       // 0x0350(0x000C)
	struct FVector                                     PrevFrameExecuteVelocity;                                 // 0x035C(0x000C)
	float                                              CachedAccelRate;                                          // 0x0368(0x0004)
	float                                              CachedMinHitWall;                                         // 0x036C(0x0004)
	class APawn*                                       MyTarget;                                                 // 0x0370(0x0004)
	float                                              InitiateMeleeDistanceSquared;                             // 0x0374(0x0004)
	class USkill*                                      ActionSkill;                                              // 0x0378(0x0004)
	float                                              MeleeAttackAnimDuration;                                  // 0x037C(0x0004)
	float                                              ExecuteDuration;                                          // 0x0380(0x0004)
	float                                              MinHitWallOverride;                                       // 0x0384(0x0004)
	float                                              AutoSwingAngleCos;                                        // 0x0388(0x0004)
	float                                              CancelDashAngleCos;                                       // 0x038C(0x0004)
	float                                              SkillDuration;                                            // 0x0390(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ExecuteActionSkill");
		return ptr;
	}


	bool HasTrainedCritLocationsSkill();
	bool OverrideCrosshairVisibility(bool bVisible, bool bForScope);
	void DisableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void EnableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void TickActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie, float ActionSkillTime, float DeltaTime);
	void UpdateHUDTimer(class UWillowHUDGFxMovie* HUDMovie, float Time);
	bool FoundBadReflectionVelocity();
	void OnExecuteEndEarlyDueToCollision(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnExecuteFailedToKillTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnExecuteKilledTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnExecuteAttackBegin(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnExecuteDashEnd(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnExecuteEnd(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnExecuteBegin(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void OnExecuteIsNowAvailable(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumerHandle);
	void DrawExecuteDebug(const struct FVector& ExecuteStartLocation, const struct FVector& ExecuteEndLocation, unsigned char R, unsigned char G, unsigned char B);
	bool IsExecuting();
	void CleanUpExecute();
	void EndExecuteEarlyDueToCollision();
	void RestorePhysicsPostExecute();
	void RestrictPlayerMovementPreExecute();
	void RestorePlayerMovementPostExecute();
	void EnableDOFEffect(bool bEnable);
	void EnableVisionModeEffect(bool bEnable);
	void OnActionSkillOwnerTouchedActor(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnActionSkillOwnerHitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void PlayMeleeAttackAnim();
	void AttachMeleeWeapon();
	void FirePawnCannon();
	void ServerFirePawnCannon();
	void WeaponDeEquipped();
	void DrawGhettoDebugSphere(const struct FVector& Center, const struct FVector& Forward, float LineLength, unsigned char R, unsigned char G, unsigned char B);
	void ClientPerformExecuteAttack();
	void UpdateExecuteRotation(float DeltaTime);
	bool IsTargetWithinAutoSwingCone();
	void TriggerExecuteAttack();
	bool CanHitExecuteTarget();
	void UpdateExecuteTooltip();
	void ClientExecuteIsAvailable(bool Enable);
	void OnExecuteIsAvailable(bool Enable);
	void SetExecuteAvailability(bool Enable);
	bool HasAutoAimTarget(bool bTargetShouldBeEnemy);
	void TryEnablingExecuteCooldown();
	void ClientEndExecuteDash();
	void EndExecuteDash();
	void ExecuteDashTimerUp();
	void ServerEndExecute();
	void EndExecute();
	void ClientEndExecute();
	void RemoveExecuteFlagInstanceData();
	void SetExecuteFlagInstanceData();
	bool IsVisionModeEffectEnabled(class AWillowPawn* WP);
	void RemoveVisionModeFromPawns();
	void UpdateVisionModeForPawns();
	void ActionSkillComplete();
	void BeginExecute();
	void TryExecuting();
	void StartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* AutoAimTarget);
	void OnActionSkillOwnerMelee(class AWillowPawn* AutoAimTarget);
	bool CanInitiateNewExecuteAttack(class AWillowPawn* AutoAimTarget);
	bool ReadyToInterceptMelee(class AWillowPawn* AutoAimTarget);
	void OnActionSkillTick(float DeltaTime);
	void RemoveCritLocationEffect(class AWillowPawn* WP);
	void OnActionSkillKilledEnemy(class AWillowPawn* KilledPawn);
	void OwnerAcquiredAutoAimTarget(const FScriptInterface& NewTargetable);
	void OnActionSkillShowBackMenu(bool bOpened);
	void OnActionSkillOwnerWeaponSwitched(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void OnActionSkillEnded();
	void ClientActionSkillWantsToDeactivate();
	void OnActionSkillWantsToDeactivate();
	void OnActionSkillStarted(class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn);
};


// Class WillowGame.ValueGFxObject
// 0x0000 (0x0078 - 0x0078)
class UValueGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ValueGFxObject");
		return ptr;
	}


	void SetValue(int InValue);
};


// Class WillowGame.EridiumValueGFxObject
// 0x000C (0x0078 - 0x0084)
class UEridiumValueGFxObject : public UValueGFxObject
{
public:
	TArray<struct FString>                             CurrencyFrames;                                           // 0x0078(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EridiumValueGFxObject");
		return ptr;
	}


	void SetCurrencyClip(const struct FString& InMoviePath);
	void SetCurrencyFrame(const struct FString& InCurrencyFrame);
	bool SetCurrencyType(unsigned char CurrencyType);
	void SetValue(int InValue);
};


// Class WillowGame.DeveloperPerksDefinition
// 0x0030 (0x003C - 0x006C)
class UDeveloperPerksDefinition : public UGBXDefinition
{
public:
	TArray<struct FDeveloperData>                      DeveloperInfo;                                            // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FPerkData>                           PerkInfo;                                                 // 0x0048(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UKeyedItemPoolDefinition*>            DeveloperCustomizationUnlocks;                            // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FPerkData>                           PatchedPerkInfo;                                          // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DeveloperPerksDefinition");
		return ptr;
	}


	void CheckUnlockGamerpics(unsigned char ControllerId, const struct FString& NickName, const struct FUniqueNetId& UniqueId);
	bool IsDeveloper(const struct FString& NickName, const struct FUniqueNetId& UniqueId, int ControllerId, struct FDeveloperData* OutDevData);
	bool IsValidPlatform(unsigned char Platform);
	void CheckForButtonChain(class AWillowPlayerController* WPC, TArray<struct FName>* EnteredButtons);
	void PopulatePatchedPerkInfo();
};


// Class WillowGame.WillowVersusDuelMessage
// 0x0093 (0x0049 - 0x00DC)
class UWillowVersusDuelMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     DuelingDisabled;                                          // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AlreadyDueling;                                           // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AlreadyChallenged;                                        // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DuelTimeout;                                              // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IssuedChallenge;                                          // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ReceivedChallenge;                                        // 0x0088(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AcceptedChallenge;                                        // 0x0094(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DuelStart;                                                // 0x00A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ArenaWarning;                                             // 0x00AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DuelDraw;                                                 // 0x00B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DuelWin;                                                  // 0x00C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DuelNotRightNow;                                          // 0x00D0(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVersusDuelMessage");
		return ptr;
	}


	static float GetLifeTime(int Switch);
	static unsigned char GetMsgType(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.WillowGFxColiseumOverlayMovie
// 0x00A8 (0x0264 - 0x030C)
class UWillowGFxColiseumOverlayMovie : public UWillowGFxMovie
{
public:
	class UWillowGFxColiseumOverlayDefinition*         OverlayDef;                                               // 0x0264(0x0004)
	class UColiseumRuleDefinition*                     CurrentRules[0x4];                                        // 0x0268(0x0004)
	struct FString                                     RoundPrefix;                                              // 0x0278(0x000C) (NeedCtorLink)
	struct FString                                     WavePrefix;                                               // 0x0284(0x000C) (NeedCtorLink)
	struct FString                                     CertificateText;                                          // 0x0290(0x000C) (NeedCtorLink)
	int                                                CachedRound;                                              // 0x029C(0x0004)
	int                                                CachedWave;                                               // 0x02A0(0x0004)
	int                                                CachedMaxRound;                                           // 0x02A4(0x0004)
	struct FString                                     RoundResult;                                              // 0x02A8(0x000C) (NeedCtorLink)
	struct FString                                     RoundSummary;                                             // 0x02B4(0x000C) (NeedCtorLink)
	struct FString                                     EnemyDamage;                                              // 0x02C0(0x000C) (NeedCtorLink)
	struct FString                                     EnemyHealth;                                              // 0x02CC(0x000C) (NeedCtorLink)
	struct FString                                     EnemyShields;                                             // 0x02D8(0x000C) (NeedCtorLink)
	unsigned long                                      bSuppressHUD : 1;                                         // 0x02E4(0x0004)
	unsigned long                                      bDismissable : 1;                                         // 0x02E4(0x0004)
	unsigned long                                      bEveryoneSignedInOn360 : 1;                               // 0x02E4(0x0004)
	unsigned char                                      LatentScreenType;                                         // 0x02E8(0x0001)
	unsigned char                                      Platform;                                                 // 0x02E9(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02EA(0x0002) MISSED OFFSET
	TArray<struct FPlayerLineInfo>                     PlayerLines;                                              // 0x02EC(0x000C) (NeedCtorLink)
	int                                                HighlightedResultsLine;                                   // 0x02F8(0x0004)
	class APlayerReplicationInfo*                      SortedResultsPRI[0x4];                                    // 0x02FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxColiseumOverlayMovie");
		return ptr;
	}


	void CertificateGotoAndStop(int frameNum);
	void HighlightGotoFrame(int frame);
	void CatchupColiseumRule_Wrapper(int RuleNum, const struct FString& RuleTitle, const struct FString& RuleDesc, const struct FString& FrameLabel);
	void CatchupColiseum_Wrapper(const struct FString& RoundText, const struct FString& WaveText, const struct FString& WaveTitleText, const struct FString& FilledRoundSummary, int WaveNumber);
	void CloseConfirm_Wrapper();
	void ShowColiseumToLobbyConfirm_Wrapper();
	void ShowPenaltyBox_Wrapper(int PlayerNumber);
	void CloseCertificate_Wrapper();
	void AwardCertificate_Wrapper();
	void CloseResults_Wrapper();
	void ConfigureResultsScreen_Wrapper(const struct FString& Type, const struct FString& P1Avatar, const struct FString& P1Name, const struct FString& P1RoundKills, const struct FString& P1TotalKills, const struct FString& P2Avatar, const struct FString& P2Name, const struct FString& P2RoundKills, const struct FString& P2TotalKills, const struct FString& P3Avatar, const struct FString& P3Name, const struct FString& P3RoundKills, const struct FString& P3TotalKills, const struct FString& P4Avatar, const struct FString& P4Name, const struct FString& P4RoundKills, const struct FString& P4TotalKills, const struct FString& TotalRoundKills, const struct FString& GrandTotalKills);
	void ShowResults_Wrapper();
	void Notify_Wrapper(const struct FString& NotifyString);
	void RuleAnnounce_Wrapper();
	void RoundAnnounce_Wrapper(const struct FString& RoundText, const struct FString& WaveText, const struct FString& WaveTitleText, const struct FString& FilledRoundSummary, int WaveNumber, const struct FString& Horde, const struct FString& HealthModText, const struct FString& DamageModTex, const struct FString& ShieldModTex);
	void StartColiseumTimer_Wrapper(const struct FString& CountdownString);
	void UpdateWaveDisplay(const struct FString& WaveText, const struct FString& WaveTitle);
	void UpdateRoundDisplay(const struct FString& RoundText);
	void TurnOffColiseumRule_Wrapper(int Rule);
	void UpdateColiseumRule_Wrapper(int RuleToUpdate, const struct FString& RuleTitle, const struct FString& RuleDescription, const struct FString& FrameLabel);
	void RulesGotoLabel(const struct FString& Label);
	void ShowGamerTagCard(int ControllerId);
	void SetInput(const struct FScriptDelegate& Del);
	void MoveResultsHighlight(unsigned char MoveDir);
	void UpdateVisibilityForStatusMenu(bool bMenuVisible);
	void CatchupColiseumOverlay(int CurrRound, int CurrWave, int CurrMaxRound, class UColiseumRuleDefinition* Rule1, class UColiseumRuleDefinition* Rule2, class UColiseumRuleDefinition* Rule3, class UColiseumRuleDefinition* Rule4);
	void CatchupNewPlayer(class AWillowPlayerController* NewPlayer);
	void CloseConfirm();
	void ShowColiseumToLobbyConfirm();
	void ShowPenaltyBox(class AWillowPlayerController* WPC);
	void OnCertificateScreenDismissable();
	void OnResultsScreenDismissable();
	void CloseCertificateScreen();
	void AwardCertificate();
	void CloseResultsScreen();
	void ShowResultsScreen(unsigned char ScreenType, bool bEnableGamerCardUI);
	void PublishColiseumStatDelta(const struct FString& CharacterName, class APlayerReplicationInfo* PRI, unsigned char StatType, int StatDelta);
	void Notify(unsigned char NotifyType);
	void RuleAnnounce();
	void RoundAnnounce(int Round, int Wave, int MaxRound, const struct FString& HealthModText, const struct FString& DamageModTex, const struct FString& ShieldModTex);
	struct FString GetFilledInRoundSummary(int Round, int MaxRound);
	void BeginRoundAnnounce();
	void StartColiseumTimer(unsigned char CountdownLength);
	void UpdateColiseumRule(class UColiseumRuleDefinition* RuleInfo, unsigned char UpdateMode);
	void extConfirmIsOpen();
	void extSetupCertificate();
	void extSetupResultsScreen();
	void extRuleAnnounceComplete();
	bool OnConsumeEverything(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool OnConfirmInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool OnCertificateInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool OnResultsScreenInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.ColiseumRuleDefinition
// 0x0024 (0x003C - 0x0060)
class UColiseumRuleDefinition : public UGBXDefinition
{
public:
	struct FString                                     RuleTitle;                                                // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     RuleDescription;                                          // 0x0048(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     FrameLabel;                                               // 0x0054(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ColiseumRuleDefinition");
		return ptr;
	}

};


// Class WillowGame.NxFootForceFieldComponent
// 0x0000 (0x0274 - 0x0274)
class UNxFootForceFieldComponent : public UNxForceFieldRadialComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("NxFootForceFieldComponent");
		return ptr;
	}

};


// Class WillowGame.ITinnitusTarget
// 0x0000 (0x003C - 0x003C)
class UITinnitusTarget : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ITinnitusTarget");
		return ptr;
	}


	void TriggerTinnitus(float Strength, class UAkEvent* OverrideTinnitusEvent, struct FVector* VToSource);
	void TriggerTinnitusFromLocation(float Radius, float StrengthModifier, class UAkEvent* OverrideTinnitusEvent, struct FVector* SourceLocation);
};


// Class WillowGame.BuzzaxeActionSkill
// 0x0038 (0x0234 - 0x026C)
class ABuzzaxeActionSkill : public AActionSkill
{
public:
	unsigned char                                      ActiveWeaponSlot;                                         // 0x0234(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	unsigned long                                      bMenuOpen : 1;                                            // 0x0238(0x0004) (Transient)
	unsigned long                                      bHideBuzzaxe : 1;                                         // 0x0238(0x0004) (Net, Transient, RepNotify)
	unsigned long                                      bDoNotPutDownBuzzaxe : 1;                                 // 0x0238(0x0004) (Net, Transient)
	unsigned long                                      bAllowNonBuzzaxeEquip : 1;                                // 0x0238(0x0004) (Transient)
	unsigned long                                      bPlayerRevived : 1;                                       // 0x0238(0x0004) (Transient)
	unsigned long                                      bHoldOverrideSkillActive : 1;                             // 0x0238(0x0004) (Transient)
	class AWillowBuzzaxeWeapon*                        Buzzaxe;                                                  // 0x023C(0x0004) (Net, Transient)
	class USkill*                                      MyActionSkill;                                            // 0x0240(0x0004) (Transient)
	class UWeaponBalanceDefinition*                    BuzzaxeBalanceDef;                                        // 0x0244(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      BuzzaxeSMD;                                               // 0x0248(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      BuzzaxeSelfSMD;                                           // 0x024C(0x0004) (Edit, Const)
	float                                              MeleePercentage;                                          // 0x0250(0x0004) (Edit, Const)
	class USkillDefinition*                            HoldOverrideSkill;                                        // 0x0254(0x0004) (Edit, Const)
	struct FName                                       HoldNameOverride;                                         // 0x0258(0x0008) (Edit, Const)
	class USpecialMove_FirstAndThirdPersonAnimation*   OverrideSMD;                                              // 0x0260(0x0004) (Edit, Const, Net)
	class USpecialMove_FirstAndThirdPersonAnimation*   OverrideEndSMD;                                           // 0x0264(0x0004) (Edit, Const, Net)
	float                                              OverrideEndInjuredOverridePercentage;                     // 0x0268(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BuzzaxeActionSkill");
		return ptr;
	}


	void Destroyed();
	void OnActionSkillWeaponsRestricted(bool bWeaponsRestricted);
	void OnActionSkillOwnerRevived();
	float OnInjuredOverride();
	void UpdateThirdPersonBuzzaxeMesh();
	void ServerNotifyModalGameMenuClosing();
	void ServerNotifyModalGameMenuOpening();
	void NotifyModalGameMenuClosing();
	void NotifyModalGameMenuOpening();
	void DisableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void EnableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void MeleeAttack(unsigned char BodyWeaponAction);
	void ServerMeleeSelf();
	void ServerMeleeAttack();
	void OnActionSkillOwnerMelee(class AWillowPawn* AutoAimTarget);
	bool CanStartMeleeSkill();
	bool OverridesStandardMelee();
	bool CanEquipWeapon(class AWeapon* DesiredWeapon);
	void SetActiveOrBestWeapon();
	void OnActionSkillEnded();
	void EndSkill();
	void ResetCooldownAndTearOff();
	void TearOff();
	void BuzzaxeEquipFailsafe();
	void WaitingForBuzzaxeEquip();
	void SpawnBuzzaxe();
	bool IsHoldOverrideSkillRunning();
	void ForceWeaponDown();
	void ClientEquipBuzzaxe();
	void ClientPlayOverrideSMD();
	bool PlayOverrideSMD();
	void WeaponIsDown();
	void OnActionSkillStarted(class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.InjuredFeedbackMessage
// 0x000C (0x004C - 0x0058)
class UInjuredFeedbackMessage : public UWillowLocalMessage
{
public:
	struct FString                                     SecondWind;                                               // 0x004C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InjuredFeedbackMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.WillowEmitterServerSide
// 0x0000 (0x0210 - 0x0210)
class AWillowEmitterServerSide : public AWillowReplicatedEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEmitterServerSide");
		return ptr;
	}

};


// Class WillowGame.IRBCollisionListener
// 0x0000 (0x003C - 0x003C)
class UIRBCollisionListener : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IRBCollisionListener");
		return ptr;
	}


	void NotifyRigidBodyCollision(class UObject* ContextObject, class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactSide, struct FCollisionImpactData* RigidCollisionData);
};


// Class WillowGame.WillowEmit_HitEffect
// 0x0008 (0x0210 - 0x0218)
class AWillowEmit_HitEffect : public AWillowReplicatedEmitter
{
public:
	struct FName                                       BoneName;                                                 // 0x0210(0x0008) (Net, RepNotify)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEmit_HitEffect");
		return ptr;
	}


	void AttachTo(class APawn* P, const struct FName& NewBoneName);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.IAttributeEffectBehavior
// 0x0000 (0x003C - 0x003C)
class UIAttributeEffectBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IAttributeEffectBehavior");
		return ptr;
	}

};


// Class WillowGame.IFireShotBehavior
// 0x0000 (0x003C - 0x003C)
class UIFireShotBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IFireShotBehavior");
		return ptr;
	}


	void Behavior_Fire(class UFiringModeDefinition* FiringModeDefinition, const struct FVector& Direction, const FScriptInterface& WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum, class UClass* DamageType, class UDamageTypeDefinition* DamageTypeDefinition, class UImpactDefinition* ImpactDefinition, const struct FName& FireSourceSocket, bool bTreatDirectionAsDestination);
};


// Class WillowGame.IBehaviorAliasProvider
// 0x0000 (0x003C - 0x003C)
class UIBehaviorAliasProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IBehaviorAliasProvider");
		return ptr;
	}


	class UBehaviorAliasLookupDefinition* BehaviorAlias_GetLookupDefinition();
};


// Class WillowGame.WillowEmit_BloodSpray
// 0x0000 (0x0218 - 0x0218)
class AWillowEmit_BloodSpray : public AWillowEmit_HitEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEmit_BloodSpray");
		return ptr;
	}

};


// Class WillowGame.MissionFeedbackMessage
// 0x003C (0x004C - 0x0088)
class UMissionFeedbackMessage : public UWillowLocalMessage
{
public:
	struct FString                                     MissionAdded;                                             // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionCompleted;                                         // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionFailed;                                            // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionRequiredObjectivesComplete;                        // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MissionReadyToTurnIn;                                     // 0x007C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionFeedbackMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.DualWieldActionSkill
// 0x0058 (0x0234 - 0x028C)
class ADualWieldActionSkill : public AActionSkill
{
public:
	struct FCachedWeaponInfo                           WeaponCache;                                              // 0x0234(0x0028) (Transient, NeedCtorLink)
	struct FCachedWeaponInfo                           OffhandWeaponCache;                                       // 0x025C(0x0028) (Transient, NeedCtorLink)
	class UHUDWidget_Crosshairs*                       CrosshairWidget;                                          // 0x0284(0x0004) (Transient)
	class AWillowWeapon*                               RestoreOffHandWeapon;                                     // 0x0288(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DualWieldActionSkill");
		return ptr;
	}


	void TickActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie, float ActionSkillTime, float DeltaTime);
	void DisableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void SetOffHandCrosshair(class AWillowWeapon* OffHandWeapon);
	void EnableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void SetDualWieldSwitchEx(bool bEnabled, class USkeletalMeshComponent* MeshComp, float BlendTime);
	void SetDualWieldSwitch(bool bEnabled, bool bApplyToFirstPerson, bool bApplyToThirdPerson, float BlendTime);
	void ClientBringWeaponsUpAfterPutDown(class AWillowWeapon* MainHandWeapon, class AWillowWeapon* OffHandWeapon);
	void BringWeaponsUpAfterPutDown(unsigned char MainHandWeaponSlot, unsigned char OffHandWeaponSlot);
	void ForceRefreshSkills();
	void SwitchToWeapon(class AWillowWeapon* NewWeapon);
	void SwitchWeapons();
	void SprintTransition();
	void EquipInitialWeapons();
	void SelectInitialWeapons(class AWillowWeapon** MainHandWeapon, class AWillowWeapon** OffHandWeapon);
	class AWillowWeapon* ReturnFirstWeapon(class AWillowWeapon* first, class AWillowWeapon* Second, class AWillowWeapon* Third);
	void SetLeftSideControl();
	void OnActionSkillWeaponsRestricted(bool bWeaponsRestricted);
	void OnActionSkillOwnerWeaponSwitched(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void OnActionSkillEnded();
	void OnActionSkillStarted(class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn);
};


// Class WillowGame.WillowSeqEvent_PlayerJoined
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_PlayerJoined : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_PlayerJoined");
		return ptr;
	}

};


// Class WillowGame.WillowOnlineGameSettings
// 0x0000 (0x00C8 - 0x00C8)
class UWillowOnlineGameSettings : public UOnlineGameSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSettings");
		return ptr;
	}


	static struct FString GetConnectionQualityUIString(class UOnlineGameSettings* OGS);
	void UpdateActivePlotMission(int InActivePlotMission);
	static int GetActivePlotMission(class UOnlineGameSettings* GameSettings);
	void UpdateIsPublic(int InIsPublic);
	void UpdateExpLevel(int InExpLevel);
	static int GetExpLevel(class UOnlineGameSettings* GameSettings);
	void UpdateDlcFlag(int InDlcFlag);
	void UpdateMapDlcContentId(const struct FDlcContentId& InContentId);
	void UpdatePlaythrough(int InPlaythrough);
	static int GetPlaythrough(class UOnlineGameSettings* GameSettings);
	void UpdateActiveMission(int InActiveMission);
};


// Class WillowGame.MarketingUnlockInventoryDefinition
// 0x000C (0x0058 - 0x0064)
class UMarketingUnlockInventoryDefinition : public UMarketingUnlockDefinition
{
public:
	TArray<struct FUnlockItemData>                     UnlockItems;                                              // 0x0058(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MarketingUnlockInventoryDefinition");
		return ptr;
	}


	bool GenerateUnlockedItems(class AWillowPlayerController* PlayerToGenerateRewardsFor, TArray<class AWillowInventory*>* GeneratedItems);
};


// Class WillowGame.WeaponProficiencyFeedbackMessage
// 0x000F (0x0049 - 0x0058)
class UWeaponProficiencyFeedbackMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     IsNowLevel;                                               // 0x004C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponProficiencyFeedbackMessage");
		return ptr;
	}


	static unsigned char GetMsgType(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.LocalWeaponMessage
// 0x0000 (0x004C - 0x004C)
class ULocalWeaponMessage : public UWillowLocalMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LocalWeaponMessage");
		return ptr;
	}


	static struct FString GetWeaponString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FWeaponDefinitionData& WeaponInfo, const struct FColor& WeaponColor);
	static struct FColor GetWeaponColor(const struct FWeaponDefinitionData& WeaponInfo);
	static void ClientWeaponReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FWeaponDefinitionData& WeaponInfo);
};


// Class WillowGame.ReceivedWeaponMessage
// 0x0018 (0x004C - 0x0064)
class UReceivedWeaponMessage : public ULocalWeaponMessage
{
public:
	struct FString                                     ReceivedWeapon;                                           // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelfReceivedItem;                                         // 0x0058(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ReceivedWeaponMessage");
		return ptr;
	}


	static struct FString GetWeaponString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FWeaponDefinitionData& WeaponInfo, const struct FColor& WeaponColor);
};


// Class WillowGame.LocalItemMessage
// 0x0000 (0x004C - 0x004C)
class ULocalItemMessage : public UWillowLocalMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LocalItemMessage");
		return ptr;
	}


	static struct FString GetItemString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FItemDefinitionData& ItemInfo, const struct FColor& ItemColor);
	static struct FColor GetItemColor(const struct FItemDefinitionData& ItemInfo);
	static void ClientItemReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FItemDefinitionData& ItemInfo);
};


// Class WillowGame.ReceivedItemMessage
// 0x0018 (0x004C - 0x0064)
class UReceivedItemMessage : public ULocalItemMessage
{
public:
	struct FString                                     ReceivedItem;                                             // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelfReceivedItem;                                         // 0x0058(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ReceivedItemMessage");
		return ptr;
	}


	static struct FString GetItemString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FItemDefinitionData& ItemInfo, const struct FColor& ItemColor);
};


// Class WillowGame.ReceivedCreditsMessage
// 0x0040 (0x004C - 0x008C)
class UReceivedCreditsMessage : public UWillowLocalMessage
{
public:
	struct FString                                     ReceivedCredits;                                          // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelfReceivedCredits;                                      // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NumberOfCredits;                                          // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OneCredit;                                                // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MoreCredits;                                              // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	int                                                CreditsFakedRarityLevelForItemColor;                      // 0x0088(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ReceivedCreditsMessage");
		return ptr;
	}


	static struct FColor GetCreditsColor();
	static struct FString GetNumberOfCreditsString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
	static struct FString GetCreditString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
	static void ClientCreditReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, int GainedAmount);
};


// Class WillowGame.ExperienceFeedbackMessage
// 0x000F (0x0049 - 0x0058)
class UExperienceFeedbackMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     IsNowLevel;                                               // 0x004C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ExperienceFeedbackMessage");
		return ptr;
	}


	static unsigned char GetMsgType(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.RotationArrowComponent
// 0x0000 (0x021C - 0x021C)
class URotationArrowComponent : public UArrowComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RotationArrowComponent");
		return ptr;
	}

};


// Class WillowGame.PlayerInteractionClient
// 0x0000 (0x003C - 0x003C)
class UPlayerInteractionClient : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerInteractionClient");
		return ptr;
	}


	void SendMessage(int MessageData, class UObject* Data);
	void HandleMessage(int MessageData, class UObject* Data);
	void ShutDown();
	void Initialize(int MessageData);
};


// Class WillowGame.PersonalTeleporterDefinition
// 0x0034 (0x003C - 0x0070)
class UPersonalTeleporterDefinition : public UGBXDefinition
{
public:
	class UParticleSystem*                             ParticleEffect;                                           // 0x003C(0x0004) (Edit, Const)
	class UParticleSystem*                             PlayerTeleportedEffect;                                   // 0x0040(0x0004) (Edit, Const)
	float                                              PlayerTeleportedEffectLifespan;                           // 0x0044(0x0004) (Edit, Const)
	float                                              SpawnDistance;                                            // 0x0048(0x0004) (Edit)
	struct FVector                                     ReturnTeleporterLocationOffset;                           // 0x004C(0x000C) (Edit)
	class USoundCue*                                   PlaceTeleporterSound;                                     // 0x0058(0x0004) (Edit, Const)
	class USoundCue*                                   EnterTeleporterSound;                                     // 0x005C(0x0004) (Edit, Const)
	class USoundCue*                                   AmbientTeleporterSound;                                   // 0x0060(0x0004) (Edit, Const)
	float                                              CollisionRadius;                                          // 0x0064(0x0004)
	float                                              CollisionHeight;                                          // 0x0068(0x0004)
	float                                              ExitPointDistance;                                        // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PersonalTeleporterDefinition");
		return ptr;
	}

};


// Class WillowGame.TeleporterFeedbackMessage
// 0x001B (0x0049 - 0x0064)
class UTeleporterFeedbackMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     Teleporter_Disabled;                                      // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Teleporter_NoRoom;                                        // 0x0058(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TeleporterFeedbackMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.PlayerTrainingMessageListDefinition
// 0x000C (0x003C - 0x0048)
class UPlayerTrainingMessageListDefinition : public UGBXDefinition
{
public:
	TArray<class UTrainingMessageDefinition*>          TrainingMessages;                                         // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerTrainingMessageListDefinition");
		return ptr;
	}

};


// Class WillowGame.SeqEvent_TrainingMessage
// 0x0004 (0x00C4 - 0x00C8)
class USeqEvent_TrainingMessage : public USequenceEvent
{
public:
	class UObject*                                     TrainingMessageDefinition;                                // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqEvent_TrainingMessage");
		return ptr;
	}

};


// Class WillowGame.FrontendGFxMovie
// 0x0164 (0x0390 - 0x04F4)
class UFrontendGFxMovie : public UWillowGFxMovie3D
{
public:
	class UFrontendGFxMovieDefinition*                 MyFrontendDefinition;                                     // 0x0390(0x0004) (Transient)
	class UFrontendMenuGFxObject*                      FrontendMenu;                                             // 0x0394(0x0004) (Transient)
	class UWillowScrollingList*                        TheList;                                                  // 0x0398(0x0004) (Transient)
	class UFrontEndPlayerListGFxObject*                PlayerList;                                               // 0x039C(0x0004) (Transient)
	class UOptionsGFxMovie*                            OptionsMovie;                                             // 0x03A0(0x0004) (Transient)
	class UMatchmakingLobbyGFxMovie*                   MatchmakingMovie;                                         // 0x03A4(0x0004) (Transient)
	class ULANServerBrowserGFxMovie*                   ServerBrowserMovie;                                       // 0x03A8(0x0004) (Transient)
	class UGearboxAccountGFxMovie*                     AccountMovie;                                             // 0x03AC(0x0004) (Transient)
	class UMarketplaceGFxMovie*                        MarketplaceMovie;                                         // 0x03B0(0x0004) (Transient)
	class UWillowGFxDialogBox*                         MatchmakingDialog;                                        // 0x03B4(0x0004) (Transient)
	class UNetworkOptionsGFxMovie*                     NetworkOptionsMovie;                                      // 0x03B8(0x0004) (Transient)
	int                                                DlcWarningPlaythroughLevel;                               // 0x03BC(0x0004) (Transient)
	class UWillowPauseTicker*                          TimerPauseTicker;                                         // 0x03C0(0x0004) (Transient)
	TArray<struct FOnlineFriend>                       FriendsList;                                              // 0x03C4(0x000C) (Transient, NeedCtorLink)
	class USplitscreenHelper*                          SSHelper;                                                 // 0x03D0(0x0004) (Transient)
	unsigned long                                      bSplitJoinInProgress : 1;                                 // 0x03D4(0x0004) (Transient)
	unsigned long                                      bSplitJoinAwaitingNetworkTransition : 1;                  // 0x03D4(0x0004) (Transient)
	unsigned long                                      CachedWidescreen : 1;                                     // 0x03D4(0x0004) (Transient)
	unsigned long                                      bMatchmakingInProgress : 1;                               // 0x03D4(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ConnectingDlg;                                            // 0x03D8(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ConfirmDisconnectDlg;                                     // 0x03DC(0x0004) (Transient)
	class UWillowGFxDialogBox*                         ConfirmReturnToTitleDlg;                                  // 0x03E0(0x0004) (Transient)
	class UWillowGFxDialogBox*                         SaveGameDlg;                                              // 0x03E4(0x0004) (Transient)
	float                                              SaveGameStartTime;                                        // 0x03E8(0x0004) (Transient)
	struct FString                                     CancelTooltip;                                            // 0x03EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CancelTooltip_TwoPlayer;                                  // 0x03F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectTooltip;                                            // 0x0404(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NetworkOptionsTooltip;                                    // 0x0410(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LANServerBrowserTooltip;                                  // 0x041C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CharacterSelectTooltip;                                   // 0x0428(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyInviteTooltip;                                       // 0x0434(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyUITooltip;                                           // 0x0440(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PS3InviteTooltip;                                         // 0x044C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OptionsTooltip;                                           // 0x0458(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SpectatorTooltip;                                         // 0x0464(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DisconnectString;                                         // 0x0470(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LeaveString;                                              // 0x047C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CancelString;                                             // 0x0488(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DlcInstallOnTitleScreenReturnString;                      // 0x0494(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TooltipSpacing;                                           // 0x04A0(0x000C) (NeedCtorLink)
	int                                                SavedSplitJoinControllerId;                               // 0x04AC(0x0004) (Transient)
	struct FOnlineGameSearchResult                     MatchmakingResult;                                        // 0x04B0(0x0008) (Transient)
	unsigned char                                      RestoreInviteType;                                        // 0x04B8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B9(0x0003) MISSED OFFSET
	int                                                SavedDlcEnumNetworkOptionsButtonClickIndex;               // 0x04BC(0x0004) (Transient)
	TArray<struct FMessageOfTheDay>                    MessagesOfTheDay;                                         // 0x04C0(0x000C) (NeedCtorLink)
	int                                                MessageOfTheDayIdx;                                       // 0x04CC(0x0004)
	int                                                RegisteredControllerId;                                   // 0x04D0(0x0004)
	int                                                CurrentSelectedOverpowerLevel;                            // 0x04D4(0x0004) (Transient)
	int                                                CurrentSelectedDifficulty;                                // 0x04D8(0x0004) (Transient)
	TArray<struct FEULAData>                           LastEULAText;                                             // 0x04DC(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __PrePopupInputHandler__Delegate;                         // 0x04E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FrontendGFxMovie");
		return ptr;
	}


	void StartMenuMusic();
	void ShowLanBrowser();
	bool IsOverlayMenuOpen();
	void HideOptionsMovie();
	void HideMatchmakingDialog();
	void HideMarketplaceMovie();
	void ShowCompatibilityPack();
	void HideAccountMovie();
	void ShowAccountMovie();
	void ShowServerBrowser(bool bIsLanBrowser);
	void HideServerBrowser();
	void Refresh();
	void OpenGearboxAccountUI();
	bool HasUnnotifiedOffers();
	bool HasMessageOfTheDay(const struct FString& KeyName);
	void RefreshOffers();
	void RefreshDLC();
	void ApplyPriorityVisibilityEffect(bool bRemoveEffect);
	void ApplyPriorityBlurEffect(bool bRemoveEffect);
	void ShowOptions(int PlayerIndex);
	void OnControllerChanged(int ControllerId, bool bIsConnected);
	void OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID);
	bool OnClickShowMarketplace(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnClickNotLoggedInForPSN(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void CheckDownloadableContentListCompleted(unsigned char LocalUserNum, bool bDownloadableContentListAvailable);
	void ShowMarketplaceMovie();
	void OnHostUpdateComplete(const struct FName& SessionName, bool bWasSuccessful);
	void HostOnlineGame();
	void HideMatchmakingMovie();
	void CancelMatchmaking();
	void UserCancelledMatchmaking();
	void UpdateMatchmakingMovie(unsigned char MatchmakingState);
	void ShowMatchmakingMovie(unsigned char MatchmakingState);
	void OnMatchmakingStateChanged(unsigned char NewState);
	void OnDestroyGameForMatchJoinComplete(const struct FName& SessionName, bool bWasSuccessful);
	void JoinMatchmakingSession();
	void NextMatchmakingSearch();
	void OnFindMatchmakingGamesComplete(bool bWasSuccessful);
	int GetNumMatchmakingPlayers();
	void DoMatchmakingSearch(const struct FName& SearchName);
	void OnUpdateForMatchmakingComplete(const struct FName& SessionName, bool bWasSuccessful);
	void StartMatchmaking();
	bool OnCanStartMatchmaking_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool CanStartMatchmaking(bool bPrompt);
	unsigned char GetMatchmakingState();
	void SetMatchmakingState(unsigned char NewState);
	void NotifyLoginStatusChange(unsigned char LoginStatus);
	void NotifyLinkLost();
	void NotifyLinkOn();
	bool ConfirmQuit_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void DisplayConfirmQuitDialog();
	bool OpenCredits();
	class UGearboxGFxMovie* OpenMovieLink(const struct FName& MovieName);
	class UGearboxGFxMovie* PlayMovieLink(const struct FName& MovieName);
	struct FString BuildOverpowerPromptString(int CurrentOverpowerLevel, int MaxOverpowerLevel);
	bool OverpowerLevelInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool OnSelectOverpowerLevel_Click(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ConfirmOverpowerLevel(int DesiredPlaythrough, class UPlayerSaveGame* SaveGame);
	bool OnChooseDifficulty_Click(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ConfirmPlaythrough(class UPlayerSaveGame* SaveGame);
	void LaunchSaveGameEx(int PlayThrough);
	void LaunchSaveGame(int PlayThrough);
	class UTravelStationDefinition* GetSaveGameTravelStationDefinition();
	bool NotAllClientsCanAccessDlc_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool DisplayLastStationUninstalledDlc_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool DisplayDlcLevelCapInUninstalledDlc_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ConditionalLookForCrossTitleSaveGames();
	void LaunchNewGame();
	void OnJoinMatchComplete(const struct FName& SessionName, bool bWasSuccessful);
	void HandleNetworkOptionsButtonClickEx(int Index);
	void DlcNetworkOptionsRefreshComplete();
	void DlcRefreshCompleteFromBusy();
	void HandleNetworkOptionsButtonClick(int Index);
	void OnNetworkOptionsLoaded(class UNetworkOptionsGFxObject* InNetworkOptionsDialog);
	bool LanNetworkOptionsAvailable();
	bool OnlineNetworkOptionsAvailable();
	void HideNetworkOptions();
	void ShowNetworkOptions();
	void ShowNetworkOptionsFromList();
	void HandleSplitscreenJoinFail(const struct FString& Reason);
	void HandleSplitscreenJoinSuccess(class AWillowPlayerController* SplitPC);
	void OnSaveGameLoaded(unsigned char LoadGameResult);
	void FinishSavingCache();
	void OnSaveCachedGameComplete(float SaveDuration);
	bool OnChoosePlaythrough_Click(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnResetPlaythroughClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool DifficultyDialogInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool ConditionalAddPlaythroughResetToDialogTooltip(class UWillowGFxDialogBox* Dlg);
	void CharacterLoadComplete(const struct FLoadInfo& LI, int PlayerIndex);
	void OpenCharacterSelect(int PlayerIndex);
	void OpenCharacterSelectFromList();
	void SplitJoinNetworkTransitionFailed();
	void AddSplitPlayerAfterNetworkTransition();
	bool OnConfirmSwitchSession(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ShowSplitJoinSessionChangeConfirmation(unsigned char CurrentNetworkType, unsigned char SplitPlayerLoginStatus);
	void ShowSplitJoinFailureMessage(unsigned char NetworkType);
	void ClearSplitscreenLoginDelegates();
	void OnSplitLoginCancelled();
	void ConfirmSplitLoginSucceeded();
	void OnSplitLoginChanged(unsigned char ControllerId);
	void SplitJoinFailed();
	void OnExternalUIChanged(bool bIsOpening);
	void ShowSplitLoginUI();
	bool OnSplitLeaveClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ShowConfirmSplitLeaveDialog(int ControllerId);
	void HandleSplitscreenLeaveAttempt(int ControllerId);
	bool IsProfileValidForCurrentGame(unsigned char CurrentNetworkType, unsigned char LoginStatus, int ControllerId);
	void HandleSplitscreenJoinAttempt(int ControllerId);
	void AddSplitscreenPlayer(int ControllerId);
	class USplitscreenHelper* GetSplitscreenHelper();
	class UWillowGFxMovie3DDefinition* GetPlayerDetailsMovieDef();
	bool IsPlayerOwner(int ControllerId);
	bool CanKick(const struct FUniqueNetId& UniqueId);
	bool CanUnmute(const struct FUniqueNetId& UniqueId);
	bool CanMute(const struct FUniqueNetId& UniqueId);
	bool CanViewGamercard(int ControllerId, const struct FUniqueNetId& UniqueId);
	bool CanInvite(const struct FUniqueNetId& UniqueId);
	bool CanJoin(const struct FUniqueNetId& UniqueId);
	bool GetFriend(const struct FUniqueNetId& UniqueId, struct FOnlineFriend* out_Friend);
	class AWillowPlayerController* GetWPCOwner();
	bool CanPlayOnline(int ControllerId);
	bool IsLocalPlayerId(const struct FUniqueNetId& UniqueId);
	bool IsPrimaryPlayer(const struct FUniqueNetId& UniqueId);
	void OnReadFriendsComplete(bool bWasSuccessful);
	void RefreshFriends();
	void ConfigureFriendsList();
	void OnPlayerCharacterClassUpdated(class AWillowPlayerReplicationInfo* WPRI);
	void OnPlayerExpLevelUpdated(class AWillowPlayerReplicationInfo* WPRI);
	void OnPlayerUidUpdated(class APlayerReplicationInfo* PRI);
	void OnPlayerNameUpdated(class APlayerReplicationInfo* PRI);
	void OnPlayerRemoved();
	void RefreshPlayerList();
	void WaitForPRI();
	void extOnPlayerListSelectionChange(int EntryIndex, int RowTypeId);
	void extOnPlayerListButtonClick(int ControllerId, int EntryIndex, int RowTypeId);
	void extOnPlayerListLoad(const struct FString& TargetPath);
	void extFrontEndMenuOnLoad(const struct FString& TargetPath);
	void OnScrollingListItemFocus(const struct FEventData& Data);
	void GetPlayer1CancelButtonString(struct FString* Text);
	void AppendCancelButtonTooltip(bool bAppendPlayerDesignations, struct FString* TooltipString);
	void DelayedHideMOTD();
	void DelayedResetMOTD();
	void ResetMOTD();
	struct FString GetCharacterSelectTooltip(bool bAppendPlayerDesignations);
	struct FString GetGenericTooltip(const struct FString& Tooltip, bool bAppendPlayerDesignations);
	void UpdateTooltips();
	struct FString AddDisabledStringMarkup(const struct FString& Text);
	void AppendTooltipString(const struct FString& StringToAppend, bool bDisabled, struct FString* TooltipString);
	void UpdateHeader();
	void OnDeviceCheckSaveGamesAvailableComplete(bool bSaveGamesAvailable);
	void OnDeviceSelectionDone(bool bWasSuccessful);
	void OnStorageDeviceChange();
	bool OnConfirmReturnToTitle(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ShowConfirmReturnToTitleDialog();
	bool OnConfirmDisconnect(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ShowConfirmDisconnectDialog();
	bool PlayerListInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool DefaultHandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void PreviewInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool CanShowSpectatorControls();
	bool CanShowCharacterSelect(int ControllerId);
	void HandlePopListFail();
	bool SharedHandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void RefreshListHandler();
	void OnScrollingListChanged();
	void UpdateFrameForAspectRatio(bool bWidescreen);
	bool IsTimerActive(const struct FName& FuncName);
	void ClearTimer(const struct FName& FuncName);
	void SetTimer(float Rate, bool bLoop, const struct FName& FuncName);
	void OnTick();
	void ClearOSSDelegates();
	void RegisterOSSDelegates();
	void ClearGRIDelegates();
	void RegisterGRIDelegates();
	void OnClose();
	void HideMOTD();
	void ShowMOTD();
	bool IsValidMessageOfTheDay(const struct FMessageOfTheDay& MOTD);
	struct FMessageOfTheDay GetMessageOfTheDay(const struct FString& SectionName, const struct FString& KeyName, const struct FString& PackageName);
	TArray<struct FMessageOfTheDay> GetMessagesOfTheDay();
	bool ShouldDoInitialDeviceSelection();
	void NotifyAtMainMenu();
	void OnProfileWriteComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	bool Start(bool StartPaused);
	bool PrePopupInputHandler(int ControllerId, const struct FName& ukey, unsigned char uevent);
};


// Class WillowGame.FrontendGFxMovieDefinition
// 0x0080 (0x00F0 - 0x0170)
class UFrontendGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	TArray<class UBehaviorBase*>                       OnStart;                                                  // 0x00F0(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	class UTestMapsListDefinition*                     WalkableMapList;                                          // 0x00FC(0x0004) (Edit, Const, EditInline)
	class UTestMapsListDefinition*                     BlockoutMapList;                                          // 0x0100(0x0004) (Edit, Const, EditInline)
	class UTestMapsListDefinition*                     TestMapList;                                              // 0x0104(0x0004) (Edit, Const, EditInline)
	struct FString                                     ListPath;                                                 // 0x0108(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     HeaderPath;                                               // 0x0114(0x000C) (Edit, Const, NeedCtorLink)
	float                                              InviteDisplayTime;                                        // 0x0120(0x0004) (Edit, Const)
	struct FString                                     MOTD_HeaderPath;                                          // 0x0124(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     MOTD_BodyPath;                                            // 0x0130(0x000C) (Edit, Const, NeedCtorLink)
	float                                              MOTD_Delay;                                               // 0x013C(0x0004) (Edit, Const)
	struct FString                                     TooltipPath;                                              // 0x0140(0x000C) (Edit, Const, NeedCtorLink)
	struct FString                                     Header_TopLevel;                                          // 0x014C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UWillowGFxMovie3DDefinition*                 NetworkOptionsMovieDef;                                   // 0x0158(0x0004) (Edit, Const)
	class UWillowGFxMovie3DDefinition*                 PlayerDetailsMovieDef;                                    // 0x015C(0x0004) (Edit, Const)
	class UWillowGFxMovie3DDefinition*                 OptionsMovieDef;                                          // 0x0160(0x0004) (Edit, Const)
	class UWillowGFxMovie3DDefinition*                 MatchmakingMovieDef;                                      // 0x0164(0x0004) (Edit, Const)
	class UGFxMovieDefinition*                         ConfirmCharacterMovieDef;                                 // 0x0168(0x0004) (Edit, Const)
	class UClass*                                      InitialScrollingListProviderClass;                        // 0x016C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FrontendGFxMovieDefinition");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_PlayCameraAnim
// 0x0014 (0x00A4 - 0x00B8)
class UWillowSeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 AnimToPlay;                                               // 0x00A4(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x00A8(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x00AC(0x0004) (Edit)
	float                                              Rate;                                                     // 0x00B0(0x0004) (Edit)
	float                                              IntensityScale;                                           // 0x00B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_PlayCameraAnim");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_StopCameraAnim
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_StopCameraAnim : public USequenceAction
{
public:
	unsigned long                                      bStopImmediately : 1;                                     // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_StopCameraAnim");
		return ptr;
	}

};


// Class WillowGame.SeqAct_UnlockAchievement
// 0x0008 (0x00A4 - 0x00AC)
class USeqAct_UnlockAchievement : public USequenceAction
{
public:
	unsigned char                                      AchievementId;                                            // 0x00A4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	int                                                MinimumPlayersRequired;                                   // 0x00A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_UnlockAchievement");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqEvent_ShowCharacterSelectUI
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_ShowCharacterSelectUI : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_ShowCharacterSelectUI");
		return ptr;
	}

};


// Class WillowGame.FastTravelStationDiscoveryMessage
// 0x001B (0x0049 - 0x0064)
class UFastTravelStationDiscoveryMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     StationDiscoveredSolo;                                    // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StationDiscoveredTeam;                                    // 0x0058(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelStationDiscoveryMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.IStorageDevice
// 0x0000 (0x003C - 0x003C)
class UIStorageDevice : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IStorageDevice");
		return ptr;
	}


	void StorageDeviceChanged(unsigned char ControllerId, bool bIsValid);
};


// Class WillowGame.WillowSeqAct_MarkEnteredRegion
// 0x0001 (0x00A4 - 0x00A5)
class UWillowSeqAct_MarkEnteredRegion : public USequenceAction
{
public:
	unsigned char                                      Region;                                                   // 0x00A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_MarkEnteredRegion");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_MarkExitedRegion
// 0x0001 (0x00A4 - 0x00A5)
class UWillowSeqAct_MarkExitedRegion : public USequenceAction
{
public:
	unsigned char                                      Region;                                                   // 0x00A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_MarkExitedRegion");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_ColiseumAnnouncePenaltyBox
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumAnnouncePenaltyBox : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumAnnouncePenaltyBox");
		return ptr;
	}

};


// Class WillowGame.VehicleSeatSwap_PlayerInteractionClient
// 0x0010 (0x003C - 0x004C)
class UVehicleSeatSwap_PlayerInteractionClient : public UPlayerInteractionClient
{
public:
	struct FString                                     MsgTitle;                                                 // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bIsInstigator : 1;                                        // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleSeatSwap_PlayerInteractionClient");
		return ptr;
	}


	void ShutDown();
	bool HandleSeatSwapCommand();
	void Initialize(int MessageData);
};


// Class WillowGame.LobbyGFxMovie
// 0x0008 (0x04F4 - 0x04FC)
class ULobbyGFxMovie : public UFrontendGFxMovie
{
public:
	class AWillowPlayerReplicationInfo*                PrimaryPlayerPRI;                                         // 0x04F4(0x0004) (Transient)
	class AWillowPlayerReplicationInfo*                SplitPlayerPRI;                                           // 0x04F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LobbyGFxMovie");
		return ptr;
	}


	void FadeLobbyDeco();
	void ShowConfirmQuitDialog();
	bool OnQuitConfirmed(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool CanShowSpectatorControls();
	void extFrontEndMenuOnLoad(const struct FString& TargetPath);
	void OnConfirmCharacters();
	void PromptConfirmCharacters();
	void OnClose();
	void CheckSpectatorPoint();
	bool Start(bool StartPaused);
};


// Class WillowGame.OptionsGFxMovie
// 0x0038 (0x0390 - 0x03C8)
class UOptionsGFxMovie : public UWillowGFxMovie3D
{
public:
	class UOptionsGFxObject*                           OptionsObj;                                               // 0x0390(0x0004) (Transient)
	class UWillowScrollingList*                        TheList;                                                  // 0x0394(0x0004) (Transient)
	struct FString                                     TooltipSpacing;                                           // 0x0398(0x000C) (Transient, NeedCtorLink)
	struct FString                                     PreviousMenuHeader;                                       // 0x03A4(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      CachedWidescreen : 1;                                     // 0x03B0(0x0004) (Transient)
	unsigned long                                      bTrainingWasEnabled : 1;                                  // 0x03B0(0x0004) (Transient)
	class UWillowSystemSettings*                       SystemSettings;                                           // 0x03B4(0x0004) (Transient)
	class UWillowScrollingListDataProviderOptionsBase* HandleInputKeyHook;                                       // 0x03B8(0x0004) (Transient)
	struct FString                                     BackTooltip;                                              // 0x03BC(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("OptionsGFxMovie");
		return ptr;
	}


	void extOptionsMenuOnLoad(const struct FString& TargetPath, const struct FString& ListTargetPath);
	class UWillowSystemSettings* GetSystemSettings();
	void OnScrollingListItemFocus(const struct FEventData& Data);
	void UpdateTooltips();
	void AppendTooltipString(const struct FString& StringToAppend, bool bDisabled, struct FString* TooltipString);
	void UpdateHeader();
	void CloseMovie();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void RefreshListHandler();
	void OnScollingListSelectedIndexChanged(int NewSelectedIndex);
	void OnScrollingListChanged();
	void UpdateFrameForAspectRatio(bool bWidescreen);
	void OnTick();
	void SaveOptions();
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.SeqAct_CausePlayerDeath
// 0x0004 (0x00A4 - 0x00A8)
class USeqAct_CausePlayerDeath : public USequenceAction
{
public:
	unsigned long                                      bInstaKill : 1;                                           // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_CausePlayerDeath");
		return ptr;
	}

};


// Class WillowGame.ISkillBehavior
// 0x0000 (0x003C - 0x003C)
class UISkillBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ISkillBehavior");
		return ptr;
	}


	class AController* Behavior_GetSkillInstigatorController();
	void Behavior_UpgradeSkill(class USkillDefinition* SkillToUpgrade, int NumberOfLevelsToRaise, int MaximumLevelToRaiseSkill);
	void Behavior_DeactivateSkill(class USkillDefinition* SkillToDeactivate, bool bIgnoreSkillInstigator);
	void Behavior_ActivateSkill(class USkillDefinition* SkillToActivate, class UObject* AdditionalSkillTarget, int SkillGrade);
};


// Class WillowGame.IChallengeRecipient
// 0x0000 (0x003C - 0x003C)
class UIChallengeRecipient : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IChallengeRecipient");
		return ptr;
	}


	void ReceiveChallenge(class UChallengeDefinition* ChalDef, bool bIsCharacterLoad, bool bGiveToAllPlayers);
};


// Class WillowGame.WillowPlayerCamera
// 0x0000 (0x0400 - 0x0400)
class AWillowPlayerCamera : public AGearboxCameraBasic
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPlayerCamera");
		return ptr;
	}


	void UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT);
	void PostBeginPlay();
};


// Class WillowGame.WillowCheatManager
// 0x008C (0x005C - 0x00E8)
class UWillowCheatManager : public UCheatManager
{
public:
	struct FString                                     ClassModPoolDefinitionName;                               // 0x005C(0x000C) (Config, NeedCtorLink)
	float                                              CurrencyBalanceFormulaMultiplier;                         // 0x0068(0x0004) (Config)
	float                                              CurrencyBalanceFormulaLevel;                              // 0x006C(0x0004) (Config)
	float                                              CurrencyBalanceFormulaOffset;                             // 0x0070(0x0004) (Config)
	int                                                AwesomeLevelBoostForAutoBalancedInventory;                // 0x0074(0x0004) (Config)
	struct FString                                     BalanceMeItemPoolListDefinitionName;                      // 0x0078(0x000C) (Config, NeedCtorLink)
	int                                                BalanceMeAwesomeLevel;                                    // 0x0084(0x0004)
	unsigned long                                      DEBUG_bSkipSkillDependencyCheck : 1;                      // 0x0088(0x0004)
	unsigned long                                      bSkillDebugWatchPlayers : 1;                              // 0x0088(0x0004) (Config)
	unsigned long                                      bSkillDebugWatchNonPlayers : 1;                           // 0x0088(0x0004) (Config)
	unsigned long                                      bShowTimeOfDay : 1;                                       // 0x0088(0x0004)
	unsigned long                                      bLevelHacksEnabled : 1;                                   // 0x0088(0x0004)
	unsigned long                                      bPreHLQNoClipCanTargetCheatState : 1;                     // 0x0088(0x0004)
	unsigned long                                      bPreHLQNoClipDemigodState : 1;                            // 0x0088(0x0004)
	TArray<struct FBalanceMeResourceUpgradePath>       ResourceUpgrades;                                         // 0x008C(0x000C) (Config, NeedCtorLink)
	TArray<struct FStatusEffectNameMapping>            StatusEffects;                                            // 0x0098(0x000C) (Config, NeedCtorLink)
	TArray<class USkillDefinition*>                    WatchedSkills;                                            // 0x00A4(0x000C) (NeedCtorLink)
	TArray<class AController*>                         SkillDebugPages;                                          // 0x00B0(0x000C) (NeedCtorLink)
	int                                                LastDebugPageIndex;                                       // 0x00BC(0x0004)
	float                                              LastSkillDebugPageUpdateTime;                             // 0x00C0(0x0004)
	int                                                LastDamagedAmount;                                        // 0x00C4(0x0004)
	class UItemPoolDefinition*                         SpawnItemPool_PoolToSpawnOutOf;                           // 0x00C8(0x0004) (Transient)
	int                                                SpawnItemPool_GameStage;                                  // 0x00CC(0x0004) (Transient)
	int                                                SpawnItemPool_AwesomeLevel;                               // 0x00D0(0x0004) (Transient)
	int                                                SpawnItemPool_NumTimesToSpawnFromPool;                    // 0x00D4(0x0004) (Transient)
	float                                              SpawnItemPool_LastUpdateTime;                             // 0x00D8(0x0004) (Transient)
	float                                              SpawnItemPool_AccruedTime;                                // 0x00DC(0x0004) (Transient)
	struct FName                                       SpawnItemPool_FuncName;                                   // 0x00E0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowCheatManager");
		return ptr;
	}

};


// Class WillowGame.IMultitypeScrollingList
// 0x0000 (0x003C - 0x003C)
class UIMultitypeScrollingList : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IMultitypeScrollingList");
		return ptr;
	}


	void Move(int Delta);
	void SetRendererInfo(int DataIndex, int RendererType, int RendererIndex);
};


// Class WillowGame.TwoPanelInterfaceGFxDefinition
// 0x000C (0x0158 - 0x0164)
class UTwoPanelInterfaceGFxDefinition : public UWillowInventoryGFxDefinition
{
public:
	struct FString                                     PathToBackgroundArtClip;                                  // 0x0158(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TwoPanelInterfaceGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.IWillowStorable
// 0x0000 (0x003C - 0x003C)
class UIWillowStorable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IWillowStorable");
		return ptr;
	}


	bool Put(class AInventory* Thing);
	bool Get(class AWillowInventory* Thing);
	bool Swap(class AWillowInventory* ThingA, class AWillowInventory* ThingB);
};


// Class WillowGame.ITwoPanelInterface
// 0x0000 (0x003C - 0x003C)
class UITwoPanelInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ITwoPanelInterface");
		return ptr;
	}


	void OnCellPressed(class UBaseInventoryPanelGFxObject* Panel);
	void OnLeftPanelInit(class UInventoryListPanelGFxObject* LeftPanel);
	void SetItemLocation(class AWillowInventory* Thing);
	void PanelOnItemSelected(class UBaseInventoryPanelGFxObject* Panel, class AWillowInventory* Thing);
	bool ShouldStoragePanelHighlightFrozen();
	class AWillowInventory* GetEquippedAnalogue(class AWillowInventory* InThing);
	class AWillowInventory* GetSelectedThing();
	struct FString GetPlayerPanelLabel();
	struct FString GetStoragePanelLabel();
	bool ShouldShowPanelNavTooltips();
	void NotifySelectionChange();
	unsigned char GetCurrencyTypeForInventory(class AWillowInventory* WInv);
	int GetOverridePriceForInventory(class AWillowInventory* WInv);
	void GetSortConfigDataForPanel(class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData);
	FScriptInterface GetStorageReferenceForTransferring();
	FScriptInterface GetStorageReferenceForSwapping();
	void GetPlayerPanelItems(TArray<class AWillowInventory*>* Things);
	void GetStoragePanelItems(TArray<class AWillowInventory*>* Things, int* UnloadableCount);
	struct FString GetTitle();
	bool ShouldStartOnLeftPanel();
};


// Class WillowGame.BankGFxMovie
// 0x001C (0x04A4 - 0x04C0)
class UBankGFxMovie : public UTwoPanelInterfaceGFxMovie
{
public:
	struct FString                                     BankTitle;                                                // 0x04A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BankAddTip;                                               // 0x04B0(0x000C) (Const, Localized, NeedCtorLink)
	class UWillowInventoryStorage*                     BankStorage;                                              // 0x04BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BankGFxMovie");
		return ptr;
	}


	void SetItemLocation(class AWillowInventory* Thing);
	void OnInventoryPanelSetActive(class UBaseInventoryPanelGFxObject* PanelObject, bool bActive);
	FScriptInterface GetStorageReferenceForTransferring();
	FScriptInterface GetStorageReferenceForSwapping();
	void GetPlayerPanelItems(TArray<class AWillowInventory*>* Things);
	void GetStoragePanelItems(TArray<class AWillowInventory*>* Things, int* UnloadableCount);
	struct FString GetAddTip();
	struct FString GetTitle();
	void OnClose();
	void extInitMainPanel(const struct FString& MainPanelTargetPath);
	bool Start(bool StartPaused);
};


// Class WillowGame.Behavior_ActivateListenerSkill
// 0x0004 (0x004C - 0x0050)
class UBehavior_ActivateListenerSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToActivate;                                          // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ActivateListenerSkill");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ActivateSkill
// 0x0018 (0x004C - 0x0064)
class UBehavior_ActivateSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToActivate;                                          // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bUseAdditionalSkillTarget : 1;                            // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bNoSkillStacking : 1;                                     // 0x0050(0x0004) (Edit, Const)
	struct FBehaviorContextData                        AdditionalTargetContext;                                  // 0x0054(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ActivateSkill");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AddInstanceData
// 0x0010 (0x004C - 0x005C)
class UBehavior_AddInstanceData : public UBehaviorBase
{
public:
	unsigned long                                      bAllowDuplicates : 1;                                     // 0x004C(0x0004) (Edit)
	TArray<struct FInstanceDataUnion>                  InstanceData;                                             // 0x0050(0x000C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AddInstanceData");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AddInstanceDataFromBehaviorContext
// 0x001C (0x004C - 0x0068)
class UBehavior_AddInstanceDataFromBehaviorContext : public UBehaviorBase
{
public:
	struct FName                                       DatumName;                                                // 0x004C(0x0008) (Edit, Const)
	unsigned long                                      bDeleteByOwner : 1;                                       // 0x0054(0x0004) (Edit, Const)
	struct FBehaviorContextData                        ObjectContext;                                            // 0x0058(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AddInstanceDataFromBehaviorContext");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AddInventoryToStorage
// 0x0090 (0x004C - 0x00DC)
class UBehavior_AddInventoryToStorage : public UBehaviorBase
{
public:
	struct FItemDefinitionData                         ItemDef;                                                  // 0x004C(0x0044) (Edit, Const)
	struct FWeaponDefinitionData                       WeaponDef;                                                // 0x0090(0x0044) (Edit, Const)
	unsigned char                                      InvType;                                                  // 0x00D4(0x0001) (Edit, Const)
	unsigned char                                      Destination;                                              // 0x00D5(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00D6(0x0002) MISSED OFFSET
	unsigned long                                      bIgnoreCapacityCheck : 1;                                 // 0x00D8(0x0004) (Edit, Const)
	unsigned long                                      bUniqueInventory : 1;                                     // 0x00D8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AddInventoryToStorage");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AddObjectInstanceData
// 0x0010 (0x004C - 0x005C)
class UBehavior_AddObjectInstanceData : public UBehaviorBase
{
public:
	class UObject*                                     InstanceDataObject;                                       // 0x004C(0x0004)
	struct FName                                       InstanceDataName;                                         // 0x0050(0x0008) (Edit)
	unsigned long                                      bDeleteByOwner : 1;                                       // 0x0058(0x0004) (Edit)
	unsigned long                                      bAllowDuplicateNames : 1;                                 // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AddObjectInstanceData");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AdjustCameraAnimByEyeHeight
// 0x0008 (0x004C - 0x0054)
class UBehavior_AdjustCameraAnimByEyeHeight : public UBehaviorBase
{
public:
	unsigned long                                      bEnable : 1;                                              // 0x004C(0x0004) (Edit, Const)
	float                                              BaseEyeHeight;                                            // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AdjustCameraAnimByEyeHeight");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AIChangeInventory
// 0x0018 (0x004C - 0x0064)
class UBehavior_AIChangeInventory : public UBehaviorBase
{
public:
	TArray<struct FItemPoolInfo>                       NewItemPoolList;                                          // 0x004C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UItemPoolListDefinition*>             NewItemPoolIncludedLists;                                 // 0x0058(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AIChangeInventory");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AIFollow
// 0x0020 (0x004C - 0x006C)
class UBehavior_AIFollow : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ToFollow;                                                 // 0x004C(0x0010) (Edit, Const)
	unsigned long                                      bCanShoot : 1;                                            // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bUseFormation : 1;                                        // 0x005C(0x0004) (Edit, Const)
	unsigned char                                      Action;                                                   // 0x0060(0x0001) (Edit, Const)
	unsigned char                                      Stance;                                                   // 0x0061(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	float                                              CatchupDistance;                                          // 0x0064(0x0004) (Edit, Const)
	float                                              HoldStillDistance;                                        // 0x0068(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AIFollow");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AILevelUp
// 0x0008 (0x004C - 0x0054)
class UBehavior_AILevelUp : public UBehaviorBase
{
public:
	unsigned long                                      bResetHealth : 1;                                         // 0x004C(0x0004) (Edit, Const)
	int                                                MaxLevelUps;                                              // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AILevelUp");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AIPatsy
// 0x0014 (0x004C - 0x0060)
class UBehavior_AIPatsy : public UBehaviorBase
{
public:
	unsigned long                                      bClearPatsy : 1;                                          // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        Patsy;                                                    // 0x0050(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AIPatsy");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AIProvoke
// 0x0010 (0x004C - 0x005C)
class UBehavior_AIProvoke : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ProvokeInstigator;                                        // 0x004C(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AIProvoke");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AIResetProvocation
// 0x0000 (0x004C - 0x004C)
class UBehavior_AIResetProvocation : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AIResetProvocation");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AISetItemTossTarget
// 0x0010 (0x004C - 0x005C)
class UBehavior_AISetItemTossTarget : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        TossTarget;                                               // 0x004C(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AISetItemTossTarget");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AISetWeaponFireRotation
// 0x0004 (0x004C - 0x0050)
class UBehavior_AISetWeaponFireRotation : public UBehaviorBase
{
public:
	unsigned long                                      bUseWeaponRotation : 1;                                   // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AISetWeaponFireRotation");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AITakeMoney
// 0x0024 (0x004C - 0x0070)
class UBehavior_AITakeMoney : public UBehaviorBase
{
public:
	float                                              TakePercent;                                              // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        GiveTo;                                                   // 0x0050(0x0010) (Edit, Const)
	class UItemPoolDefinition*                         CashItemPool;                                             // 0x0060(0x0004) (Edit, Const)
	struct FString                                     HUDSpecialRemovalFrame;                                   // 0x0064(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AITakeMoney");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.INPCBehavior
// 0x0000 (0x003C - 0x003C)
class UINPCBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("INPCBehavior");
		return ptr;
	}


	class UProjectileDefinition* GetCurrentProjectile();
	class AWillowGrenadeMod* GetGrenadeMod();
};


// Class WillowGame.Behavior_AssignBoolVariable
// 0x0004 (0x004C - 0x0050)
class UBehavior_AssignBoolVariable : public UBehaviorBase
{
public:
	unsigned long                                      Value : 1;                                                // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AssignBoolVariable");
		return ptr;
	}


	void PublishBehaviorOutput(bool Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AssignFloatVariable
// 0x0004 (0x004C - 0x0050)
class UBehavior_AssignFloatVariable : public UBehaviorBase
{
public:
	float                                              Value;                                                    // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AssignFloatVariable");
		return ptr;
	}


	void PublishBehaviorOutput(float Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AssignIntVariable
// 0x0004 (0x004C - 0x0050)
class UBehavior_AssignIntVariable : public UBehaviorBase
{
public:
	int                                                Value;                                                    // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AssignIntVariable");
		return ptr;
	}


	void PublishBehaviorOutput(int Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AssignObjectVariable
// 0x0004 (0x004C - 0x0050)
class UBehavior_AssignObjectVariable : public UBehaviorBase
{
public:
	class UObject*                                     Value;                                                    // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AssignObjectVariable");
		return ptr;
	}


	void PublishBehaviorOutput(class UObject* Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AssignVectorVariable
// 0x000C (0x004C - 0x0058)
class UBehavior_AssignVectorVariable : public UBehaviorBase
{
public:
	struct FVector                                     Value;                                                    // 0x004C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AssignVectorVariable");
		return ptr;
	}


	void PublishBehaviorOutput(const struct FVector& Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AttachActor
// 0x0024 (0x004C - 0x0070)
class UBehavior_AttachActor : public UBehaviorBase
{
public:
	struct FName                                       AttachmentPointName;                                      // 0x004C(0x0008) (Edit, Const)
	struct FBehaviorContextData                        ToAttach;                                                 // 0x0054(0x0010) (Edit, Const)
	float                                              AttachTime;                                               // 0x0064(0x0004) (Edit, Const)
	struct FName                                       InstanceDataName;                                         // 0x0068(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AttachActor");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AttachAOEStatusEffect
// 0x000C (0x004C - 0x0058)
class UBehavior_AttachAOEStatusEffect : public UBehaviorBase
{
public:
	class UWillowDamageTypeDefinition*                 StatusEffectDamageType;                                   // 0x004C(0x0004) (Edit)
	struct FName                                       SaveReferenceName;                                        // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AttachAOEStatusEffect");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AttachItems
// 0x0004 (0x004C - 0x0050)
class UBehavior_AttachItems : public UBehaviorBase
{
public:
	unsigned long                                      bDisablePickups : 1;                                      // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AttachItems");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AttributeEffect
// 0x0010 (0x004C - 0x005C)
class UBehavior_AttributeEffect : public UBehaviorBase
{
public:
	class USkillDefinition*                            AttributeEffect;                                          // 0x004C(0x0004) (Edit, Const, EditInline)
	TArray<struct FAttributeEffectData>                AttributeEffects;                                         // 0x0050(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AttributeEffect");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_AwardExperienceForMyDeath
// 0x0000 (0x004C - 0x004C)
class UBehavior_AwardExperienceForMyDeath : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_AwardExperienceForMyDeath");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_BeginLifting
// 0x0030 (0x004C - 0x007C)
class UBehavior_BeginLifting : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        LifterSkillContext;                                       // 0x004C(0x0010) (Edit, Const)
	struct FBehaviorContextData                        LifterPawnContext;                                        // 0x005C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                HeightFromGroundFormula;                                  // 0x006C(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_BeginLifting");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ILiftBehavior
// 0x0000 (0x003C - 0x003C)
class UILiftBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ILiftBehavior");
		return ptr;
	}


	void BeginLifting(class AWillowPawn* TargetPawn, float HeightFromGround);
	void FinishLifting(bool bDropImmediately);
	void SelectTarget(class AWillowPawn* NewTarget);
};


// Class WillowGame.Behavior_BoolMath
// 0x0005 (0x004C - 0x0051)
class UBehavior_BoolMath : public UBehaviorBase
{
public:
	unsigned long                                      A : 1;                                                    // 0x004C(0x0004) (Edit)
	unsigned long                                      B : 1;                                                    // 0x004C(0x0004) (Edit)
	unsigned char                                      Operation;                                                // 0x0050(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_BoolMath");
		return ptr;
	}


	void PublishBehaviorOutput(bool Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_BroadcastEcho
// 0x0000 (0x004C - 0x004C)
class UBehavior_BroadcastEcho : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_BroadcastEcho");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CauseTinnitus
// 0x0028 (0x004C - 0x0074)
class UBehavior_CauseTinnitus : public UBehaviorBase
{
public:
	struct FAttributeInitializationData                Radius;                                                   // 0x004C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                StrengthModifier;                                         // 0x005C(0x0010) (Edit, Const)
	unsigned long                                      bOverrideTinnitusAkEvent : 1;                             // 0x006C(0x0004)
	class UAkEvent*                                    OverrideTinnitusAkEvent;                                  // 0x0070(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CauseTinnitus");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeBehaviorSetState
// 0x0009 (0x004C - 0x0055)
class UBehavior_ChangeBehaviorSetState : public UBehaviorBase
{
public:
	struct FName                                       BehaviorSetName;                                          // 0x004C(0x0008) (Edit)
	unsigned char                                      ChangeStatus;                                             // 0x0054(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeBehaviorSetState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeCanTarget
// 0x0001 (0x004C - 0x004D)
class UBehavior_ChangeCanTarget : public UBehaviorBase
{
public:
	unsigned char                                      ChangeStatus;                                             // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeCanTarget");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeDenAllegiance
// 0x0004 (0x004C - 0x0050)
class UBehavior_ChangeDenAllegiance : public UBehaviorBase
{
public:
	class UPawnAllegiance*                             Allegiance;                                               // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeDenAllegiance");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeDialogName
// 0x0004 (0x004C - 0x0050)
class UBehavior_ChangeDialogName : public UBehaviorBase
{
public:
	class UGearboxDialogNameTag*                       NewNameTag;                                               // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeDialogName");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeEnvironmentTag
// 0x000C (0x004C - 0x0058)
class UBehavior_ChangeEnvironmentTag : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                                   // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	class UEnvironmentTagDefinition*                   EnvironmentTag;                                           // 0x0050(0x0004) (Edit)
	unsigned long                                      bOverwriteExistingTag : 1;                                // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeEnvironmentTag");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeInstanceDataSwitch
// 0x0010 (0x004C - 0x005C)
class UBehavior_ChangeInstanceDataSwitch : public UBehaviorBase
{
public:
	struct FName                                       SwitchName;                                               // 0x004C(0x0008) (Edit)
	int                                                NewValue;                                                 // 0x0054(0x0004) (Edit)
	unsigned long                                      bSimulated : 1;                                           // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeInstanceDataSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeSkillBehaviorSequenceState
// 0x0010 (0x004C - 0x005C)
class UBehavior_ChangeSkillBehaviorSequenceState : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                                   // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FName                                       SequenceName;                                             // 0x0050(0x0008) (Edit, Const)
	class USkillDefinition*                            SkillDef;                                                 // 0x0058(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeSkillBehaviorSequenceState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ChangeUsability
// 0x0002 (0x004C - 0x004E)
class UBehavior_ChangeUsability : public UBehaviorBase
{
public:
	unsigned char                                      ChangeUsability;                                          // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UsabilityType;                                            // 0x004D(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeUsability");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.IChangeUsabilityBehavior
// 0x0000 (0x003C - 0x003C)
class UIChangeUsabilityBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IChangeUsabilityBehavior");
		return ptr;
	}


	void Behavior_ChangeUsabilityCost(unsigned char ChangeType, unsigned char CostType, int CostAmount, unsigned char UsedType);
	void Behavior_ChangeUsability(unsigned char ChangeType, class UActorComponent* UsedComponent, unsigned char UsedType);
};


// Class WillowGame.Behavior_ChangeWeaponVisibility
// 0x0008 (0x004C - 0x0054)
class UBehavior_ChangeWeaponVisibility : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                                   // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	unsigned long                                      bApplyToFirstPerson : 1;                                  // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bApplyToThirdPerson : 1;                                  // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ChangeWeaponVisibility");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_Charm
// 0x0014 (0x004C - 0x0060)
class UBehavior_Charm : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                                   // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FBehaviorContextData                        CharmOwner;                                               // 0x0050(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_Charm");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CheckMapChangeConditions
// 0x0010 (0x004C - 0x005C)
class UBehavior_CheckMapChangeConditions : public UBehaviorBase
{
public:
	struct FName                                       MapChangeCustomEvent;                                     // 0x004C(0x0008) (Edit, Const)
	struct FName                                       PlayerBusyCustomEvent;                                    // 0x0054(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CheckMapChangeConditions");
		return ptr;
	}


	void PlayerBusyEvent(const FScriptInterface& CustomEventInterface);
	void MapChangeEvent(const FScriptInterface& CustomEventInterface);
	class ULevelTravelStationDefinition* GetDestinationStationDefinition(class ULevelTravelStationDefinition* Source);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ClearStatusEffects
// 0x0004 (0x004C - 0x0050)
class UBehavior_ClearStatusEffects : public UBehaviorBase
{
public:
	unsigned long                                      bKillImmediately : 1;                                     // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ClearStatusEffects");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CombatPerch
// 0x0009 (0x004C - 0x0055)
class UBehavior_CombatPerch : public UBehaviorBase
{
public:
	struct FName                                       AttachmentName;                                           // 0x004C(0x0008) (Edit)
	unsigned char                                      Action;                                                   // 0x0054(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CombatPerch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CombatPerchThrow
// 0x0004 (0x00A8 - 0x00AC)
class UBehavior_CombatPerchThrow : public UBehavior_AIThrowProjectileAtTarget
{
public:
	unsigned long                                      bDrop : 1;                                                // 0x00A8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CombatPerchThrow");
		return ptr;
	}


	void ThrowProjectile(class AWillowProjectile* NewProjectile, const FScriptInterface& AI, class UObject* ContextObject, int ExpLevel);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CompareFloat
// 0x0008 (0x004C - 0x0054)
class UBehavior_CompareFloat : public UBehaviorBase
{
public:
	float                                              ValueA;                                                   // 0x004C(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CompareFloat");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CompareInt
// 0x0008 (0x004C - 0x0054)
class UBehavior_CompareInt : public UBehaviorBase
{
public:
	int                                                A;                                                        // 0x004C(0x0004) (Edit)
	int                                                B;                                                        // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CompareInt");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CompareObject
// 0x0008 (0x004C - 0x0054)
class UBehavior_CompareObject : public UBehaviorBase
{
public:
	class UObject*                                     ObjectA;                                                  // 0x004C(0x0004) (Transient)
	class UObject*                                     ObjectB;                                                  // 0x0050(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CompareObject");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CoordinatedEffect
// 0x0008 (0x004C - 0x0054)
class UBehavior_CoordinatedEffect : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                                   // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	class UCoordinatedEffectDefinition*                Effect;                                                   // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CoordinatedEffect");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_Crane
// 0x0001 (0x004C - 0x004D)
class UBehavior_Crane : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                                   // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_Crane");
		return ptr;
	}


	void DontDoShit(class AWillowAICranePawn* CranePawn);
	void FollowDummy(class AWillowAICranePawn* CranePawn);
	void DetachDummy(class AWillowAICranePawn* CranePawn);
	void AttachDummy(class AWillowAICranePawn* CranePawn);
	void FindDummy(class AWillowAICranePawn* CranePawn);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CreateImpactEffect
// 0x0018 (0x004C - 0x0064)
class UBehavior_CreateImpactEffect : public UBehaviorBase
{
public:
	class UWillowImpactDefinition*                     ImpactDefinition;                                         // 0x004C(0x0004) (Edit, Const)
	struct FName                                       ImpactPointName;                                          // 0x0050(0x0008) (Edit, Const)
	unsigned char                                      ImpactDirection;                                          // 0x0058(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              ImpactTraceLength;                                        // 0x005C(0x0004) (Edit, Const)
	float                                              ImpactTraceStartBackupLength;                             // 0x0060(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CreateImpactEffect");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_CreateWeatherSystem
// 0x0008 (0x004C - 0x0054)
class UBehavior_CreateWeatherSystem : public UBehaviorBase
{
public:
	class UParticleSystem*                             WeatherSystemTemplate;                                    // 0x004C(0x0004) (Edit, Const)
	class UParticleSystem*                             ScreenEffectTemplate;                                     // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_CreateWeatherSystem");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DamageArea
// 0x0001 (0x004C - 0x004D)
class UBehavior_DamageArea : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                                   // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DamageArea");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DamageClassSwitch
// 0x0004 (0x004C - 0x0050)
class UBehavior_DamageClassSwitch : public UBehaviorBase
{
public:
	class UObject*                                     HitObject;                                                // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DamageClassSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DamageSourceSwitch
// 0x0004 (0x004C - 0x0050)
class UBehavior_DamageSourceSwitch : public UBehaviorBase
{
public:
	class UObject*                                     DamageSource;                                             // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DamageSourceSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DamageSurfaceTypeSwitch
// 0x0004 (0x004C - 0x0050)
class UBehavior_DamageSurfaceTypeSwitch : public UBehaviorBase
{
public:
	int                                                DamageSurfaceType;                                        // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DamageSurfaceTypeSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DeactivateSkill
// 0x0008 (0x004C - 0x0054)
class UBehavior_DeactivateSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToDeactivate;                                        // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreSkillInstigator : 1;                               // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DeactivateSkill");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DebugMessage
// 0x002C (0x004C - 0x0078)
class UBehavior_DebugMessage : public UBehaviorBase
{
public:
	struct FString                                     DebugMessage;                                             // 0x004C(0x000C) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x0058(0x0004) (Edit)
	unsigned long                                      DebugBool : 1;                                            // 0x005C(0x0004) (Edit)
	unsigned long                                      bOutputBool : 1;                                          // 0x005C(0x0004)
	unsigned long                                      bOutputFloat : 1;                                         // 0x005C(0x0004)
	unsigned long                                      bOutputInt : 1;                                           // 0x005C(0x0004)
	unsigned long                                      bOutputObject : 1;                                        // 0x005C(0x0004)
	unsigned long                                      bOutputVector : 1;                                        // 0x005C(0x0004)
	unsigned long                                      bOutputToLogFile : 1;                                     // 0x005C(0x0004) (Edit)
	float                                              DebugFloat;                                               // 0x0060(0x0004) (Edit)
	int                                                DebugInt;                                                 // 0x0064(0x0004) (Edit)
	class UObject*                                     DebugObject;                                              // 0x0068(0x0004) (Edit)
	struct FVector                                     DebugVector;                                              // 0x006C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DebugMessage");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DestroyBeams
// 0x0014 (0x004C - 0x0060)
class UBehavior_DestroyBeams : public UBehaviorBase
{
public:
	unsigned long                                      bDestroyAllBeams : 1;                                     // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        TargetContext;                                            // 0x0050(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DestroyBeams");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DestroyBeamsForSource
// 0x0018 (0x004C - 0x0064)
class UBehavior_DestroyBeamsForSource : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        SourceContext;                                            // 0x004C(0x0010) (Edit, Const)
	struct FName                                       SourceSocket;                                             // 0x005C(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DestroyBeamsForSource");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DestroyWeatherSystem
// 0x0000 (0x004C - 0x004C)
class UBehavior_DestroyWeatherSystem : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DestroyWeatherSystem");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DetachActor
// 0x0034 (0x004C - 0x0080)
class UBehavior_DetachActor : public UBehaviorBase
{
public:
	unsigned long                                      bSetActorToPhysFallingOnDetach : 1;                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAddVelocityOnDetach : 1;                                 // 0x004C(0x0004) (Edit, Const)
	struct FRelativeDirectionData                      DetachDirection;                                          // 0x0050(0x0020) (Edit, Const)
	struct FAttributeInitializationData                DetachSpeed;                                              // 0x0070(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DetachActor");
		return ptr;
	}


	void ApplyDetachVelocity(class AActor* ActorToDetach, const struct FVector& DetachVelocity);
	struct FVector CalculateDetachVelocity(class AActor* ActorToDetach);
	void DetachActor(class AActor* ActorToDetach);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DisableFallingDamage
// 0x0004 (0x004C - 0x0050)
class UBehavior_DisableFallingDamage : public UBehaviorBase
{
public:
	unsigned long                                      bDisableFallingDamage : 1;                                // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DisableFallingDamage");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DiscoverLevelChallengeObject
// 0x0008 (0x004C - 0x0054)
class UBehavior_DiscoverLevelChallengeObject : public UBehaviorBase
{
public:
	class UObject*                                     UnlockForPlayer;                                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bForAllPlayers : 1;                                       // 0x0050(0x0004) (Edit)
	unsigned long                                      bIgnoreNumbering : 1;                                     // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DiscoverLevelChallengeObject");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DropItems
// 0x0058 (0x004C - 0x00A4)
class UBehavior_DropItems : public UBehaviorBase
{
public:
	struct FVector                                     ItemDropOffset;                                           // 0x004C(0x000C) (Edit, Const)
	struct FVector                                     ItemDropVelocity;                                         // 0x0058(0x000C) (Edit, Const)
	struct FVector                                     ItemScatterOffset;                                        // 0x0064(0x000C) (Edit, Const)
	unsigned long                                      bDisablePickups : 1;                                      // 0x0070(0x0004) (Edit)
	unsigned long                                      bCircularScatter : 1;                                     // 0x0070(0x0004) (Edit)
	unsigned long                                      bTorque : 1;                                              // 0x0070(0x0004) (Const)
	struct FRelativeDirectionData                      CustomDirection;                                          // 0x0074(0x0020) (Edit)
	float                                              CustomVelocity;                                           // 0x0094(0x0004) (Edit)
	struct FVector                                     Torque;                                                   // 0x0098(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DropItems");
		return ptr;
	}


	void DropItems(const FScriptInterface& AttachmentBase, TArray<struct FSpawnedDroppedLootData>* SpawnedLoot);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DropProjectile
// 0x0024 (0x004C - 0x0070)
class UBehavior_DropProjectile : public UBehaviorBase
{
public:
	struct FName                                       InstanceDataName;                                         // 0x004C(0x0008) (Edit, Const)
	TArray<struct FAttributeBaseValueData>             ChildProjectileBaseValues;                                // 0x0054(0x000C) (Edit, Const, NeedCtorLink)
	class UProjectileDefinition*                       ProjectileDef;                                            // 0x0060(0x0004) (Edit)
	TArray<struct FDropProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                               // 0x0064(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DropProjectile");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_DuplicateInstanceData
// 0x0018 (0x004C - 0x0064)
class UBehavior_DuplicateInstanceData : public UBehaviorBase
{
public:
	struct FName                                       DuplicateName;                                            // 0x004C(0x0008) (Edit, Const)
	struct FBehaviorContextData                        InstanceData;                                             // 0x0054(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_DuplicateInstanceData");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_EnterVehicle
// 0x0014 (0x004C - 0x0060)
class UBehavior_EnterVehicle : public UBehaviorBase
{
public:
	int                                                SeatPos;                                                  // 0x004C(0x0004) (Edit)
	struct FBehaviorContextData                        VehicleContext;                                           // 0x0050(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_EnterVehicle");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_FinishLifting
// 0x0004 (0x004C - 0x0050)
class UBehavior_FinishLifting : public UBehaviorBase
{
public:
	unsigned long                                      bDropImmediately : 1;                                     // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_FinishLifting");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_FireBeam
// 0x0080 (0x004C - 0x00CC)
class UBehavior_FireBeam : public UBehaviorBase
{
public:
	struct FName                                       SourceSocket;                                             // 0x004C(0x0008) (Edit, Const)
	struct FVector                                     SourceOffset;                                             // 0x0054(0x000C) (Edit, Const)
	unsigned long                                      bLockTarget : 1;                                          // 0x0060(0x0004) (Edit, Const)
	struct FName                                       TargetSocket;                                             // 0x0064(0x0008) (Edit, Const)
	struct FVector                                     TargetOffset;                                             // 0x006C(0x000C) (Edit, Const)
	struct FBehaviorContextData                        TargetContext;                                            // 0x0078(0x0010) (Edit, Const)
	int                                                NumBeams;                                                 // 0x0088(0x0004) (Edit, Const)
	struct FAttributeInitializationData                DamagePerSecondFormula;                                   // 0x008C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MomentumPerSecondFormula;                                 // 0x009C(0x0010) (Edit, Const)
	struct FAttributeInitializationData                RadiusToDoDamageAroundImpact;                             // 0x00AC(0x0010) (Edit, Const)
	class UFiringModeDefinition*                       FiringModeDefinition;                                     // 0x00BC(0x0004) (Edit, Const)
	class UClass*                                      DamageSource;                                             // 0x00C0(0x0004) (Edit, Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                                     // 0x00C4(0x0004) (Edit, Const)
	class UImpactDefinition*                           ImpactDefinition;                                         // 0x00C8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_FireBeam");
		return ptr;
	}


	void FillData(class UObject* ContextObject, struct FBeamLocationData* Data);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_FireCustomSkillEvent
// 0x000C (0x004C - 0x0058)
class UBehavior_FireCustomSkillEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                                // 0x004C(0x0008) (Edit, Const)
	class USkillDefinition*                            Skill;                                                    // 0x0054(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_FireCustomSkillEvent");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_FireShot
// 0x00BC (0x004C - 0x0108)
class UBehavior_FireShot : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        WeaponOwnerContext;                                       // 0x004C(0x0010) (Edit, Const)
	int                                                NumProjectiles;                                           // 0x005C(0x0004) (Edit, Const)
	struct FRelativeDirectionData                      SpawnDirection;                                           // 0x0060(0x0020) (Edit, Const)
	struct FName                                       SpawnSocket;                                              // 0x0080(0x0008) (Edit, Const)
	struct FVector                                     SpawnDirectionVector;                                     // 0x0088(0x000C) (Edit)
	class UFiringModeDefinition*                       FiringModeDefinition;                                     // 0x0094(0x0004) (Edit, Const)
	TArray<struct FName>                               FireLocationSocketNames;                                  // 0x0098(0x000C) (Edit, Const, NeedCtorLink)
	unsigned char                                      FireSocketSelection;                                      // 0x00A4(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	float                                              TimeBetweenShots;                                         // 0x00A8(0x0004) (Edit, Const)
	struct FAttributeInitializationData                DamagePerSecondFormula;                                   // 0x00AC(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MomentumPerSecondFormula;                                 // 0x00BC(0x0010) (Edit, Const)
	struct FAttributeInitializationData                RadiusToDoDamageAroundImpact;                             // 0x00CC(0x0010) (Edit, Const)
	class UClass*                                      DamageSource;                                             // 0x00DC(0x0004) (Edit, Const)
	class UDamageTypeDefinition*                       DamageTypeDefinition;                                     // 0x00E0(0x0004) (Edit, Const)
	class UImpactDefinition*                           ImpactDefinition;                                         // 0x00E4(0x0004) (Edit, Const)
	struct FVector                                     BeamLocationOffset;                                       // 0x00E8(0x000C) (Edit)
	unsigned long                                      bTreatDirectionAsDestination : 1;                         // 0x00F4(0x0004) (Edit, Const)
	TArray<struct FName>                               FireLocationSocketsRemaining;                             // 0x00F8(0x000C) (Transient, NeedCtorLink)
	int                                                NumShotsFired;                                            // 0x0104(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_FireShot");
		return ptr;
	}


	void FireNextShot(const struct FBehaviorKernelInfo& KernelInfo, const FScriptInterface& FireInterface, const FScriptInterface& WorldBodyInterface, float DamageAmount, float DamageRadius, float Momentum);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ForceDownState
// 0x0000 (0x004C - 0x004C)
class UBehavior_ForceDownState : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ForceDownState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ForceInjured
// 0x0000 (0x004C - 0x004C)
class UBehavior_ForceInjured : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ForceInjured");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GetClosestPlayer
// 0x0004 (0x004C - 0x0050)
class UBehavior_GetClosestPlayer : public UBehaviorBase
{
public:
	unsigned long                                      bFriendlyToContext : 1;                                   // 0x004C(0x0004) (Edit)
	unsigned long                                      bEnemyToContext : 1;                                      // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GetClosestPlayer");
		return ptr;
	}


	void PublishBehaviorOutput(class UObject* Player, float Distance, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GetItemPrice
// 0x0008 (0x004C - 0x0054)
class UBehavior_GetItemPrice : public UBehaviorBase
{
public:
	class UObject*                                     Item;                                                     // 0x004C(0x0004) (Edit)
	float                                              Markup;                                                   // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GetItemPrice");
		return ptr;
	}


	void PublishBehaviorOutput(float Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GetPlayerStat
// 0x0008 (0x004C - 0x0054)
class UBehavior_GetPlayerStat : public UBehaviorBase
{
public:
	struct FName                                       StatId;                                                   // 0x004C(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GetPlayerStat");
		return ptr;
	}


	void PublishBehaviorOutput(int Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GetVelocity
// 0x0004 (0x004C - 0x0050)
class UBehavior_GetVelocity : public UBehaviorBase
{
public:
	unsigned long                                      bLocalSpace : 1;                                          // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GetVelocity");
		return ptr;
	}


	void PublishBehaviorOutput(const struct FVector& Velocity, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GFxMoviePlay
// 0x001C (0x004C - 0x0068)
class UBehavior_GFxMoviePlay : public UBehaviorBase
{
public:
	class UGFxMovieDefinition*                         MovieDefinition;                                          // 0x004C(0x0004) (Edit)
	struct FBehaviorContextData                        OtherContext;                                             // 0x0050(0x0010) (Edit, Const)
	struct FName                                       Tag;                                                      // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GFxMoviePlay");
		return ptr;
	}


	class AWillowPlayerController* ResolveController(class UObject* Obj);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GFxMovieSetState
// 0x0008 (0x004C - 0x0054)
class UBehavior_GFxMovieSetState : public UBehaviorBase
{
public:
	struct FName                                       StateToChange;                                            // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GFxMovieSetState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GFxMovieStop
// 0x0008 (0x004C - 0x0054)
class UBehavior_GFxMovieStop : public UBehaviorBase
{
public:
	struct FName                                       Tag;                                                      // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GFxMovieStop");
		return ptr;
	}


	class AWillowPlayerController* ResolveController(class UObject* Obj);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_GiveInjuredPlayerSecondWind
// 0x0004 (0x004C - 0x0050)
class UBehavior_GiveInjuredPlayerSecondWind : public UBehaviorBase
{
public:
	unsigned long                                      bDontCountAsKill : 1;                                     // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_GiveInjuredPlayerSecondWind");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_HasMissions
// 0x0000 (0x004C - 0x004C)
class UBehavior_HasMissions : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_HasMissions");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_HeadLookHold
// 0x0009 (0x004C - 0x0055)
class UBehavior_HeadLookHold : public UBehaviorBase
{
public:
	struct FName                                       Reason;                                                   // 0x004C(0x0008) (Edit)
	unsigned char                                      Action;                                                   // 0x0054(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_HeadLookHold");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_IncrementOverpowerLevel
// 0x0004 (0x004C - 0x0050)
class UBehavior_IncrementOverpowerLevel : public UBehaviorBase
{
public:
	int                                                NumLevelsToAward;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_IncrementOverpowerLevel");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_IncrementPlayerStat
// 0x0010 (0x004C - 0x005C)
class UBehavior_IncrementPlayerStat : public UBehaviorBase
{
public:
	struct FName                                       StatId;                                                   // 0x004C(0x0008) (Edit, Const)
	int                                                IncAmount;                                                // 0x0054(0x0004) (Edit, Const)
	unsigned long                                      bReplicateToServer : 1;                                   // 0x0058(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_IncrementPlayerStat");
		return ptr;
	}


	class AWillowPlayerController* ResolveController(class UObject* Obj);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_IsCensoredMode
// 0x0000 (0x004C - 0x004C)
class UBehavior_IsCensoredMode : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_IsCensoredMode");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_IsObjectPlayer
// 0x0004 (0x004C - 0x0050)
class UBehavior_IsObjectPlayer : public UBehaviorBase
{
public:
	class UObject*                                     PlayerCandidate;                                          // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_IsObjectPlayer");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_IsObjectVehicle
// 0x0004 (0x004C - 0x0050)
class UBehavior_IsObjectVehicle : public UBehaviorBase
{
public:
	class UObject*                                     VehicleCandidate;                                         // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_IsObjectVehicle");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_LeaderCommand
// 0x0006 (0x004C - 0x0052)
class UBehavior_LeaderCommand : public UBehaviorBase
{
public:
	unsigned long                                      bOverride : 1;                                            // 0x004C(0x0004) (Edit, Const)
	unsigned char                                      Type;                                                     // 0x0050(0x0001) (Edit, Const)
	unsigned char                                      Action;                                                   // 0x0051(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_LeaderCommand");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_LeapAtTarget
// 0x0000 (0x004C - 0x004C)
class UBehavior_LeapAtTarget : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_LeapAtTarget");
		return ptr;
	}

};


// Class WillowGame.Behavior_LocalCustomEvent
// 0x0008 (0x004C - 0x0054)
class UBehavior_LocalCustomEvent : public UBehaviorBase
{
public:
	struct FName                                       CustomEventName;                                          // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_LocalCustomEvent");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_MakeVector
// 0x000C (0x004C - 0x0058)
class UBehavior_MakeVector : public UBehaviorBase
{
public:
	float                                              X;                                                        // 0x004C(0x0004) (Edit)
	float                                              Y;                                                        // 0x0050(0x0004) (Edit)
	float                                              Z;                                                        // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_MakeVector");
		return ptr;
	}


	void PublishBehaviorOutput(const struct FVector& Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_MissionCustomEvent
// 0x000C (0x004C - 0x0058)
class UBehavior_MissionCustomEvent : public UBehaviorBase
{
public:
	class UMissionDefinition*                          RelatedMission;                                           // 0x004C(0x0004) (Edit)
	struct FName                                       EventName;                                                // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_MissionCustomEvent");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_NetworkRoleSwitch
// 0x0000 (0x004C - 0x004C)
class UBehavior_NetworkRoleSwitch : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_NetworkRoleSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_NotifyThoughtLockStatus
// 0x0008 (0x004C - 0x0054)
class UBehavior_NotifyThoughtLockStatus : public UBehaviorBase
{
public:
	unsigned long                                      bClearThoughtlock : 1;                                    // 0x004C(0x0004) (Edit, Const)
	class UObject*                                     InstigatingPlayer;                                        // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_NotifyThoughtLockStatus");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ObjectClassSwitch
// 0x0008 (0x004C - 0x0054)
class UBehavior_ObjectClassSwitch : public UBehaviorBase
{
public:
	struct FName                                       ObjectClassName;                                          // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ObjectClassSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_OpinionSwitch
// 0x0010 (0x004C - 0x005C)
class UBehavior_OpinionSwitch : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        Other;                                                    // 0x004C(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_OpinionSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_OverrideWeaponCrosshair
// 0x000C (0x004C - 0x0058)
class UBehavior_OverrideWeaponCrosshair : public UBehaviorBase
{
public:
	struct FString                                     CrosshairFrame;                                           // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_OverrideWeaponCrosshair");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PackAttack
// 0x0000 (0x004C - 0x004C)
class UBehavior_PackAttack : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PackAttack");
		return ptr;
	}

};


// Class WillowGame.Behavior_PawnLeap
// 0x003C (0x004C - 0x0088)
class UBehavior_PawnLeap : public UBehaviorBase
{
public:
	float                                              LeapSpeed;                                                // 0x004C(0x0004) (Edit)
	float                                              LeapAngle;                                                // 0x0050(0x0004) (Edit)
	struct FVector                                     OffsetLocation;                                           // 0x0054(0x000C) (Edit)
	unsigned long                                      bOffsetBasedOnRotation : 1;                               // 0x0060(0x0004) (Edit)
	unsigned long                                      bUseTrace : 1;                                            // 0x0060(0x0004) (Edit)
	float                                              TraceCheckRandomYaw;                                      // 0x0064(0x0004) (Edit)
	float                                              TraceCheckPitch;                                          // 0x0068(0x0004) (Edit)
	float                                              TraceCheckMaxDistance;                                    // 0x006C(0x0004) (Edit)
	struct FVector                                     TraceStartOffset;                                         // 0x0070(0x000C) (Edit)
	class AActor*                                      TargetObject;                                             // 0x007C(0x0004) (Edit, Transient)
	float                                              RandomYawOnTarget;                                        // 0x0080(0x0004) (Edit)
	class UWillowAnimDefinition*                       LeapAnimDef;                                              // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PawnLeap");
		return ptr;
	}


	struct FVector FindLandingLocation(class AWillowAIPawn* AIPawn);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PhaseLockHold
// 0x0009 (0x004C - 0x0055)
class UBehavior_PhaseLockHold : public UBehaviorBase
{
public:
	struct FName                                       Reason;                                                   // 0x004C(0x0008) (Edit)
	unsigned char                                      Action;                                                   // 0x0054(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PhaseLockHold");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PhysXLevel
// 0x0000 (0x004C - 0x004C)
class UBehavior_PhysXLevel : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PhysXLevel");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PlayAIMissionContextDialog
// 0x0010 (0x004C - 0x005C)
class UBehavior_PlayAIMissionContextDialog : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        PlayerWhoUsedMe;                                          // 0x004C(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PlayAIMissionContextDialog");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PlayAnimation
// 0x0008 (0x004C - 0x0054)
class UBehavior_PlayAnimation : public UBehaviorBase
{
public:
	struct FName                                       AnimName;                                                 // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PlayAnimation");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PlayHardFlinch
// 0x0010 (0x004C - 0x005C)
class UBehavior_PlayHardFlinch : public UBehaviorBase
{
public:
	struct FVector                                     HitLocation;                                              // 0x004C(0x000C) (Edit)
	class AController*                                 InstigatedBy;                                             // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PlayHardFlinch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PlayMultipleExplosionsSound
// 0x0020 (0x004C - 0x006C)
class UBehavior_PlayMultipleExplosionsSound : public UBehaviorBase
{
public:
	class UExplosionDefinition*                        Definition;                                               // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bReplicate : 1;                                           // 0x0050(0x0004) (Edit, Const)
	struct FBehaviorContextData                        OverrideContext;                                          // 0x0054(0x0010) (Edit, Const)
	struct FName                                       OverrideName;                                             // 0x0064(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PlayMultipleExplosionsSound");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PostAkEventGetRTPC
// 0x000C (0x005C - 0x0068)
class UBehavior_PostAkEventGetRTPC : public UBehavior_PostAkEvent
{
public:
	class UAkRtpc*                                     RTPC;                                                     // 0x005C(0x0004) (Edit)
	unsigned long                                      bIsRegistered : 1;                                        // 0x0060(0x0004) (Transient)
	float                                              LastValue;                                                // 0x0064(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PostAkEventGetRTPC");
		return ptr;
	}


	void PublishBehaviorOutput(float Result, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PostProcessChain
// 0x0020 (0x004C - 0x006C)
class UBehavior_PostProcessChain : public UBehaviorBase
{
public:
	TArray<struct FMaterialEffectModifier>             MaterialEffectModifiers;                                  // 0x004C(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      Action;                                                   // 0x0058(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	class UPostProcessChain*                           Chain;                                                    // 0x005C(0x0004) (Edit, Const)
	struct FDOFEffectModifierData                      DOFEffectModifier;                                        // 0x0060(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PostProcessChain");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PostProcessChain_LostShield
// 0x0014 (0x006C - 0x0080)
class UBehavior_PostProcessChain_LostShield : public UBehavior_PostProcessChain
{
public:
	struct FName                                       HealthParamName;                                          // 0x006C(0x0008) (Edit, Const)
	struct FName                                       MaterialEffectName;                                       // 0x0074(0x0008) (Edit, Const)
	float                                              UpdateRate;                                               // 0x007C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PostProcessChain_LostShield");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PostProcessOverlay
// 0x010C (0x004C - 0x0158)
class UBehavior_PostProcessOverlay : public UBehaviorBase
{
public:
	struct FPostProcessOverlay                         OverlayParameters;                                        // 0x004C(0x010C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PostProcessOverlay");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_PursueNodeType
// 0x0008 (0x004C - 0x0054)
class UBehavior_PursueNodeType : public UBehaviorBase
{
public:
	struct FName                                       NodeType;                                                 // 0x004C(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_PursueNodeType");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.IPursuitBehavior
// 0x0000 (0x003C - 0x003C)
class UIPursuitBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IPursuitBehavior");
		return ptr;
	}


	void Behavior_SetPreferredNodeType(const struct FName& NodeType);
};


// Class WillowGame.Behavior_QueryDayNightCycle
// 0x0000 (0x004C - 0x004C)
class UBehavior_QueryDayNightCycle : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_QueryDayNightCycle");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_QueuePersonalEcho
// 0x0008 (0x004C - 0x0054)
class UBehavior_QueuePersonalEcho : public UBehaviorBase
{
public:
	class UWillowDialogEventTag*                       PersonalEchoTag;                                          // 0x004C(0x0004) (Edit, Const)
	class UGearboxDialogGroup*                         DialogGroup;                                              // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_QueuePersonalEcho");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RadarIcon
// 0x0008 (0x004C - 0x0054)
class UBehavior_RadarIcon : public UBehaviorBase
{
public:
	unsigned char                                      IconType;                                                 // 0x004C(0x0001) (Edit)
	unsigned char                                      Action;                                                   // 0x004D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              OverrideDuration;                                         // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RadarIcon");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ReCalculateResourcePoolValues
// 0x0004 (0x004C - 0x0050)
class UBehavior_ReCalculateResourcePoolValues : public UBehaviorBase
{
public:
	class UResourceDefinition*                         Resource;                                                 // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ReCalculateResourcePoolValues");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RefillResourcePool
// 0x0038 (0x004C - 0x0084)
class UBehavior_RefillResourcePool : public UBehaviorBase
{
public:
	class UResourceDefinition*                         Resource;                                                 // 0x004C(0x0004) (Edit, Const)
	struct FAttributeInitializationData                Percentage;                                               // 0x0050(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MaxPercentage;                                            // 0x0060(0x0010) (Edit, Const)
	unsigned long                                      bCreatePoolIfNecessary : 1;                               // 0x0070(0x0004) (Edit, Const)
	struct FBehaviorContextData                        PercentageContext;                                        // 0x0074(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RefillResourcePool");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RefillWeapon
// 0x0000 (0x004C - 0x004C)
class UBehavior_RefillWeapon : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RefillWeapon");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RegisterFastTravelDefinition
// 0x0008 (0x004C - 0x0054)
class UBehavior_RegisterFastTravelDefinition : public UBehaviorBase
{
public:
	class UFastTravelStationDefinition*                StationToRegister;                                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bSetAsLastVisited : 1;                                    // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RegisterFastTravelDefinition");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RegisterTargetable
// 0x0004 (0x004C - 0x0050)
class UBehavior_RegisterTargetable : public UBehaviorBase
{
public:
	unsigned long                                      bUnregister : 1;                                          // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RegisterTargetable");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ReloadComplete
// 0x0000 (0x004C - 0x004C)
class UBehavior_ReloadComplete : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ReloadComplete");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RemoveInstanceData
// 0x000C (0x004C - 0x0058)
class UBehavior_RemoveInstanceData : public UBehaviorBase
{
public:
	TArray<struct UBehavior_RemoveInstanceData_FRemoveObject> InstanceData;                                             // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RemoveInstanceData");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RemoveInventoryFromStorage
// 0x008A (0x004C - 0x00D6)
class UBehavior_RemoveInventoryFromStorage : public UBehaviorBase
{
public:
	struct FItemDefinitionData                         ItemDef;                                                  // 0x004C(0x0044) (Edit, Const)
	struct FWeaponDefinitionData                       WeaponDef;                                                // 0x0090(0x0044) (Edit, Const)
	unsigned char                                      InvType;                                                  // 0x00D4(0x0001) (Edit, Const)
	unsigned char                                      Source;                                                   // 0x00D5(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RemoveInventoryFromStorage");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ResetActionSkillCooldown
// 0x0000 (0x004C - 0x004C)
class UBehavior_ResetActionSkillCooldown : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ResetActionSkillCooldown");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ResetHitRegionHealth
// 0x0004 (0x004C - 0x0050)
class UBehavior_ResetHitRegionHealth : public UBehaviorBase
{
public:
	class UBodyHitRegionDefinition*                    HitRegion;                                                // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ResetHitRegionHealth");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ReviveInjuredPlayer
// 0x0010 (0x004C - 0x005C)
class UBehavior_ReviveInjuredPlayer : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        ReviverContext;                                           // 0x004C(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ReviveInjuredPlayer");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RotatePawn
// 0x0028 (0x004C - 0x0074)
class UBehavior_RotatePawn : public UBehaviorBase
{
public:
	struct FRelativeDirectionData                      RotateDirection;                                          // 0x004C(0x0020) (Edit, Const)
	unsigned long                                      bYawOnly : 1;                                             // 0x006C(0x0004) (Edit, Const)
	float                                              Time;                                                     // 0x0070(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RotatePawn");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_RuleEvent
// 0x0000 (0x004C - 0x004C)
class UBehavior_RuleEvent : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RuleEvent");
		return ptr;
	}

};


// Class WillowGame.Behavior_RunBehaviorAlias
// 0x0034 (0x004C - 0x0080)
class UBehavior_RunBehaviorAlias : public UBehaviorBase
{
public:
	class UBehaviorAliasDefinition*                    BehaviorAlias;                                            // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        AliasSelfContext;                                         // 0x0050(0x0010) (Edit, Const)
	struct FBehaviorContextData                        AliasMyInstigatorContext;                                 // 0x0060(0x0010) (Edit, Const)
	struct FBehaviorContextData                        AliasOtherEventParticipantContext;                        // 0x0070(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_RunBehaviorAlias");
		return ptr;
	}

};


// Class WillowGame.BehaviorAliasDefinition
// 0x000C (0x003C - 0x0048)
class UBehaviorAliasDefinition : public UGBXDefinition
{
public:
	TArray<class UBehaviorBase*>                       FallbackBehaviors;                                        // 0x003C(0x000C) (Edit, Const, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BehaviorAliasDefinition");
		return ptr;
	}

};


// Class WillowGame.Behavior_SelectPhaselockTarget
// 0x0010 (0x004C - 0x005C)
class UBehavior_SelectPhaselockTarget : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        LifterSkillContext;                                       // 0x004C(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SelectPhaselockTarget");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SendMessageToPlayers
// 0x0008 (0x004C - 0x0054)
class UBehavior_SendMessageToPlayers : public UBehaviorBase
{
public:
	unsigned long                                      bShouldSendToInstigator : 1;                              // 0x004C(0x0004) (Edit)
	class UClass*                                      SendMsgClass;                                             // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SendMessageToPlayers");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetAIFlag
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetAIFlag : public UBehaviorBase
{
public:
	class UFlagDefinition*                             FlagDef;                                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      FlagValue : 1;                                            // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetAIFlag");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetAkRTPCValue
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetAkRTPCValue : public UBehaviorBase
{
public:
	class UAkRtpc*                                     RTPC;                                                     // 0x004C(0x0004) (Edit, Const)
	float                                              Value;                                                    // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetAkRTPCValue");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetAlternateVertexWeight
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetAlternateVertexWeight : public UBehaviorBase
{
public:
	struct FName                                       BoneName;                                                 // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetAlternateVertexWeight");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetAnemoneInfectionState
// 0x000C (0x004C - 0x0058)
class UBehavior_SetAnemoneInfectionState : public UBehaviorBase
{
public:
	unsigned long                                      bIsInfected : 1;                                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bIsLargeZone : 1;                                         // 0x004C(0x0004) (Edit)
	class AHeightFog*                                  HeightFog;                                                // 0x0050(0x0004) (Edit)
	class UAnemoneInfectionDefinition*                 InfectionDefinition;                                      // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetAnemoneInfectionState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetAnimSwitchNode
// 0x0010 (0x004C - 0x005C)
class UBehavior_SetAnimSwitchNode : public UBehaviorBase
{
public:
	struct FName                                       AnimNodeName;                                             // 0x004C(0x0008) (Edit, Const)
	struct FName                                       Switch;                                                   // 0x0054(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetAnimSwitchNode");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetAnimTree
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetAnimTree : public UBehaviorBase
{
public:
	class UAnimTree*                                   AnimTreeTemplate;                                         // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetAnimTree");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetBeingHealed
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetBeingHealed : public UBehaviorBase
{
public:
	unsigned long                                      bBeingHealed : 1;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetBeingHealed");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetChallengeCompleted
// 0x000C (0x004C - 0x0058)
class UBehavior_SetChallengeCompleted : public UBehaviorBase
{
public:
	class UObject*                                     UnlockForPlayer;                                          // 0x004C(0x0004) (Edit)
	class UChallengeDefinition*                        ChallengeDef;                                             // 0x0050(0x0004) (Edit)
	unsigned long                                      bForAllPlayers : 1;                                       // 0x0054(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetChallengeCompleted");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetCleanupParameters
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetCleanupParameters : public UBehaviorBase
{
public:
	float                                              MaxLifetime;                                              // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetCleanupParameters");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetCompassIcon
// 0x0001 (0x004C - 0x004D)
class UBehavior_SetCompassIcon : public UBehaviorBase
{
public:
	unsigned char                                      CompassIcon;                                              // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetCompassIcon");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetDeathDefinition
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetDeathDefinition : public UBehaviorBase
{
public:
	class UBodyClassDeathDefinition*                   NewDeathDefinition;                                       // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetDeathDefinition");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetDemigodMode
// 0x0001 (0x004C - 0x004D)
class UBehavior_SetDemigodMode : public UBehaviorBase
{
public:
	unsigned char                                      Status;                                                   // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetDemigodMode");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetDiscardRootMotion
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetDiscardRootMotion : public UBehaviorBase
{
public:
	unsigned long                                      bDiscardRootMotion : 1;                                   // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetDiscardRootMotion");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetDualWieldBlendState
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetDualWieldBlendState : public UBehaviorBase
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x004C(0x0004) (Edit)
	unsigned long                                      bApplyToFirstPerson : 1;                                  // 0x004C(0x0004) (Edit)
	unsigned long                                      bApplyToThirdPerson : 1;                                  // 0x004C(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetDualWieldBlendState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetElevatorButtonGlowing
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetElevatorButtonGlowing : public UBehaviorBase
{
public:
	unsigned long                                      bEnableGlow : 1;                                          // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetElevatorButtonGlowing");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetExtraImpactEffect
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetExtraImpactEffect : public UBehaviorBase
{
public:
	unsigned char                                      BulletFromClip;                                           // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	class UWillowImpactDefinition*                     ImpactDefinition;                                         // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetExtraImpactEffect");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetExtraMuzzleEffect
// 0x000C (0x004C - 0x0058)
class UBehavior_SetExtraMuzzleEffect : public UBehaviorBase
{
public:
	unsigned char                                      BulletFromClip;                                           // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FExtraMuzzleEffect                          Effect;                                                   // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetExtraMuzzleEffect");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetGodMode
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetGodMode : public UBehaviorBase
{
public:
	unsigned long                                      bNonCheatGodMode : 1;                                     // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetGodMode");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetHardAttach
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetHardAttach : public UBehaviorBase
{
public:
	unsigned long                                      bHardAttach : 1;                                          // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetHardAttach");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetInfoBarVisibility
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetInfoBarVisibility : public UBehaviorBase
{
public:
	unsigned long                                      bVisible : 1;                                             // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetInfoBarVisibility");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetJackVoiceModulatorState
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetJackVoiceModulatorState : public UBehaviorBase
{
public:
	unsigned long                                      bEnable : 1;                                              // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetJackVoiceModulatorState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetLookAtSpeed
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetLookAtSpeed : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                                   // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              OverrideSpeed;                                            // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetLookAtSpeed");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetMaterialScalarFade
// 0x0038 (0x004C - 0x0084)
class UBehavior_SetMaterialScalarFade : public UBehaviorBase
{
public:
	struct FName                                       ScalarName;                                               // 0x004C(0x0008) (Edit)
	struct FAttributeInitializationData                StartValue;                                               // 0x0054(0x0010) (Edit)
	struct FAttributeInitializationData                EndValue;                                                 // 0x0064(0x0010) (Edit)
	struct FAttributeInitializationData                FadeTime;                                                 // 0x0074(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetMaterialScalarFade");
		return ptr;
	}


	void StartFade(const FScriptInterface& ContextInterface, float CalcStartValue, float CalcEndValue, float CalcFadeTime);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetMaterialScalarFadeForGoreDeath
// 0x0004 (0x0084 - 0x0088)
class UBehavior_SetMaterialScalarFadeForGoreDeath : public UBehavior_SetMaterialScalarFade
{
public:
	unsigned long                                      bDestroyActorAfterGoreEffect : 1;                         // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetMaterialScalarFadeForGoreDeath");
		return ptr;
	}


	void StartFade(const FScriptInterface& ContextInterface, float CalcStartValue, float CalcEndValue, float CalcFadeTime);
};


// Class WillowGame.Behavior_SetMorphNodeWeight
// 0x0010 (0x004C - 0x005C)
class UBehavior_SetMorphNodeWeight : public UBehaviorBase
{
public:
	struct FName                                       MorphNodeName;                                            // 0x004C(0x0008) (Edit)
	float                                              WeightTarget;                                             // 0x0054(0x0004) (Edit)
	float                                              WeightBlendTime;                                          // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetMorphNodeWeight");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetNumBankSlots
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetNumBankSlots : public UBehaviorBase
{
public:
	int                                                NewBankSlotCount;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetNumBankSlots");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetPawnThrottleData
// 0x001C (0x004C - 0x0068)
class UBehavior_SetPawnThrottleData : public UBehaviorBase
{
public:
	float                                              FullThrottleDistance;                                     // 0x004C(0x0004) (Edit, Const)
	float                                              FullThrottleTime;                                         // 0x0050(0x0004) (Edit, Const)
	float                                              MinThrottleDistance;                                      // 0x0054(0x0004) (Edit, Const)
	float                                              MaxThrottleDistance;                                      // 0x0058(0x0004) (Edit, Const)
	float                                              MinThrottleTime;                                          // 0x005C(0x0004) (Edit, Const)
	float                                              MaxThrottleTime;                                          // 0x0060(0x0004) (Edit, Const)
	unsigned long                                      bSkipWhileIdle : 1;                                       // 0x0064(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetPawnThrottleData");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetRuleSet
// 0x0000 (0x004C - 0x004C)
class UBehavior_SetRuleSet : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetRuleSet");
		return ptr;
	}

};


// Class WillowGame.Behavior_SetRuleSetByName
// 0x0000 (0x004C - 0x004C)
class UBehavior_SetRuleSetByName : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetRuleSetByName");
		return ptr;
	}

};


// Class WillowGame.Behavior_SetShieldColor
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetShieldColor : public UBehaviorBase
{
public:
	unsigned long                                      bResetShieldToDefaultColor : 1;                           // 0x004C(0x0004) (Edit, Const)
	struct FColor                                      NewShieldColor;                                           // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetShieldColor");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetSkelControlLookAtActor
// 0x0024 (0x004C - 0x0070)
class UBehavior_SetSkelControlLookAtActor : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                                          // 0x004C(0x0008) (Edit, Const)
	struct FBehaviorContextData                        TargetContext;                                            // 0x0054(0x0010) (Edit, Const)
	struct FVector                                     Offset;                                                   // 0x0064(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetSkelControlLookAtActor");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetSkelControlSingleBoneData
// 0x0020 (0x004C - 0x006C)
class UBehavior_SetSkelControlSingleBoneData : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                                          // 0x004C(0x0008) (Edit, Const)
	struct FVector                                     BoneTranslation;                                          // 0x0054(0x000C) (Edit, Const)
	struct FRotator                                    BoneRotation;                                             // 0x0060(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetSkelControlSingleBoneData");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetSkelControlTurretConstrainedValues
// 0x0030 (0x004C - 0x007C)
class UBehavior_SetSkelControlTurretConstrainedValues : public UBehaviorBase
{
public:
	struct FName                                       SkelControlName;                                          // 0x004C(0x0008) (Edit, Const)
	unsigned long                                      bConstrainPitch : 1;                                      // 0x0054(0x0004) (Edit)
	unsigned long                                      bConstrainYaw : 1;                                        // 0x0054(0x0004) (Edit)
	unsigned long                                      bConstrainRoll : 1;                                       // 0x0054(0x0004) (Edit)
	unsigned long                                      bInvertPitch : 1;                                         // 0x0054(0x0004) (Edit)
	unsigned long                                      bInvertYaw : 1;                                           // 0x0054(0x0004) (Edit)
	unsigned long                                      bInvertRoll : 1;                                          // 0x0054(0x0004) (Edit)
	struct FTurretConstraintData                       MaxAngle;                                                 // 0x0058(0x000C) (Edit)
	struct FTurretConstraintData                       MinAngle;                                                 // 0x0064(0x000C) (Edit)
	float                                              LagDegreesPerSecondYaw;                                   // 0x0070(0x0004) (Edit)
	float                                              LagDegreesPerSecondPitch;                                 // 0x0074(0x0004) (Edit)
	float                                              LagDegreesPerSecondRoll;                                  // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetSkelControlTurretConstrainedValues");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetSkillDefinitionForInjuredStrings
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetSkillDefinitionForInjuredStrings : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillDef;                                                 // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetSkillDefinitionForInjuredStrings");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetStance
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetStance : public UBehaviorBase
{
public:
	unsigned char                                      SetType;                                                  // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	class UStanceTypeDefinition*                       StanceType;                                               // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetStance");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetTimeOfDay
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetTimeOfDay : public UBehaviorBase
{
public:
	float                                              TimeOfDay;                                                // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetTimeOfDay");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetUsabilityByMissionDirectives
// 0x0001 (0x004C - 0x004D)
class UBehavior_SetUsabilityByMissionDirectives : public UBehaviorBase
{
public:
	unsigned char                                      ChangeUsability;                                          // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetUsabilityByMissionDirectives");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetUsabilityCost
// 0x0008 (0x004C - 0x0054)
class UBehavior_SetUsabilityCost : public UBehaviorBase
{
public:
	unsigned char                                      ChangeCost;                                               // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      CostCurrencyType;                                         // 0x004D(0x0001) (Edit, Const)
	unsigned char                                      UsabilityType;                                            // 0x004E(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	int                                                CostAmount;                                               // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetUsabilityCost");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetUsableIcon
// 0x0005 (0x004C - 0x0051)
class UBehavior_SetUsableIcon : public UBehaviorBase
{
public:
	class UInteractionIconDefinition*                  Icon;                                                     // 0x004C(0x0004) (Edit)
	unsigned char                                      UsabilityType;                                            // 0x0050(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetUsableIcon");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SetVehicleSimObject
// 0x0004 (0x004C - 0x0050)
class UBehavior_SetVehicleSimObject : public UBehaviorBase
{
public:
	class USVehicleSimBase*                            SimObjTemplate;                                           // 0x004C(0x0004) (Edit, Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SetVehicleSimObject");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ShowGenericReviveMessage
// 0x0014 (0x004C - 0x0060)
class UBehavior_ShowGenericReviveMessage : public UBehaviorBase
{
public:
	class UGenericReviveMessageDefinition*             ReviveMessageDef;                                         // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        OtherPlayer;                                              // 0x0050(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ShowGenericReviveMessage");
		return ptr;
	}


	class AWillowPlayerController* ResolveController(class UObject* Obj);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ShowMissionInterface
// 0x0000 (0x004C - 0x004C)
class UBehavior_ShowMissionInterface : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ShowMissionInterface");
		return ptr;
	}


	class AWillowPlayerController* ResolveController(class UObject* Obj);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ShowPullThePinNotification
// 0x0004 (0x004C - 0x0050)
class UBehavior_ShowPullThePinNotification : public UBehaviorBase
{
public:
	class USwfMovie*                                   ExternalClip;                                             // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ShowPullThePinNotification");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
	class AWillowPlayerController* ResolveController(class UObject* Obj);
};


// Class WillowGame.Behavior_ShowSelfAsTarget
// 0x0004 (0x004C - 0x0050)
class UBehavior_ShowSelfAsTarget : public UBehaviorBase
{
public:
	unsigned long                                      ControllersOnly : 1;                                      // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ShowSelfAsTarget");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SimpleAnimPlay
// 0x000C (0x004C - 0x0058)
class UBehavior_SimpleAnimPlay : public UBehaviorBase
{
public:
	class UWillowAnimTree*                             Tree;                                                     // 0x004C(0x0004) (Edit)
	struct FName                                       AnimName;                                                 // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SimpleAnimPlay");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SimpleAnimStop
// 0x000C (0x004C - 0x0058)
class UBehavior_SimpleAnimStop : public UBehaviorBase
{
public:
	class UWillowAnimTree*                             Tree;                                                     // 0x004C(0x0004) (Edit)
	struct FName                                       AnimName;                                                 // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SimpleAnimStop");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SkillCustomEvent
// 0x000C (0x004C - 0x0058)
class UBehavior_SkillCustomEvent : public UBehaviorBase
{
public:
	struct FName                                       EventName;                                                // 0x004C(0x0008) (Edit, Const)
	class USkillDefinition*                            SkillDef;                                                 // 0x0054(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SkillCustomEvent");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnActor
// 0x0041 (0x004C - 0x008D)
class UBehavior_SpawnActor : public UBehaviorBase
{
public:
	unsigned long                                      bSaveReference : 1;                                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bDeleteByOwner : 1;                                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAttachToContext : 1;                                     // 0x004C(0x0004) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x0050(0x0008) (Edit, Const)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0058(0x0010) (Edit, Const)
	class AActor*                                      ActorTemplate;                                            // 0x0068(0x0004) (Edit, Const)
	struct FName                                       AttachmentPointName;                                      // 0x006C(0x0008) (Edit, Const)
	struct FVector                                     RelativeLocation;                                         // 0x0074(0x000C) (Edit, Const)
	struct FRotator                                    RelativeRotation;                                         // 0x0080(0x000C) (Edit, Const)
	unsigned char                                      SpawnDirection;                                           // 0x008C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnActor");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnDecal
// 0x0030 (0x004C - 0x007C)
class UBehavior_SpawnDecal : public UBehaviorBase
{
public:
	class UDecalMaterial*                              Material;                                                 // 0x004C(0x0004) (Edit, Const)
	struct FName                                       BoneName;                                                 // 0x0050(0x0008) (Edit, Const)
	unsigned char                                      AlignToAxis;                                              // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              Size;                                                     // 0x005C(0x0004) (Edit, Const)
	struct FRotator                                    SpawnRotation;                                            // 0x0060(0x000C) (Edit, Const)
	struct FVector                                     SpawnLocation;                                            // 0x006C(0x000C) (Edit, Const)
	float                                              Thickness;                                                // 0x0078(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnDecal");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnFromVehicleSpawnStation
// 0x0000 (0x004C - 0x004C)
class UBehavior_SpawnFromVehicleSpawnStation : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnFromVehicleSpawnStation");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnItems
// 0x006C (0x004C - 0x00B8)
class UBehavior_SpawnItems : public UBehaviorBase
{
public:
	struct FVector                                     ItemDropOffset;                                           // 0x004C(0x000C) (Edit, Const)
	struct FVector                                     ItemDropVelocity;                                         // 0x0058(0x000C) (Edit, Const)
	struct FVector                                     ItemScatterOffset;                                        // 0x0064(0x000C) (Edit, Const)
	int                                                ExpLevel;                                                 // 0x0070(0x0004) (Edit)
	struct FName                                       InstanceDataName;                                         // 0x0074(0x0008) (Edit)
	unsigned long                                      bDisablePickups : 1;                                      // 0x007C(0x0004) (Edit)
	unsigned long                                      bCircularScatter : 1;                                     // 0x007C(0x0004) (Edit)
	unsigned long                                      bTorque : 1;                                              // 0x007C(0x0004) (Const)
	unsigned long                                      bSavePickup : 1;                                          // 0x007C(0x0004) (Edit, Const)
	TArray<struct FItemPoolInfo>                       ItemPoolList;                                             // 0x0080(0x000C) (Edit, Const, NeedCtorLink)
	TArray<class UItemPoolListDefinition*>             ItemPoolIncludedLists;                                    // 0x008C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FName>                               AttachmentPointNames;                                     // 0x0098(0x000C) (Edit, Const, NeedCtorLink)
	struct FVector                                     Torque;                                                   // 0x00A4(0x000C) (Edit, Const)
	struct FName                                       ItemSpawnSocket;                                          // 0x00B0(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnItems");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnLoot
// 0x001C (0x004C - 0x0068)
class UBehavior_SpawnLoot : public UBehaviorBase
{
public:
	TArray<class UItemPoolDefinition*>                 ItemPools;                                                // 0x004C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bIncludeLootFromLootableContext : 1;                      // 0x0058(0x0004) (Edit)
	unsigned long                                      bTorque : 1;                                              // 0x0058(0x0004) (Const)
	struct FVector                                     Torque;                                                   // 0x005C(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnLoot");
		return ptr;
	}


	bool GetOrientationFromContextObject(class UObject* ContextObject, struct FRotator* Orientation);
	bool GetLocationFromContextObject(class UObject* ContextObject, struct FVector* Location);
	void PlaceSpawnedItems(TArray<struct FSpawnedDroppedLootData> SpawnedLoot, class UObject* ContextObject);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnLootAroundPoint
// 0x002D (0x0068 - 0x0095)
class UBehavior_SpawnLootAroundPoint : public UBehavior_SpawnLoot
{
public:
	struct FAttachmentLocationData                     CustomLocation;                                           // 0x0068(0x001C) (Edit)
	float                                              CircularScatterRadius;                                    // 0x0084(0x0004) (Edit)
	struct FVector                                     SpawnVelocity;                                            // 0x0088(0x000C) (Edit)
	unsigned char                                      SpawnVelocityRelativeTo;                                  // 0x0094(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnLootAroundPoint");
		return ptr;
	}


	bool ScatterItem(const struct FVector& CenterPoint, const struct FRotator& CustomLocationOrientation, const struct FRotator& ContextActorOrientation, struct FSpawnedDroppedLootData* Loot);
	void PlaceSpawnedItems(TArray<struct FSpawnedDroppedLootData> SpawnedLoot, class UObject* ContextObject);
};


// Class WillowGame.Behavior_SpawnLootAtPoints
// 0x0024 (0x0068 - 0x008C)
class UBehavior_SpawnLootAtPoints : public UBehavior_SpawnLoot
{
public:
	TArray<struct FAttachmentLocationData>             SpawnPoints;                                              // 0x0068(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bAttachToSpawnPoints : 1;                                 // 0x0074(0x0004) (Edit)
	unsigned long                                      bDisablePickups : 1;                                      // 0x0074(0x0004) (Edit)
	struct FVector                                     SpawnVelocity;                                            // 0x0078(0x000C) (Edit)
	unsigned char                                      SpawnVelocityRelativeTo;                                  // 0x0084(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	int                                                NextSpawnPointIndex;                                      // 0x0088(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnLootAtPoints");
		return ptr;
	}


	int GetNextSpawnPointIndex();
	bool DropItemFromSpawnPoint(class UObject* ContextObject, struct FSpawnedDroppedLootData* Loot);
	bool AttachItemToSpawnPoint(struct FSpawnedDroppedLootData* Loot);
	void PlaceSpawnedItems(TArray<struct FSpawnedDroppedLootData> SpawnedLoot, class UObject* ContextObject);
};


// Class WillowGame.Behavior_SpawnParticleSystemAtWorldLocation
// 0x003C (0x004C - 0x0088)
class UBehavior_SpawnParticleSystemAtWorldLocation : public UBehaviorBase
{
public:
	unsigned long                                      bSaveParticleReference : 1;                               // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bUseClientPrediction : 1;                                 // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bDeleteByOwner : 1;                                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bReplicateEmitter : 1;                                    // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bHideEffectFromOwner : 1;                                 // 0x004C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0050(0x0010) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x0060(0x0008) (Edit, Const)
	class UParticleSystem*                             ParticleEffect;                                           // 0x0068(0x0004) (Edit, Const)
	struct FVector                                     Location;                                                 // 0x006C(0x000C) (Edit, Const)
	struct FVector                                     Direction;                                                // 0x0078(0x000C) (Edit, Const)
	float                                              DrawScale;                                                // 0x0084(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnParticleSystemAtWorldLocation");
		return ptr;
	}


	void PublishBehaviorOutput(class AEmitter* SpawnedEmitter, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
	class UClass* GetEmitterClass();
};


// Class WillowGame.Behavior_SpawnPerch
// 0x0018 (0x004C - 0x0064)
class UBehavior_SpawnPerch : public UBehaviorBase
{
public:
	struct FName                                       AttachPoint;                                              // 0x004C(0x0008) (Edit, Const)
	class UPerchDefinition*                            PerchDef;                                                 // 0x0054(0x0004) (Edit, Const)
	float                                              PerchLifetime;                                            // 0x0058(0x0004) (Edit, Const)
	float                                              UseRadius;                                                // 0x005C(0x0004) (Edit, Const)
	float                                              UseHeight;                                                // 0x0060(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnPerch");
		return ptr;
	}


	void PublishBehaviorOutput(class AActor* SpawnedPerch, struct FBehaviorKernelInfo* KernelInfo);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Perch_Dynamic
// 0x0000 (0x0254 - 0x0254)
class APerch_Dynamic : public APerch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Perch_Dynamic");
		return ptr;
	}

};


// Class WillowGame.WillowLocalOnlyProjectile
// 0x0000 (0x04A0 - 0x04A0)
class AWillowLocalOnlyProjectile : public AWillowProjectile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowLocalOnlyProjectile");
		return ptr;
	}

};


// Class WillowGame.Behavior_SpawnProjectileFromImpact
// 0x004C (0x004C - 0x0098)
class UBehavior_SpawnProjectileFromImpact : public UBehaviorBase
{
public:
	struct FBehaviorContextData                        OwnerContext;                                             // 0x004C(0x0010) (Edit, Const)
	unsigned long                                      bSetOwnerFromOwnerContext : 1;                            // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSaveProjectileReference : 1;                             // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bSetLikenessFromContext : 1;                              // 0x005C(0x0004) (Edit, Const)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0060(0x0010) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x0070(0x0008) (Edit, Const)
	class UProjectileDefinition*                       ProjectileDefinition;                                     // 0x0078(0x0004) (Edit, Const)
	TArray<struct UBehavior_SpawnProjectileFromImpact_FProjectileBehaviorSequenceStateData> SetProjectileSequenceState;                               // 0x007C(0x000C) (Edit, Const, NeedCtorLink)
	struct FBehaviorContextData                        GearLikenessContext;                                      // 0x0088(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnProjectileFromImpact");
		return ptr;
	}


	void AttachProjectileToBase(class AWillowProjectile* SpawnedProjectile, const FScriptInterface& WorldBodyInterface, struct FImpactInfo* ImpactData);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_SpawnTemporalField
// 0x003C (0x004C - 0x0088)
class UBehavior_SpawnTemporalField : public UBehaviorBase
{
public:
	class ATemporalField*                              TemporalField;                                            // 0x004C(0x0004) (Edit, Const)
	float                                              LifeSpan;                                                 // 0x0050(0x0004) (Edit, Const)
	struct FBehaviorContextData                        LocationContext;                                          // 0x0054(0x0010) (Edit, Const)
	struct FName                                       AttachmentPointName;                                      // 0x0064(0x0008) (Edit, Const)
	unsigned long                                      bAttachToContext : 1;                                     // 0x006C(0x0004) (Edit, Const)
	struct FVector                                     RelativeLocation;                                         // 0x0070(0x000C) (Edit, Const)
	struct FRotator                                    RelativeRotation;                                         // 0x007C(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_SpawnTemporalField");
		return ptr;
	}


	struct FVector GetAttachmentLocation(const FScriptInterface& WorldBodyInterface);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_StartDeathRagdoll
// 0x0004 (0x004C - 0x0050)
class UBehavior_StartDeathRagdoll : public UBehaviorBase
{
public:
	unsigned long                                      bAnimationDriven : 1;                                     // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bEnableContactNotification : 1;                           // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_StartDeathRagdoll");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_StatusEffectSwitch
// 0x0001 (0x004C - 0x004D)
class UBehavior_StatusEffectSwitch : public UBehaviorBase
{
public:
	unsigned char                                      StatusEffectType;                                         // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_StatusEffectSwitch");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_StopMeleeAttack
// 0x0000 (0x004C - 0x004C)
class UBehavior_StopMeleeAttack : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_StopMeleeAttack");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ToggleNPCAlly
// 0x0004 (0x004C - 0x0050)
class UBehavior_ToggleNPCAlly : public UBehaviorBase
{
public:
	unsigned long                                      bEnable : 1;                                              // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ToggleNPCAlly");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ToggleObstacle
// 0x0001 (0x004C - 0x004D)
class UBehavior_ToggleObstacle : public UBehaviorBase
{
public:
	unsigned char                                      Option;                                                   // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ToggleObstacle");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_ToggleTelescopeOverlay
// 0x0004 (0x004C - 0x0050)
class UBehavior_ToggleTelescopeOverlay : public UBehaviorBase
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_ToggleTelescopeOverlay");
		return ptr;
	}


	class AWillowPlayerController* ResolveController(class UObject* Obj);
	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_Transform
// 0x0001 (0x004C - 0x004D)
class UBehavior_Transform : public UBehaviorBase
{
public:
	unsigned char                                      Transform;                                                // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_Transform");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UnlockAvatarAward
// 0x0001 (0x004C - 0x004D)
class UBehavior_UnlockAvatarAward : public UBehaviorBase
{
public:
	unsigned char                                      AvatarAward;                                              // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UnlockAvatarAward");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UnlockAvatarAwardForAllPlayers
// 0x0001 (0x004C - 0x004D)
class UBehavior_UnlockAvatarAwardForAllPlayers : public UBehaviorBase
{
public:
	unsigned char                                      AvatarAward;                                              // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UnlockAvatarAwardForAllPlayers");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UnlockCustomization
// 0x0008 (0x004C - 0x0054)
class UBehavior_UnlockCustomization : public UBehaviorBase
{
public:
	class UCustomizationDefinition*                    DefinitionToUnlock;                                       // 0x004C(0x0004) (Edit)
	unsigned long                                      bLockBehavior : 1;                                        // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UnlockCustomization");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UnlockCustomizationFromRewardPool
// 0x0004 (0x004C - 0x0050)
class UBehavior_UnlockCustomizationFromRewardPool : public UBehaviorBase
{
public:
	class UKeyedItemPoolDefinition*                    RewardItemPool;                                           // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UnlockCustomizationFromRewardPool");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UpgradeSkill
// 0x0024 (0x004C - 0x0070)
class UBehavior_UpgradeSkill : public UBehaviorBase
{
public:
	class USkillDefinition*                            SkillToUpgrade;                                           // 0x004C(0x0004) (Edit, Const)
	struct FAttributeInitializationData                NumberOfLevelsToRaise;                                    // 0x0050(0x0010) (Edit, Const)
	struct FAttributeInitializationData                MaximumLevelToRaiseSkill;                                 // 0x0060(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UpgradeSkill");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_UseObject
// 0x0008 (0x004C - 0x0054)
class UBehavior_UseObject : public UBehaviorBase
{
public:
	unsigned char                                      UseType;                                                  // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	class UObject*                                     User;                                                     // 0x0050(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_UseObject");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_VoGScreenParticle
// 0x0008 (0x00C0 - 0x00C8)
class UBehavior_VoGScreenParticle : public UBehavior_ScreenParticle
{
public:
	struct FName                                       TextureMovieParamName;                                    // 0x00C0(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_VoGScreenParticle");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_WeaponBoneControl
// 0x0009 (0x004C - 0x0055)
class UBehavior_WeaponBoneControl : public UBehaviorBase
{
public:
	struct FName                                       BoneControlName;                                          // 0x004C(0x0008) (Edit)
	unsigned char                                      WeaponEventType;                                          // 0x0054(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_WeaponBoneControl");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_WeaponGlowEffect
// 0x0008 (0x004C - 0x0054)
class UBehavior_WeaponGlowEffect : public UBehaviorBase
{
public:
	unsigned char                                      Action;                                                   // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	class UWeaponGlowEffectDefinition*                 Effect;                                                   // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_WeaponGlowEffect");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_WeaponsRestriction
// 0x0004 (0x004C - 0x0050)
class UBehavior_WeaponsRestriction : public UBehaviorBase
{
public:
	unsigned long                                      bRestrictionOn : 1;                                       // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAllowOnPlayers : 1;                                      // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLilacHACKOverride : 1;                                   // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_WeaponsRestriction");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_WeaponThrow
// 0x0000 (0x004C - 0x004C)
class UBehavior_WeaponThrow : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_WeaponThrow");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.Behavior_WeaponVisibleAmmoState
// 0x0001 (0x004C - 0x004D)
class UBehavior_WeaponVisibleAmmoState : public UBehaviorBase
{
public:
	unsigned char                                      State;                                                    // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Behavior_WeaponVisibleAmmoState");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.SpecialMove_WeaponAction
// 0x0004 (0x00C8 - 0x00CC)
class USpecialMove_WeaponAction : public UWillowAnimDefinition
{
public:
	unsigned long                                      bBlocksWeaponActions : 1;                                 // 0x00C8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_WeaponAction");
		return ptr;
	}


	float ClientStarted(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
};


// Class WillowGame.SpecialMove_FirstAndThirdPersonAnimation
// 0x0004 (0x00CC - 0x00D0)
class USpecialMove_FirstAndThirdPersonAnimation : public USpecialMove_WeaponAction
{
public:
	class USpecialMove_FirstPerson*                    FirstPersonSM;                                            // 0x00CC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_FirstAndThirdPersonAnimation");
		return ptr;
	}


	float ClientStarted(const FScriptInterface& SMI, struct FSpecialMoveData* SMData);
};


// Class WillowGame.BuzzaxeWeaponTypeDefinition
// 0x0000 (0x0680 - 0x0680)
class UBuzzaxeWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("BuzzaxeWeaponTypeDefinition");
		return ptr;
	}

};


// Class WillowGame.ChallengesPanelDefinition
// 0x0000 (0x003C - 0x003C)
class UChallengesPanelDefinition : public UGBXDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ChallengesPanelDefinition");
		return ptr;
	}

};


// Class WillowGame.CharacterCustomizationInfoCardGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterCustomizationInfoCardGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CharacterCustomizationInfoCardGFxObject");
		return ptr;
	}


	void SetAutoSizeTextOnFields();
	void TryFocusList();
	void PopulateScrollingList(TArray<struct FString> ListItems, int EquippedItemIndex);
	void SetRespecInfo(const struct FString& Description, const struct FString& BranchDescription1, const struct FString& BranchDescription2, const struct FString& BranchDescription3, int CurrentCredits);
	void SetNameInfo(const struct FString& NameInfo);
	void Hide();
	void DisplaySkinCard();
	void DisplayHeadCard();
	void DisplayRespecCard();
	void DisplayNameCard();
};


// Class WillowGame.CharacterCustomizationMenuGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterCustomizationMenuGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CharacterCustomizationMenuGFxObject");
		return ptr;
	}


	struct FString GetEntryLabel(int Index);
	void SetSelectedEntry(int Index);
	int GetSelectedEntry();
	void FocusPreviousEntry();
	void FocusNextEntry();
	void FocusBestEntry();
	void ConfigureMenuEntry(int Index, bool bDisabled, const struct FString& Label);
	void InitMenuEntry(int Index, bool bVisible, bool bDisabled, bool bIsInputEntry, int MaxInputLength, const struct FString& Caption, const struct FString& Label, const struct FString& IconFrame);
};


// Class WillowGame.CharacterSelectCameraActor
// 0x0000 (0x0288 - 0x0288)
class ACharacterSelectCameraActor : public ACameraActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CharacterSelectCameraActor");
		return ptr;
	}

};


// Class WillowGame.CharacterSelectionCustomizationListGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterSelectionCustomizationListGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CharacterSelectionCustomizationListGFxObject");
		return ptr;
	}


	void ScrollDown();
	void ScrollUp();
	void PopulateScrollingList(TArray<struct FString> ListItems, int EquippedItemIndex);
	int GetSelectedIndex();
};


// Class WillowGame.CharacterSelectionGFxObject
// 0x0000 (0x0078 - 0x0078)
class UCharacterSelectionGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CharacterSelectionGFxObject");
		return ptr;
	}


	void FadeIn(float FadeTimeInSeconds);
	void BeginClose(float FadeTimeInSeconds);
	void ConfigureForPause(bool bPaused);
	void SetTooltips(const struct FString& Tooltips);
	int GetCharacterGridIndexInDirection(int PlayerIndex, int CharacterGridDirection);
	void SetMessageInfo(const struct FString& MessageInfo);
	void SetTimerInfo(const struct FString& TimerInfo, int TimeInSeconds);
	void SetSelectionIndicator(int PlayerIndex, bool bFocused, int CharacterIndex);
	void SetPartySelection(int PartyMemberIndex, const struct FString& Gamertag, bool bHasConfirmedCharacter, const struct FString& ClassIconMovieName, int CharacterLevel);
	void ClearPartySelections();
	void SetState(int PlayerIndex, int NewState);
	void SetCharacterInfo(int PlayerIndex, const struct FString& CharName, const struct FString& CharClass, const struct FString& ActionAbilityDesc, const struct FString& PreferredWeaponDesc);
	void CommitSelectableCharacters();
	void AddSelectableCharacter(const struct FString& IconMoviePath);
};


// Class WillowGame.WillowGFxLobbyLoadCharacter
// 0x013C (0x0264 - 0x03A0)
class UWillowGFxLobbyLoadCharacter : public UWillowGFxMovie
{
public:
	class ULoadCharacterLobbyGFxObject*                LoadCharacterLobby;                                       // 0x0264(0x0004) (Transient)
	TArray<struct FLoadCharacterData>                  DisplayedCharacterDataList;                               // 0x0268(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bWaitingForPS3LoadGame : 1;                               // 0x0274(0x0004) (Transient)
	unsigned long                                      bWaitingForPS3SaveList : 1;                               // 0x0274(0x0004) (Transient)
	unsigned long                                      bRestrictClose : 1;                                       // 0x0274(0x0004) (Transient)
	class UWillowGFxMenuHelperSaveGame*                SaveGameHelper;                                           // 0x0278(0x0004) (Transient)
	TArray<class UPlayerNameIdentifierDefinition*>     DefaultNewCharacterList;                                  // 0x027C(0x000C) (Transient, NeedCtorLink)
	struct FLoadInfo                                   MostRecentLoadInfo;                                       // 0x0288(0x00C8) (Transient, NeedCtorLink)
	class UWillowGFxDialogBox*                         LoadingCharacterDlg;                                      // 0x0350(0x0004) (Transient)
	unsigned char                                      Platform;                                                 // 0x0354(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	class UPlayerSaveGame*                             CachedSaveGame;                                           // 0x0358(0x0004) (Transient)
	int                                                AvailableSlots;                                           // 0x035C(0x0004) (Transient)
	int                                                TopSlotDataIndex;                                         // 0x0360(0x0004) (Transient)
	int                                                SelectedDataIndex;                                        // 0x0364(0x0004) (Transient)
	float                                              LastActionTime;                                           // 0x0368(0x0004) (Transient)
	int                                                LastDeletedPlayedTime;                                    // 0x036C(0x0004) (Transient)
	int                                                LastDeletedLevel;                                         // 0x0370(0x0004) (Transient)
	struct FGuid                                       LastDeletedGuid;                                          // 0x0374(0x0010) (Transient)
	int                                                LastClickedDataIndex;                                     // 0x0384(0x0004) (Transient)
	struct FScriptDelegate                             __OnLoadGame__Delegate;                                   // 0x0388(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCloseNoLoad__Delegate;                                // 0x0394(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxLobbyLoadCharacter");
		return ptr;
	}


	void OnTick();
	void SetTickInterval();
	bool CanShowStorageSelector();
	void StorageDeviceChanged(unsigned char ControllerId, bool bIsValid);
	void HideLoadingSavedGameDialog();
	void ShowLoadingSavedGameDialog();
	void NotifyLoadGameStarted();
	void PS3_CheckForSaveList();
	void PS3_CheckForLoadGame();
	void PS3_BeginLoadGame();
	void FinishConditionalLoadGame(unsigned char LoadGameResult);
	void ConditionalLoadGame(const struct FLoadInfo& LI, int PlayerIndex);
	struct FString StripSavePath(const struct FString& Path);
	void FinishLoadGame(const struct FLoadInfo& LI);
	void GetSaveList();
	void DeviceSelectionDone(bool bWasSuccessful);
	void SetupCharacterMenu(bool bIsFirstJoin);
	void SetTipText(bool bCanDelete, bool bIsUnownedClass);
	bool OnPurchaseCanceled(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void MarketplaceDownloadComplete();
	bool OnPurchaseRequest(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void OnSlotClicked(int SlotIndex);
	void FocusOn(class UGFxObject* FocusTarget);
	void OnDeleteEnded(bool bWasDeleted);
	void OnDeleteStarted();
	void TryDeleteSelectedCharacter();
	void ScrollDown();
	void ScrollUp();
	void RefreshCharacterList();
	void SetListSelection(int InSelectedDataIndex);
	void SavesUpdated(int PlayerIndex);
	struct FString ResolvePlaythrough(int PlayThrough);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void BeginClose();
	void OnClose();
	void extLoadCharacterLobbyReady(const struct FString& TargetPath, int NumEntries);
	bool Start(bool StartPaused);
	void OnCloseNoLoad();
	void OnLoadGame(const struct FLoadInfo& LI, int PlayerIndex);
};


// Class WillowGame.ConfirmCharacterLobbyGFxMovie
// 0x0018 (0x0264 - 0x027C)
class UConfirmCharacterLobbyGFxMovie : public UWillowGFxMovie
{
public:
	class UGFxObject*                                  ConfirmCharacterLobbyObj;                                 // 0x0264(0x0004) (Transient)
	class AWillowPlayerReplicationInfo*                WPRI[0x2];                                                // 0x0268(0x0004) (Transient)
	struct FScriptDelegate                             __OnConfirmCharacters__Delegate;                          // 0x0270(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ConfirmCharacterLobbyGFxMovie");
		return ptr;
	}


	void SetHeader(const struct FString& Header, const struct FString& Subheader);
	void SetCharacterInfo(int PlayerIndex, int Quadrant, const struct FString& Gamertag, int CharLevel, const struct FString& CharName, const struct FString& CharClass, const struct FString& CharPlaythrough, const struct FString& CharCurrentMission, const struct FString& CharPlotMission, const struct FString& CharSaveDate, const struct FString& CharPlayedTime);
	void Hide();
	void Show(int PlayerCount, bool bIsConsole);
	void PopulatePlayerData();
	void CharacterSelectClosed();
	void CharacterLoadComplete(const struct FLoadInfo& LI, int PlayerIndex);
	void OpenCharacterSelect(int ControllerId);
	void ConfirmCharacterSelectForPlayer(class AWillowPlayerReplicationInfo* PlayerPRI);
	void ConfigureForPlayers(class AWillowPlayerReplicationInfo* FirstPlayer, class AWillowPlayerReplicationInfo* SecondPlayer);
	struct FString ResolvePlaythrough(int PlayThrough);
	void OnChangeCharacterButtonClick(class UGFxObject* EventObj);
	void OnCancelButtonClick(class UGFxObject* EventObj);
	void HandleConfirm();
	void OnConfirmButtonClick(class UGFxObject* EventObj);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void BeginClose();
	void OnClose();
	void extConfirmCharacterLobbyReady(const struct FString& TargetPath);
	bool Start(bool StartPaused);
	void OnConfirmCharacters();
};


// Class WillowGame.CreditsDataProviderGFxObject
// 0x0005 (0x0078 - 0x007D)
class UCreditsDataProviderGFxObject : public UGFxObject
{
public:
	class UCreditsGFxDefinition*                       CreditsDef;                                               // 0x0078(0x0004)
	unsigned char                                      bShouldAvoidAccentedLetters;                              // 0x007C(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CreditsDataProviderGFxObject");
		return ptr;
	}


	int extGetLengthOfData();
	struct FString ReplaceCertainAccentedLetters(const struct FString& Text);
	class UGFxObject* extGetClipDataAt(int Index);
	void Init(class UCreditsGFxDefinition* CreditsDefinition);
};


// Class WillowGame.CreditsLineDefinition
// 0x000C (0x003C - 0x0048)
class UCreditsLineDefinition : public UGBXDefinition
{
public:
	struct FString                                     LinkageName;                                              // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CreditsLineDefinition");
		return ptr;
	}

};


// Class WillowGame.CreditsGFxObject
// 0x0008 (0x0078 - 0x0080)
class UCreditsGFxObject : public UGFxObject
{
public:
	class UCreditsGFxDefinition*                       CreditsDef;                                               // 0x0078(0x0004)
	float                                              CachedDelta;                                              // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CreditsGFxObject");
		return ptr;
	}


	void UpdateDelta(float NewDelta);
	void StartCreditScroll();
	void Init(class UCreditsGFxDefinition* CreditsDefinition);
};


// Class WillowGame.CustomizationUsage_Player
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Player : public UCustomizationUsage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Player");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_Vehicle
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Vehicle : public UCustomizationUsage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Vehicle");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_Assassin
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Assassin : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Assassin");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_BanditTech
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_BanditTech : public UCustomizationUsage_Vehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_BanditTech");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerA
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerA : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerA");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerB
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerB : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerB");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerC
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerC : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerC");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerD
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerD : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerD");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerE
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerE : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerE");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerF
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerF : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerF");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerG
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerG : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerG");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerH
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerH : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerH");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerI
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerI : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerI");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerJ
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerJ : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerJ");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerK
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerK : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerK");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerL
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerL : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerL");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerM
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerM : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerM");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerN
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerN : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerN");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerO
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerO : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerO");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_ExtraPlayerP
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_ExtraPlayerP : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_ExtraPlayerP");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_FanBoat
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_FanBoat : public UCustomizationUsage_Vehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_FanBoat");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_Hovercraft
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Hovercraft : public UCustomizationUsage_Vehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Hovercraft");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_Mercenary
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Mercenary : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Mercenary");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_Runner
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Runner : public UCustomizationUsage_Vehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Runner");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_Siren
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Siren : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Siren");
		return ptr;
	}

};


// Class WillowGame.CustomizationUsage_Soldier
// 0x0000 (0x0048 - 0x0048)
class UCustomizationUsage_Soldier : public UCustomizationUsage_Player
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("CustomizationUsage_Soldier");
		return ptr;
	}

};


// Class WillowGame.DeathtrapActionSkill
// 0x0030 (0x0234 - 0x0264)
class ADeathtrapActionSkill : public AActionSkill
{
public:
	class AWillowAIPawn*                               DeathTrap;                                                // 0x0234(0x0004)
	class USkillDefinition*                            ShareShieldsSkill;                                        // 0x0238(0x0004) (Edit, Const)
	class AWillowPawn*                                 MedicBeamTarget;                                          // 0x023C(0x0004) (Transient)
	unsigned char                                      MedicBeamState;                                           // 0x0240(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0241(0x0003) MISSED OFFSET
	struct FName                                       MedicBeamSourceSocket;                                    // 0x0244(0x0008) (Edit, Const)
	struct FName                                       MedicBeamTargetSocket;                                    // 0x024C(0x0008) (Edit, Const)
	float                                              MedicBeamMaxDistance;                                     // 0x0254(0x0004) (Edit, Const)
	class USkillDefinition*                            MedicBeamSkill;                                           // 0x0258(0x0004) (Edit, Const)
	class USkillDefinition*                            MedicBeamTargetSkill;                                     // 0x025C(0x0004) (Edit, Const)
	class UFiringModeDefinition*                       MedicBeamFiringMode;                                      // 0x0260(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DeathtrapActionSkill");
		return ptr;
	}


	void DeactivateMedicBeam();
	void BlockMedicBeam();
	void ActivateMedicBeam();
	void TryToActivateMedicBeam(class AWillowPawn* TheTargetPawn);
	bool IsValidCurrentMedicBeamTarget(class AWillowPawn* TheTargetPawn);
	bool IsValidMedicBeamTarget(class AWillowPawn* TheTargetPawn);
	void TryToShareShields(class AWillowPawn* TheWillowPawn, class AController* TheController);
	void DestroyOwnedInstanceData();
	bool RemoveInstanceData(const struct FName& DataName);
	bool GetInstanceData(const struct FName& DataName, TArray<struct FInstanceDataUnion>* InstanceData);
	bool SetInstanceData(const struct FInstanceDataUnion& InstanceData, bool bAllowDuplicateNames);
	class AWillowPawn* GetAutoAimPawn();
	void NotifyActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn);
	void StartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* TheTargetPawn);
	void OnActionSkillEnded();
	void OnActionSkillStarted(class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn);
	void OnActionSkillTick(float DeltaTime);
};


// Class WillowGame.DebugArrowComponent
// 0x0000 (0x021C - 0x021C)
class UDebugArrowComponent : public UArrowComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DebugArrowComponent");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_AISetItemTossTarget
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_AISetItemTossTarget : public USequenceAction
{
public:
	TArray<class AActor*>                              TossTargets;                                              // 0x00A4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AISetItemTossTarget");
		return ptr;
	}

};


// Class WillowGame.DesignerAttributeContextResolver
// 0x0018 (0x003C - 0x0054)
class UDesignerAttributeContextResolver : public UAttributeContextResolver
{
public:
	struct FName                                       ValueName;                                                // 0x003C(0x0008) (Edit, Const)
	struct FAttributeInitializationData                BaseValue;                                                // 0x0044(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DesignerAttributeContextResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.DesignerAttributeContextResolverByName
// 0x0018 (0x003C - 0x0054)
class UDesignerAttributeContextResolverByName : public UAttributeContextResolver
{
public:
	struct FName                                       ValueName;                                                // 0x003C(0x0008) (Edit, Const)
	struct FAttributeInitializationData                BaseValue;                                                // 0x0044(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DesignerAttributeContextResolverByName");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.DynamicBehaviorVolume
// 0x0000 (0x0280 - 0x0280)
class ADynamicBehaviorVolume : public ABehaviorVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("DynamicBehaviorVolume");
		return ptr;
	}

};


// Class WillowGame.EchoVersionGFxMovie
// 0x0000 (0x0264 - 0x0264)
class UEchoVersionGFxMovie : public UWillowGFxMovie
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EchoVersionGFxMovie");
		return ptr;
	}


	bool Start(bool StartPaused);
};


// Class WillowGame.EndOfGameGFxMovie
// 0x000C (0x0264 - 0x0270)
class UEndOfGameGFxMovie : public UWillowGFxMovie
{
public:
	struct FString                                     ConsoleEvent;                                             // 0x0264(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("EndOfGameGFxMovie");
		return ptr;
	}


	void extCancel();
	void extConfirmRestart();
	bool Start(bool StartPaused);
};


// Class WillowGame.FastTravelSignGFxMovie
// 0x0000 (0x0254 - 0x0254)
class UFastTravelSignGFxMovie : public UGFxMovieInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelSignGFxMovie");
		return ptr;
	}


	bool Start(bool StartPaused);
};


// Class WillowGame.FastTravelStationGFxObject
// 0x0000 (0x0078 - 0x0078)
class UFastTravelStationGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FastTravelStationGFxObject");
		return ptr;
	}


	void SetCurrentWaypoint(int WaypointIndex);
	void SetSortMode(int SortMode, const struct FString& Header);
	void SendLocationData(TArray<struct FString> LocationDisplayNames, TArray<struct FString> LocationStationNames, int InitialSelectionIndex, int CurrentWaypointIndex);
	void ScrollLocationListDown();
	void ScrollLocationListUp();
	void RegisterMapLocationBlob(class UGFxObject* MapBlobClip);
	void CacheLocationMissionData(int LocationIndex, TArray<struct FString> MissionNames, TArray<int> MissionTypes);
	void AddDLCMapLocations(const struct FString& DLCMapLocationsMovie);
};


// Class WillowGame.FixedMarker
// 0x0010 (0x0194 - 0x01A4)
class AFixedMarker : public ATrigger
{
public:
	unsigned long                                      DisplayOnCompass : 1;                                     // 0x0194(0x0004) (Edit, Net)
	class UTexture2D*                                  MarkerTexture;                                            // 0x0198(0x0004) (Edit)
	struct FColor                                      MarkerColor;                                              // 0x019C(0x0004) (Edit)
	float                                              MarkerScale;                                              // 0x01A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FixedMarker");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class WillowGame.WillowAutoTestManager
// 0x000C (0x0254 - 0x0260)
class AWillowAutoTestManager : public AAutoTestManager
{
public:
	class AWillowPlayerController*                     WillowSentinelPC;                                         // 0x0254(0x0004) (Transient)
	unsigned long                                      bIsMenuActive : 1;                                        // 0x0258(0x0004) (Transient)
	unsigned long                                      bIsWillowSentinelPCWalking : 1;                           // 0x0258(0x0004)
	int                                                TotalLevelLoads;                                          // 0x025C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAutoTestManager");
		return ptr;
	}


	void Tick(float DeltaTime);
	void CloseAutomatedMapTestTimer();
	void AutomatedTravelToNextMap();
	struct FString GetNextAutomatedTestingMap();
	void MenuTimerWorker();
	void TestBackMenu(unsigned char backMenuType, float displayTimeInSeconds);
	void TestDucking();
	void TestJumping();
	void TestNextWeapon();
	void TestStopFiring();
	void TestStartFiring();
	void TestStopWalking();
	void TestStartWalking();
	void DisableTrainingMessages();
	void ExecuteConsoleCommand(const struct FString& Command);
	void DoAutomatedSmokeTest();
	void DoUIAutoMemTest();
	void PostBeginPlay();
};


// Class WillowGame.WillowSeqEvent_PlayerLeft
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_PlayerLeft : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_PlayerLeft");
		return ptr;
	}

};


// Class WillowGame.SeqEvent_SeamlessTravelComplete
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_SeamlessTravelComplete : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqEvent_SeamlessTravelComplete");
		return ptr;
	}

};


// Class WillowGame.IPlayerObserver
// 0x0000 (0x003C - 0x003C)
class UIPlayerObserver : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IPlayerObserver");
		return ptr;
	}


	void PlayerLeftGame(class APlayerController* PC);
	void PlayerEnteredGame(class APlayerController* PC);
};


// Class WillowGame.WillowGameMessage
// 0x0033 (0x0049 - 0x007C)
class UWillowGameMessage : public ULocalMessage
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FString                                     PlayerEnteredGame;                                        // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerLeftGame;                                           // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CreaturesGrowStronger;                                    // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CreaturesWeaken;                                          // 0x0070(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGameMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static void ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.LocalMapChangeMessage
// 0x0000 (0x004C - 0x004C)
class ULocalMapChangeMessage : public UWillowLocalMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LocalMapChangeMessage");
		return ptr;
	}


	static void ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.WillowSeqEvent_StartNewGameCinematics
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_StartNewGameCinematics : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_StartNewGameCinematics");
		return ptr;
	}

};


// Class WillowGame.WillowAccessControl
// 0x0000 (0x0298 - 0x0298)
class AWillowAccessControl : public AAccessControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAccessControl");
		return ptr;
	}


	bool ForceKickPlayer(class APlayerController* C, const struct FString& KickReason);
};


// Class WillowGame.SplitscreenHelper
// 0x0024 (0x003C - 0x0060)
class USplitscreenHelper : public UObject
{
public:
	class UWillowPauseTicker*                          PS3UserSelectTicker;                                      // 0x003C(0x0004) (Transient)
	int                                                PS3SplitScreenControllerId;                               // 0x0040(0x0004) (Transient)
	class AWillowPlayerController*                     PrimaryPC;                                                // 0x0044(0x0004) (Transient)
	struct FScriptDelegate                             __HandleSplitscreenJoinSuccess__Delegate;                 // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleSplitscreenJoinFail__Delegate;                    // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SplitscreenHelper");
		return ptr;
	}


	void CheckPS3UserSelectResult();
	void SparkAuthenticate(int ControllerId, class AWillowPlayerController* SplitPC);
	void OnSplitscreenJoinComplete(int ControllerId, bool bWasSuccessful);
	void AttemptSplitscreenJoin(int ControllerId);
	class AWillowPlayerController* GetPrimaryPC();
	void PrepareSplitscreenJoin(int ControllerId);
	bool AttemptSplitscreenLeave(int ControllerId);
	void HandleSplitscreenJoinFail(const struct FString& Reason);
	void HandleSplitscreenJoinSuccess(class AWillowPlayerController* SplitPC);
};


// Class WillowGame.NetworkOptionsGFxMovie
// 0x0014 (0x0264 - 0x0278)
class UNetworkOptionsGFxMovie : public UWillowGFxMovie
{
public:
	class UNetworkOptionsGFxObject*                    NetworkOptionsObject;                                     // 0x0264(0x0004) (Transient)
	class UWillowGFxMovie*                             OwningMovie;                                              // 0x0268(0x0004) (Transient)
	struct FScriptDelegate                             __OnLoad__Delegate;                                       // 0x026C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("NetworkOptionsGFxMovie");
		return ptr;
	}


	static struct FString ResolveNetworkTypeString(unsigned char NetworkType, unsigned char InviteType);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void extClosed();
	void extOnLoad(const struct FString& Path);
	void OnClose();
	bool Start(bool StartPaused);
	void OnLoad(class UNetworkOptionsGFxObject* NetworkOptionsObj);
};


// Class WillowGame.MarketplaceGFxMovie
// 0x01FC (0x0390 - 0x058C)
class UMarketplaceGFxMovie : public UWillowGFxMovie3D
{
public:
	TArray<struct FMarketPlaceFilter>                  BasicFilters;                                             // 0x0390(0x000C) (NeedCtorLink)
	class UGFxObject*                                  MarketPlacePanelObject;                                   // 0x039C(0x0004) (Transient)
	class UMarketplaceGFxMovieDefinition*              MarketplaceDef;                                           // 0x03A0(0x0004) (Transient)
	struct FString                                     FilterAll;                                                // 0x03A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FilterCompatibility;                                      // 0x03B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FilterSeasonPass;                                         // 0x03BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FilterAddOn;                                              // 0x03C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FilterMisc;                                               // 0x03D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TipPurchase;                                              // 0x03E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TipCancel;                                                // 0x03EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TipRedeemCode;                                            // 0x03F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TipSort;                                                  // 0x0404(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TipDownload;                                              // 0x0410(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TipDetails;                                               // 0x041C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TipPSNStore;                                              // 0x0428(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CostFormatPS3;                                            // 0x0434(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CostFormatPS3Free;                                        // 0x0440(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CostFormat360;                                            // 0x044C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CostFormat360Free;                                        // 0x0458(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Purchased;                                                // 0x0464(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StatusPurchased;                                          // 0x0470(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StatusDownloaded;                                         // 0x047C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StatusInstalled;                                          // 0x0488(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StatusNew;                                                // 0x0494(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MessageEnumerating;                                       // 0x04A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DefaultHeader;                                            // 0x04AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DefaultFeature;                                           // 0x04B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DefaultFeatureDescription;                                // 0x04C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Prop_offeringId;                                          // 0x04D0(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isPurchased;                                         // 0x04DC(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isSeasonPass;                                        // 0x04E8(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isNewOffer;                                          // 0x04F4(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isDownloaded;                                        // 0x0500(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isInstalled;                                         // 0x050C(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isFree;                                              // 0x0518(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isCompatibility;                                     // 0x0524(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isAddOn;                                             // 0x0530(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_isMisc;                                              // 0x053C(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_contentTitleText;                                    // 0x0548(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_messageText;                                         // 0x0554(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_costText;                                            // 0x0560(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_statusText;                                          // 0x056C(0x000C) (Const, NeedCtorLink)
	struct FString                                     Prop_descriptionText;                                     // 0x0578(0x000C) (Const, NeedCtorLink)
	unsigned long                                      bDelegateFired : 1;                                       // 0x0584(0x0004)
	class UWillowGFxDialogBox*                         WarningDlg;                                               // 0x0588(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MarketplaceGFxMovie");
		return ptr;
	}


	class UGFxObject* GetSelectedObject();
	class UGFxObject* FinalizeContentData();
	void SetContentData(TArray<class UGFxObject*> dataArray);
	void AddContentData(class UGFxObject* Data);
	class UGFxObject* SetFilterFromStringAndSortNew(const struct FString& Tag, const struct FString& Caption, const struct FString& filterString);
	class UGFxObject* SetFilterFromString(const struct FString& Tag, const struct FString& Caption, const struct FString& filterString);
	void ClearFilters();
	void CycleFilter();
	void ApplyFilter(const struct FString& Tag);
	void ScrollDescription(bool bScrollUp);
	void ShowMessage(const struct FString& Message);
	void ShowMarketplaceElements(bool bShow);
	void SetStoreHeader(const struct FString& Header, bool bIsPS3, const struct FString& feature, const struct FString& featureDescription);
	void SetTooltips(const struct FString& tip1, const struct FString& tip2);
	class UGFxObject* CreateContentItem(const struct FString& OfferingId, bool IsPurchased, bool IsDownloaded, bool IsInstalled, bool IsSeasonPass, bool IsNewOffer, bool IsFree, bool IsCompatibility, bool IsAddOn, bool IsMisc, const struct FString& ContentTitleText, const struct FString& PriceText, const struct FString& DescriptionText);
	class UGFxObject* CreateMarketplaceItem(struct FMarketplaceContent* Content);
	struct FString GetOfferingStatusMessage(bool IsPurchased, bool IsDownloaded, bool IsInstalled);
	struct FString FormatCost(int PlatformCost);
	void extOnOfferingChanged(class UGFxObject* Data);
	void SetShoppingTooltips(bool bCanPurchase, bool bDownloaded, bool bInstalled, bool bFree, bool bShopDisabled);
	bool OnFailureDialogClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void ShowDeferredFailureMessage();
	void PostContentLoaded(bool bSuccess);
	void OnHiddenDownloadableContentListRead(bool bWasSuccessful);
	bool IsOfferOwned(int OfferId, TArray<struct FMarketplaceContent>* ContentList);
	void OnDownloadableContentListRead(bool bWasSuccessful);
	void GetHiddenDLCList(TArray<int> HiddenOfferIds);
	void RefreshDLC();
	void extOnMarketPlacePanelLoad(class UGFxObject* Panel);
	void extPopupMessage(bool bVisible);
	bool OnClickShowMarketplace(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool OnClickShowMarketplaceOffer(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool ShopInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.MatchmakingLobbyGFxMovie
// 0x00B8 (0x0390 - 0x0448)
class UMatchmakingLobbyGFxMovie : public UWillowGFxMovie3D
{
public:
	class UMatchmakingLobbyCharacterInfoGFxObject*     CharacterInfoGFxObj;                                      // 0x0390(0x0004) (Transient)
	class UMatchmakingLobbyResultsGFxObject*           ResultsGFxObj;                                            // 0x0394(0x0004) (Transient)
	class UGFxObject*                                  TooltipsGFxObj;                                           // 0x0398(0x0004) (Transient)
	struct FMatchmakingResultEntry                     ResultEntries[0x4];                                       // 0x039C(0x0024) (Transient, NeedCtorLink)
	unsigned char                                      CurrentMatchmakingState;                                  // 0x042C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x042D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnCancel__Delegate;                                     // 0x0430(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnHostGameAccept__Delegate;                             // 0x043C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MatchmakingLobbyGFxMovie");
		return ptr;
	}


	void extMatchmakingLobbyOnLoad(const struct FString& CharacterInfoTargetPath, const struct FString& ResultsTargetPath, const struct FString& TooltipsTargetPath);
	struct FString ResolvePlaythrough(int PlayThrough);
	void UpdateTooltips();
	void UpdateResults();
	void SetMatchmakingState(unsigned char MatchmakingState);
	struct FString GetResultMessage(unsigned char MatchmakingState);
	struct FString GetMatchTypeIconFrameName(unsigned char MatchmakingState);
	void InitResultEntries();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void BeginClose();
	void OnClose();
	bool Start(bool StartPaused);
	void OnHostGameAccept();
	void OnCancel();
};


// Class WillowGame.FrontEndPlayerListGFxObject
// 0x0114 (0x0078 - 0x018C)
class UFrontEndPlayerListGFxObject : public UGFxObject
{
public:
	FScriptInterface                                   OwningMovie;                                              // 0x0078(0x0008)
	TArray<struct FUniqueNetId>                        PlayerListIds;                                            // 0x0080(0x000C) (Transient, NeedCtorLink)
	int                                                SelectedPlayerIndex;                                      // 0x008C(0x0004) (Transient)
	int                                                SplitJoinRowIndex;                                        // 0x0090(0x0004) (Transient)
	struct FUniqueNetId                                CachedPlayerToKick;                                       // 0x0094(0x0018) (Transient)
	class AWillowPlayerController*                     WPCOwner;                                                 // 0x00AC(0x0004)
	struct FString                                     MyPartyHeaderBase;                                        // 0x00B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FriendPartyHeader;                                        // 0x00BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoMissionFallbackText;                                    // 0x00C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerConnectingString;                                   // 0x00D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SplitJoinMessage;                                         // 0x00E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     InviteFriendMessage;                                      // 0x00EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WaitingMessage;                                           // 0x00F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OfflineMessage;                                           // 0x0104(0x000C) (Const, Localized, NeedCtorLink)
	TArray<int>                                        PlayerDetailsIdMap;                                       // 0x0110(0x000C) (Transient, NeedCtorLink)
	class UPlayerDetailsGFxMovie*                      PlayerDetailsMovie;                                       // 0x011C(0x0004) (Transient)
	struct FUniqueNetId                                PlayerDetailsUniqueId;                                    // 0x0120(0x0018) (Transient)
	struct FString                                     JoinGameCaption;                                          // 0x0138(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     InviteGameCaption;                                        // 0x0144(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ViewGamercardCaption;                                     // 0x0150(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MuteCaption;                                              // 0x015C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UnmuteCaption;                                            // 0x0168(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     KickCaption;                                              // 0x0174(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BackCaption;                                              // 0x0180(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FrontEndPlayerListGFxObject");
		return ptr;
	}


	void HidePlayerDetailsMovie();
	int GetPrimaryPlayerControllerId();
	struct FString GetPlayerName(const struct FUniqueNetId& UniqueId, bool bFormatForHTML);
	int GetPlayerListIndex(const struct FUniqueNetId& PlayerID);
	void UpdateMuteStatus(const struct FUniqueNetId& UniqueId);
	void KickPlayer(const struct FUniqueNetId& PlayerToKick);
	void InviteToGame(int ControllerId, const struct FUniqueNetId& PlayerToInvite);
	void JoinGame(int ControllerId, const struct FUniqueNetId& PlayerToJoin);
	bool OnConfirmKickPlayer_Clicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void HandlePlayerDetailsButtonClick(int Index);
	class AWillowPlayerReplicationInfo* GetPRI(const struct FUniqueNetId& UniqueId);
	void PopulatePlayerDetailsDialog(const struct FUniqueNetId& UniqueId);
	void AddPlayerDetailsButton(int Id, const struct FString& Caption, bool bDisabled);
	void OnPlayerDetailsLoaded(class UPlayerDetailsGFxObject* InPlayerDetailsDialog);
	void ShowPlayerSelectedDialog(int EntryIndex);
	struct FString GetSessionKey(const struct FOnlineFriend& Friend);
	bool ContainsUniqueId(TArray<struct FUniqueNetId> IdList, const struct FUniqueNetId& SearchId);
	bool IsInCurrentGame(const struct FUniqueNetId& UniqueId);
	bool IsLocalPlayer(class APlayerReplicationInfo* PRI);
	bool IsPlayerMuted(const struct FUniqueNetId& UniqueId);
	bool IsRemotePlayerTalking(const struct FUniqueNetId& UniqueId);
	bool IsLocalPlayerTalking(int ControllerId);
	bool IsLocalVoiceEnabled(int ControllerId);
	bool IsInPartyChat(const struct FUniqueNetId& UniqueId);
	bool IsPartyLeader(class AWillowPlayerReplicationInfo* WPRI);
	int GetCurrentPlaythrough();
	struct FString GetCurrentMissionName();
	struct FString GetMatchQualityText(const struct FString& MatchIconFrameName);
	struct FString GetFriendPartyQualityType(const struct FOnlineFriend& Friend);
	struct FString GetFriendPartySlotInfo(const struct FOnlineFriend& Friend);
	struct FString GetFriendPartyHeader(const struct FOnlineFriend& Friend);
	void GetLocalPartyPlayerCount(int* PlayerCount, int* MaxPlayerCount);
	struct FString GetCharacterIconSwfMoviePath(class AWillowPlayerReplicationInfo* WPRI);
	void DebugAddDummyPlayers(int CurrentRowIndex, int Count);
	bool IsPlayerConnecting(class AWillowPlayerReplicationInfo* WPRI);
	void OnPlayerListButtonClick(int EntryIndex, int RowTypeId);
	void RefreshPlayerList(TArray<struct FOnlineFriend> FriendsList);
	void Hide();
	void Show();
	void ScrollUp();
	void ScrollToTop();
	void ScrollDown();
	void SetVoiceStatusTalking(int RowIndex, bool bTalking);
	void SetVoiceStatusMuted(int RowIndex, bool bMuted);
	void SetVoiceStatusEnabled(int RowIndex, bool bEnabled);
	void SetConnectionQuality(const struct FString& ConnectionQuality);
	void ResetFocus(bool bBottomUp);
	void ClearRow(int RowIndex, bool bCollapse);
	void ConfigureSelectedIndex(int RowIndex, bool bFocus);
	void ConfigureMessagePromptRow(int RowIndex, int RowTypeId, const struct FString& Text);
	void ConfigurePlayerInfoRow(int RowIndex, int RowTypeId, const struct FString& Gamertag, int Level, const struct FString& ClassIconMovieName, bool bPartyLeader, bool bVoiceEnabled, bool bVoiceMuted, bool bVoiceTalking, bool bInPartyChat, bool bControllerDisplay, int Quadrant, bool bHubPlayer);
	void ConfigureHeaderInfoRow(int RowIndex, int RowTypeId, const struct FString& PartyType, const struct FString& IconFrameName, const struct FString& MissionName, const struct FString& SlotInfo);
	void ClearAllEntries();
	void EndConfigureRows(int SelectedIndex);
	void BeginConfigureRows(bool bClearAllEntries, int NumStickyRows);
	void OnPlayerTalkingStateChange(const struct FUniqueNetId& PlayerID, bool bIsTalking);
	void ShutDown();
	void Init(const FScriptInterface& InOwningMovie);
};


// Class WillowGame.WillowGFxClikWidget
// 0x0000 (0x0084 - 0x0084)
class UWillowGFxClikWidget : public UGFxClikWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxClikWidget");
		return ptr;
	}


	void OnEvent(const struct FName& EventTag);
	void OnClikEvent(const struct FEventData& Data);
	void AddClikEvent(const struct FString& EventType);
};


// Class WillowGame.WillowScrollingList
// 0x0044 (0x0084 - 0x00C8)
class UWillowScrollingList : public UWillowGFxClikWidget
{
public:
	TArray<struct FDataProviderInfo>                   DataProviderStack;                                        // 0x0084(0x000C) (Transient, NeedCtorLink)
	TArray<int>                                        IndexToEventId;                                           // 0x0090(0x000C) (Transient, NeedCtorLink)
	class UWillowGFxMovie*                             MyOwnerMovie;                                             // 0x009C(0x0004) (Transient)
	unsigned long                                      bSuppressMovementSound : 1;                               // 0x00A0(0x0004) (Transient)
	unsigned long                                      bDontFocusFirstAvailableListItem : 1;                     // 0x00A0(0x0004) (Transient)
	struct FString                                     BackCaption;                                              // 0x00A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __OnListChanged__Delegate;                                // 0x00B0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnSelectedIndexChanged__Delegate;                       // 0x00BC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingList");
		return ptr;
	}


	void PlaySound_VerticalMovement();
	void OnSpinnerValueChange(int EntryIndex, int NewChoiceIndex, const struct FString& NewChoiceValue);
	void OnSliderValueChange(int EntryIndex, int NewValue);
	void OnClikEvent(const struct FEventData& Data);
	int GetSelectedIndex();
	void SetSelectedIndex(int Index);
	void SetFocused(int FocusIndex);
	int IsSpinnerListItemInternal();
	bool IsSpinnerListItem();
	int IsSliderListItemInternal();
	bool IsSliderListItem();
	void FocusFirstAvailableListItem();
	void ClearListItems();
	void CommitListItems();
	void AddSliderListItemInternal(const struct FString& Caption, bool bDisabled, float StartingValue, float MinValue, float MaxValue, float Increment);
	void AddSliderListItem(int EventID, const struct FString& Caption, bool bDisabled, float StartingValue, float MinValue, float MaxValue, float Increment);
	void AddSpinnerListItemInternal(const struct FString& Caption, bool bDisabled, int StartingChoiceIndex, TArray<struct FString> Choices);
	void AddSpinnerListItem(int EventID, const struct FString& Caption, bool bDisabled, int StartingChoiceIndex, TArray<struct FString> Choices);
	void AddListItemInternal(const struct FString& Item, bool bDisabled, bool bNew);
	void AddListItem(int EventID, const struct FString& Caption, bool bDisabled, bool bNew);
	bool HandlePopList();
	void Refresh();
	void PushDataProvider(const FScriptInterface& DataProvider);
	FScriptInterface GetCurrentDataProvider();
	void Cleanup();
	void Init(class UWillowGFxMovie* OwnerMovie, const FScriptInterface& DefaultDataProvider);
	void OnSelectedIndexChanged(int NewSelectedIndex);
	void OnListChanged();
};


// Class WillowGame.FrontendMenuGFxObject
// 0x0000 (0x0078 - 0x0078)
class UFrontendMenuGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("FrontendMenuGFxObject");
		return ptr;
	}


	void FadeLobbyDeco();
	void SetDecoVisible(bool bLobbyDecoVisible, bool bPauseDecoVisible);
	void ApplyPriorityVisibilityEffect(bool bRemoveEffect);
	void ApplyPriorityBlurEffect(bool bRemoveEffect);
};


// Class WillowGame.IWillowScrollingListDataProvider
// 0x0000 (0x003C - 0x003C)
class UIWillowScrollingListDataProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IWillowScrollingListDataProvider");
		return ptr;
	}


	void Cleanup(class UWillowScrollingList* TheList);
	FScriptInterface GetSubmenuForEvent(int EventID, class UWillowScrollingList* TheList);
	void Populate(class UWillowScrollingList* TheList);
	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	bool HandleSliderChange(int EventID, int NewSliderValue, class UWillowScrollingList* TheList);
	bool HandleSelectionRollover(int EventID, class UWillowScrollingList* TheList);
	bool HandleSelectionChange(int EventID, class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
	void OnPop(class UWillowScrollingList* TheList);
	void OnPush(class UWillowScrollingList* TheList);
	struct FString GetMenuTooltip();
	struct FString GetMenuDisplayName();
};


// Class WillowGame.IPlayerListOwner
// 0x0000 (0x003C - 0x003C)
class UIPlayerListOwner : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IPlayerListOwner");
		return ptr;
	}


	void PlayUISound(const struct FName& UIEvent);
	class UWillowGFxMovie3DDefinition* GetPlayerDetailsMovieDef();
	bool GetFriend(const struct FUniqueNetId& UniqueId, struct FOnlineFriend* out_Friend);
	void AppendTooltipString(const struct FString& StringToAppend, bool bDisabled, struct FString* TooltipString);
	int CheckControllerStatus(int ControllerId, unsigned char MinStatus);
	bool IsPlayerOwner(int ControllerId);
	bool CanKick(const struct FUniqueNetId& UniqueId);
	bool CanViewGamercard(int ControllerId, const struct FUniqueNetId& UniqueId);
	bool CanUnmute(const struct FUniqueNetId& UniqueId);
	bool CanMute(const struct FUniqueNetId& UniqueId);
	bool CanInvite(const struct FUniqueNetId& UniqueId);
	bool CanJoin(const struct FUniqueNetId& UniqueId);
	class AWillowPlayerController* GetWPCOwner();
};


// Class WillowGame.NetworkOptionsGFxObject
// 0x0004 (0x0078 - 0x007C)
class UNetworkOptionsGFxObject : public UGFxObject
{
public:
	unsigned long                                      bVisible : 1;                                             // 0x0078(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("NetworkOptionsGFxObject");
		return ptr;
	}


	void SetClickHandler(class UObject* Context, const struct FName& FunctionName);
	void NavigateDown();
	void NavigateUp();
	void FocusFirstButton();
	void ConfigureButton(int ButtonIndex, const struct FString& ButtonText, const struct FString& ButtonTooltipText, bool bDisabled);
	void SetCurrentNetworkType(const struct FString& NetworkType);
	void Hide();
	void Show();
};


// Class WillowGame.WillowScrollingListDataProviderBase
// 0x0018 (0x003C - 0x0054)
class UWillowScrollingListDataProviderBase : public UObject
{
public:
	struct FString                                     MenuDisplayName;                                          // 0x003C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MenuTooltip;                                              // 0x0048(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderBase");
		return ptr;
	}


	void Cleanup(class UWillowScrollingList* TheList);
	FScriptInterface GetSubmenuForEvent(int EventID, class UWillowScrollingList* TheList);
	void Populate(class UWillowScrollingList* TheList);
	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	bool HandleSliderChange(int EventID, int NewSliderValue, class UWillowScrollingList* TheList);
	bool HandleSelectionRollover(int EventID, class UWillowScrollingList* TheList);
	bool HandleSelectionChange(int EventID, class UWillowScrollingList* TheList);
	bool HandleInputKey(const struct FName& ukey, unsigned char uevent);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
	void OnPop(class UWillowScrollingList* TheList);
	void OnPush(class UWillowScrollingList* TheList);
	struct FString GetMenuTooltip();
	struct FString GetMenuDisplayName();
};


// Class WillowGame.WillowScrollingListDataProviderMatchmaking
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderMatchmaking : public UWillowScrollingListDataProviderBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderMatchmaking");
		return ptr;
	}


	void Populate(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowOnlineGameSearch_DataStore
// 0x0000 (0x00B4 - 0x00B4)
class UWillowOnlineGameSearch_DataStore : public UUIDataStore_OnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSearch_DataStore");
		return ptr;
	}


	struct FName GetCurrentSearchName();
};


// Class WillowGame.WillowOnlineGameSearch
// 0x0008 (0x00F8 - 0x0100)
class UWillowOnlineGameSearch : public UOnlineGameSearch
{
public:
	int                                                LevelVariance;                                            // 0x00F8(0x0004)
	int                                                MaxPing;                                                  // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSearch");
		return ptr;
	}

};


// Class WillowGame.TestMapsListDefinition
// 0x000C (0x003C - 0x0048)
class UTestMapsListDefinition : public UGBXDefinition
{
public:
	TArray<struct FTestMapsListDatum>                  ListItems;                                                // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TestMapsListDefinition");
		return ptr;
	}

};


// Class WillowGame.PlayerDetailsGFxMovie
// 0x0018 (0x0264 - 0x027C)
class UPlayerDetailsGFxMovie : public UWillowGFxMovie
{
public:
	class UPlayerDetailsGFxObject*                     PlayerDetailsObject;                                      // 0x0264(0x0004) (Transient)
	FScriptInterface                                   OwningMovie;                                              // 0x0268(0x0008) (Transient)
	struct FScriptDelegate                             __OnLoad__Delegate;                                       // 0x0270(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerDetailsGFxMovie");
		return ptr;
	}


	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void extClosed();
	void extOnLoad(const struct FString& Path);
	void OnClose();
	bool Start(bool StartPaused);
	void OnLoad(class UPlayerDetailsGFxObject* PlayerDetailsObj);
};


// Class WillowGame.PlayerDetailsGFxObject
// 0x0004 (0x0078 - 0x007C)
class UPlayerDetailsGFxObject : public UGFxObject
{
public:
	unsigned long                                      bHidden : 1;                                              // 0x0078(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerDetailsGFxObject");
		return ptr;
	}


	void SetClickHandler(class UObject* Context, const struct FName& FunctionName);
	void NavigateDown();
	void NavigateUp();
	void FocusFirstButton();
	void ConfigureButton(int ButtonIndex, const struct FString& ButtonText, bool bDisabled);
	void SetClassIconPath(const struct FString& ClassIconPath);
	void SetMatchIconAndText(const struct FString& MatchIconFramName, const struct FString& MatchText);
	void SetMissionText(const struct FString& MissionText);
	void SetPlaythroughText(const struct FString& PlaythroughText);
	void SetClassText(const struct FString& ClassText);
	void SetGamertag(const struct FString& NickName);
	void Hide();
	void Show();
};


// Class WillowGame.GammaScreenGFxDefinition
// 0x0054 (0x00F0 - 0x0144)
class UGammaScreenGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	struct FScreenParticleInitParams                   Parameters;                                               // 0x00F0(0x0054) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GammaScreenGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.GammaScreenGFxMovie
// 0x0000 (0x0390 - 0x0390)
class UGammaScreenGFxMovie : public UWillowGFxMovie3D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GammaScreenGFxMovie");
		return ptr;
	}

};


// Class WillowGame.GearboxAccountGFxObject
// 0x0000 (0x0078 - 0x0078)
class UGearboxAccountGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GearboxAccountGFxObject");
		return ptr;
	}


	int SelectIsEnabled();
	void ClearKeyCode();
	void TrySetKeyCode(const struct FString& KeyCode);
	void ConfigureForViewOffers();
	void ConfigureForRedeemCode();
	int IsDisplayingOffers();
	void SetOfferData(TArray<class UGFxObject*> OfferData);
	void ScrollMessageDown();
	void ScrollMessageUp();
	int HasReadTermsOfService();
	void SetTermsOfService(const struct FString& TermsOfService);
	int HasReadPrivacyPolicy();
	void SetPrivacyPolicy(const struct FString& PrivacyPolicy);
	void SetTooltips(const struct FString& Tooltips);
	void SetSignInStatus(const struct FString& SignInStatus);
	void SetPlayerName(const struct FString& PlayerName);
	void SetFocusedConsoleCodeSegment(const struct FString& CodeSegment);
	void SetConfirmPassword(const struct FString& Password);
	void SetPassword(const struct FString& Password);
	void SetEmail(const struct FString& Email);
	struct FString GetConfirmPassword();
	struct FString GetPassword();
	struct FString GetKeyCode();
	struct FString GetEmail();
	int GetAgeYear();
	int GetAgeDay();
	int GetAgeMonth();
	void SetCurrentDate(int Month, int Day, int Year);
	bool OffersBoxIsChecked();
	void RefreshWelcomeScreen();
	void DisplayScreen(const struct FString& Screen);
};


// Class WillowGame.GFxMovieMissionStatus
// 0x0004 (0x0264 - 0x0268)
class UGFxMovieMissionStatus : public UWillowGFxMovie
{
public:
	unsigned long                                      bHasEligibleMissions : 1;                                 // 0x0264(0x0004) (Transient)
	unsigned long                                      bHasCompleteMissions : 1;                                 // 0x0264(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GFxMovieMissionStatus");
		return ptr;
	}


	void OnClose();
	void CheckMissionState();
	void OnTick();
	bool Start(bool StartPaused);
};


// Class WillowGame.GFxTextListContent
// 0x000C (0x003C - 0x0048)
class UGFxTextListContent : public UObject
{
public:
	TArray<struct FFlashTextEntry>                     TextListContent;                                          // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GFxTextListContent");
		return ptr;
	}


	class UObject* GetObjectForIndex(int Index);
	void GetTextAndLabelForIndex(int Index, struct FString* Text, struct FString* Icon);
	void AddEntry(struct FFlashTextEntry* NewEntry);
	int GetLength();
	void Empty();
};


// Class WillowGame.GraveyardGFxObject
// 0x0000 (0x0078 - 0x0078)
class UGraveyardGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("GraveyardGFxObject");
		return ptr;
	}


	void Hide();
	void Show();
	void SetTombstoneInfo(const struct FString& TimePlayed, const struct FString& PlayerLevel, const struct FString& MissionsComplete, const struct FString& ChallengesComplete, const struct FString& FavoriteManufacturer, const struct FString& FavoriteWeaponType, const struct FString& KilledBy);
};


// Class WillowGame.HealthBarGFxObject
// 0x0004 (0x0078 - 0x007C)
class UHealthBarGFxObject : public UGFxObject
{
public:
	int                                                CachedCurrentHealth;                                      // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HealthBarGFxObject");
		return ptr;
	}


	void __SetHealth(int CurrentHealth, int MaxHealth);
	void SetHealth(int CurrentHealth, int MaxHealth);
};


// Class WillowGame.WillowLevelTimerDefinition
// 0x001C (0x003C - 0x0058)
class UWillowLevelTimerDefinition : public UGBXDefinition
{
public:
	struct FString                                     TimerHeader;                                              // 0x003C(0x000C) (Edit, Const, NeedCtorLink)
	int                                                XPosition;                                                // 0x0048(0x0004) (Const)
	int                                                YPosition;                                                // 0x004C(0x0004) (Const)
	class UFont*                                       TimerFont;                                                // 0x0050(0x0004) (Const)
	struct FColor                                      TimerColor;                                               // 0x0054(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowLevelTimerDefinition");
		return ptr;
	}

};


// Class WillowGame.HUDScaleGuideGFxMovie
// 0x0014 (0x0390 - 0x03A4)
class UHUDScaleGuideGFxMovie : public UWillowGFxMovie3D
{
public:
	unsigned long                                      CachedWidescreen : 1;                                     // 0x0390(0x0004) (Transient)
	class UGFxObject*                                  Arrow_Up;                                                 // 0x0394(0x0004) (Transient)
	class UGFxObject*                                  Arrow_Down;                                               // 0x0398(0x0004) (Transient)
	class UGFxObject*                                  Arrow_Left;                                               // 0x039C(0x0004) (Transient)
	class UGFxObject*                                  Arrow_Right;                                              // 0x03A0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("HUDScaleGuideGFxMovie");
		return ptr;
	}


	void UpdateFrameForAspectRatio(bool bWidescreen);
	void SetScaleForClip(class UGFxObject* Clip);
	void OnTick();
	bool Start(bool StartPaused);
};


// Class WillowGame.IAIBehavior
// 0x0000 (0x003C - 0x003C)
class UIAIBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IAIBehavior");
		return ptr;
	}

};


// Class WillowGame.IGFxMenuScreenTickable
// 0x0000 (0x003C - 0x003C)
class UIGFxMenuScreenTickable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IGFxMenuScreenTickable");
		return ptr;
	}


	void OnTick();
};


// Class WillowGame.IHijackBehavior
// 0x0000 (0x003C - 0x003C)
class UIHijackBehavior : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IHijackBehavior");
		return ptr;
	}

};


// Class WillowGame.InputBindingsClipGFxObject
// 0x0004 (0x0078 - 0x007C)
class UInputBindingsClipGFxObject : public UGFxObject
{
public:
	unsigned long                                      bIsShown : 1;                                             // 0x0078(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InputBindingsClipGFxObject");
		return ptr;
	}


	void SetCustomizeTip(const struct FString& Label);
	class UGFxObject* AddKeyData(const struct FString& _tag, const struct FString& _caption, const struct FString& _value);
	void EmptyKeyData();
	void InvalidateKeyData();
	void SetKeybindMode();
	void SetControllerMode(const struct FString& Label);
	void _SetVisible(bool bVisible);
	void Hide();
	void Show();
};


// Class WillowGame.InstanceDataContextResolver
// 0x0008 (0x003C - 0x0044)
class UInstanceDataContextResolver : public UAttributeContextResolver
{
public:
	struct FName                                       InstanceDataName;                                         // 0x003C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InstanceDataContextResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.InventoryAttributeDefinition
// 0x0000 (0x005C - 0x005C)
class UInventoryAttributeDefinition : public UAttributeDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryAttributeDefinition");
		return ptr;
	}

};


// Class WillowGame.InventoryDefinitionAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UInventoryDefinitionAttributeContextResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("InventoryDefinitionAttributeContextResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.VendingMachineExGFxDefinition
// 0x0074 (0x0158 - 0x01CC)
class UVendingMachineExGFxDefinition : public UWillowInventoryGFxDefinition
{
public:
	unsigned long                                      bCustomStoragePanelTint : 1;                              // 0x0158(0x0004) (Edit)
	unsigned long                                      bShouldAllowCompare : 1;                                  // 0x0158(0x0004) (Edit)
	unsigned long                                      bDisableSelling : 1;                                      // 0x0158(0x0004) (Edit)
	unsigned long                                      bShouldPollShopItems : 1;                                 // 0x0158(0x0004) (Edit)
	unsigned long                                      bShouldAllowSorting : 1;                                  // 0x0158(0x0004) (Edit)
	unsigned long                                      bShouldShowStorageCountPanel : 1;                         // 0x0158(0x0004) (Edit)
	unsigned long                                      bShouldShowAmmoPanel : 1;                                 // 0x0158(0x0004) (Edit)
	struct FColor                                      CustomStoragePanelTint;                                   // 0x015C(0x0004) (Edit)
	class USwfMovie*                                   CustomStoragePanelHeaderIcon;                             // 0x0160(0x0004) (Edit)
	int                                                CellWidth;                                                // 0x0164(0x0004) (Edit)
	int                                                CellHeight;                                               // 0x0168(0x0004) (Edit)
	int                                                TextureWidth;                                             // 0x016C(0x0004) (Edit)
	int                                                TextureHeight;                                            // 0x0170(0x0004) (Edit)
	struct FString                                     TextureNamePlayer0;                                       // 0x0174(0x000C) (Edit, NeedCtorLink)
	struct FString                                     TextureNamePlayer1;                                       // 0x0180(0x000C) (Edit, NeedCtorLink)
	class USwfMovie*                                   CustomIOTDMovie;                                          // 0x018C(0x0004) (Edit)
	struct FString                                     CustomHeaderStyle;                                        // 0x0190(0x000C) (Edit, NeedCtorLink)
	struct FString                                     CustomIOTDVisitLabel;                                     // 0x019C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned char                                      bUseAdvancedCustomStoragePanelTint;                       // 0x01A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01A9(0x0003) MISSED OFFSET
	struct FASColorTransform                           AdvancedCustomTint;                                       // 0x01AC(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VendingMachineExGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.IUISubMenuNavigation
// 0x0000 (0x003C - 0x003C)
class UIUISubMenuNavigation : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("IUISubMenuNavigation");
		return ptr;
	}


	void ActivateLastSubMenu();
	void ActivateFirstSubMenu();
};


// Class WillowGame.LANServerBrowserGFxObject
// 0x0000 (0x0078 - 0x0078)
class ULANServerBrowserGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LANServerBrowserGFxObject");
		return ptr;
	}


	void SetSortDirectionButtonLabel(const struct FString& Label);
	void SetSortTypeButtonLabel(const struct FString& Label);
	int GetSelectedServerIndex();
	void SetSelectedServerIndex(int SelectedIndex);
	void SetSearchingForGames(bool bSearching);
	void SetGameCountString(const struct FString& GameCountString);
	void EndConfigureServerList();
	void BeginConfigureServerList();
	void AddServerListEntry(const struct FString& ServerName, int CurrentPlayers, int MaxPlayers, const struct FString& CharInfo, const struct FString& MissionInfo, const struct FString& ConnectionStength, const struct FString& Ping);
};


// Class WillowGame.LatentRewardGFxMovie
// 0x0004 (0x0390 - 0x0394)
class ULatentRewardGFxMovie : public UWillowGFxMovie3D
{
public:
	class UMissionRewardGFxObject*                     RewardObject;                                             // 0x0390(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LatentRewardGFxMovie");
		return ptr;
	}


	void OnClosedOnDeath();
	bool HandleInputAxis(int ControllerId, const struct FName& ukey, float Delta, float DeltaTime);
	bool HandleRewardInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void extOnRolloverChoice(int RewardChoice);
	void extOnFocusedChoice(int RewardChoice);
	void extRewardPanelClosed();
	void AcceptReward(int RewardChoice);
	void extOnClickedChoice(int RewardChoice);
	void DisplayRewardsPanel(const struct FPendingMissionRewardData& MissionReward);
	void extTryDisplayRewardPanel();
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.MissionRewardGFxObject
// 0x0190 (0x0078 - 0x0208)
class UMissionRewardGFxObject : public UGFxObject
{
public:
	struct FPendingMissionRewardData                   RewardData;                                               // 0x0078(0x0118)
	class UWillowGFxMovie3D*                           OwningMovie;                                              // 0x0190(0x0004)
	struct FCellContentData                            CardContents;                                             // 0x0194(0x0010) (Component)
	struct FCellContentData                            CellContents[0x2];                                        // 0x01A4(0x0010) (Component)
	class UGearboxRenderTextureManager*                RTM;                                                      // 0x01C4(0x0004) (Transient)
	class UItemCardGFxObject*                          ItemCard;                                                 // 0x01C8(0x0004)
	class AWillowInventory*                            RewardPreviewInv[0x2];                                    // 0x01CC(0x0004)
	struct FString                                     Header_Experience;                                        // 0x01D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Header_Money;                                             // 0x01E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Header_Gear;                                              // 0x01EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Header_Or;                                                // 0x01F8(0x000C) (Const, Localized, NeedCtorLink)
	int                                                RewardChoiceFocused;                                      // 0x0204(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MissionRewardGFxObject");
		return ptr;
	}


	void DestroyPreviewInventory();
	void Interrupted();
	void SetTooltips();
	void InspectItem(class AWillowInventory* Thing);
	class AWillowInventory* GetSelectedThing();
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void __SetCellMarks(int Mark1, int Mark2);
	void __SetCellInfo(int Mine1, int Mine2);
	void SetCellInfo();
	void RemoveEventListeners();
	void OnClickedChoice(int RewardChoice);
	void OnRolloverChoice(int RewardChoice);
	void OnFocusedChoice(int RewardChoice);
	void AcceptReward(int RewardChoice);
	void ConfigureForPlayer(float ControllerId);
	void SetNumItemChoices(int NumItems);
	class AWillowInventory* SpawnInventoryForRewardUI(int RewardIndex);
	void SetUpRewardsPageItems();
	int GetNumItems();
	void SetPlotCritical(const struct FString& frame, const struct FString& Text);
	void SetUpRewardsPage(bool bGrantAltReward);
	void FreeCellData();
	void InitCellData();
	void SetNoReward(class UMissionDefinition* Mission, unsigned char OldStatus);
	void SetPendingMissionRewardData(const struct FPendingMissionRewardData& MissionReward);
	void Init(class UWillowGFxMovie3D* InParent);
};


// Class WillowGame.LevelStreamingVolumeDynamic
// 0x0000 (0x01D4 - 0x01D4)
class ALevelStreamingVolumeDynamic : public ALevelStreamingVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelStreamingVolumeDynamic");
		return ptr;
	}

};


// Class WillowGame.LevelTransitionGFxMovie
// 0x0000 (0x0264 - 0x0264)
class ULevelTransitionGFxMovie : public UWillowGFxMovie
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelTransitionGFxMovie");
		return ptr;
	}

};


// Class WillowGame.LevelTransitionSignGFxMovie
// 0x0000 (0x0254 - 0x0254)
class ULevelTransitionSignGFxMovie : public UGFxMovieInteractiveObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LevelTransitionSignGFxMovie");
		return ptr;
	}


	bool Start(bool StartPaused);
};


// Class WillowGame.LiftActionSkill
// 0x01AC (0x0234 - 0x03E0)
class ALiftActionSkill : public AActionSkill
{
public:
	unsigned char                                      CurrentState;                                             // 0x0234(0x0001) (Net, Transient, RepNotify)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	class AWillowPawn*                                 LiftedPawn;                                               // 0x0238(0x0004) (Net, Transient, RepNotify)
	float                                              StateStartTime;                                           // 0x023C(0x0004) (Transient)
	float                                              StateDuration;                                            // 0x0240(0x0004) (Net, Transient)
	float                                              SkillStartTime;                                           // 0x0244(0x0004) (Transient)
	float                                              SkillDuration;                                            // 0x0248(0x0004) (Net, Transient)
	unsigned long                                      bFizzled : 1;                                             // 0x024C(0x0004) (Net, Transient)
	unsigned long                                      bCharmed : 1;                                             // 0x024C(0x0004)
	unsigned long                                      bReplicatedCharmed : 1;                                   // 0x024C(0x0004) (Net, Transient, RepNotify)
	float                                              ReleaseBufferTime;                                        // 0x0250(0x0004) (Transient)
	TArray<struct FLiftBodyPair>                       LiftBodyMap;                                              // 0x0254(0x000C) (Edit, Const, NeedCtorLink)
	class UPhaseLockDefinition*                        DefaultPhaseLockDef;                                      // 0x0260(0x0004) (Edit, Const)
	class UExpressionEvaluator*                        CanLiftTargetIf;                                          // 0x0264(0x0004) (Edit, Const, EditInline)
	float                                              LiftDuration;                                             // 0x0268(0x0004) (Edit)
	struct FAttributeInitializationData                LockDurationFormula;                                      // 0x026C(0x0010) (Edit)
	struct FAttributeInitializationData                LockDurationScaleFormula;                                 // 0x027C(0x0010) (Edit)
	float                                              LockFadeOutTime;                                          // 0x028C(0x0004) (Edit)
	float                                              LiftSnapTimePct;                                          // 0x0290(0x0004) (Edit)
	float                                              LiftSnapHeightPct;                                        // 0x0294(0x0004) (Edit)
	float                                              LiftBobFrequency;                                         // 0x0298(0x0004) (Edit)
	float                                              LiftBobAmplitude;                                         // 0x029C(0x0004) (Edit)
	float                                              LiftStartTime;                                            // 0x02A0(0x0004) (Transient)
	class AWillowPawn*                                 DroppedPawn;                                              // 0x02A4(0x0004) (Transient)
	struct FVector                                     LiftStartLocation;                                        // 0x02A8(0x000C) (Net, Transient)
	struct FVector                                     PrevBobLocation;                                          // 0x02B4(0x000C) (Transient)
	struct FVector                                     LiftEndLocation;                                          // 0x02C0(0x000C) (Net, Transient, RepNotify)
	class UAttributeDefinition*                        IsPhaselockedAttribute;                                   // 0x02CC(0x0004) (Edit, Const)
	TArray<struct FAttributeEffectData>                PhaselockedAttributeEffects;                              // 0x02D0(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FAppliedAttributeEffect>             SavedPhaselockAttributeModifiers;                         // 0x02DC(0x000C) (NeedCtorLink)
	class USkillDefinition*                            ResurrectSkill;                                           // 0x02E8(0x0004) (Edit, Const)
	class USkillDefinition*                            RuinSkill;                                                // 0x02EC(0x0004) (Edit, Const)
	class USkillDefinition*                            CharmSkill;                                               // 0x02F0(0x0004) (Edit, Const)
	class USkillDefinition*                            SubsequenceSkill;                                         // 0x02F4(0x0004) (Edit, Const)
	class USkillDefinition*                            HeliosSkill;                                              // 0x02F8(0x0004) (Edit, Const)
	struct FVector                                     FirstPersonTranslation;                                   // 0x02FC(0x000C) (Edit)
	float                                              FirstPersonScale;                                         // 0x0308(0x0004) (Edit)
	class UParticleSystem*                             FirstPersonParticleSystem;                                // 0x030C(0x0004) (Edit)
	class UParticleSystem*                             FirstPersonParticleSystem_Fizzled;                        // 0x0310(0x0004) (Edit)
	struct FName                                       FirstPersonAttachmentName;                                // 0x0314(0x0008) (Edit)
	struct FVector                                     ThirdPersonTranslation;                                   // 0x031C(0x000C) (Edit)
	float                                              ThirdPersonScale;                                         // 0x0328(0x0004) (Edit)
	class UParticleSystem*                             ThirdPersonParticleSystem;                                // 0x032C(0x0004) (Edit)
	class UParticleSystem*                             ThirdPersonParticleSystem_Fizzled;                        // 0x0330(0x0004) (Edit)
	struct FName                                       ThirdPersonAttachmentName;                                // 0x0334(0x0008) (Edit)
	struct FVector                                     BubbleFXTranslation;                                      // 0x033C(0x000C) (Edit)
	float                                              BubbleFXScale;                                            // 0x0348(0x0004) (Edit)
	class UParticleSystem*                             BubbleFXParticleSystem_FadeIn;                            // 0x034C(0x0004) (Edit)
	class UParticleSystem*                             BubbleFXParticleSystem;                                   // 0x0350(0x0004) (Edit)
	class UParticleSystem*                             BubbleFXParticleSystem_FadeOut;                           // 0x0354(0x0004) (Edit)
	struct FName                                       BubbleFXAttachmentName;                                   // 0x0358(0x0008) (Edit)
	float                                              BubbleFXIntroTime;                                        // 0x0360(0x0004) (Edit)
	float                                              BubbleFXOutroOverlapTime;                                 // 0x0364(0x0004) (Edit)
	float                                              CollapseDuration;                                         // 0x0368(0x0004) (Edit)
	float                                              MaxCollapseValue;                                         // 0x036C(0x0004) (Edit)
	struct FName                                       PhaselockLifeTimeParamName;                               // 0x0370(0x0008) (Edit)
	struct FName                                       SphereCollapseParamName;                                  // 0x0378(0x0008) (Edit)
	float                                              MissTraceDistance;                                        // 0x0380(0x0004) (Edit)
	class UWillowImpactDefinition*                     MissImpactDefinition;                                     // 0x0384(0x0004) (Edit)
	class USpecialMoveDefinition*                      PhaselockSMD_Hit;                                         // 0x0388(0x0004) (Edit, Const)
	class USpecialMoveDefinition*                      PhaselockSMD_Miss;                                        // 0x038C(0x0004) (Edit, Const)
	class UParticleSystem*                             HeliosFX;                                                 // 0x0390(0x0004) (Edit)
	float                                              CollapseStartTime;                                        // 0x0394(0x0004)
	class AWillowEmitter*                              BubbleFXEmitter_FadeIn;                                   // 0x0398(0x0004)
	class AWillowEmitter*                              BubbleFXEmitter_Loop;                                     // 0x039C(0x0004)
	class AWillowEmitter*                              BubbleFXEmitter_FadeOut;                                  // 0x03A0(0x0004)
	class UParticleSystemComponent*                    FirstPersonPSC;                                           // 0x03A4(0x0004) (ExportObject, Transient, Component, EditInline)
	class AWillowPawn*                                 ClientLiftedPawnForFX;                                    // 0x03A8(0x0004)
	class UPointLightComponent*                        PhaselockLight;                                           // 0x03AC(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              LightBrightness;                                          // 0x03B0(0x0004) (Transient)
	float                                              RuinHoldTime;                                             // 0x03B4(0x0004) (Edit, Const)
	float                                              RuinDamageScalar;                                         // 0x03B8(0x0004)
	struct FVector                                     PawnLocWhenRuinStarted;                                   // 0x03BC(0x000C) (Transient)
	class UProjectileDefinition*                       SubsequenceProjectileDefinition;                          // 0x03C8(0x0004) (Edit, Const)
	struct FAttributeInitializationData                SubsequenceProjectileChance;                              // 0x03CC(0x0010) (Edit, Const)
	class AWillowProjectile*                           SubsequenceProjectile;                                    // 0x03DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LiftActionSkill");
		return ptr;
	}


	float GetDeferredActionSkillTime();
	void EnableActionSkillHUD(class UWillowHUDGFxMovie* HUDMovie);
	void OnCharmTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnRuinImpact(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnLiftFailed(class APawn* SkillInstigator, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnHealedTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnKilledTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnReleasedTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnTargetIsAboutToBecomeUnlocked(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnTargetBecomesLocked(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnTargetBlocked(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnBeginLiftingTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void OnSelectedTarget(class APawn* SkillInstigator, class APawn* SkillTarget, struct FBehaviorConsumerHandle* TheConsumeHandle);
	void UpdateEffects();
	void FinishFX();
	void TransitionToBubbleFXOutro();
	void TransitionToBubbleFXLoop();
	void SpawnBubbleFX();
	void FirstPersonEffectFinished(class UParticleSystemComponent* PSC);
	void RunCustomEvent(const struct FName& EventName, class UObject* EventInstigator, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData);
	void UpdatePhaselockLight();
	class UPhaseLockDefinition* GetPhaseLockDefinition(class AWillowPawn* Target);
	class USpecialMoveDefinition* GetPlayerAnimation(class AWillowPawn* NewTarget);
	void UpdateLiftedPawnMeshOffset(float DeltaTime);
	void UpdateLiftedPawn(float DeltaTime);
	struct FVector GetBobLocation(float DeltaTime);
	struct FVector GetLiftLocation(float LiftTime);
	void CheckLandTarget(bool bForceLand);
	bool PawnIsFlying(class APawn* TestPawn);
	void DropTarget();
	void BeginLifting(class AWillowPawn* BeginLiftTarget, float HeightFromGround);
	struct FVector GetLiftCheckLocation();
	void LiftTarget(class AWillowPawn* BeginLiftTarget);
	void Fizzled();
	void PlayMissImpact();
	void FizzleOut();
	void TargetBlocked(class AWillowPawn* NewPawn);
	void ResurrectTarget(class AWillowPawn* NewTarget);
	bool CanResurrectTarget(class AWillowPawn* NewTarget);
	void ApplyRuin();
	void Ruin();
	bool CanRuin();
	void SpawnSubsequenceProjectile();
	bool CanDoSubsequence();
	bool CanCharmTarget();
	void SpawnHelios();
	bool ShouldSpawnHelios();
	void InterruptPhaseLock();
	bool IsLiftedPawnIncapacitated();
	void ReleaseTarget();
	void StartOutro();
	void FinishLifting(bool bDropImmediately);
	void LockTarget();
	void PhaseLockTarget(class AWillowPawn* NewTarget);
	void SelectTarget(class AWillowPawn* NewTarget);
	bool CanPhaseLockTarget(class AWillowPawn* NewTarget);
	bool IsPhaselocked(class AWillowPawn* NewTarget);
	void EndSkill();
	void OnActionSkillTick(float DeltaTime);
	void Destroyed();
	void StartActionSkillActiveAbility(class AWillowPawn* TheWillowPawn, class AController* TheController, float ActionSkillDuration, float ActiveTimeRemaining, class AWillowPawn* AutoAimTarget);
	void OnActionSkillEnded();
	void OnActionSkillStarted(class AWillowPawn* TheWillowPawn, class AController* TheController, class AWillowPawn* TheTargetPawn);
	void UpdateTargetPawn(class AWillowPawn** TheTargetPawn);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class WillowGame.LoadCharacterLobbyGFxObject
// 0x0000 (0x0078 - 0x0078)
class ULoadCharacterLobbyGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("LoadCharacterLobbyGFxObject");
		return ptr;
	}


	void SetQuadrant(int Quadrant);
	void SetTooltips(const struct FString& Tooltips);
	void SetSlotData(int SlotIndex, const struct FString& CharName, const struct FString& CharClass, const struct FString& CharLevel, bool bIsCurrentCharacter);
	void SetScrollArrows(bool bMoreUp, bool bMoreDown);
	void SetCharacterInfo(int CharLevel, const struct FString& CharName, const struct FString& CharClass, const struct FString& CharPlaythrough, const struct FString& CharCurrentMission, const struct FString& CharPlotMission, const struct FString& CharSaveDate, const struct FString& CharPlayedTime);
	void SelectSlotIndex(int SlotIndex);
	void HideCharacterInfo();
	void ClearSlots();
};


// Class WillowGame.MarketplaceGFxMovieDefinition
// 0x000C (0x00F0 - 0x00FC)
class UMarketplaceGFxMovieDefinition : public UWillowGFxMovie3DDefinition
{
public:
	struct FString                                     DefaultFilterTag;                                         // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MarketplaceGFxMovieDefinition");
		return ptr;
	}

};


// Class WillowGame.MatchmakingLobbyCharacterInfoGFxObject
// 0x0000 (0x0078 - 0x0078)
class UMatchmakingLobbyCharacterInfoGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MatchmakingLobbyCharacterInfoGFxObject");
		return ptr;
	}


	void SetInfo(const struct FString& CharName, const struct FString& CharLevel, const struct FString& CharClass, const struct FString& CharCurrentMission, const struct FString& CharPlotMission, const struct FString& CharPlaythrough);
};


// Class WillowGame.MatchmakingLobbyResultsGFxObject
// 0x0000 (0x0078 - 0x0078)
class UMatchmakingLobbyResultsGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MatchmakingLobbyResultsGFxObject");
		return ptr;
	}


	void UpdateResult(int ResultIndex, const struct FString& MatchTypeIconFrameName, const struct FString& StatusIconFrameName, const struct FString& ResultMessage);
};


// Class WillowGame.MechromancerInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UMechromancerInputContextSelector : public UDefaultInputContextSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MechromancerInputContextSelector");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.MercenaryInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UMercenaryInputContextSelector : public UDefaultInputContextSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("MercenaryInputContextSelector");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.OpenedChestMessage
// 0x000C (0x004C - 0x0058)
class UOpenedChestMessage : public UWillowLocalMessage
{
public:
	struct FString                                     OpenedChest;                                              // 0x004C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("OpenedChestMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.WillowScrollingListDataProviderOptionsBase
// 0x0020 (0x0054 - 0x0074)
class UWillowScrollingListDataProviderOptionsBase : public UWillowScrollingListDataProviderBase
{
public:
	class UOptionsGFxMovie*                            MyOptionsMovie;                                           // 0x0054(0x0004) (Transient)
	TArray<struct FSystemOption>                       RestartSettingInitialValues;                              // 0x0058(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bSkipResolutionUpdate : 1;                                // 0x0064(0x0004) (Transient)
	TArray<struct FDescriptionEntry>                   Descriptions;                                             // 0x0068(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderOptionsBase");
		return ptr;
	}


	void Cleanup(class UWillowScrollingList* TheList);
	void OnPop(class UWillowScrollingList* TheList);
	void UpdateRealtimeSetting(int EventID, class AWillowPlayerController* WPCOwner);
	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	bool HandleSliderChange(int EventID, int NewSliderValue, class UWillowScrollingList* TheList);
	bool HandleSelectionRollover(int EventID, class UWillowScrollingList* TheList);
	bool HandleSelectionChange(int EventID, class UWillowScrollingList* TheList);
	void UpdateDescriptionText(int EventID, class UWillowScrollingList* TheList);
	void Populate(class UWillowScrollingList* TheList);
	struct FString GetDescription(int EventID);
	void ClearDescriptions(class UWillowScrollingList* TheList);
	void AddDescription(int EventID, const struct FString& Description);
	void AddSystemSettingListItem(class UWillowScrollingList* TheList, const struct FName& SettingName, const struct FString& Caption, const struct FString& Description, bool bRequiresRestart, int CurrentSettingIndexOverride, bool bDisabled);
	void AddProfileSettingListItem(class UWillowScrollingList* TheList, int ProfileSettingId, const struct FString& Caption, const struct FString& Description, bool bDisabled);
	static bool FindProfileData(class AWillowPlayerController* WPCOwner, int SettingId, struct FSettingsPropertyPropertyMetaData* PropertyMetaData);
};


// Class WillowGame.OptionsGFxObject
// 0x0000 (0x0078 - 0x0078)
class UOptionsGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("OptionsGFxObject");
		return ptr;
	}


	void SetDescription(const struct FString& Description);
	void SetTooltips(const struct FString& Tooltips);
	void SetPlayerName(const struct FString& PlayerName);
	void SetHeader(const struct FString& Header);
	void SetAspectRatio(const struct FString& AspectRatioFrame);
};


// Class WillowGame.WillowScrollingListDataProviderTopLevelOptions
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderTopLevelOptions : public UWillowScrollingListDataProviderBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderTopLevelOptions");
		return ptr;
	}


	FScriptInterface GetSubmenuForEvent(int EventID, class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
	bool IsPCGamepadConnected();
	bool CanShowStorageSelector(unsigned char Platform, int ControllerId);
	void Populate(class UWillowScrollingList* TheList);
};


// Class WillowGame.PauseGFxMovie
// 0x0040 (0x04F4 - 0x0534)
class UPauseGFxMovie : public UFrontendGFxMovie
{
public:
	class UWillowGFxDialogBox*                         PauseDlg;                                                 // 0x04F4(0x0004) (Transient)
	class UWillowGFxDialogBox*                         SavingDlg;                                                // 0x04F8(0x0004) (Transient)
	class UWillowPauseTicker*                          SaveDurationTicker;                                       // 0x04FC(0x0004) (Transient)
	float                                              SaveStartTime;                                            // 0x0500(0x0004) (Transient)
	TArray<class AWillowPlayerController*>             PlayersToSave;                                            // 0x0504(0x000C) (Transient, NeedCtorLink)
	float                                              MinSaveDuration;                                          // 0x0510(0x0004) (Transient)
	TArray<struct FName>                               EnteredButtons;                                           // 0x0514(0x000C) (Transient, NeedCtorLink)
	struct FString                                     ResumeString;                                             // 0x0520(0x000C) (Const, Localized, NeedCtorLink)
	class AWillowPlayerReplicationInfo*                SplitPlayerPRI;                                           // 0x052C(0x0004) (Transient)
	class AWillowPlayerController*                     SaveOwner;                                                // 0x0530(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PauseGFxMovie");
		return ptr;
	}


	void extFrontEndMenuOnLoad(const struct FString& TargetPath);
	bool LanNetworkOptionsAvailable();
	bool OnlineNetworkOptionsAvailable();
	void OnConfirmCharacters();
	void PromptConfirmCharacters();
	void ValidatePlayers();
	void HandleSplitscreenLeaveAttempt(int ControllerId);
	void PromptQuit();
	void ApplySaveText(class UWillowGFxDialogBox* Dlg, int PlayerIndex, class AWillowPlayerController* WPC, bool bCanSave);
	void CreateSavePromptDialog(class AWillowPlayerController* InPlayer);
	bool PromptQuit_Ok(class UWillowGFxDialogBox* Dlg, int ControllerId);
	void CompleteQuitToMenu(bool bIsSplitPlayer);
	void AllPlayersSaved();
	void SaveNextPlayer(float SaveDuration);
	void SavePlayer(class AWillowPlayerController* PlayerToSave);
	void QuitToMenu(bool bSaveProfile);
	void StorageDeviceChanged(bool bIsValid, class UWillowGFxDialogBox* Dlg);
	void GetPlayer1CancelButtonString(struct FString* Text);
	bool CanShowCharacterSelect(int ControllerId);
	void HandlePopListFail();
	bool IsAllowedToUnpause(int ControllerId);
	void TryToUnpause(int ControllerId);
	bool SharedHandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	void PreviewInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool ShouldDoInitialDeviceSelection();
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.PlaceableDynamicSMActor
// 0x0000 (0x01C4 - 0x01C4)
class APlaceableDynamicSMActor : public ADynamicSMActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlaceableDynamicSMActor");
		return ptr;
	}

};


// Class WillowGame.PlayerBehaviorBase
// 0x0000 (0x004C - 0x004C)
class UPlayerBehaviorBase : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehaviorBase");
		return ptr;
	}

};


// Class WillowGame.PlayerBehavior_CameraAnim
// 0x0004 (0x004C - 0x0050)
class UPlayerBehavior_CameraAnim : public UPlayerBehaviorBase
{
public:
	class UCameraAnim*                                 Anim;                                                     // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_CameraAnim");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_DropItems
// 0x0028 (0x00A4 - 0x00CC)
class UPlayerBehavior_DropItems : public UBehavior_DropItems
{
public:
	struct FName                                       ConfigurationName;                                        // 0x00A4(0x0008) (Edit)
	struct FBehaviorContextData                        TargetContext;                                            // 0x00AC(0x0010) (Edit, Const)
	struct FBehaviorContextData                        LocationContext;                                          // 0x00BC(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_DropItems");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_ForceFeedback
// 0x0008 (0x004C - 0x0054)
class UPlayerBehavior_ForceFeedback : public UPlayerBehaviorBase
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x004C(0x0004) (Edit, EditInline)
	unsigned long                                      ForWeaponFiring : 1;                                      // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_ForceFeedback");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_Melee
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_Melee : public UPlayerBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_Melee");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_PlayEchoCall
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_PlayEchoCall : public UPlayerBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_PlayEchoCall");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_RegisterFastTravelStation
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_RegisterFastTravelStation : public UPlayerBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_RegisterFastTravelStation");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_Reload
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_Reload : public UPlayerBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_Reload");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_SetCurrentProjectile
// 0x0004 (0x004C - 0x0050)
class UPlayerBehavior_SetCurrentProjectile : public UPlayerBehaviorBase
{
public:
	class UProjectileDefinition*                       CurrentProjectile;                                        // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_SetCurrentProjectile");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_SpawnCurrentProjectile
// 0x0020 (0x004C - 0x006C)
class UPlayerBehavior_SpawnCurrentProjectile : public UPlayerBehaviorBase
{
public:
	class UProjectileDefinition*                       ProjectileToSpawn;                                        // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bConsumeResource : 1;                                     // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bSpawnFromLeftHand : 1;                                   // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bNoVelocity : 1;                                          // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bSetProjectileToGrenadeMod : 1;                           // 0x0050(0x0004) (Edit, Const)
	unsigned long                                      bSaveProjectileReference : 1;                             // 0x0050(0x0004) (Edit, Const)
	struct FBehaviorContextData                        InstanceDataContext;                                      // 0x0054(0x0010) (Edit, Const)
	struct FName                                       SavedReferenceName;                                       // 0x0064(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_SpawnCurrentProjectile");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_SpawnTeleporter
// 0x0004 (0x004C - 0x0050)
class UPlayerBehavior_SpawnTeleporter : public UPlayerBehaviorBase
{
public:
	class UPersonalTeleporterDefinition*               PersonalTeleporterDefinition;                             // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_SpawnTeleporter");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_ThrowGrenade
// 0x0000 (0x004C - 0x004C)
class UPlayerBehavior_ThrowGrenade : public UPlayerBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_ThrowGrenade");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_ToggleMeleeWeapon
// 0x0004 (0x004C - 0x0050)
class UPlayerBehavior_ToggleMeleeWeapon : public UPlayerBehaviorBase
{
public:
	unsigned long                                      bAttach : 1;                                              // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bApplyToFirstPerson : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bApplyToThirdPerson : 1;                                  // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_ToggleMeleeWeapon");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_ToggleRevive
// 0x0004 (0x004C - 0x0050)
class UPlayerBehavior_ToggleRevive : public UPlayerBehaviorBase
{
public:
	unsigned long                                      bStart : 1;                                               // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_ToggleRevive");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_UnlockAchievement
// 0x0001 (0x004C - 0x004D)
class UPlayerBehavior_UnlockAchievement : public UPlayerBehaviorBase
{
public:
	unsigned char                                      Achievement;                                              // 0x004C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_UnlockAchievement");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_UnlockAchievementForAllPlayers
// 0x0008 (0x004C - 0x0054)
class UPlayerBehavior_UnlockAchievementForAllPlayers : public UPlayerBehaviorBase
{
public:
	unsigned char                                      Achievement;                                              // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                MinimumPlayersRequired;                                   // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_UnlockAchievementForAllPlayers");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.PlayerBehavior_ViewShake
// 0x0044 (0x004C - 0x0090)
class UPlayerBehavior_ViewShake : public UPlayerBehaviorBase
{
public:
	struct FGearboxViewShakeInfo                       ShakeInfo;                                                // 0x004C(0x0044) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PlayerBehavior_ViewShake");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.WillowSeqAct_AIProvoke
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_AIProvoke : public USequenceAction
{
public:
	class AActor*                                      Provoker;                                                 // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AIProvoke");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_AIScriptedHold
// 0x0005 (0x00A4 - 0x00A9)
class UWillowSeqAct_AIScriptedHold : public USequenceAction
{
public:
	unsigned long                                      bAttackTarget : 1;                                        // 0x00A4(0x0004) (Edit, Const)
	unsigned char                                      Option;                                                   // 0x00A8(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AIScriptedHold");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_AIScriptedFollow
// 0x0014 (0x00A4 - 0x00B8)
class UWillowSeqAct_AIScriptedFollow : public USequenceAction
{
public:
	class AActor*                                      ToFollow;                                                 // 0x00A4(0x0004) (Edit, Const)
	unsigned long                                      bCanShoot : 1;                                            // 0x00A8(0x0004) (Edit, Const)
	unsigned long                                      bUseFormation : 1;                                        // 0x00A8(0x0004) (Edit, Const)
	unsigned char                                      Action;                                                   // 0x00AC(0x0001) (Edit, Const)
	unsigned char                                      Stance;                                                   // 0x00AD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00AE(0x0002) MISSED OFFSET
	float                                              CatchupDistance;                                          // 0x00B0(0x0004) (Edit, Const)
	float                                              HoldStillDistance;                                        // 0x00B4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AIScriptedFollow");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_AIScriptedDeath
// 0x0014 (0x00A4 - 0x00B8)
class UWillowSeqAct_AIScriptedDeath : public USequenceAction
{
public:
	class UDamageTypeDefinition*                       DamageType;                                               // 0x00A4(0x0004) (Edit, Const)
	unsigned char                                      DeathType;                                                // 0x00A8(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	class UWillowAnimDefinition*                       Anim;                                                     // 0x00AC(0x0004) (Edit, Const)
	class UWillowAnimDefinition*                       EditInlineAnim;                                           // 0x00B0(0x0004) (Edit, Const, EditInline)
	class AActor*                                      Killer;                                                   // 0x00B4(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AIScriptedDeath");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_AICombatVolume
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_AICombatVolume : public USequenceAction
{
public:
	class AVolume*                                     CombatVolume;                                             // 0x00A4(0x0004) (Edit, Const)
	unsigned char                                      Option;                                                   // 0x00A8(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	unsigned long                                      bCombatVolumeOnlyLimitsRangedAttacks : 1;                 // 0x00AC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AICombatVolume");
		return ptr;
	}

};


// Class WillowGame.ProjectileBehavior_Attach
// 0x0024 (0x004C - 0x0070)
class UProjectileBehavior_Attach : public UProjectileBehaviorBase
{
public:
	class UAkEvent*                                    AttachAkEvent;                                            // 0x004C(0x0004) (Edit, Const)
	class AActor*                                      HitActor;                                                 // 0x0050(0x0004) (Edit, Const)
	struct FVector                                     HitNormal;                                                // 0x0054(0x000C) (Edit, Const)
	struct FVector                                     HitLocation;                                              // 0x0060(0x000C) (Edit, Const)
	int                                                BoneIndex;                                                // 0x006C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_Attach");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_Detonate
// 0x0001 (0x004C - 0x004D)
class UProjectileBehavior_Detonate : public UProjectileBehaviorBase
{
public:
	unsigned char                                      TargetAllegiance;                                         // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_Detonate");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_FindHomingTarget
// 0x0010 (0x004C - 0x005C)
class UProjectileBehavior_FindHomingTarget : public UProjectileBehaviorBase
{
public:
	unsigned char                                      TargetType;                                               // 0x004C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              TargetSearchFOVAngle;                                     // 0x0050(0x0004) (Edit, Const)
	float                                              TargetSearchRange;                                        // 0x0054(0x0004) (Edit, Const)
	unsigned long                                      bNotInstigator : 1;                                       // 0x0058(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreFOVZTest : 1;                                      // 0x0058(0x0004) (Edit, Const)
	unsigned long                                      bBestForwardTarget : 1;                                   // 0x0058(0x0004) (Edit, Const)
	unsigned long                                      bRetryIfTargetNotFound : 1;                               // 0x0058(0x0004) (Edit, Const)
	unsigned long                                      bUniqueTarget : 1;                                        // 0x0058(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_FindHomingTarget");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_LevelOff
// 0x0008 (0x004C - 0x0054)
class UProjectileBehavior_LevelOff : public UProjectileBehaviorBase
{
public:
	float                                              DesiredWorldZToLevelOff;                                  // 0x004C(0x0004) (Edit)
	float                                              TurnSpeed;                                                // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_LevelOff");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_SetDamageTypeDefinition
// 0x0004 (0x004C - 0x0050)
class UProjectileBehavior_SetDamageTypeDefinition : public UProjectileBehaviorBase
{
public:
	class UWillowDamageTypeDefinition*                 DamageTypeDefinition;                                     // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_SetDamageTypeDefinition");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_SetExplosionDefinition
// 0x0004 (0x004C - 0x0050)
class UProjectileBehavior_SetExplosionDefinition : public UProjectileBehaviorBase
{
public:
	class UExplosionDefinition*                        ExplosionDefinition;                                      // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_SetExplosionDefinition");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_SetHomingTarget
// 0x0004 (0x004C - 0x0050)
class UProjectileBehavior_SetHomingTarget : public UProjectileBehaviorBase
{
public:
	class AActor*                                      AssignedTarget;                                           // 0x004C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_SetHomingTarget");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_SetProximity
// 0x0008 (0x004C - 0x0054)
class UProjectileBehavior_SetProximity : public UProjectileBehaviorBase
{
public:
	float                                              ProximityRadius;                                          // 0x004C(0x0004) (Edit, Const)
	float                                              ProximityHeight;                                          // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_SetProximity");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_SetSpeed
// 0x0008 (0x004C - 0x0054)
class UProjectileBehavior_SetSpeed : public UProjectileBehaviorBase
{
public:
	float                                              NewSpeed;                                                 // 0x004C(0x0004) (Edit, Const)
	float                                              SpeedMultiplier;                                          // 0x0050(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_SetSpeed");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_SetStickyGrenade
// 0x0000 (0x004C - 0x004C)
class UProjectileBehavior_SetStickyGrenade : public UProjectileBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_SetStickyGrenade");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProjectileBehavior_TagPayloadType
// 0x0001 (0x004C - 0x004D)
class UProjectileBehavior_TagPayloadType : public UProjectileBehaviorBase
{
public:
	unsigned char                                      PayloadType;                                              // 0x004C(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProjectileBehavior_TagPayloadType");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


// Class WillowGame.ProximityActor
// 0x000C (0x0188 - 0x0194)
class AProximityActor : public AActor
{
public:
	float                                              ProximityRadius;                                          // 0x0188(0x0004)
	float                                              ProximityHeight;                                          // 0x018C(0x0004)
	class UCylinderComponent*                          ProximityCylinder;                                        // 0x0190(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ProximityActor");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetProximitySize(float NewProximityRadius, float NewProximityHeight);
};


// Class WillowGame.PS3InvitesPopupGFxObject
// 0x0000 (0x0078 - 0x0078)
class UPS3InvitesPopupGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PS3InvitesPopupGFxObject");
		return ptr;
	}


	void Hide();
	void Show();
	void Refresh();
	void SelectionDown();
	void SelectionUp();
	void SetSelectedInviteIndex(int Index);
	int GetSelectedInviteIndex();
	void ClearInvites();
	void AddInvite(const struct FString& InviterName, const struct FString& Message);
};


// Class WillowGame.PsychoInputContextSelector
// 0x0000 (0x003C - 0x003C)
class UPsychoInputContextSelector : public UDefaultInputContextSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("PsychoInputContextSelector");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.QuestAcceptGFxDefinition
// 0x0080 (0x00F0 - 0x0170)
class UQuestAcceptGFxDefinition : public UWillowGFxMovie3DDefinition
{
public:
	class UGFxTextListDefinition*                      MissionTextDefinition;                                    // 0x00F0(0x0004) (Edit)
	int                                                NumEntriesOnMissionList;                                  // 0x00F4(0x0004) (Edit)
	struct FMissionStatusPresentation                  Pres_Available;                                           // 0x00F8(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_Active;                                              // 0x0108(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_ReadyToTurnIn;                                       // 0x0118(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_NotStarted;                                          // 0x0128(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_Complete;                                            // 0x0138(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_Ineligible;                                          // 0x0148(0x0010) (Edit, NeedCtorLink)
	struct FMissionStatusPresentation                  Pres_Failed;                                              // 0x0158(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bUsePPOverride : 1;                                       // 0x0168(0x0004) (Edit)
	float                                              PostProcessInterpolationTime;                             // 0x016C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("QuestAcceptGFxDefinition");
		return ptr;
	}

};


// Class WillowGame.RagdollRemovalPopulationAspect
// 0x0008 (0x003C - 0x0044)
class URagdollRemovalPopulationAspect : public UPopulationAspect
{
public:
	float                                              SecondsBeforeConsideringRagdollRemoval;                   // 0x003C(0x0004) (Edit)
	float                                              SecondsBeforeVisibleRagdollRemoval;                       // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("RagdollRemovalPopulationAspect");
		return ptr;
	}


	void OnSpawnActor(class AActor* SpawnedActor);
};


// Class WillowGame.ReferenceSet
// 0x000C (0x003C - 0x0048)
class UReferenceSet : public UObject
{
public:
	TArray<struct FObjectReference>                    References;                                               // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ReferenceSet");
		return ptr;
	}

};


// Class WillowGame.ResourcePoolAttributeDefinition
// 0x0004 (0x005C - 0x0060)
class UResourcePoolAttributeDefinition : public UAttributeDefinition
{
public:
	class UResourceDefinition*                         Resource;                                                 // 0x005C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ResourcePoolAttributeDefinition");
		return ptr;
	}

};


// Class WillowGame.SeqAct_GetInstanceData
// 0x0010 (0x00A4 - 0x00B4)
class USeqAct_GetInstanceData : public USequenceAction
{
public:
	struct FName                                       InstanceDataName;                                         // 0x00A4(0x0008) (Edit)
	class UObject*                                     InObject;                                                 // 0x00AC(0x0004) (Transient)
	class UObject*                                     OutObject;                                                // 0x00B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqAct_GetInstanceData");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.SeqEvent_SpawnedMissionPickup
// 0x0000 (0x00C4 - 0x00C4)
class USeqEvent_SpawnedMissionPickup : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SeqEvent_SpawnedMissionPickup");
		return ptr;
	}

};


// Class WillowGame.ShieldBarGFxObject
// 0x0004 (0x0078 - 0x007C)
class UShieldBarGFxObject : public UGFxObject
{
public:
	int                                                CachedCurrentShield;                                      // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("ShieldBarGFxObject");
		return ptr;
	}


	void __SetHealth(int CurrentShield, int MaxShield);
	void SetShield(int CurrentShield, int MaxShield);
};


// Class WillowGame.SimpleVolume
// 0x0000 (0x01BC - 0x01BC)
class ASimpleVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SimpleVolume");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
};


// Class WillowGame.SirenInputContextSelector
// 0x0000 (0x003C - 0x003C)
class USirenInputContextSelector : public UDefaultInputContextSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SirenInputContextSelector");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.SkillPointsFeedbackMessage
// 0x000C (0x004C - 0x0058)
class USkillPointsFeedbackMessage : public UWillowLocalMessage
{
public:
	struct FString                                     HasSkillPoints;                                           // 0x004C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SkillPointsFeedbackMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.SoldierInputContextSelector
// 0x0000 (0x003C - 0x003C)
class USoldierInputContextSelector : public UDefaultInputContextSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SoldierInputContextSelector");
		return ptr;
	}


	struct FName SelectContext();
};


// Class WillowGame.SpecialMove_FirstPersonOffHand
// 0x0000 (0x00C0 - 0x00C0)
class USpecialMove_FirstPersonOffHand : public USpecialMove_FirstPerson
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_FirstPersonOffHand");
		return ptr;
	}


	void StopWeaponRecoilAnim(const FScriptInterface& SMI);
};


// Class WillowGame.WillowSeqEvent_JumpAnimStart
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_JumpAnimStart : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_JumpAnimStart");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_JumpAnimIdle
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_JumpAnimIdle : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_JumpAnimIdle");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_JumpAnimStop
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_JumpAnimStop : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_JumpAnimStop");
		return ptr;
	}

};


// Class WillowGame.SpecialMove_WeaponActionOffHand
// 0x0000 (0x00CC - 0x00CC)
class USpecialMove_WeaponActionOffHand : public USpecialMove_WeaponAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("SpecialMove_WeaponActionOffHand");
		return ptr;
	}

};


// Class WillowGame.StashGFxMovie
// 0x002C (0x04A4 - 0x04D0)
class UStashGFxMovie : public UTwoPanelInterfaceGFxMovie
{
public:
	struct FString                                     StashTitle;                                               // 0x04A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StashAddTip;                                              // 0x04B0(0x000C) (Const, Localized, NeedCtorLink)
	class UWillowInventoryStorage*                     StashStorage;                                             // 0x04BC(0x0004)
	struct FSortFilterConfiguration                    StorageSortConfiguration;                                 // 0x04C0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("StashGFxMovie");
		return ptr;
	}


	void SetItemLocation(class AWillowInventory* Thing);
	void OnInventoryPanelSetActive(class UBaseInventoryPanelGFxObject* PanelObject, bool bActive);
	void GetSortConfigDataForPanel(class UInventoryListPanelGFxObject* Panel, struct FSortFilterConfiguration* SortConfigData);
	FScriptInterface GetStorageReferenceForTransferring();
	FScriptInterface GetStorageReferenceForSwapping();
	void GetPlayerPanelItems(TArray<class AWillowInventory*>* Things);
	void GetStoragePanelItems(TArray<class AWillowInventory*>* Things, int* UnloadableCount);
	struct FString GetAddTip();
	struct FString GetTitle();
	void OnLeftPanelInit(class UInventoryListPanelGFxObject* LeftPanel);
	void extInitMainPanel(const struct FString& MainPanelTargetPath);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class WillowGame.TradingOffersPanelGFxObject
// 0x001C (0x00AC - 0x00C8)
class UTradingOffersPanelGFxObject : public UBaseInventoryPanelGFxObject
{
public:
	unsigned long                                      bBrowsingCells : 1;                                       // 0x00AC(0x0004)
	unsigned long                                      bUsingMoneyWidget : 1;                                    // 0x00AC(0x0004)
	unsigned long                                      bSelectedTradeAction : 1;                                 // 0x00AC(0x0004)
	unsigned long                                      bSelectedDuelAction : 1;                                  // 0x00AC(0x0004)
	int                                                SelectedCellSuffix;                                       // 0x00B0(0x0004)
	int                                                NonCellButtonFocused;                                     // 0x00B4(0x0004)
	class AWillowInventory*                            OfferingThing;                                            // 0x00B8(0x0004)
	struct FScriptDelegate                             __MoveFunction__Delegate;                                 // 0x00BC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TradingOffersPanelGFxObject");
		return ptr;
	}


	void CleanUpAfterCancelledDrag();
	void PrepareForFinishDrag(int CellSuffix);
	bool CanFinishDragOnCell(int CellSuffix);
	void OnStartDrag(class UGFxObject* StartingCell, class UGFxObject* OutDragData);
	void __SetCellMarks(int Mark1, int Mark2, int Mark3, int Mark4, int Mark5, int Mark6, int Mark7, int Mark8);
	void __SetCellInfo(int Mine1, int Mine2, int Mine3, int Mine4, int Other1, int Other2, int Other3, int Other4);
	void extOnTrashFavChanged(int Index, int Mark, bool bEnabled);
	int GetMarkFromInventory(class AWillowInventory* WInv);
	void SetCellInfo();
	int GetCellSuffixBasedOnThing(class AWillowInventory* InOfferingThing);
	void CancelOffer();
	void StopOffer();
	void StartOffer(class AWillowInventory* InOfferingThing);
	bool CanUseCLIKButtons();
	bool CanStartOffer();
	bool OfferingMove(unsigned char Dir);
	void __SetSelectedButton(int ButtonIndex, bool bIsForPC);
	void SetSelectedButton();
	bool ButtonsMove(unsigned char Dir);
	bool CellMove(unsigned char Dir);
	class UGFxObject* GetCurrentSelectedButton();
	class UGFxObject* GetCurrentSelectedCell();
	void extOnCellSelected(int InSelectedCellSuffix);
	class AWillowInventory* GetThingByIndex(int Index);
	class AWillowInventory* GetSelectedThing();
	void __SetSelectedCell(int SelectedCell);
	void SetSelectedCell();
	bool PanelOnInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool BlockInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool DeferInput(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool Init(class UBaseTopLevelPanelGFxObject* InParentPanel, const struct FName& InPanelName);
	bool MoveFunction(unsigned char Dir);
};


// Class WillowGame.TurretWeaponTypeDefinition
// 0x0000 (0x0680 - 0x0680)
class UTurretWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("TurretWeaponTypeDefinition");
		return ptr;
	}

};


// Class WillowGame.UBMGameOverGFxMovie
// 0x0008 (0x0264 - 0x026C)
class UUBMGameOverGFxMovie : public UWillowGFxMovie
{
public:
	unsigned long                                      bCanContinue : 1;                                         // 0x0264(0x0004) (Transient)
	class UUBMGameOverGFxObject*                       GameOverClip;                                             // 0x0268(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("UBMGameOverGFxMovie");
		return ptr;
	}


	void extEnableGameOverScreenInput();
	void extGameOverClipReady(const struct FString& TargetPath);
	void PopulatePlayerInfo();
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool Start(bool StartPaused);
};


// Class WillowGame.UBMGameOverGFxObject
// 0x0000 (0x0078 - 0x0078)
class UUBMGameOverGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("UBMGameOverGFxObject");
		return ptr;
	}


	void SetPlayerInfo(const struct FString& Gamertag, const struct FString& TimePlayed, const struct FString& PlayerLevel, const struct FString& MissionsComplete, const struct FString& ChallengesComplete, const struct FString& FavoriteManufacturer, const struct FString& FavoriteWeaponType, const struct FString& KilledBy);
};


// Class WillowGame.VehicleChoiceInfoCardGFxObject
// 0x0000 (0x0078 - 0x0078)
class UVehicleChoiceInfoCardGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleChoiceInfoCardGFxObject");
		return ptr;
	}


	void TryScrollDown();
	void TryScrollUp();
	void TryScrollRight();
	void TryScrollLeft();
	void ConfigureSelectedSkinTypeIndex(int SelectedIndex);
	void ConfigureSelectedVehicleTypeIndex(int SelectedIndex);
	void ConfigureVehicleTypeCell(int CellIndex, bool bEquipped, bool bNew);
	void ConfigureDisplayText(const struct FString& DisplayText);
	void ShowSkinChoices();
	void ShowVehicleChoices();
	void Hide();
	void PopulateSkinList(TArray<struct FString> ListItems, int EquippedItemIndex);
	void EndAddVehicleCells();
	void AddVehicleTypeCell(const struct FString& IconMoviePath);
	void BeginAddVehicleCells();
};


// Class WillowGame.VehicleFamilySelectorGFxObject
// 0x0000 (0x0078 - 0x0078)
class UVehicleFamilySelectorGFxObject : public UGFxObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleFamilySelectorGFxObject");
		return ptr;
	}


	void TryScrollDown();
	void TryScrollUp();
	void SetSelectedVehicleFamilyIndex(int SelectedIndex);
	void EndAddCells();
	void AddCell(const struct FString& Caption, const struct FString& IconMoviePath);
	void BeginAddCells();
};


// Class WillowGame.VehicleWeaponTypeDefinition
// 0x0008 (0x0680 - 0x0688)
class UVehicleWeaponTypeDefinition : public UWeaponTypeDefinition
{
public:
	struct FName                                       WeaponMeshInstanceDataName;                               // 0x0680(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VehicleWeaponTypeDefinition");
		return ptr;
	}

};


// Class WillowGame.VendingMachineFeedbackGFxObject
// 0x0030 (0x0078 - 0x00A8)
class UVendingMachineFeedbackGFxObject : public UGFxObject
{
public:
	struct FString                                     PurchasedLabel;                                           // 0x0078(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SoldLabel;                                                // 0x0084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     InsufficientFundsLabel;                                   // 0x0090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FullLabel;                                                // 0x009C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("VendingMachineFeedbackGFxObject");
		return ptr;
	}


	void Trigger(const struct FString& FrameLabel, const struct FString& LabelText);
	void TriggerCannotCarryOrUse();
	void TriggerCannotAfford();
	void TriggerSold();
	void TriggerPurchased();
};


// Class WillowGame.WeaponShotDebug
// 0x000C (0x0188 - 0x0194)
class AWeaponShotDebug : public AActor
{
public:
	class UArrowComponent*                             AimArrow;                                                 // 0x0188(0x0004) (Edit, ExportObject, Component, EditInline)
	class UArrowComponent*                             ShotArrow;                                                // 0x018C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UArrowComponent*                             SpreadShotArrow;                                          // 0x0190(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WeaponShotDebug");
		return ptr;
	}


	void FinalizeComponentInitialization(bool bHideAimArrow, bool bHideShotArrow, bool bHideSpreadArrow);
};


// Class WillowGame.WillowAIEncounterComponent
// 0x0000 (0x01C4 - 0x01C4)
class UWillowAIEncounterComponent : public UWillowAIDenComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAIEncounterComponent");
		return ptr;
	}

};


// Class WillowGame.WillowAnimNode_Audio
// 0x000B (0x00C5 - 0x00D0)
class UWillowAnimNode_Audio : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	class UAkEvent*                                    StartAkEvent;                                             // 0x00C8(0x0004) (Edit, Const)
	class UAkEvent*                                    StopAkEvent;                                              // 0x00CC(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowAnimNode_Audio");
		return ptr;
	}


	void OnCeaseRelevant();
	void OnBecomeRelevant();
	bool IsValid();
};


// Class WillowGame.WillowPickupMessage
// 0x0000 (0x004C - 0x004C)
class UWillowPickupMessage : public UWillowLocalMessage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPickupMessage");
		return ptr;
	}


	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static void ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class WillowGame.WillowConsole
// 0x0000 (0x01D0 - 0x01D0)
class UWillowConsole : public UConsole
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowConsole");
		return ptr;
	}

};


// Class WillowGame.WillowDamageType_Bullet
// 0x0000 (0x0080 - 0x0080)
class UWillowDamageType_Bullet : public UWillowDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDamageType_Bullet");
		return ptr;
	}

};


// Class WillowGame.WillowDmgSource_MeleeWithBlade
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgSource_MeleeWithBlade : public UWillowDmgSource_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgSource_MeleeWithBlade");
		return ptr;
	}

};


// Class WillowGame.WillowDmgType_VehicleCollision
// 0x0000 (0x0080 - 0x0080)
class UWillowDmgType_VehicleCollision : public UWillowDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowDmgType_VehicleCollision");
		return ptr;
	}

};


// Class WillowGame.WillowEmit_BodyFlame
// 0x0000 (0x0218 - 0x0218)
class AWillowEmit_BodyFlame : public AWillowEmit_HitEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEmit_BodyFlame");
		return ptr;
	}

};


// Class WillowGame.WillowEmitterPool
// 0x0000 (0x01F0 - 0x01F0)
class AWillowEmitterPool : public AEmitterPool
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowEmitterPool");
		return ptr;
	}

};


// Class WillowGame.WillowPendingLevelPlayerController
// 0x0000 (0x1988 - 0x1988)
class AWillowPendingLevelPlayerController : public AWillowPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPendingLevelPlayerController");
		return ptr;
	}


	void HandleSignInChange();
	unsigned char GetLoginStatus();
	void ClearPlayerStandIn(class APlayerReplicationInfo* PRI);
	class APlayerStandIn* GetPlayerStandIn(class APlayerReplicationInfo* PRI);
	void GenericPlayerInitialization();
	void Destroyed();
	void PostBeginPlay();
};


// Class WillowGame.WillowGFxBuddyPlane
// 0x0000 (0x0264 - 0x0264)
class UWillowGFxBuddyPlane : public UWillowGFxMovie
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxBuddyPlane");
		return ptr;
	}

};


// Class WillowGame.WillowGFxEditDialog
// 0x001C (0x0264 - 0x0280)
class UWillowGFxEditDialog : public UWillowGFxMovie
{
public:
	class UWillowGFxLobbyTools*                        Tools;                                                    // 0x0264(0x0004) (Transient)
	TArray<struct FMenuItemCallback>                   MenuItemCallbacks;                                        // 0x0268(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMenuItemClicked__Delegate;                            // 0x0274(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxEditDialog");
		return ptr;
	}


	struct FString GetDefaultEditBoxValue();
	void DisplayOkBox(const struct FString& CaptionFile, const struct FString& CaptionSection, const struct FString& InitialEditValue, const struct FScriptDelegate& OnClicked, bool bAutoFocusEditBox);
	void extMenuItemClicked(int PlayerID, const struct FString& STag);
	struct FString GetEditBoxValueForTag(const struct FName& Tag);
	void SetDialogueText(const struct FString& MarkedUpDialogueText);
	void SetCaptionText(const struct FString& MarkedUpCaptionText);
	void ApplyLayout();
	void AddMenuItem(const struct FString& Label, const struct FName& Tag, const struct FScriptDelegate& OnClicked);
	void AddEditItem(const struct FString& Label, const struct FName& Tag, const struct FString& InitialText, const struct FScriptDelegate& OnClicked);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	int GetLocalPlayerID(int PlayerIndex);
	void OnClose();
	bool Start(bool StartPaused);
	void OnMenuItemClicked(class UWillowGFxEditDialog* EditDialog);
};


// Class WillowGame.WillowGFxLobbyTools
// 0x0014 (0x003C - 0x0050)
class UWillowGFxLobbyTools : public UObject
{
public:
	class UWillowGFxMovie*                             Movie;                                                    // 0x003C(0x0004) (Transient)
	struct FString                                     InputMenuTag;                                             // 0x0040(0x000C) (Transient, NeedCtorLink)
	int                                                InputPlayerID;                                            // 0x004C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxLobbyTools");
		return ptr;
	}


	void FinishInput(bool bSuccessful);
	void BeginInputText(int PlayerID, const struct FString& MenuTag, int MaxChars, const struct FString& CurrentValue, const struct FString& Title, const struct FString& Description);
	void AS_SetArgU(int Idx, TArray<struct FASValue>* args);
	void AS_SetArgB(int Idx, bool B, TArray<struct FASValue>* args);
	void AS_SetArgS(int Idx, const struct FString& S, const struct FString& Undefined, TArray<struct FASValue>* args);
	void AS_SetArgI(int Idx, int N, int Undefined, TArray<struct FASValue>* args);
	void AS_SetArgF(int Idx, float N, float Undefined, TArray<struct FASValue>* args);
	void InvokeNoArgs(const struct FString& Method);
	void menuSetValue(int PlayerID, const struct FString& MenuTag, const struct FString& Value);
	struct FString menuGetValue(int PlayerID, const struct FString& MenuTag);
	void menuAddEditItem(const struct FString& menuCaption, const struct FString& MenuTag, const struct FString& Options, const struct FString& Commands);
	void menuAddSlider(const struct FString& menuCaption, const struct FString& MenuTag, const struct FString& Options, const struct FString& Commands);
	void menuUpdateSpinner(int PlayerID, const struct FString& MenuTag, const struct FString& Choices);
	void menuAddSpinner(const struct FString& menuCaption, const struct FString& MenuTag, const struct FString& Choices, const struct FString& Commands);
	void menuAddCharacterItem(int menuDepth, int MenuID, int CharLevel, const struct FString& CharClass, const struct FString& CharName, const struct FString& Command, const struct FString& altCommand);
	void menuAddItem(int menuDepth, const struct FString& menuCaption, const struct FString& MenuTag, const struct FString& Command, const struct FString& altCommand);
	void menuEnd();
	void menuStart(int PlayerID, const struct FString& MenuTag);
	bool inNeedsInput(int PlayerID);
	void inSelect(int PlayerID, const struct FString& Context);
	void inBack(int PlayerID);
	void inPrev(int PlayerID);
	void inNext(int PlayerID);
	void inMinus(int PlayerID);
	void inPlus(int PlayerID);
	void inCloseAllMenus(int PlayerID);
	void inFocus(int PlayerID, bool bFocus);
	void Init(class UWillowGFxMovie* inMovie);
};


// Class WillowGame.WillowGFxTrainingDialogBox
// 0x0005 (0x02F4 - 0x02F9)
class UWillowGFxTrainingDialogBox : public UWillowGFxDialogBox
{
public:
	float                                              DelayUntilShowOk;                                         // 0x02F4(0x0004) (Transient)
	unsigned char                                      StatusMenuTab;                                            // 0x02F8(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxTrainingDialogBox");
		return ptr;
	}


	void OnClose();
	void OnTick();
	void DisplayDelayedOkBoxForTraining(const struct FString& Text, const struct FString& Caption, float OkDelay);
	void Accepted(int ControllerId);
	void Cancelled(int ControllerId);
	bool HandleInputKey(int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool Start(bool StartPaused);
};


// Class WillowGame.WillowGFxTrainingDialogBox_NoPause
// 0x0003 (0x02F9 - 0x02FC)
class UWillowGFxTrainingDialogBox_NoPause : public UWillowGFxTrainingDialogBox
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F9(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowGFxTrainingDialogBox_NoPause");
		return ptr;
	}

};


// Class WillowGame.WillowInteractiveObjectAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UWillowInteractiveObjectAttributeContextResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInteractiveObjectAttributeContextResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.WillowInventoryManagerAttributeContextResolver
// 0x0000 (0x003C - 0x003C)
class UWillowInventoryManagerAttributeContextResolver : public UAttributeContextResolver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowInventoryManagerAttributeContextResolver");
		return ptr;
	}


	class UObject* GetAttributeContext(class UAttributeDefinitionBase* Attribute, class UObject* AttributeContextSource);
};


// Class WillowGame.WillowLANGameSearch
// 0x0000 (0x0100 - 0x0100)
class UWillowLANGameSearch : public UWillowOnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowLANGameSearch");
		return ptr;
	}

};


// Class WillowGame.WillowLockWarningMessage
// 0x0038 (0x004C - 0x0084)
class UWillowLockWarningMessage : public UWillowLocalMessage
{
public:
	struct FString                                     MissileLockOnString;                                      // 0x004C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     AvrilLockOnString;                                        // 0x0058(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     RadarLockString;                                          // 0x0064(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     SPMAAcquiredString;                                       // 0x0070(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FColor                                      RedColor;                                                 // 0x007C(0x0004)
	struct FColor                                      YellowColor;                                              // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowLockWarningMessage");
		return ptr;
	}


	static struct FColor GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static struct FString GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	static unsigned char AnnouncementLevel(unsigned char MessageIndex);
};


// Class WillowGame.WillowSeqAct_AILookAt
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_AILookAt : public USequenceAction
{
public:
	class AActor*                                      LookAt;                                                   // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_AILookAt");
		return ptr;
	}

};


// Class WillowGame.WillowOnlineGameSearchSpecific
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchSpecific : public UWillowOnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSearchSpecific");
		return ptr;
	}

};


// Class WillowGame.WillowOnlineGameSearchNarrow
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchNarrow : public UWillowOnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSearchNarrow");
		return ptr;
	}

};


// Class WillowGame.WillowOnlineGameSearchBroad
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchBroad : public UWillowOnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSearchBroad");
		return ptr;
	}

};


// Class WillowGame.WillowOnlineGameSearchCustom
// 0x0000 (0x0100 - 0x0100)
class UWillowOnlineGameSearchCustom : public UWillowOnlineGameSearch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowOnlineGameSearchCustom");
		return ptr;
	}

};


// Class WillowGame.WillowTeleporterExitPoint
// 0x0004 (0x0188 - 0x018C)
class AWillowTeleporterExitPoint : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0188(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTeleporterExitPoint");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_DuelChallengeIssued
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_DuelChallengeIssued : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_DuelChallengeIssued");
		return ptr;
	}

};


// Class WillowGame.WillowSeqEvent_DuelChallengeAccepted
// 0x0000 (0x00C4 - 0x00C4)
class UWillowSeqEvent_DuelChallengeAccepted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_DuelChallengeAccepted");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_PlayArmAnimation
// 0x0001 (0x00A4 - 0x00A5)
class UWillowSeqAct_PlayArmAnimation : public USequenceAction
{
public:
	unsigned char                                      AnimationType;                                            // 0x00A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_PlayArmAnimation");
		return ptr;
	}

};


// Class WillowGame.WillowPopulationEncounter
// 0x0000 (0x01CC - 0x01CC)
class AWillowPopulationEncounter : public APopulationEncounter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowPopulationEncounter");
		return ptr;
	}


	void OnAIAbortMoveToActor(class USeqAct_AIAbortMoveToActor* inAction);
	void OnAICombatVolume(class UWillowSeqAct_AICombatVolume* inAction);
	void OnAIScripted(class UWillowSeqAct_AIScripted* inAction);
	void OnAIScriptedAnim(class UWillowSeqAct_AIScriptedAnim* inAction);
	void OnAIScriptedDeath(class UWillowSeqAct_AIScriptedDeath* inAction);
	void OnAIScriptedFollow(class UWillowSeqAct_AIScriptedFollow* inAction);
	void OnAIScriptedHold(class UWillowSeqAct_AIScriptedHold* inAction);
	void OnAISetItemTossTarget(class UWillowSeqAct_AISetItemTossTarget* inAction);
	void OnAIProvoke(class UWillowSeqAct_AIProvoke* inAction);
};


// Class WillowGame.WillowReplicatedInventoryManager
// 0x0000 (0x0238 - 0x0238)
class AWillowReplicatedInventoryManager : public AWillowInventoryManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowReplicatedInventoryManager");
		return ptr;
	}

};


// Class WillowGame.WillowScrollingListDataProviderApplyRequiredOption
// 0x0028 (0x0074 - 0x009C)
class UWillowScrollingListDataProviderApplyRequiredOption : public UWillowScrollingListDataProviderOptionsBase
{
public:
	int                                                CurrentSettingValue;                                      // 0x0074(0x0004) (Transient)
	int                                                CurrentSpinnerValue;                                      // 0x0078(0x0004) (Transient)
	struct FName                                       SettingName;                                              // 0x007C(0x0008) (Const)
	struct FString                                     LocalizedSettingCaptionString;                            // 0x0084(0x000C) (Const, NeedCtorLink)
	struct FString                                     LocalizedSettingDescriptionString;                        // 0x0090(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderApplyRequiredOption");
		return ptr;
	}


	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	void Populate(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderAudioOptions
// 0x0000 (0x0074 - 0x0074)
class UWillowScrollingListDataProviderAudioOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderAudioOptions");
		return ptr;
	}


	void UpdateRealtimeSetting(int EventID, class AWillowPlayerController* WPCOwner);
	void StopAllVolumeSounds(class UWillowScrollingList* TheList);
	void CheckStopVolumeSound(int EventID, class UWillowScrollingList* TheList);
	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	bool HandleSliderChange(int EventID, int NewSliderValue, class UWillowScrollingList* TheList);
	bool HandleSelectionChange(int EventID, class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
	void OnPop(class UWillowScrollingList* TheList);
	void Cleanup(class UWillowScrollingList* TheList);
	void Populate(class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderExtras
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderExtras : public UWillowScrollingListDataProviderBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderExtras");
		return ptr;
	}


	void Populate(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderFrontEnd
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderFrontEnd : public UWillowScrollingListDataProviderBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderFrontEnd");
		return ptr;
	}


	FScriptInterface GetSubmenuForEvent(int EventID, class UWillowScrollingList* TheList);
	void Populate(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderGameOptions
// 0x0000 (0x0074 - 0x0074)
class UWillowScrollingListDataProviderGameOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderGameOptions");
		return ptr;
	}


	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	void AddSettingSteeringMethod(class UWillowScrollingList* TheList, const struct FString& Caption, const struct FString& Description, bool bDisabled);
	void Populate(class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderGamepadOptions
// 0x00CC (0x0074 - 0x0140)
class UWillowScrollingListDataProviderGamepadOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:
	TArray<struct FName>                               KeyCaptionList;                                           // 0x0074(0x000C) (NeedCtorLink)
	struct FString                                     PlatformFrames[0x3];                                      // 0x0080(0x000C) (NeedCtorLink)
	TArray<struct FName>                               ControllerPresetTags;                                     // 0x00A4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             ControllerPresetNames;                                    // 0x00B0(0x000C) (Transient, NeedCtorLink)
	class UInputBindingsClipGFxObject*                 ControllerMappingClip;                                    // 0x00BC(0x0004) (Transient)
	TArray<class UGFxObject*>                          KeyTextFieldList;                                         // 0x00C0(0x000C) (Transient, NeedCtorLink)
	class UGFxObject*                                  PresetNameField;                                          // 0x00CC(0x0004) (Transient)
	class UOptionsGFxMovie*                            MyOptionsGFxMovie;                                        // 0x00D0(0x0004) (Transient)
	int                                                CustomPresetIndex;                                        // 0x00D4(0x0004) (Transient)
	int                                                CurrentSelectedPresetIndex;                               // 0x00D8(0x0004) (Transient)
	class UWillowPlayerInput*                          WPI;                                                      // 0x00DC(0x0004) (Transient)
	unsigned long                                      bIsUsingCustomBindings : 1;                               // 0x00E0(0x0004) (Transient)
	unsigned long                                      bIsInCustomizeMode : 1;                                   // 0x00E0(0x0004) (Transient)
	unsigned long                                      bIsInWarnExitMode : 1;                                    // 0x00E0(0x0004) (Transient)
	unsigned long                                      bIsWaitingForFirstButton : 1;                             // 0x00E0(0x0004) (Transient)
	unsigned long                                      bIsWaitingForSecondButton : 1;                            // 0x00E0(0x0004) (Transient)
	class UWillowScrollingList*                        MyWillowScrollingList;                                    // 0x00E4(0x0004) (Transient)
	unsigned char                                      Platform;                                                 // 0x00E8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	int                                                NonCustomizedPresetIndex;                                 // 0x00EC(0x0004) (Transient)
	struct FName                                       FirstButtonName;                                          // 0x00F0(0x0008) (Transient)
	struct FName                                       SecondButtonName;                                         // 0x00F8(0x0008) (Transient)
	int                                                RemappedButtonIndexes[0x10];                              // 0x0100(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderGamepadOptions");
		return ptr;
	}


	void UpdatePresetCaptions(const struct FName& PresetTag, const struct FString& PresetName, bool bIsCustomPresetIndex, int HightlightCaptionIndex);
	void InitControllerMapping(class UWillowScrollingList* TheList);
	void HideControllerMapping();
	int GetIndexForButton(const struct FName& ButtonName);
	void StartCustomizeMode();
	bool HandleExitWarnDlgInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	void DisplayExitWarnDialog();
	bool HandleClobberDlgInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	bool HandleInputKey(const struct FName& ukey, unsigned char uevent);
	struct FString EncodeButton(const struct FString& InButtonName);
	struct FString CreateControllerRebindingString();
	void OnPop(class UWillowScrollingList* TheList);
	void Cleanup(class UWillowScrollingList* TheList);
	bool HandleSelectionRollover(int EventID, class UWillowScrollingList* TheList);
	bool HandleSelectionChange(int EventID, class UWillowScrollingList* TheList);
	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	void AddControllerPresets(class UWillowScrollingList* TheList);
	bool HandleCustomizeModeDlgInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	void Populate(class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderKeyboardMouseOptions
// 0x0020 (0x0074 - 0x0094)
class UWillowScrollingListDataProviderKeyboardMouseOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:
	class AWillowPlayerController*                     WPCOwner;                                                 // 0x0074(0x0004) (Transient)
	class UInputBindingsClipGFxObject*                 ControllerMappingClip;                                    // 0x0078(0x0004) (Transient)
	class UInputDeviceCollectionDefinition*            DeviceCollection;                                         // 0x007C(0x0004) (Transient)
	TArray<struct FKeyBindInfo>                        KeyBinds;                                                 // 0x0080(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentKeyBindSelection;                                  // 0x008C(0x0004) (Transient)
	unsigned long                                      bNeedsToSaveKeyBinds : 1;                                 // 0x0090(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderKeyboardMouseOptions");
		return ptr;
	}


	void ShowControllerMapping(bool bVisible);
	void OnPop(class UWillowScrollingList* TheList);
	void Cleanup(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
	bool HandleSelectionRollover(int EventID, class UWillowScrollingList* TheList);
	bool HandleSelectionChange(int EventID, class UWillowScrollingList* TheList);
	bool OnResetKeyBindsButtonClicked(class UWillowGFxDialogBox* Dlg, int ControllerId);
	bool HandleKeySwapDialog(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	void BindCurrentSelection(const struct FName& Key);
	bool HandleBindInputKey(class UWillowGFxDialogBox* Dlg, int ControllerId, const struct FName& ukey, unsigned char uevent);
	void DoBind();
	bool AllowBindKey(const struct FName& Key);
	bool IsGamepadKey(const struct FName& Key);
	struct FString GetLocalizedKeyName(const struct FName& InputKeyName);
	int FindBinding(const struct FName& Tag);
	int AddKeyBindEntry(const struct FName& Tag, const struct FName& ActionName, const struct FString& Caption);
	int AddAxisButtonBinding(struct FInputDeviceAxisData* Axis);
	struct FString GetAxisButtonCaption(struct FInputDeviceAxisData* Axis);
	int AddButtonBinding(struct FInputDeviceButtonData* Button);
	struct FString GetButtonCaption(const struct FInputDeviceButtonData& Button);
	struct FName GetActionNameForButton(const struct FInputDeviceButtonData& Button);
	void extOnPopulateKeys();
	void extOnKeySelectionChange(const struct FString& Tag);
	void extOnKeyClicked(const struct FString& Tag);
	void InitKeyBinding(class UWillowScrollingList* TheList);
	void InitDeviceCollection();
	void Populate(class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderLobby
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderLobby : public UWillowScrollingListDataProviderBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderLobby");
		return ptr;
	}


	void Populate(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderMapList
// 0x0010 (0x0054 - 0x0064)
class UWillowScrollingListDataProviderMapList : public UWillowScrollingListDataProviderBase
{
public:
	class UTestMapsListDefinition*                     MapListDef;                                               // 0x0054(0x0004) (Transient)
	struct FString                                     MenuDisplayNameOverride;                                  // 0x0058(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderMapList");
		return ptr;
	}


	void Populate(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
	struct FString GetMenuDisplayName();
};


// Class WillowGame.WillowScrollingListDataProviderPause
// 0x0000 (0x0054 - 0x0054)
class UWillowScrollingListDataProviderPause : public UWillowScrollingListDataProviderBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderPause");
		return ptr;
	}


	void Populate(class UWillowScrollingList* TheList);
	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderResolutionOptions
// 0x0000 (0x009C - 0x009C)
class UWillowScrollingListDataProviderResolutionOptions : public UWillowScrollingListDataProviderApplyRequiredOption
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderResolutionOptions");
		return ptr;
	}


	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderVideoOptions
// 0x0008 (0x0074 - 0x007C)
class UWillowScrollingListDataProviderVideoOptions : public UWillowScrollingListDataProviderOptionsBase
{
public:
	class UHUDScaleGuideGFxMovie*                      ScaleGuide;                                               // 0x0074(0x0004) (Transient)
	int                                                NewColorBlindMode;                                        // 0x0078(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderVideoOptions");
		return ptr;
	}


	FScriptInterface GetSubmenuForEvent(int EventID, class UWillowScrollingList* TheList);
	void HideGuide(class UWillowScrollingList* TheList);
	void ShowGuide(class UWillowScrollingList* TheList);
	void UpdateRealtimeSetting(int EventID, class AWillowPlayerController* WPCOwner);
	void Cleanup(class UWillowScrollingList* TheList);
	void OnPop(class UWillowScrollingList* TheList);
	bool HandleSelectionRollover(int EventID, class UWillowScrollingList* TheList);
	bool HandleSelectionChange(int EventID, class UWillowScrollingList* TheList);
	bool HandleSpinnerChange(int EventID, int NewChoiceIndex, const struct FString& NewChoiceValue, class UWillowScrollingList* TheList);
	void AddSettingColorBlind(class UWillowScrollingList* InTheList, const struct FString& Caption, const struct FString& Description, bool bDisabled);
	void Populate(class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowScrollingListDataProviderWindowModeOptions
// 0x0000 (0x009C - 0x009C)
class UWillowScrollingListDataProviderWindowModeOptions : public UWillowScrollingListDataProviderApplyRequiredOption
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowScrollingListDataProviderWindowModeOptions");
		return ptr;
	}


	bool HandleClick(int EventID, class UWillowScrollingList* TheList);
};


// Class WillowGame.WillowSeqAct_BossBar
// 0x0008 (0x00A4 - 0x00AC)
class UWillowSeqAct_BossBar : public USequenceAction
{
public:
	unsigned long                                      bEnable : 1;                                              // 0x00A4(0x0004) (Edit)
	class AWillowAIPawn*                               BossActor;                                                // 0x00A8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_BossBar");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_CleanUpPlayerVehicles
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_CleanUpPlayerVehicles : public USequenceAction
{
public:
	unsigned long                                      CleanUpOccupiedVehiclesAsWell : 1;                        // 0x00A4(0x0004) (Edit)
	unsigned long                                      PlayDeRezEffects : 1;                                     // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_CleanUpPlayerVehicles");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ClientFlagGet
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_ClientFlagGet : public USequenceAction
{
public:
	struct FName                                       ClientFlagName;                                           // 0x00A4(0x0008) (Edit)
	unsigned long                                      bValue : 1;                                               // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ClientFlagGet");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ClientFlagSet
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_ClientFlagSet : public USequenceAction
{
public:
	struct FName                                       ClientFlagName;                                           // 0x00A4(0x0008) (Edit)
	unsigned long                                      bEnableFlag : 1;                                          // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ClientFlagSet");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_CloseColiseumOverlay
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_CloseColiseumOverlay : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_CloseColiseumOverlay");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ColiseumAllDead
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumAllDead : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumAllDead");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ColiseumAwardCertificate
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumAwardCertificate : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumAwardCertificate");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ColiseumNotify
// 0x0001 (0x00A4 - 0x00A5)
class UWillowSeqAct_ColiseumNotify : public USequenceAction
{
public:
	unsigned char                                      NotifyType;                                               // 0x00A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumNotify");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ColiseumRoundAnnounce
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumRoundAnnounce : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumRoundAnnounce");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ColiseumRuleAnnounce
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumRuleAnnounce : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumRuleAnnounce");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ColiseumStartTimer
// 0x0001 (0x00A4 - 0x00A5)
class UWillowSeqAct_ColiseumStartTimer : public USequenceAction
{
public:
	unsigned char                                      CountdownLength;                                          // 0x00A4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumStartTimer");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ColiseumVictory
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_ColiseumVictory : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ColiseumVictory");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_ExitVehicle
// 0x0010 (0x00A4 - 0x00B4)
class UWillowSeqAct_ExitVehicle : public USequenceAction
{
public:
	TArray<int>                                        SeatsToForceExitOn;                                       // 0x00A4(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      UseDismountAnimationIfAvailable : 1;                      // 0x00B0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_ExitVehicle");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_KillPawnBasedOnAllegiance
// 0x0014 (0x00A4 - 0x00B8)
class UWillowSeqAct_KillPawnBasedOnAllegiance : public USequenceAction
{
public:
	class UPawnAllegiance*                             AllegianceToBaseKillsOn;                                  // 0x00A4(0x0004) (Edit, Const)
	unsigned char                                      AllegianceKillRelationship;                               // 0x00A8(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	class UClass*                                      DamageSource;                                             // 0x00AC(0x0004) (Edit, Const)
	class UWillowDamageTypeDefinition*                 DamageType;                                               // 0x00B0(0x0004) (Edit, Const)
	unsigned long                                      bAllowInventoryToDrop : 1;                                // 0x00B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_KillPawnBasedOnAllegiance");
		return ptr;
	}


	class AController* GetKillInstigatorFromVariableLink();
	class UPawnAllegiance* GetAllegianceFromVariableLink();
	void KillBasedOnThisAllegiance(class UPawnAllegiance* AllegianceToUse);
	void Activated();
};


// Class WillowGame.WillowSeqAct_MarkPlaythroughCompleted
// 0x0000 (0x00A4 - 0x00A4)
class UWillowSeqAct_MarkPlaythroughCompleted : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_MarkPlaythroughCompleted");
		return ptr;
	}

};


// Class WillowGame.WillowSeqAct_NotifyDesignerAttribute
// 0x000C (0x00A4 - 0x00B0)
class UWillowSeqAct_NotifyDesignerAttribute : public USequenceAction
{
public:
	struct FName                                       AttributeName;                                            // 0x00A4(0x0008) (Edit)
	class UAttributeDefinition*                        OptionalAttributeDefinition;                              // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_NotifyDesignerAttribute");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_OpenColiseumOverlay
// 0x0004 (0x00A4 - 0x00A8)
class UWillowSeqAct_OpenColiseumOverlay : public USequenceAction
{
public:
	class UWillowGFxColiseumOverlayDefinition*         OverlayDefinition;                                        // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_OpenColiseumOverlay");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqAct_UpdateColiseumRuleOverlay
// 0x0005 (0x00A4 - 0x00A9)
class UWillowSeqAct_UpdateColiseumRuleOverlay : public USequenceAction
{
public:
	class UColiseumRuleDefinition*                     RuleInfo;                                                 // 0x00A4(0x0004) (Edit)
	unsigned char                                      UpdateMode;                                               // 0x00A8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqAct_UpdateColiseumRuleOverlay");
		return ptr;
	}


	void Activated();
};


// Class WillowGame.WillowSeqEvent_CounterAtTarget
// 0x0001 (0x00C4 - 0x00C5)
class UWillowSeqEvent_CounterAtTarget : public USequenceEvent
{
public:
	unsigned char                                      Event;                                                    // 0x00C4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSeqEvent_CounterAtTarget");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_LeftLowerEyelidLook
// 0x0000 (0x0100 - 0x0100)
class UWillowSkelControl_LeftLowerEyelidLook : public UWillowSkelControl_LowerEyelidLook
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_LeftLowerEyelidLook");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_LeftUpperEyelidLook
// 0x0000 (0x0114 - 0x0114)
class UWillowSkelControl_LeftUpperEyelidLook : public UWillowSkelControl_UpperEyelidLook
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_LeftUpperEyelidLook");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_RightLowerEyelidLook
// 0x0000 (0x0100 - 0x0100)
class UWillowSkelControl_RightLowerEyelidLook : public UWillowSkelControl_LowerEyelidLook
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_RightLowerEyelidLook");
		return ptr;
	}

};


// Class WillowGame.WillowSkelControl_RightUpperEyelidLook
// 0x0000 (0x0114 - 0x0114)
class UWillowSkelControl_RightUpperEyelidLook : public UWillowSkelControl_UpperEyelidLook
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowSkelControl_RightUpperEyelidLook");
		return ptr;
	}

};


// Class WillowGame.WillowTeleporter
// 0x0000 (0x026C - 0x026C)
class AWillowTeleporter : public ATeleporter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTeleporter");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class WillowGame.WillowTI_CalcCombat
// 0x0000 (0x004C - 0x004C)
class UWillowTI_CalcCombat : public UTI_Calc
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowTI_CalcCombat");
		return ptr;
	}

};


// Class WillowGame.WillowVehicle_Turret
// 0x0000 (0x0D14 - 0x0D14)
class AWillowVehicle_Turret : public AWillowVehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVehicle_Turret");
		return ptr;
	}

};


// Class WillowGame.WillowVersusDuelBehavior
// 0x0000 (0x004C - 0x004C)
class UWillowVersusDuelBehavior : public UBehaviorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("WillowVersusDuelBehavior");
		return ptr;
	}


	void ApplyBehaviorToContext(class UObject* ContextObject, class UObject* SelfObject, class UObject* MyInstigatorObject, class UObject* OtherEventParticipantObject, const struct FBehaviorParameters& EventData, struct FBehaviorKernelInfo* KernelInfo);
};


#ifdef _MSC_VER
	#pragma pack(pop)
#endif
